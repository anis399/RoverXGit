
RoverX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005514  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  10006514  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         00000134  20000550  10006658  00008550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000012c  20000684  00000534  00008684  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00000b48  00000000  00000000  00008688  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010b49  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002639  00000000  00000000  00019d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005557  00000000  00000000  0001c352  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000304c  00000000  00000000  000218ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000793f  00000000  00000000  000248f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e96  00000000  00000000  0002c237  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e8  00000000  00000000  000300d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000008ca  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10006514 	.word	0x10006514
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10006658 	.word	0x10006658
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	20000684 	.word	0x20000684
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	1000678c 	.word	0x1000678c
	ldr	r2, =__ram_code_start
10001084:	20000684 	.word	0x20000684
	ldr	r3, =__ram_code_end
10001088:	20000684 	.word	0x20000684
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20000684 	.word	0x20000684
	ldr	r2, =__bss_end
10001090:	200007b0 	.word	0x200007b0
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	10004ee5 	.word	0x10004ee5
    blx  r0
#endif

    ldr  r0, =main
10001098:	10004da9 	.word	0x10004da9

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f003 fcc0 	bl	10004a28 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f003 fd0c 	bl	10004ac4 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f000 fdd8 	bl	10001cbc <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f000 fdc5 	bl	10001cbc <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	20000684 	.word	0x20000684
10001168:	20000688 	.word	0x20000688
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001188:	b590      	push	{r4, r7, lr}
1000118a:	b085      	sub	sp, #20
1000118c:	af00      	add	r7, sp, #0
1000118e:	60f8      	str	r0, [r7, #12]
10001190:	607a      	str	r2, [r7, #4]
10001192:	230b      	movs	r3, #11
10001194:	18fb      	adds	r3, r7, r3
10001196:	1c0a      	adds	r2, r1, #0
10001198:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000119a:	230b      	movs	r3, #11
1000119c:	18fb      	adds	r3, r7, r3
1000119e:	781b      	ldrb	r3, [r3, #0]
100011a0:	089b      	lsrs	r3, r3, #2
100011a2:	b2db      	uxtb	r3, r3
100011a4:	1c18      	adds	r0, r3, #0
100011a6:	230b      	movs	r3, #11
100011a8:	18fb      	adds	r3, r7, r3
100011aa:	781b      	ldrb	r3, [r3, #0]
100011ac:	089b      	lsrs	r3, r3, #2
100011ae:	b2db      	uxtb	r3, r3
100011b0:	1c1a      	adds	r2, r3, #0
100011b2:	68fb      	ldr	r3, [r7, #12]
100011b4:	3204      	adds	r2, #4
100011b6:	0092      	lsls	r2, r2, #2
100011b8:	58d3      	ldr	r3, [r2, r3]
100011ba:	220b      	movs	r2, #11
100011bc:	18ba      	adds	r2, r7, r2
100011be:	7812      	ldrb	r2, [r2, #0]
100011c0:	2103      	movs	r1, #3
100011c2:	400a      	ands	r2, r1
100011c4:	00d2      	lsls	r2, r2, #3
100011c6:	1c11      	adds	r1, r2, #0
100011c8:	22fc      	movs	r2, #252	; 0xfc
100011ca:	408a      	lsls	r2, r1
100011cc:	43d2      	mvns	r2, r2
100011ce:	401a      	ands	r2, r3
100011d0:	1c11      	adds	r1, r2, #0
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	1d02      	adds	r2, r0, #4
100011d6:	0092      	lsls	r2, r2, #2
100011d8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011de:	220b      	movs	r2, #11
100011e0:	18ba      	adds	r2, r7, r2
100011e2:	7812      	ldrb	r2, [r2, #0]
100011e4:	0052      	lsls	r2, r2, #1
100011e6:	1c11      	adds	r1, r2, #0
100011e8:	2203      	movs	r2, #3
100011ea:	408a      	lsls	r2, r1
100011ec:	43d2      	mvns	r2, r2
100011ee:	401a      	ands	r2, r3
100011f0:	68fb      	ldr	r3, [r7, #12]
100011f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011f4:	230b      	movs	r3, #11
100011f6:	18fb      	adds	r3, r7, r3
100011f8:	781b      	ldrb	r3, [r3, #0]
100011fa:	08db      	lsrs	r3, r3, #3
100011fc:	b2db      	uxtb	r3, r3
100011fe:	1c18      	adds	r0, r3, #0
10001200:	230b      	movs	r3, #11
10001202:	18fb      	adds	r3, r7, r3
10001204:	781b      	ldrb	r3, [r3, #0]
10001206:	08db      	lsrs	r3, r3, #3
10001208:	b2db      	uxtb	r3, r3
1000120a:	1c1a      	adds	r2, r3, #0
1000120c:	68fb      	ldr	r3, [r7, #12]
1000120e:	3210      	adds	r2, #16
10001210:	0092      	lsls	r2, r2, #2
10001212:	58d3      	ldr	r3, [r2, r3]
10001214:	220b      	movs	r2, #11
10001216:	18ba      	adds	r2, r7, r2
10001218:	7812      	ldrb	r2, [r2, #0]
1000121a:	2107      	movs	r1, #7
1000121c:	400a      	ands	r2, r1
1000121e:	0092      	lsls	r2, r2, #2
10001220:	1c11      	adds	r1, r2, #0
10001222:	2204      	movs	r2, #4
10001224:	408a      	lsls	r2, r1
10001226:	43d2      	mvns	r2, r2
10001228:	401a      	ands	r2, r3
1000122a:	1c11      	adds	r1, r2, #0
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c02      	adds	r2, r0, #0
10001230:	3210      	adds	r2, #16
10001232:	0092      	lsls	r2, r2, #2
10001234:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	08db      	lsrs	r3, r3, #3
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	08db      	lsrs	r3, r3, #3
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3210      	adds	r2, #16
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	785b      	ldrb	r3, [r3, #1]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2107      	movs	r1, #7
10001264:	400b      	ands	r3, r1
10001266:	009b      	lsls	r3, r3, #2
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1c02      	adds	r2, r0, #0
10001274:	3210      	adds	r2, #16
10001276:	0092      	lsls	r2, r2, #2
10001278:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	4a20      	ldr	r2, [pc, #128]	; (10001300 <XMC_GPIO_Init+0x178>)
1000127e:	4293      	cmp	r3, r2
10001280:	d10b      	bne.n	1000129a <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001282:	68fb      	ldr	r3, [r7, #12]
10001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001286:	220b      	movs	r2, #11
10001288:	18ba      	adds	r2, r7, r2
1000128a:	7812      	ldrb	r2, [r2, #0]
1000128c:	2101      	movs	r1, #1
1000128e:	4091      	lsls	r1, r2
10001290:	1c0a      	adds	r2, r1, #0
10001292:	43d2      	mvns	r2, r2
10001294:	401a      	ands	r2, r3
10001296:	68fb      	ldr	r3, [r7, #12]
10001298:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	781b      	ldrb	r3, [r3, #0]
1000129e:	b2db      	uxtb	r3, r3
100012a0:	b25b      	sxtb	r3, r3
100012a2:	2b00      	cmp	r3, #0
100012a4:	da07      	bge.n	100012b6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012a6:	687b      	ldr	r3, [r7, #4]
100012a8:	685a      	ldr	r2, [r3, #4]
100012aa:	230b      	movs	r3, #11
100012ac:	18fb      	adds	r3, r7, r3
100012ae:	781b      	ldrb	r3, [r3, #0]
100012b0:	409a      	lsls	r2, r3
100012b2:	68fb      	ldr	r3, [r7, #12]
100012b4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012b6:	230b      	movs	r3, #11
100012b8:	18fb      	adds	r3, r7, r3
100012ba:	781b      	ldrb	r3, [r3, #0]
100012bc:	089b      	lsrs	r3, r3, #2
100012be:	b2db      	uxtb	r3, r3
100012c0:	1c18      	adds	r0, r3, #0
100012c2:	230b      	movs	r3, #11
100012c4:	18fb      	adds	r3, r7, r3
100012c6:	781b      	ldrb	r3, [r3, #0]
100012c8:	089b      	lsrs	r3, r3, #2
100012ca:	b2db      	uxtb	r3, r3
100012cc:	1c1a      	adds	r2, r3, #0
100012ce:	68fb      	ldr	r3, [r7, #12]
100012d0:	3204      	adds	r2, #4
100012d2:	0092      	lsls	r2, r2, #2
100012d4:	58d2      	ldr	r2, [r2, r3]
100012d6:	687b      	ldr	r3, [r7, #4]
100012d8:	781b      	ldrb	r3, [r3, #0]
100012da:	1c1c      	adds	r4, r3, #0
100012dc:	230b      	movs	r3, #11
100012de:	18fb      	adds	r3, r7, r3
100012e0:	781b      	ldrb	r3, [r3, #0]
100012e2:	2103      	movs	r1, #3
100012e4:	400b      	ands	r3, r1
100012e6:	00db      	lsls	r3, r3, #3
100012e8:	409c      	lsls	r4, r3
100012ea:	1c23      	adds	r3, r4, #0
100012ec:	431a      	orrs	r2, r3
100012ee:	1c11      	adds	r1, r2, #0
100012f0:	68fb      	ldr	r3, [r7, #12]
100012f2:	1d02      	adds	r2, r0, #4
100012f4:	0092      	lsls	r2, r2, #2
100012f6:	50d1      	str	r1, [r2, r3]
}
100012f8:	46bd      	mov	sp, r7
100012fa:	b005      	add	sp, #20
100012fc:	bd90      	pop	{r4, r7, pc}
100012fe:	46c0      	nop			; (mov r8, r8)
10001300:	40040200 	.word	0x40040200

10001304 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001304:	b580      	push	{r7, lr}
10001306:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001308:	4b02      	ldr	r3, [pc, #8]	; (10001314 <XMC_SCU_LockProtectedBits+0x10>)
1000130a:	22c3      	movs	r2, #195	; 0xc3
1000130c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)
10001314:	40010000 	.word	0x40010000

10001318 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001318:	b580      	push	{r7, lr}
1000131a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000131c:	4b05      	ldr	r3, [pc, #20]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000131e:	22c0      	movs	r2, #192	; 0xc0
10001320:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	46c0      	nop			; (mov r8, r8)
10001324:	4b03      	ldr	r3, [pc, #12]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001328:	2204      	movs	r2, #4
1000132a:	4013      	ands	r3, r2
1000132c:	d1fa      	bne.n	10001324 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
1000132e:	46bd      	mov	sp, r7
10001330:	bd80      	pop	{r7, pc}
10001332:	46c0      	nop			; (mov r8, r8)
10001334:	40010000 	.word	0x40010000

10001338 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001338:	b580      	push	{r7, lr}
1000133a:	b086      	sub	sp, #24
1000133c:	af00      	add	r7, sp, #0
1000133e:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001340:	f7ff ffea 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001344:	687b      	ldr	r3, [r7, #4]
10001346:	799b      	ldrb	r3, [r3, #6]
10001348:	2b30      	cmp	r3, #48	; 0x30
1000134a:	d053      	beq.n	100013f4 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
1000134c:	f7ff ff14 	bl	10001178 <OSCHP_GetFrequency>
10001350:	1e02      	subs	r2, r0, #0
10001352:	4b49      	ldr	r3, [pc, #292]	; (10001478 <XMC_SCU_CLOCK_Init+0x140>)
10001354:	429a      	cmp	r2, r3
10001356:	d909      	bls.n	1000136c <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001358:	4a48      	ldr	r2, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135a:	4948      	ldr	r1, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135c:	2390      	movs	r3, #144	; 0x90
1000135e:	5acb      	ldrh	r3, [r1, r3]
10001360:	b29b      	uxth	r3, r3
10001362:	2140      	movs	r1, #64	; 0x40
10001364:	430b      	orrs	r3, r1
10001366:	b299      	uxth	r1, r3
10001368:	2390      	movs	r3, #144	; 0x90
1000136a:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000136c:	4a43      	ldr	r2, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000136e:	4943      	ldr	r1, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
10001370:	2390      	movs	r3, #144	; 0x90
10001372:	5acb      	ldrh	r3, [r1, r3]
10001374:	b29b      	uxth	r3, r3
10001376:	b29b      	uxth	r3, r3
10001378:	1c19      	adds	r1, r3, #0
1000137a:	2332      	movs	r3, #50	; 0x32
1000137c:	4399      	bics	r1, r3
1000137e:	1c0b      	adds	r3, r1, #0
10001380:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001382:	687b      	ldr	r3, [r7, #4]
10001384:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001386:	b29b      	uxth	r3, r3
10001388:	430b      	orrs	r3, r1
1000138a:	b29b      	uxth	r3, r3
1000138c:	b299      	uxth	r1, r3
1000138e:	2390      	movs	r3, #144	; 0x90
10001390:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10001392:	4b3b      	ldr	r3, [pc, #236]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
10001394:	2202      	movs	r2, #2
10001396:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001398:	4b3a      	ldr	r3, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139a:	4a3a      	ldr	r2, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139c:	6952      	ldr	r2, [r2, #20]
1000139e:	493a      	ldr	r1, [pc, #232]	; (10001488 <XMC_SCU_CLOCK_Init+0x150>)
100013a0:	400a      	ands	r2, r1
100013a2:	615a      	str	r2, [r3, #20]
100013a4:	4b39      	ldr	r3, [pc, #228]	; (1000148c <XMC_SCU_CLOCK_Init+0x154>)
100013a6:	617b      	str	r3, [r7, #20]
100013a8:	e000      	b.n	100013ac <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013aa:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013ac:	697b      	ldr	r3, [r7, #20]
100013ae:	3b01      	subs	r3, #1
100013b0:	617b      	str	r3, [r7, #20]
100013b2:	697b      	ldr	r3, [r7, #20]
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1f8      	bne.n	100013aa <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
100013b8:	4b32      	ldr	r3, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ba:	4a32      	ldr	r2, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013bc:	6952      	ldr	r2, [r2, #20]
100013be:	21c0      	movs	r1, #192	; 0xc0
100013c0:	0489      	lsls	r1, r1, #18
100013c2:	430a      	orrs	r2, r1
100013c4:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
100013c6:	46c0      	nop			; (mov r8, r8)
100013c8:	4b2e      	ldr	r3, [pc, #184]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ca:	695a      	ldr	r2, [r3, #20]
100013cc:	2380      	movs	r3, #128	; 0x80
100013ce:	045b      	lsls	r3, r3, #17
100013d0:	4013      	ands	r3, r2
100013d2:	d1f9      	bne.n	100013c8 <XMC_SCU_CLOCK_Init+0x90>
100013d4:	4b2e      	ldr	r3, [pc, #184]	; (10001490 <XMC_SCU_CLOCK_Init+0x158>)
100013d6:	613b      	str	r3, [r7, #16]
100013d8:	e000      	b.n	100013dc <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013da:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013dc:	693b      	ldr	r3, [r7, #16]
100013de:	3b01      	subs	r3, #1
100013e0:	613b      	str	r3, [r7, #16]
100013e2:	693b      	ldr	r3, [r7, #16]
100013e4:	2b00      	cmp	r3, #0
100013e6:	d1f8      	bne.n	100013da <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100013e8:	4b25      	ldr	r3, [pc, #148]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
100013ea:	6a1b      	ldr	r3, [r3, #32]
100013ec:	2202      	movs	r2, #2
100013ee:	4013      	ands	r3, r2
100013f0:	d1cf      	bne.n	10001392 <XMC_SCU_CLOCK_Init+0x5a>
100013f2:	e009      	b.n	10001408 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100013f4:	4a21      	ldr	r2, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f6:	4921      	ldr	r1, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f8:	2390      	movs	r3, #144	; 0x90
100013fa:	5acb      	ldrh	r3, [r1, r3]
100013fc:	b29b      	uxth	r3, r3
100013fe:	2130      	movs	r1, #48	; 0x30
10001400:	430b      	orrs	r3, r1
10001402:	b299      	uxth	r1, r3
10001404:	2390      	movs	r3, #144	; 0x90
10001406:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
10001408:	4a1c      	ldr	r2, [pc, #112]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000140a:	687b      	ldr	r3, [r7, #4]
1000140c:	79db      	ldrb	r3, [r3, #7]
1000140e:	b299      	uxth	r1, r3
10001410:	238c      	movs	r3, #140	; 0x8c
10001412:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10001414:	687b      	ldr	r3, [r7, #4]
10001416:	79db      	ldrb	r3, [r3, #7]
10001418:	2b00      	cmp	r3, #0
1000141a:	d109      	bne.n	10001430 <XMC_SCU_CLOCK_Init+0xf8>
1000141c:	4b1d      	ldr	r3, [pc, #116]	; (10001494 <XMC_SCU_CLOCK_Init+0x15c>)
1000141e:	60fb      	str	r3, [r7, #12]
10001420:	e000      	b.n	10001424 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001422:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001424:	68fb      	ldr	r3, [r7, #12]
10001426:	3b01      	subs	r3, #1
10001428:	60fb      	str	r3, [r7, #12]
1000142a:	68fb      	ldr	r3, [r7, #12]
1000142c:	2b00      	cmp	r3, #0
1000142e:	d1f8      	bne.n	10001422 <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001430:	4b14      	ldr	r3, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001432:	4a14      	ldr	r2, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001434:	69d2      	ldr	r2, [r2, #28]
10001436:	4918      	ldr	r1, [pc, #96]	; (10001498 <XMC_SCU_CLOCK_Init+0x160>)
10001438:	400a      	ands	r2, r1
                    config->dclk_src;
1000143a:	6879      	ldr	r1, [r7, #4]
1000143c:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000143e:	430a      	orrs	r2, r1
10001440:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001442:	4a10      	ldr	r2, [pc, #64]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001444:	4b0f      	ldr	r3, [pc, #60]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001446:	681b      	ldr	r3, [r3, #0]
10001448:	4914      	ldr	r1, [pc, #80]	; (1000149c <XMC_SCU_CLOCK_Init+0x164>)
1000144a:	4019      	ands	r1, r3
                   config->rtc_src |
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001450:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001452:	687b      	ldr	r3, [r7, #4]
10001454:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001456:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001458:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000145a:	f7ff ff53 	bl	10001304 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	789b      	ldrb	r3, [r3, #2]
10001462:	1c1a      	adds	r2, r3, #0
10001464:	687b      	ldr	r3, [r7, #4]
10001466:	881b      	ldrh	r3, [r3, #0]
10001468:	1c10      	adds	r0, r2, #0
1000146a:	1c19      	adds	r1, r3, #0
1000146c:	f000 f844 	bl	100014f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001470:	46bd      	mov	sp, r7
10001472:	b006      	add	sp, #24
10001474:	bd80      	pop	{r7, pc}
10001476:	46c0      	nop			; (mov r8, r8)
10001478:	01312d00 	.word	0x01312d00
1000147c:	40011000 	.word	0x40011000
10001480:	40010038 	.word	0x40010038
10001484:	40010300 	.word	0x40010300
10001488:	fdffffff 	.word	0xfdffffff
1000148c:	0000021a 	.word	0x0000021a
10001490:	00000a7d 	.word	0x00000a7d
10001494:	00632ea0 	.word	0x00632ea0
10001498:	fffffdff 	.word	0xfffffdff
1000149c:	fff0ffff 	.word	0xfff0ffff

100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014a0:	b580      	push	{r7, lr}
100014a2:	b082      	sub	sp, #8
100014a4:	af00      	add	r7, sp, #0
100014a6:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
100014a8:	f7ff ff36 	bl	10001318 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100014ac:	4b08      	ldr	r3, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014ae:	4a08      	ldr	r2, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014b0:	6911      	ldr	r1, [r2, #16]
100014b2:	687a      	ldr	r2, [r7, #4]
100014b4:	430a      	orrs	r2, r1
100014b6:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014b8:	46c0      	nop			; (mov r8, r8)
100014ba:	4b05      	ldr	r3, [pc, #20]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014bc:	681a      	ldr	r2, [r3, #0]
100014be:	2380      	movs	r3, #128	; 0x80
100014c0:	05db      	lsls	r3, r3, #23
100014c2:	4013      	ands	r3, r2
100014c4:	d1f9      	bne.n	100014ba <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100014c6:	f7ff ff1d 	bl	10001304 <XMC_SCU_LockProtectedBits>
}
100014ca:	46bd      	mov	sp, r7
100014cc:	b002      	add	sp, #8
100014ce:	bd80      	pop	{r7, pc}
100014d0:	40010300 	.word	0x40010300

100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014d4:	b580      	push	{r7, lr}
100014d6:	b082      	sub	sp, #8
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
100014dc:	4b05      	ldr	r3, [pc, #20]	; (100014f4 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x20>)
100014de:	689b      	ldr	r3, [r3, #8]
100014e0:	687a      	ldr	r2, [r7, #4]
100014e2:	4013      	ands	r3, r2
100014e4:	1e5a      	subs	r2, r3, #1
100014e6:	4193      	sbcs	r3, r2
100014e8:	b2db      	uxtb	r3, r3
}
100014ea:	1c18      	adds	r0, r3, #0
100014ec:	46bd      	mov	sp, r7
100014ee:	b002      	add	sp, #8
100014f0:	bd80      	pop	{r7, pc}
100014f2:	46c0      	nop			; (mov r8, r8)
100014f4:	40010300 	.word	0x40010300

100014f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
100014f8:	b580      	push	{r7, lr}
100014fa:	b084      	sub	sp, #16
100014fc:	af00      	add	r7, sp, #0
100014fe:	6078      	str	r0, [r7, #4]
10001500:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10001502:	f7ff ff09 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001506:	4b27      	ldr	r3, [pc, #156]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001508:	681a      	ldr	r2, [r3, #0]
1000150a:	23ff      	movs	r3, #255	; 0xff
1000150c:	021b      	lsls	r3, r3, #8
1000150e:	4013      	ands	r3, r2
10001510:	0a1b      	lsrs	r3, r3, #8
10001512:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001514:	4b23      	ldr	r3, [pc, #140]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001516:	4a23      	ldr	r2, [pc, #140]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001518:	69d2      	ldr	r2, [r2, #28]
1000151a:	2103      	movs	r1, #3
1000151c:	438a      	bics	r2, r1
1000151e:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
10001520:	683a      	ldr	r2, [r7, #0]
10001522:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001524:	430a      	orrs	r2, r1
10001526:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001528:	4b1e      	ldr	r3, [pc, #120]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000152a:	4a1e      	ldr	r2, [pc, #120]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000152c:	6812      	ldr	r2, [r2, #0]
1000152e:	491e      	ldr	r1, [pc, #120]	; (100015a8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
10001530:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001532:	683a      	ldr	r2, [r7, #0]
10001534:	20ff      	movs	r0, #255	; 0xff
10001536:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001538:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
1000153a:	491c      	ldr	r1, [pc, #112]	; (100015ac <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000153c:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000153e:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001540:	46c0      	nop			; (mov r8, r8)
10001542:	4b18      	ldr	r3, [pc, #96]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001544:	681a      	ldr	r2, [r3, #0]
10001546:	2380      	movs	r3, #128	; 0x80
10001548:	05db      	lsls	r3, r3, #23
1000154a:	4013      	ands	r3, r2
1000154c:	d1f9      	bne.n	10001542 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
1000154e:	68fa      	ldr	r2, [r7, #12]
10001550:	687b      	ldr	r3, [r7, #4]
10001552:	429a      	cmp	r2, r3
10001554:	d806      	bhi.n	10001564 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001556:	68fa      	ldr	r2, [r7, #12]
10001558:	687b      	ldr	r3, [r7, #4]
1000155a:	1c10      	adds	r0, r2, #0
1000155c:	1c19      	adds	r1, r3, #0
1000155e:	f000 f853 	bl	10001608 <XMC_SCU_CLOCK_lFrequencyDownScaling>
10001562:	e005      	b.n	10001570 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001564:	68fa      	ldr	r2, [r7, #12]
10001566:	687b      	ldr	r3, [r7, #4]
10001568:	1c10      	adds	r0, r2, #0
1000156a:	1c19      	adds	r1, r3, #0
1000156c:	f000 f822 	bl	100015b4 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001570:	4b0c      	ldr	r3, [pc, #48]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001572:	4a0c      	ldr	r2, [pc, #48]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001574:	6812      	ldr	r2, [r2, #0]
10001576:	490e      	ldr	r1, [pc, #56]	; (100015b0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001578:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000157a:	687a      	ldr	r2, [r7, #4]
1000157c:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000157e:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001580:	490a      	ldr	r1, [pc, #40]	; (100015ac <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001582:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001584:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001586:	46c0      	nop			; (mov r8, r8)
10001588:	4b06      	ldr	r3, [pc, #24]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000158a:	681a      	ldr	r2, [r3, #0]
1000158c:	2380      	movs	r3, #128	; 0x80
1000158e:	05db      	lsls	r3, r3, #23
10001590:	4013      	ands	r3, r2
10001592:	d1f9      	bne.n	10001588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
10001594:	f7ff feb6 	bl	10001304 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001598:	f7ff fd8a 	bl	100010b0 <SystemCoreClockUpdate>

}
1000159c:	46bd      	mov	sp, r7
1000159e:	b004      	add	sp, #16
100015a0:	bd80      	pop	{r7, pc}
100015a2:	46c0      	nop			; (mov r8, r8)
100015a4:	40010300 	.word	0x40010300
100015a8:	c00fff00 	.word	0xc00fff00
100015ac:	3ff00000 	.word	0x3ff00000
100015b0:	c00f00ff 	.word	0xc00f00ff

100015b4 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015b4:	b580      	push	{r7, lr}
100015b6:	b082      	sub	sp, #8
100015b8:	af00      	add	r7, sp, #0
100015ba:	6078      	str	r0, [r7, #4]
100015bc:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100015be:	e014      	b.n	100015ea <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100015c0:	687b      	ldr	r3, [r7, #4]
100015c2:	089b      	lsrs	r3, r3, #2
100015c4:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015c6:	4b0d      	ldr	r3, [pc, #52]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015c8:	4a0c      	ldr	r2, [pc, #48]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015ca:	6812      	ldr	r2, [r2, #0]
100015cc:	490c      	ldr	r1, [pc, #48]	; (10001600 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100015ce:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015d0:	687a      	ldr	r2, [r7, #4]
100015d2:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015d4:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015d6:	490b      	ldr	r1, [pc, #44]	; (10001604 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
100015d8:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015da:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015dc:	46c0      	nop			; (mov r8, r8)
100015de:	4b07      	ldr	r3, [pc, #28]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015e0:	681a      	ldr	r2, [r3, #0]
100015e2:	2380      	movs	r3, #128	; 0x80
100015e4:	05db      	lsls	r3, r3, #23
100015e6:	4013      	ands	r3, r2
100015e8:	d1f9      	bne.n	100015de <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100015ea:	683b      	ldr	r3, [r7, #0]
100015ec:	009a      	lsls	r2, r3, #2
100015ee:	687b      	ldr	r3, [r7, #4]
100015f0:	429a      	cmp	r2, r3
100015f2:	d3e5      	bcc.n	100015c0 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100015f4:	46bd      	mov	sp, r7
100015f6:	b002      	add	sp, #8
100015f8:	bd80      	pop	{r7, pc}
100015fa:	46c0      	nop			; (mov r8, r8)
100015fc:	40010300 	.word	0x40010300
10001600:	c00f00ff 	.word	0xc00f00ff
10001604:	3ff00000 	.word	0x3ff00000

10001608 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001608:	b580      	push	{r7, lr}
1000160a:	b082      	sub	sp, #8
1000160c:	af00      	add	r7, sp, #0
1000160e:	6078      	str	r0, [r7, #4]
10001610:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
10001612:	e019      	b.n	10001648 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
10001614:	687b      	ldr	r3, [r7, #4]
10001616:	2b00      	cmp	r3, #0
10001618:	d101      	bne.n	1000161e <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
1000161a:	2301      	movs	r3, #1
1000161c:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000161e:	687b      	ldr	r3, [r7, #4]
10001620:	009b      	lsls	r3, r3, #2
10001622:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001624:	4b0c      	ldr	r3, [pc, #48]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001626:	4a0c      	ldr	r2, [pc, #48]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001628:	6812      	ldr	r2, [r2, #0]
1000162a:	490c      	ldr	r1, [pc, #48]	; (1000165c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
1000162c:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000162e:	687a      	ldr	r2, [r7, #4]
10001630:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001632:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001634:	490a      	ldr	r1, [pc, #40]	; (10001660 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001636:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001638:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000163a:	46c0      	nop			; (mov r8, r8)
1000163c:	4b06      	ldr	r3, [pc, #24]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000163e:	681a      	ldr	r2, [r3, #0]
10001640:	2380      	movs	r3, #128	; 0x80
10001642:	05db      	lsls	r3, r3, #23
10001644:	4013      	ands	r3, r2
10001646:	d1f9      	bne.n	1000163c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001648:	687b      	ldr	r3, [r7, #4]
1000164a:	009a      	lsls	r2, r3, #2
1000164c:	683b      	ldr	r3, [r7, #0]
1000164e:	429a      	cmp	r2, r3
10001650:	d3e0      	bcc.n	10001614 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
10001652:	46bd      	mov	sp, r7
10001654:	b002      	add	sp, #8
10001656:	bd80      	pop	{r7, pc}
10001658:	40010300 	.word	0x40010300
1000165c:	c00f00ff 	.word	0xc00f00ff
10001660:	3ff00000 	.word	0x3ff00000

10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10001664:	b580      	push	{r7, lr}
10001666:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001668:	4b02      	ldr	r3, [pc, #8]	; (10001674 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
1000166a:	681b      	ldr	r3, [r3, #0]
}
1000166c:	1c18      	adds	r0, r3, #0
1000166e:	46bd      	mov	sp, r7
10001670:	bd80      	pop	{r7, pc}
10001672:	46c0      	nop			; (mov r8, r8)
10001674:	20003ffc 	.word	0x20003ffc

10001678 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10001678:	b580      	push	{r7, lr}
1000167a:	b082      	sub	sp, #8
1000167c:	af00      	add	r7, sp, #0
1000167e:	1c02      	adds	r2, r0, #0
10001680:	1dfb      	adds	r3, r7, #7
10001682:	701a      	strb	r2, [r3, #0]
10001684:	1d3b      	adds	r3, r7, #4
10001686:	1c0a      	adds	r2, r1, #0
10001688:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
1000168a:	1d3b      	adds	r3, r7, #4
1000168c:	1d3a      	adds	r2, r7, #4
1000168e:	8812      	ldrh	r2, [r2, #0]
10001690:	2103      	movs	r1, #3
10001692:	400a      	ands	r2, r1
10001694:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001696:	1dfb      	adds	r3, r7, #7
10001698:	781b      	ldrb	r3, [r3, #0]
1000169a:	2b0f      	cmp	r3, #15
1000169c:	d813      	bhi.n	100016c6 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000169e:	4b18      	ldr	r3, [pc, #96]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016a0:	4a17      	ldr	r2, [pc, #92]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
100016a4:	1df9      	adds	r1, r7, #7
100016a6:	7809      	ldrb	r1, [r1, #0]
100016a8:	0049      	lsls	r1, r1, #1
100016aa:	1c08      	adds	r0, r1, #0
100016ac:	2103      	movs	r1, #3
100016ae:	4081      	lsls	r1, r0
100016b0:	43c9      	mvns	r1, r1
100016b2:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100016b4:	1d39      	adds	r1, r7, #4
100016b6:	8809      	ldrh	r1, [r1, #0]
100016b8:	1df8      	adds	r0, r7, #7
100016ba:	7800      	ldrb	r0, [r0, #0]
100016bc:	0040      	lsls	r0, r0, #1
100016be:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016c0:	430a      	orrs	r2, r1
100016c2:	66da      	str	r2, [r3, #108]	; 0x6c
100016c4:	e018      	b.n	100016f8 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100016c6:	1dfb      	adds	r3, r7, #7
100016c8:	1dfa      	adds	r2, r7, #7
100016ca:	7812      	ldrb	r2, [r2, #0]
100016cc:	210f      	movs	r1, #15
100016ce:	400a      	ands	r2, r1
100016d0:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016d2:	4b0b      	ldr	r3, [pc, #44]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016d4:	4a0a      	ldr	r2, [pc, #40]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
100016d8:	1df9      	adds	r1, r7, #7
100016da:	7809      	ldrb	r1, [r1, #0]
100016dc:	0049      	lsls	r1, r1, #1
100016de:	1c08      	adds	r0, r1, #0
100016e0:	2103      	movs	r1, #3
100016e2:	4081      	lsls	r1, r0
100016e4:	43c9      	mvns	r1, r1
100016e6:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100016e8:	1d39      	adds	r1, r7, #4
100016ea:	8809      	ldrh	r1, [r1, #0]
100016ec:	1df8      	adds	r0, r7, #7
100016ee:	7800      	ldrb	r0, [r0, #0]
100016f0:	0040      	lsls	r0, r0, #1
100016f2:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016f4:	430a      	orrs	r2, r1
100016f6:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100016f8:	46bd      	mov	sp, r7
100016fa:	b002      	add	sp, #8
100016fc:	bd80      	pop	{r7, pc}
100016fe:	46c0      	nop			; (mov r8, r8)
10001700:	40010000 	.word	0x40010000

10001704 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
10001704:	b590      	push	{r4, r7, lr}
10001706:	b083      	sub	sp, #12
10001708:	af00      	add	r7, sp, #0
1000170a:	6078      	str	r0, [r7, #4]
1000170c:	1c08      	adds	r0, r1, #0
1000170e:	1c11      	adds	r1, r2, #0
10001710:	1cfb      	adds	r3, r7, #3
10001712:	1c02      	adds	r2, r0, #0
10001714:	701a      	strb	r2, [r3, #0]
10001716:	1cbb      	adds	r3, r7, #2
10001718:	1c0a      	adds	r2, r1, #0
1000171a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
1000171c:	1cfb      	adds	r3, r7, #3
1000171e:	781b      	ldrb	r3, [r3, #0]
10001720:	089b      	lsrs	r3, r3, #2
10001722:	b2db      	uxtb	r3, r3
10001724:	1c18      	adds	r0, r3, #0
10001726:	1cfb      	adds	r3, r7, #3
10001728:	781b      	ldrb	r3, [r3, #0]
1000172a:	089b      	lsrs	r3, r3, #2
1000172c:	b2db      	uxtb	r3, r3
1000172e:	1c1a      	adds	r2, r3, #0
10001730:	687b      	ldr	r3, [r7, #4]
10001732:	3204      	adds	r2, #4
10001734:	0092      	lsls	r2, r2, #2
10001736:	58d3      	ldr	r3, [r2, r3]
10001738:	1cfa      	adds	r2, r7, #3
1000173a:	7812      	ldrb	r2, [r2, #0]
1000173c:	2103      	movs	r1, #3
1000173e:	400a      	ands	r2, r1
10001740:	00d2      	lsls	r2, r2, #3
10001742:	1c11      	adds	r1, r2, #0
10001744:	22fc      	movs	r2, #252	; 0xfc
10001746:	408a      	lsls	r2, r1
10001748:	43d2      	mvns	r2, r2
1000174a:	401a      	ands	r2, r3
1000174c:	1c11      	adds	r1, r2, #0
1000174e:	687b      	ldr	r3, [r7, #4]
10001750:	1d02      	adds	r2, r0, #4
10001752:	0092      	lsls	r2, r2, #2
10001754:	50d1      	str	r1, [r2, r3]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
10001756:	1cfb      	adds	r3, r7, #3
10001758:	781b      	ldrb	r3, [r3, #0]
1000175a:	089b      	lsrs	r3, r3, #2
1000175c:	b2db      	uxtb	r3, r3
1000175e:	1c1c      	adds	r4, r3, #0
10001760:	1cfb      	adds	r3, r7, #3
10001762:	781b      	ldrb	r3, [r3, #0]
10001764:	089b      	lsrs	r3, r3, #2
10001766:	b2db      	uxtb	r3, r3
10001768:	1c1a      	adds	r2, r3, #0
1000176a:	687b      	ldr	r3, [r7, #4]
1000176c:	3204      	adds	r2, #4
1000176e:	0092      	lsls	r2, r2, #2
10001770:	58d2      	ldr	r2, [r2, r3]
10001772:	1cbb      	adds	r3, r7, #2
10001774:	781b      	ldrb	r3, [r3, #0]
10001776:	1cf9      	adds	r1, r7, #3
10001778:	7809      	ldrb	r1, [r1, #0]
1000177a:	2003      	movs	r0, #3
1000177c:	4001      	ands	r1, r0
1000177e:	00c9      	lsls	r1, r1, #3
10001780:	408b      	lsls	r3, r1
10001782:	431a      	orrs	r2, r3
10001784:	1c11      	adds	r1, r2, #0
10001786:	687b      	ldr	r3, [r7, #4]
10001788:	1d22      	adds	r2, r4, #4
1000178a:	0092      	lsls	r2, r2, #2
1000178c:	50d1      	str	r1, [r2, r3]
}
1000178e:	46bd      	mov	sp, r7
10001790:	b003      	add	sp, #12
10001792:	bd90      	pop	{r4, r7, pc}

10001794 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001794:	b580      	push	{r7, lr}
10001796:	b082      	sub	sp, #8
10001798:	af00      	add	r7, sp, #0
1000179a:	6078      	str	r0, [r7, #4]
1000179c:	1c08      	adds	r0, r1, #0
1000179e:	1c11      	adds	r1, r2, #0
100017a0:	1cfb      	adds	r3, r7, #3
100017a2:	1c02      	adds	r2, r0, #0
100017a4:	701a      	strb	r2, [r3, #0]
100017a6:	1cbb      	adds	r3, r7, #2
100017a8:	1c0a      	adds	r2, r1, #0
100017aa:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100017ac:	687b      	ldr	r3, [r7, #4]
100017ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100017b0:	1cfa      	adds	r2, r7, #3
100017b2:	7812      	ldrb	r2, [r2, #0]
100017b4:	0052      	lsls	r2, r2, #1
100017b6:	1c11      	adds	r1, r2, #0
100017b8:	2203      	movs	r2, #3
100017ba:	408a      	lsls	r2, r1
100017bc:	43d2      	mvns	r2, r2
100017be:	401a      	ands	r2, r3
100017c0:	687b      	ldr	r3, [r7, #4]
100017c2:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100017c4:	687b      	ldr	r3, [r7, #4]
100017c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100017c8:	1cbb      	adds	r3, r7, #2
100017ca:	781b      	ldrb	r3, [r3, #0]
100017cc:	1cf9      	adds	r1, r7, #3
100017ce:	7809      	ldrb	r1, [r1, #0]
100017d0:	0049      	lsls	r1, r1, #1
100017d2:	408b      	lsls	r3, r1
100017d4:	431a      	orrs	r2, r3
100017d6:	687b      	ldr	r3, [r7, #4]
100017d8:	675a      	str	r2, [r3, #116]	; 0x74
}
100017da:	46bd      	mov	sp, r7
100017dc:	b002      	add	sp, #8
100017de:	bd80      	pop	{r7, pc}

100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100017e0:	b580      	push	{r7, lr}
100017e2:	b082      	sub	sp, #8
100017e4:	af00      	add	r7, sp, #0
100017e6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100017e8:	687b      	ldr	r3, [r7, #4]
100017ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100017ec:	b2db      	uxtb	r3, r3
100017ee:	227f      	movs	r2, #127	; 0x7f
100017f0:	4393      	bics	r3, r2
100017f2:	b2db      	uxtb	r3, r3
}
100017f4:	1c18      	adds	r0, r3, #0
100017f6:	46bd      	mov	sp, r7
100017f8:	b002      	add	sp, #8
100017fa:	bd80      	pop	{r7, pc}

100017fc <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
100017fc:	b580      	push	{r7, lr}
100017fe:	b082      	sub	sp, #8
10001800:	af00      	add	r7, sp, #0
10001802:	6078      	str	r0, [r7, #4]
10001804:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10001806:	687b      	ldr	r3, [r7, #4]
10001808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000180a:	683b      	ldr	r3, [r7, #0]
1000180c:	431a      	orrs	r2, r3
1000180e:	687b      	ldr	r3, [r7, #4]
10001810:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001812:	46bd      	mov	sp, r7
10001814:	b002      	add	sp, #8
10001816:	bd80      	pop	{r7, pc}

10001818 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
10001818:	b580      	push	{r7, lr}
1000181a:	b084      	sub	sp, #16
1000181c:	af00      	add	r7, sp, #0
1000181e:	60f8      	str	r0, [r7, #12]
10001820:	60b9      	str	r1, [r7, #8]
10001822:	1dfb      	adds	r3, r7, #7
10001824:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_Enable(channel);
10001826:	68fb      	ldr	r3, [r7, #12]
10001828:	1c18      	adds	r0, r3, #0
1000182a:	f000 fb8f 	bl	10001f4c <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
1000182e:	68fb      	ldr	r3, [r7, #12]
10001830:	4a12      	ldr	r2, [pc, #72]	; (1000187c <XMC_I2C_CH_InitEx+0x64>)
10001832:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
10001834:	68bb      	ldr	r3, [r7, #8]
10001836:	88db      	ldrh	r3, [r3, #6]
10001838:	68fa      	ldr	r2, [r7, #12]
1000183a:	1c10      	adds	r0, r2, #0
1000183c:	1c19      	adds	r1, r3, #0
1000183e:	f000 f81f 	bl	10001880 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
10001842:	1dfb      	adds	r3, r7, #7
10001844:	781b      	ldrb	r3, [r3, #0]
10001846:	2b00      	cmp	r3, #0
10001848:	d009      	beq.n	1000185e <XMC_I2C_CH_InitEx+0x46>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
1000184a:	68bb      	ldr	r3, [r7, #8]
1000184c:	681a      	ldr	r2, [r3, #0]
1000184e:	68bb      	ldr	r3, [r7, #8]
10001850:	791b      	ldrb	r3, [r3, #4]
10001852:	68f9      	ldr	r1, [r7, #12]
10001854:	1c08      	adds	r0, r1, #0
10001856:	1c11      	adds	r1, r2, #0
10001858:	1c1a      	adds	r2, r3, #0
1000185a:	f000 f843 	bl	100018e4 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
1000185e:	68fb      	ldr	r3, [r7, #12]
10001860:	22a0      	movs	r2, #160	; 0xa0
10001862:	00d2      	lsls	r2, r2, #3
10001864:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
10001866:	68fb      	ldr	r3, [r7, #12]
10001868:	2201      	movs	r2, #1
1000186a:	4252      	negs	r2, r2
1000186c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
1000186e:	68fb      	ldr	r3, [r7, #12]
10001870:	2200      	movs	r2, #0
10001872:	641a      	str	r2, [r3, #64]	; 0x40
}
10001874:	46bd      	mov	sp, r7
10001876:	b004      	add	sp, #16
10001878:	bd80      	pop	{r7, pc}
1000187a:	46c0      	nop			; (mov r8, r8)
1000187c:	073f0303 	.word	0x073f0303

10001880 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
10001880:	b580      	push	{r7, lr}
10001882:	b082      	sub	sp, #8
10001884:	af00      	add	r7, sp, #0
10001886:	6078      	str	r0, [r7, #4]
10001888:	1c0a      	adds	r2, r1, #0
1000188a:	1cbb      	adds	r3, r7, #2
1000188c:	801a      	strh	r2, [r3, #0]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
1000188e:	1cbb      	adds	r3, r7, #2
10001890:	881a      	ldrh	r2, [r3, #0]
10001892:	23f8      	movs	r3, #248	; 0xf8
10001894:	01db      	lsls	r3, r3, #7
10001896:	401a      	ands	r2, r3
10001898:	23f0      	movs	r3, #240	; 0xf0
1000189a:	01db      	lsls	r3, r3, #7
1000189c:	429a      	cmp	r2, r3
1000189e:	d113      	bne.n	100018c8 <XMC_I2C_CH_SetSlaveAddress+0x48>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
100018a0:	687b      	ldr	r3, [r7, #4]
100018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018a4:	0c1b      	lsrs	r3, r3, #16
100018a6:	041a      	lsls	r2, r3, #16
100018a8:	1cbb      	adds	r3, r7, #2
100018aa:	881b      	ldrh	r3, [r3, #0]
100018ac:	21ff      	movs	r1, #255	; 0xff
100018ae:	400b      	ands	r3, r1
100018b0:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
100018b2:	1cbb      	adds	r3, r7, #2
100018b4:	881b      	ldrh	r3, [r3, #0]
100018b6:	005b      	lsls	r3, r3, #1
100018b8:	1c19      	adds	r1, r3, #0
100018ba:	23fe      	movs	r3, #254	; 0xfe
100018bc:	021b      	lsls	r3, r3, #8
100018be:	400b      	ands	r3, r1
100018c0:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
100018c2:	687b      	ldr	r3, [r7, #4]
100018c4:	63da      	str	r2, [r3, #60]	; 0x3c
100018c6:	e009      	b.n	100018dc <XMC_I2C_CH_SetSlaveAddress+0x5c>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
100018c8:	687b      	ldr	r3, [r7, #4]
100018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018cc:	0c1b      	lsrs	r3, r3, #16
100018ce:	041a      	lsls	r2, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
100018d0:	1cbb      	adds	r3, r7, #2
100018d2:	881b      	ldrh	r3, [r3, #0]
100018d4:	021b      	lsls	r3, r3, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
100018d6:	431a      	orrs	r2, r3
100018d8:	687b      	ldr	r3, [r7, #4]
100018da:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
100018dc:	46bd      	mov	sp, r7
100018de:	b002      	add	sp, #8
100018e0:	bd80      	pop	{r7, pc}
100018e2:	46c0      	nop			; (mov r8, r8)

100018e4 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
100018e4:	b590      	push	{r4, r7, lr}
100018e6:	b087      	sub	sp, #28
100018e8:	af00      	add	r7, sp, #0
100018ea:	60f8      	str	r0, [r7, #12]
100018ec:	60b9      	str	r1, [r7, #8]
100018ee:	1dfb      	adds	r3, r7, #7
100018f0:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
100018f2:	68bb      	ldr	r3, [r7, #8]
100018f4:	4a2b      	ldr	r2, [pc, #172]	; (100019a4 <XMC_I2C_CH_SetBaudrateEx+0xc0>)
100018f6:	4293      	cmp	r3, r2
100018f8:	d821      	bhi.n	1000193e <XMC_I2C_CH_SetBaudrateEx+0x5a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
100018fa:	68fb      	ldr	r3, [r7, #12]
100018fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018fe:	4a2a      	ldr	r2, [pc, #168]	; (100019a8 <XMC_I2C_CH_SetBaudrateEx+0xc4>)
10001900:	401a      	ands	r2, r3
10001902:	68fb      	ldr	r3, [r7, #12]
10001904:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
10001906:	1dfb      	adds	r3, r7, #7
10001908:	781b      	ldrb	r3, [r3, #0]
1000190a:	2b00      	cmp	r3, #0
1000190c:	d00b      	beq.n	10001926 <XMC_I2C_CH_SetBaudrateEx+0x42>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
1000190e:	68bb      	ldr	r3, [r7, #8]
10001910:	2217      	movs	r2, #23
10001912:	18bc      	adds	r4, r7, r2
10001914:	68fa      	ldr	r2, [r7, #12]
10001916:	1c10      	adds	r0, r2, #0
10001918:	1c19      	adds	r1, r3, #0
1000191a:	220a      	movs	r2, #10
1000191c:	f000 fbcc 	bl	100020b8 <XMC_USIC_CH_SetBaudrateEx>
10001920:	1c03      	adds	r3, r0, #0
10001922:	7023      	strb	r3, [r4, #0]
10001924:	e036      	b.n	10001994 <XMC_I2C_CH_SetBaudrateEx+0xb0>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
10001926:	2317      	movs	r3, #23
10001928:	18fc      	adds	r4, r7, r3
1000192a:	68fa      	ldr	r2, [r7, #12]
1000192c:	68bb      	ldr	r3, [r7, #8]
1000192e:	1c10      	adds	r0, r2, #0
10001930:	1c19      	adds	r1, r3, #0
10001932:	220a      	movs	r2, #10
10001934:	f000 fb46 	bl	10001fc4 <XMC_USIC_CH_SetBaudrate>
10001938:	1c03      	adds	r3, r0, #0
1000193a:	7023      	strb	r3, [r4, #0]
1000193c:	e02a      	b.n	10001994 <XMC_I2C_CH_SetBaudrateEx+0xb0>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000193e:	68bb      	ldr	r3, [r7, #8]
10001940:	4a1a      	ldr	r2, [pc, #104]	; (100019ac <XMC_I2C_CH_SetBaudrateEx+0xc8>)
10001942:	4293      	cmp	r3, r2
10001944:	d822      	bhi.n	1000198c <XMC_I2C_CH_SetBaudrateEx+0xa8>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
10001946:	68fb      	ldr	r3, [r7, #12]
10001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000194a:	2280      	movs	r2, #128	; 0x80
1000194c:	0292      	lsls	r2, r2, #10
1000194e:	431a      	orrs	r2, r3
10001950:	68fb      	ldr	r3, [r7, #12]
10001952:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
10001954:	1dfb      	adds	r3, r7, #7
10001956:	781b      	ldrb	r3, [r3, #0]
10001958:	2b00      	cmp	r3, #0
1000195a:	d00b      	beq.n	10001974 <XMC_I2C_CH_SetBaudrateEx+0x90>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
1000195c:	68bb      	ldr	r3, [r7, #8]
1000195e:	2217      	movs	r2, #23
10001960:	18bc      	adds	r4, r7, r2
10001962:	68fa      	ldr	r2, [r7, #12]
10001964:	1c10      	adds	r0, r2, #0
10001966:	1c19      	adds	r1, r3, #0
10001968:	2219      	movs	r2, #25
1000196a:	f000 fba5 	bl	100020b8 <XMC_USIC_CH_SetBaudrateEx>
1000196e:	1c03      	adds	r3, r0, #0
10001970:	7023      	strb	r3, [r4, #0]
10001972:	e00f      	b.n	10001994 <XMC_I2C_CH_SetBaudrateEx+0xb0>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
10001974:	2317      	movs	r3, #23
10001976:	18fc      	adds	r4, r7, r3
10001978:	68fa      	ldr	r2, [r7, #12]
1000197a:	68bb      	ldr	r3, [r7, #8]
1000197c:	1c10      	adds	r0, r2, #0
1000197e:	1c19      	adds	r1, r3, #0
10001980:	2219      	movs	r2, #25
10001982:	f000 fb1f 	bl	10001fc4 <XMC_USIC_CH_SetBaudrate>
10001986:	1c03      	adds	r3, r0, #0
10001988:	7023      	strb	r3, [r4, #0]
1000198a:	e003      	b.n	10001994 <XMC_I2C_CH_SetBaudrateEx+0xb0>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
1000198c:	2317      	movs	r3, #23
1000198e:	18fb      	adds	r3, r7, r3
10001990:	2201      	movs	r2, #1
10001992:	701a      	strb	r2, [r3, #0]
  }

  return (XMC_I2C_CH_STATUS_t)status;
10001994:	2317      	movs	r3, #23
10001996:	18fb      	adds	r3, r7, r3
10001998:	781b      	ldrb	r3, [r3, #0]
}
1000199a:	1c18      	adds	r0, r3, #0
1000199c:	46bd      	mov	sp, r7
1000199e:	b007      	add	sp, #28
100019a0:	bd90      	pop	{r4, r7, pc}
100019a2:	46c0      	nop			; (mov r8, r8)
100019a4:	000186a0 	.word	0x000186a0
100019a8:	fffdffff 	.word	0xfffdffff
100019ac:	00061a80 	.word	0x00061a80

100019b0 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
100019b0:	b580      	push	{r7, lr}
100019b2:	b084      	sub	sp, #16
100019b4:	af00      	add	r7, sp, #0
100019b6:	6078      	str	r0, [r7, #4]
100019b8:	1c08      	adds	r0, r1, #0
100019ba:	1c11      	adds	r1, r2, #0
100019bc:	1cbb      	adds	r3, r7, #2
100019be:	1c02      	adds	r2, r0, #0
100019c0:	801a      	strh	r2, [r3, #0]
100019c2:	1c7b      	adds	r3, r7, #1
100019c4:	1c0a      	adds	r2, r1, #0
100019c6:	701a      	strb	r2, [r3, #0]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
100019c8:	1cbb      	adds	r3, r7, #2
100019ca:	881b      	ldrh	r3, [r3, #0]
100019cc:	2280      	movs	r2, #128	; 0x80
100019ce:	00d2      	lsls	r2, r2, #3
100019d0:	4313      	orrs	r3, r2
100019d2:	b29b      	uxth	r3, r3
100019d4:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
100019d6:	1c7b      	adds	r3, r7, #1
100019d8:	781b      	ldrb	r3, [r3, #0]
100019da:	2b01      	cmp	r3, #1
100019dc:	d103      	bne.n	100019e6 <XMC_I2C_CH_MasterStart+0x36>
  {
    temp |= 0x1U;
100019de:	68fb      	ldr	r3, [r7, #12]
100019e0:	2201      	movs	r2, #1
100019e2:	4313      	orrs	r3, r2
100019e4:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
100019e6:	687a      	ldr	r2, [r7, #4]
100019e8:	2384      	movs	r3, #132	; 0x84
100019ea:	005b      	lsls	r3, r3, #1
100019ec:	58d2      	ldr	r2, [r2, r3]
100019ee:	23e0      	movs	r3, #224	; 0xe0
100019f0:	04db      	lsls	r3, r3, #19
100019f2:	4013      	ands	r3, r2
100019f4:	d113      	bne.n	10001a1e <XMC_I2C_CH_MasterStart+0x6e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100019f6:	46c0      	nop			; (mov r8, r8)
100019f8:	687b      	ldr	r3, [r7, #4]
100019fa:	1c18      	adds	r0, r3, #0
100019fc:	f7ff fef0 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001a00:	1e03      	subs	r3, r0, #0
10001a02:	2b80      	cmp	r3, #128	; 0x80
10001a04:	d0f8      	beq.n	100019f8 <XMC_I2C_CH_MasterStart+0x48>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001a06:	687a      	ldr	r2, [r7, #4]
10001a08:	2380      	movs	r3, #128	; 0x80
10001a0a:	019b      	lsls	r3, r3, #6
10001a0c:	1c10      	adds	r0, r2, #0
10001a0e:	1c19      	adds	r1, r3, #0
10001a10:	f7ff fef4 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
10001a14:	687b      	ldr	r3, [r7, #4]
10001a16:	2180      	movs	r1, #128	; 0x80
10001a18:	68fa      	ldr	r2, [r7, #12]
10001a1a:	505a      	str	r2, [r3, r1]
10001a1c:	e004      	b.n	10001a28 <XMC_I2C_CH_MasterStart+0x78>
  }
  else
  {
    channel->IN[0U] = temp;
10001a1e:	687a      	ldr	r2, [r7, #4]
10001a20:	23c0      	movs	r3, #192	; 0xc0
10001a22:	005b      	lsls	r3, r3, #1
10001a24:	68f9      	ldr	r1, [r7, #12]
10001a26:	50d1      	str	r1, [r2, r3]
  }
}
10001a28:	46bd      	mov	sp, r7
10001a2a:	b004      	add	sp, #16
10001a2c:	bd80      	pop	{r7, pc}
10001a2e:	46c0      	nop			; (mov r8, r8)

10001a30 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
10001a30:	b580      	push	{r7, lr}
10001a32:	b084      	sub	sp, #16
10001a34:	af00      	add	r7, sp, #0
10001a36:	6078      	str	r0, [r7, #4]
10001a38:	1c08      	adds	r0, r1, #0
10001a3a:	1c11      	adds	r1, r2, #0
10001a3c:	1cbb      	adds	r3, r7, #2
10001a3e:	1c02      	adds	r2, r0, #0
10001a40:	801a      	strh	r2, [r3, #0]
10001a42:	1c7b      	adds	r3, r7, #1
10001a44:	1c0a      	adds	r2, r1, #0
10001a46:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
10001a48:	1cbb      	adds	r3, r7, #2
10001a4a:	881b      	ldrh	r3, [r3, #0]
10001a4c:	22a0      	movs	r2, #160	; 0xa0
10001a4e:	00d2      	lsls	r2, r2, #3
10001a50:	4313      	orrs	r3, r2
10001a52:	b29b      	uxth	r3, r3
10001a54:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
10001a56:	1c7b      	adds	r3, r7, #1
10001a58:	781b      	ldrb	r3, [r3, #0]
10001a5a:	2b01      	cmp	r3, #1
10001a5c:	d103      	bne.n	10001a66 <XMC_I2C_CH_MasterRepeatedStart+0x36>
  {
    tmp |= 0x1U;
10001a5e:	68fb      	ldr	r3, [r7, #12]
10001a60:	2201      	movs	r2, #1
10001a62:	4313      	orrs	r3, r2
10001a64:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001a66:	687a      	ldr	r2, [r7, #4]
10001a68:	2384      	movs	r3, #132	; 0x84
10001a6a:	005b      	lsls	r3, r3, #1
10001a6c:	58d2      	ldr	r2, [r2, r3]
10001a6e:	23e0      	movs	r3, #224	; 0xe0
10001a70:	04db      	lsls	r3, r3, #19
10001a72:	4013      	ands	r3, r2
10001a74:	d113      	bne.n	10001a9e <XMC_I2C_CH_MasterRepeatedStart+0x6e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001a76:	46c0      	nop			; (mov r8, r8)
10001a78:	687b      	ldr	r3, [r7, #4]
10001a7a:	1c18      	adds	r0, r3, #0
10001a7c:	f7ff feb0 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001a80:	1e03      	subs	r3, r0, #0
10001a82:	2b80      	cmp	r3, #128	; 0x80
10001a84:	d0f8      	beq.n	10001a78 <XMC_I2C_CH_MasterRepeatedStart+0x48>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001a86:	687a      	ldr	r2, [r7, #4]
10001a88:	2380      	movs	r3, #128	; 0x80
10001a8a:	019b      	lsls	r3, r3, #6
10001a8c:	1c10      	adds	r0, r2, #0
10001a8e:	1c19      	adds	r1, r3, #0
10001a90:	f7ff feb4 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
10001a94:	687b      	ldr	r3, [r7, #4]
10001a96:	2180      	movs	r1, #128	; 0x80
10001a98:	68fa      	ldr	r2, [r7, #12]
10001a9a:	505a      	str	r2, [r3, r1]
10001a9c:	e004      	b.n	10001aa8 <XMC_I2C_CH_MasterRepeatedStart+0x78>
  }
  else
  {
    channel->IN[0U] = tmp;
10001a9e:	687a      	ldr	r2, [r7, #4]
10001aa0:	23c0      	movs	r3, #192	; 0xc0
10001aa2:	005b      	lsls	r3, r3, #1
10001aa4:	68f9      	ldr	r1, [r7, #12]
10001aa6:	50d1      	str	r1, [r2, r3]
  }
}
10001aa8:	46bd      	mov	sp, r7
10001aaa:	b004      	add	sp, #16
10001aac:	bd80      	pop	{r7, pc}
10001aae:	46c0      	nop			; (mov r8, r8)

10001ab0 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
10001ab0:	b580      	push	{r7, lr}
10001ab2:	b082      	sub	sp, #8
10001ab4:	af00      	add	r7, sp, #0
10001ab6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001ab8:	687a      	ldr	r2, [r7, #4]
10001aba:	2384      	movs	r3, #132	; 0x84
10001abc:	005b      	lsls	r3, r3, #1
10001abe:	58d2      	ldr	r2, [r2, r3]
10001ac0:	23e0      	movs	r3, #224	; 0xe0
10001ac2:	04db      	lsls	r3, r3, #19
10001ac4:	4013      	ands	r3, r2
10001ac6:	d114      	bne.n	10001af2 <XMC_I2C_CH_MasterStop+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001ac8:	46c0      	nop			; (mov r8, r8)
10001aca:	687b      	ldr	r3, [r7, #4]
10001acc:	1c18      	adds	r0, r3, #0
10001ace:	f7ff fe87 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001ad2:	1e03      	subs	r3, r0, #0
10001ad4:	2b80      	cmp	r3, #128	; 0x80
10001ad6:	d0f8      	beq.n	10001aca <XMC_I2C_CH_MasterStop+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001ad8:	687a      	ldr	r2, [r7, #4]
10001ada:	2380      	movs	r3, #128	; 0x80
10001adc:	019b      	lsls	r3, r3, #6
10001ade:	1c10      	adds	r0, r2, #0
10001ae0:	1c19      	adds	r1, r3, #0
10001ae2:	f7ff fe8b 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
10001ae6:	687b      	ldr	r3, [r7, #4]
10001ae8:	2180      	movs	r1, #128	; 0x80
10001aea:	22c0      	movs	r2, #192	; 0xc0
10001aec:	00d2      	lsls	r2, r2, #3
10001aee:	505a      	str	r2, [r3, r1]
10001af0:	e005      	b.n	10001afe <XMC_I2C_CH_MasterStop+0x4e>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
10001af2:	687a      	ldr	r2, [r7, #4]
10001af4:	23c0      	movs	r3, #192	; 0xc0
10001af6:	005b      	lsls	r3, r3, #1
10001af8:	21c0      	movs	r1, #192	; 0xc0
10001afa:	00c9      	lsls	r1, r1, #3
10001afc:	50d1      	str	r1, [r2, r3]
  }
}
10001afe:	46bd      	mov	sp, r7
10001b00:	b002      	add	sp, #8
10001b02:	bd80      	pop	{r7, pc}

10001b04 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
10001b04:	b580      	push	{r7, lr}
10001b06:	b082      	sub	sp, #8
10001b08:	af00      	add	r7, sp, #0
10001b0a:	6078      	str	r0, [r7, #4]
10001b0c:	1c0a      	adds	r2, r1, #0
10001b0e:	1cfb      	adds	r3, r7, #3
10001b10:	701a      	strb	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001b12:	687a      	ldr	r2, [r7, #4]
10001b14:	2384      	movs	r3, #132	; 0x84
10001b16:	005b      	lsls	r3, r3, #1
10001b18:	58d2      	ldr	r2, [r2, r3]
10001b1a:	23e0      	movs	r3, #224	; 0xe0
10001b1c:	04db      	lsls	r3, r3, #19
10001b1e:	4013      	ands	r3, r2
10001b20:	d114      	bne.n	10001b4c <XMC_I2C_CH_MasterTransmit+0x48>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001b22:	46c0      	nop			; (mov r8, r8)
10001b24:	687b      	ldr	r3, [r7, #4]
10001b26:	1c18      	adds	r0, r3, #0
10001b28:	f7ff fe5a 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001b2c:	1e03      	subs	r3, r0, #0
10001b2e:	2b80      	cmp	r3, #128	; 0x80
10001b30:	d0f8      	beq.n	10001b24 <XMC_I2C_CH_MasterTransmit+0x20>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001b32:	687a      	ldr	r2, [r7, #4]
10001b34:	2380      	movs	r3, #128	; 0x80
10001b36:	019b      	lsls	r3, r3, #6
10001b38:	1c10      	adds	r0, r2, #0
10001b3a:	1c19      	adds	r1, r3, #0
10001b3c:	f7ff fe5e 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10001b40:	1cfb      	adds	r3, r7, #3
10001b42:	781a      	ldrb	r2, [r3, #0]
10001b44:	687b      	ldr	r3, [r7, #4]
10001b46:	2180      	movs	r1, #128	; 0x80
10001b48:	505a      	str	r2, [r3, r1]
10001b4a:	e005      	b.n	10001b58 <XMC_I2C_CH_MasterTransmit+0x54>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10001b4c:	1cfb      	adds	r3, r7, #3
10001b4e:	7819      	ldrb	r1, [r3, #0]
10001b50:	687a      	ldr	r2, [r7, #4]
10001b52:	23c0      	movs	r3, #192	; 0xc0
10001b54:	005b      	lsls	r3, r3, #1
10001b56:	50d1      	str	r1, [r2, r3]
  }
}
10001b58:	46bd      	mov	sp, r7
10001b5a:	b002      	add	sp, #8
10001b5c:	bd80      	pop	{r7, pc}
10001b5e:	46c0      	nop			; (mov r8, r8)

10001b60 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
10001b60:	b580      	push	{r7, lr}
10001b62:	b082      	sub	sp, #8
10001b64:	af00      	add	r7, sp, #0
10001b66:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001b68:	687a      	ldr	r2, [r7, #4]
10001b6a:	2384      	movs	r3, #132	; 0x84
10001b6c:	005b      	lsls	r3, r3, #1
10001b6e:	58d2      	ldr	r2, [r2, r3]
10001b70:	23e0      	movs	r3, #224	; 0xe0
10001b72:	04db      	lsls	r3, r3, #19
10001b74:	4013      	ands	r3, r2
10001b76:	d114      	bne.n	10001ba2 <XMC_I2C_CH_MasterReceiveAck+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001b78:	46c0      	nop			; (mov r8, r8)
10001b7a:	687b      	ldr	r3, [r7, #4]
10001b7c:	1c18      	adds	r0, r3, #0
10001b7e:	f7ff fe2f 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001b82:	1e03      	subs	r3, r0, #0
10001b84:	2b80      	cmp	r3, #128	; 0x80
10001b86:	d0f8      	beq.n	10001b7a <XMC_I2C_CH_MasterReceiveAck+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001b88:	687a      	ldr	r2, [r7, #4]
10001b8a:	2380      	movs	r3, #128	; 0x80
10001b8c:	019b      	lsls	r3, r3, #6
10001b8e:	1c10      	adds	r0, r2, #0
10001b90:	1c19      	adds	r1, r3, #0
10001b92:	f7ff fe33 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10001b96:	687b      	ldr	r3, [r7, #4]
10001b98:	2180      	movs	r1, #128	; 0x80
10001b9a:	2280      	movs	r2, #128	; 0x80
10001b9c:	0092      	lsls	r2, r2, #2
10001b9e:	505a      	str	r2, [r3, r1]
10001ba0:	e005      	b.n	10001bae <XMC_I2C_CH_MasterReceiveAck+0x4e>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10001ba2:	687a      	ldr	r2, [r7, #4]
10001ba4:	23c0      	movs	r3, #192	; 0xc0
10001ba6:	005b      	lsls	r3, r3, #1
10001ba8:	2180      	movs	r1, #128	; 0x80
10001baa:	0089      	lsls	r1, r1, #2
10001bac:	50d1      	str	r1, [r2, r3]
  }
}
10001bae:	46bd      	mov	sp, r7
10001bb0:	b002      	add	sp, #8
10001bb2:	bd80      	pop	{r7, pc}

10001bb4 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
10001bb4:	b580      	push	{r7, lr}
10001bb6:	b082      	sub	sp, #8
10001bb8:	af00      	add	r7, sp, #0
10001bba:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001bbc:	687a      	ldr	r2, [r7, #4]
10001bbe:	2384      	movs	r3, #132	; 0x84
10001bc0:	005b      	lsls	r3, r3, #1
10001bc2:	58d2      	ldr	r2, [r2, r3]
10001bc4:	23e0      	movs	r3, #224	; 0xe0
10001bc6:	04db      	lsls	r3, r3, #19
10001bc8:	4013      	ands	r3, r2
10001bca:	d114      	bne.n	10001bf6 <XMC_I2C_CH_MasterReceiveNack+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001bcc:	46c0      	nop			; (mov r8, r8)
10001bce:	687b      	ldr	r3, [r7, #4]
10001bd0:	1c18      	adds	r0, r3, #0
10001bd2:	f7ff fe05 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001bd6:	1e03      	subs	r3, r0, #0
10001bd8:	2b80      	cmp	r3, #128	; 0x80
10001bda:	d0f8      	beq.n	10001bce <XMC_I2C_CH_MasterReceiveNack+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001bdc:	687a      	ldr	r2, [r7, #4]
10001bde:	2380      	movs	r3, #128	; 0x80
10001be0:	019b      	lsls	r3, r3, #6
10001be2:	1c10      	adds	r0, r2, #0
10001be4:	1c19      	adds	r1, r3, #0
10001be6:	f7ff fe09 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
10001bea:	687b      	ldr	r3, [r7, #4]
10001bec:	2180      	movs	r1, #128	; 0x80
10001bee:	22c0      	movs	r2, #192	; 0xc0
10001bf0:	0092      	lsls	r2, r2, #2
10001bf2:	505a      	str	r2, [r3, r1]
10001bf4:	e005      	b.n	10001c02 <XMC_I2C_CH_MasterReceiveNack+0x4e>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
10001bf6:	687a      	ldr	r2, [r7, #4]
10001bf8:	23c0      	movs	r3, #192	; 0xc0
10001bfa:	005b      	lsls	r3, r3, #1
10001bfc:	21c0      	movs	r1, #192	; 0xc0
10001bfe:	0089      	lsls	r1, r1, #2
10001c00:	50d1      	str	r1, [r2, r3]
  }
}
10001c02:	46bd      	mov	sp, r7
10001c04:	b002      	add	sp, #8
10001c06:	bd80      	pop	{r7, pc}

10001c08 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
10001c08:	b580      	push	{r7, lr}
10001c0a:	b084      	sub	sp, #16
10001c0c:	af00      	add	r7, sp, #0
10001c0e:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10001c10:	687a      	ldr	r2, [r7, #4]
10001c12:	2386      	movs	r3, #134	; 0x86
10001c14:	005b      	lsls	r3, r3, #1
10001c16:	58d2      	ldr	r2, [r2, r3]
10001c18:	23e0      	movs	r3, #224	; 0xe0
10001c1a:	04db      	lsls	r3, r3, #19
10001c1c:	4013      	ands	r3, r2
10001c1e:	d105      	bne.n	10001c2c <XMC_I2C_CH_GetReceivedData+0x24>
  {
    retval = (uint8_t)channel->RBUF;
10001c20:	687b      	ldr	r3, [r7, #4]
10001c22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10001c24:	230f      	movs	r3, #15
10001c26:	18fb      	adds	r3, r7, r3
10001c28:	701a      	strb	r2, [r3, #0]
10001c2a:	e006      	b.n	10001c3a <XMC_I2C_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
10001c2c:	687a      	ldr	r2, [r7, #4]
10001c2e:	238e      	movs	r3, #142	; 0x8e
10001c30:	005b      	lsls	r3, r3, #1
10001c32:	58d2      	ldr	r2, [r2, r3]
10001c34:	230f      	movs	r3, #15
10001c36:	18fb      	adds	r3, r7, r3
10001c38:	701a      	strb	r2, [r3, #0]
  }

  return retval;
10001c3a:	230f      	movs	r3, #15
10001c3c:	18fb      	adds	r3, r7, r3
10001c3e:	781b      	ldrb	r3, [r3, #0]
}
10001c40:	1c18      	adds	r0, r3, #0
10001c42:	46bd      	mov	sp, r7
10001c44:	b004      	add	sp, #16
10001c46:	bd80      	pop	{r7, pc}

10001c48 <XMC_I2C_CH_EnableEvent>:
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10001c48:	b580      	push	{r7, lr}
10001c4a:	b082      	sub	sp, #8
10001c4c:	af00      	add	r7, sp, #0
10001c4e:	6078      	str	r0, [r7, #4]
10001c50:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event & 0x1fc00U);
10001c52:	687b      	ldr	r3, [r7, #4]
10001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10001c56:	6839      	ldr	r1, [r7, #0]
10001c58:	23fe      	movs	r3, #254	; 0xfe
10001c5a:	025b      	lsls	r3, r3, #9
10001c5c:	400b      	ands	r3, r1
10001c5e:	431a      	orrs	r2, r3
10001c60:	687b      	ldr	r3, [r7, #4]
10001c62:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
10001c64:	687b      	ldr	r3, [r7, #4]
10001c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10001c68:	683b      	ldr	r3, [r7, #0]
10001c6a:	4904      	ldr	r1, [pc, #16]	; (10001c7c <XMC_I2C_CH_EnableEvent+0x34>)
10001c6c:	400b      	ands	r3, r1
10001c6e:	431a      	orrs	r2, r3
10001c70:	687b      	ldr	r3, [r7, #4]
10001c72:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001c74:	46bd      	mov	sp, r7
10001c76:	b002      	add	sp, #8
10001c78:	bd80      	pop	{r7, pc}
10001c7a:	46c0      	nop			; (mov r8, r8)
10001c7c:	41fc0000 	.word	0x41fc0000

10001c80 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10001c80:	b580      	push	{r7, lr}
10001c82:	b082      	sub	sp, #8
10001c84:	af00      	add	r7, sp, #0
10001c86:	6078      	str	r0, [r7, #4]
10001c88:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
10001c8a:	687b      	ldr	r3, [r7, #4]
10001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001c8e:	6839      	ldr	r1, [r7, #0]
10001c90:	22fe      	movs	r2, #254	; 0xfe
10001c92:	0252      	lsls	r2, r2, #9
10001c94:	400a      	ands	r2, r1
10001c96:	43d2      	mvns	r2, r2
10001c98:	401a      	ands	r2, r3
10001c9a:	687b      	ldr	r3, [r7, #4]
10001c9c:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
10001c9e:	687b      	ldr	r3, [r7, #4]
10001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001ca2:	683a      	ldr	r2, [r7, #0]
10001ca4:	4904      	ldr	r1, [pc, #16]	; (10001cb8 <XMC_I2C_CH_DisableEvent+0x38>)
10001ca6:	400a      	ands	r2, r1
10001ca8:	43d2      	mvns	r2, r2
10001caa:	401a      	ands	r2, r3
10001cac:	687b      	ldr	r3, [r7, #4]
10001cae:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001cb0:	46bd      	mov	sp, r7
10001cb2:	b002      	add	sp, #8
10001cb4:	bd80      	pop	{r7, pc}
10001cb6:	46c0      	nop			; (mov r8, r8)
10001cb8:	41fc0000 	.word	0x41fc0000

10001cbc <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10001cbc:	b580      	push	{r7, lr}
10001cbe:	b088      	sub	sp, #32
10001cc0:	af00      	add	r7, sp, #0
10001cc2:	6078      	str	r0, [r7, #4]
10001cc4:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10001cc6:	f3ef 8310 	mrs	r3, PRIMASK
10001cca:	617b      	str	r3, [r7, #20]
  return(result);
10001ccc:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001cce:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001cd0:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001cd2:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001cd4:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10001cd6:	4b0c      	ldr	r3, [pc, #48]	; (10001d08 <__aeabi_uidiv+0x4c>)
10001cd8:	2204      	movs	r2, #4
10001cda:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001cdc:	4b0a      	ldr	r3, [pc, #40]	; (10001d08 <__aeabi_uidiv+0x4c>)
10001cde:	687a      	ldr	r2, [r7, #4]
10001ce0:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10001ce2:	4b09      	ldr	r3, [pc, #36]	; (10001d08 <__aeabi_uidiv+0x4c>)
10001ce4:	683a      	ldr	r2, [r7, #0]
10001ce6:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10001ce8:	4b07      	ldr	r3, [pc, #28]	; (10001d08 <__aeabi_uidiv+0x4c>)
10001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001cec:	61bb      	str	r3, [r7, #24]
10001cee:	69fb      	ldr	r3, [r7, #28]
10001cf0:	60fb      	str	r3, [r7, #12]
10001cf2:	68fb      	ldr	r3, [r7, #12]
10001cf4:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001cf6:	68bb      	ldr	r3, [r7, #8]
10001cf8:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10001cfc:	69bb      	ldr	r3, [r7, #24]
}
10001cfe:	1c18      	adds	r0, r3, #0
10001d00:	46bd      	mov	sp, r7
10001d02:	b008      	add	sp, #32
10001d04:	bd80      	pop	{r7, pc}
10001d06:	46c0      	nop			; (mov r8, r8)
10001d08:	40030000 	.word	0x40030000

10001d0c <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
10001d0c:	b580      	push	{r7, lr}
10001d0e:	b088      	sub	sp, #32
10001d10:	af00      	add	r7, sp, #0
10001d12:	6078      	str	r0, [r7, #4]
10001d14:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10001d16:	f3ef 8310 	mrs	r3, PRIMASK
10001d1a:	617b      	str	r3, [r7, #20]
  return(result);
10001d1c:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001d1e:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001d20:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001d22:	693b      	ldr	r3, [r7, #16]
/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001d24:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
10001d26:	4b0c      	ldr	r3, [pc, #48]	; (10001d58 <__aeabi_idiv+0x4c>)
10001d28:	2200      	movs	r2, #0
10001d2a:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001d2c:	4b0a      	ldr	r3, [pc, #40]	; (10001d58 <__aeabi_idiv+0x4c>)
10001d2e:	687a      	ldr	r2, [r7, #4]
10001d30:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10001d32:	4b09      	ldr	r3, [pc, #36]	; (10001d58 <__aeabi_idiv+0x4c>)
10001d34:	683a      	ldr	r2, [r7, #0]
10001d36:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10001d38:	4b07      	ldr	r3, [pc, #28]	; (10001d58 <__aeabi_idiv+0x4c>)
10001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001d3c:	61bb      	str	r3, [r7, #24]
10001d3e:	69fb      	ldr	r3, [r7, #28]
10001d40:	60fb      	str	r3, [r7, #12]
10001d42:	68fb      	ldr	r3, [r7, #12]
10001d44:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001d46:	68bb      	ldr	r3, [r7, #8]
10001d48:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10001d4c:	69bb      	ldr	r3, [r7, #24]
}
10001d4e:	1c18      	adds	r0, r3, #0
10001d50:	46bd      	mov	sp, r7
10001d52:	b008      	add	sp, #32
10001d54:	bd80      	pop	{r7, pc}
10001d56:	46c0      	nop			; (mov r8, r8)
10001d58:	40030000 	.word	0x40030000

10001d5c <__aeabi_uidivmod>:

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
10001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001d5e:	b08d      	sub	sp, #52	; 0x34
10001d60:	af00      	add	r7, sp, #0
10001d62:	6078      	str	r0, [r7, #4]
10001d64:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10001d66:	f3ef 8210 	mrs	r2, PRIMASK
10001d6a:	617a      	str	r2, [r7, #20]
  return(result);
10001d6c:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001d6e:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001d70:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001d72:	693a      	ldr	r2, [r7, #16]
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
10001d74:	62fa      	str	r2, [r7, #44]	; 0x2c

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10001d76:	4a15      	ldr	r2, [pc, #84]	; (10001dcc <__aeabi_uidivmod+0x70>)
10001d78:	2104      	movs	r1, #4
10001d7a:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
10001d7c:	4a13      	ldr	r2, [pc, #76]	; (10001dcc <__aeabi_uidivmod+0x70>)
10001d7e:	6879      	ldr	r1, [r7, #4]
10001d80:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
10001d82:	4a12      	ldr	r2, [pc, #72]	; (10001dcc <__aeabi_uidivmod+0x70>)
10001d84:	6839      	ldr	r1, [r7, #0]
10001d86:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
10001d88:	4a10      	ldr	r2, [pc, #64]	; (10001dcc <__aeabi_uidivmod+0x70>)
10001d8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
10001d8c:	623a      	str	r2, [r7, #32]
10001d8e:	2200      	movs	r2, #0
10001d90:	627a      	str	r2, [r7, #36]	; 0x24
  quot = (uint64_t)MATH->QUOT;
10001d92:	4a0e      	ldr	r2, [pc, #56]	; (10001dcc <__aeabi_uidivmod+0x70>)
10001d94:	6a92      	ldr	r2, [r2, #40]	; 0x28
10001d96:	61ba      	str	r2, [r7, #24]
10001d98:	2200      	movs	r2, #0
10001d9a:	61fa      	str	r2, [r7, #28]
10001d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10001d9e:	60fa      	str	r2, [r7, #12]
10001da0:	68fa      	ldr	r2, [r7, #12]
10001da2:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001da4:	68ba      	ldr	r2, [r7, #8]
10001da6:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
10001daa:	6a3a      	ldr	r2, [r7, #32]
10001dac:	0014      	movs	r4, r2
10001dae:	2200      	movs	r2, #0
10001db0:	1c13      	adds	r3, r2, #0
10001db2:	69ba      	ldr	r2, [r7, #24]
10001db4:	431a      	orrs	r2, r3
10001db6:	1c15      	adds	r5, r2, #0
10001db8:	69fa      	ldr	r2, [r7, #28]
10001dba:	4322      	orrs	r2, r4
10001dbc:	1c16      	adds	r6, r2, #0
10001dbe:	1c2b      	adds	r3, r5, #0
10001dc0:	1c34      	adds	r4, r6, #0
}
10001dc2:	1c18      	adds	r0, r3, #0
10001dc4:	1c21      	adds	r1, r4, #0
10001dc6:	46bd      	mov	sp, r7
10001dc8:	b00d      	add	sp, #52	; 0x34
10001dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001dcc:	40030000 	.word	0x40030000

10001dd0 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10001dd0:	b580      	push	{r7, lr}
10001dd2:	b082      	sub	sp, #8
10001dd4:	af00      	add	r7, sp, #0
10001dd6:	6078      	str	r0, [r7, #4]
10001dd8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10001dda:	687b      	ldr	r3, [r7, #4]
10001ddc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10001dde:	683b      	ldr	r3, [r7, #0]
10001de0:	431a      	orrs	r2, r3
10001de2:	687b      	ldr	r3, [r7, #4]
10001de4:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001de6:	46bd      	mov	sp, r7
10001de8:	b002      	add	sp, #8
10001dea:	bd80      	pop	{r7, pc}

10001dec <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
10001dec:	b580      	push	{r7, lr}
10001dee:	b084      	sub	sp, #16
10001df0:	af00      	add	r7, sp, #0
10001df2:	60f8      	str	r0, [r7, #12]
10001df4:	60b9      	str	r1, [r7, #8]
10001df6:	1dfb      	adds	r3, r7, #7
10001df8:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_Enable(channel);
10001dfa:	68fb      	ldr	r3, [r7, #12]
10001dfc:	1c18      	adds	r0, r3, #0
10001dfe:	f000 f8a5 	bl	10001f4c <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
10001e02:	68bb      	ldr	r3, [r7, #8]
10001e04:	795b      	ldrb	r3, [r3, #5]
10001e06:	2b00      	cmp	r3, #0
10001e08:	d119      	bne.n	10001e3e <XMC_SPI_CH_InitEx+0x52>
10001e0a:	1dfb      	adds	r3, r7, #7
10001e0c:	781b      	ldrb	r3, [r3, #0]
10001e0e:	2b00      	cmp	r3, #0
10001e10:	d015      	beq.n	10001e3e <XMC_SPI_CH_InitEx+0x52>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
10001e12:	68bb      	ldr	r3, [r7, #8]
10001e14:	791b      	ldrb	r3, [r3, #4]
10001e16:	2b00      	cmp	r3, #0
10001e18:	d009      	beq.n	10001e2e <XMC_SPI_CH_InitEx+0x42>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
10001e1a:	68bb      	ldr	r3, [r7, #8]
10001e1c:	681b      	ldr	r3, [r3, #0]
10001e1e:	1c1a      	adds	r2, r3, #0
10001e20:	68fb      	ldr	r3, [r7, #12]
10001e22:	1c18      	adds	r0, r3, #0
10001e24:	1c11      	adds	r1, r2, #0
10001e26:	2202      	movs	r2, #2
10001e28:	f000 f946 	bl	100020b8 <XMC_USIC_CH_SetBaudrateEx>
10001e2c:	e007      	b.n	10001e3e <XMC_SPI_CH_InitEx+0x52>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
10001e2e:	68bb      	ldr	r3, [r7, #8]
10001e30:	681b      	ldr	r3, [r3, #0]
10001e32:	68fa      	ldr	r2, [r7, #12]
10001e34:	1c10      	adds	r0, r2, #0
10001e36:	1c19      	adds	r1, r3, #0
10001e38:	2202      	movs	r2, #2
10001e3a:	f000 f8c3 	bl	10001fc4 <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
10001e3e:	68fb      	ldr	r3, [r7, #12]
10001e40:	4a0e      	ldr	r2, [pc, #56]	; (10001e7c <XMC_SPI_CH_InitEx+0x90>)
10001e42:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
10001e44:	68fb      	ldr	r3, [r7, #12]
10001e46:	22a2      	movs	r2, #162	; 0xa2
10001e48:	00d2      	lsls	r2, r2, #3
10001e4a:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
10001e4c:	68bb      	ldr	r3, [r7, #8]
10001e4e:	795b      	ldrb	r3, [r3, #5]
10001e50:	2b00      	cmp	r3, #0
10001e52:	d107      	bne.n	10001e64 <XMC_SPI_CH_InitEx+0x78>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
10001e54:	68bb      	ldr	r3, [r7, #8]
10001e56:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
10001e58:	220b      	movs	r2, #11
10001e5a:	4313      	orrs	r3, r2
10001e5c:	b2db      	uxtb	r3, r3
10001e5e:	1c1a      	adds	r2, r3, #0
10001e60:	68fb      	ldr	r3, [r7, #12]
10001e62:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
10001e64:	68fb      	ldr	r3, [r7, #12]
10001e66:	2201      	movs	r2, #1
10001e68:	4252      	negs	r2, r2
10001e6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10001e6c:	68bb      	ldr	r3, [r7, #8]
10001e6e:	891b      	ldrh	r3, [r3, #8]
10001e70:	1c1a      	adds	r2, r3, #0
10001e72:	68fb      	ldr	r3, [r7, #12]
10001e74:	641a      	str	r2, [r3, #64]	; 0x40
}
10001e76:	46bd      	mov	sp, r7
10001e78:	b004      	add	sp, #16
10001e7a:	bd80      	pop	{r7, pc}
10001e7c:	073f0102 	.word	0x073f0102

10001e80 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
10001e80:	b580      	push	{r7, lr}
10001e82:	b082      	sub	sp, #8
10001e84:	af00      	add	r7, sp, #0
10001e86:	6078      	str	r0, [r7, #4]
10001e88:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
10001e8a:	687b      	ldr	r3, [r7, #4]
10001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001e8e:	4a06      	ldr	r2, [pc, #24]	; (10001ea8 <XMC_SPI_CH_EnableSlaveSelect+0x28>)
10001e90:	401a      	ands	r2, r3
10001e92:	687b      	ldr	r3, [r7, #4]
10001e94:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
10001e96:	687b      	ldr	r3, [r7, #4]
10001e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10001e9a:	683b      	ldr	r3, [r7, #0]
10001e9c:	431a      	orrs	r2, r3
10001e9e:	687b      	ldr	r3, [r7, #4]
10001ea0:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001ea2:	46bd      	mov	sp, r7
10001ea4:	b002      	add	sp, #8
10001ea6:	bd80      	pop	{r7, pc}
10001ea8:	ff00ffff 	.word	0xff00ffff

10001eac <XMC_SPI_CH_DisableSlaveSelect>:

/* Disable the slave signals by clearing (SELO) bits in PCR register. */
void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
{
10001eac:	b580      	push	{r7, lr}
10001eae:	b082      	sub	sp, #8
10001eb0:	af00      	add	r7, sp, #0
10001eb2:	6078      	str	r0, [r7, #4]
  XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
10001eb4:	687b      	ldr	r3, [r7, #4]
10001eb6:	1c18      	adds	r0, r3, #0
10001eb8:	2101      	movs	r1, #1
10001eba:	f7ff ff89 	bl	10001dd0 <XMC_SPI_CH_ClearStatusFlag>

  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
10001ebe:	687b      	ldr	r3, [r7, #4]
10001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001ec2:	4a03      	ldr	r2, [pc, #12]	; (10001ed0 <XMC_SPI_CH_DisableSlaveSelect+0x24>)
10001ec4:	401a      	ands	r2, r3
10001ec6:	687b      	ldr	r3, [r7, #4]
10001ec8:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001eca:	46bd      	mov	sp, r7
10001ecc:	b002      	add	sp, #8
10001ece:	bd80      	pop	{r7, pc}
10001ed0:	ff00ffff 	.word	0xff00ffff

10001ed4 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
10001ed4:	b580      	push	{r7, lr}
10001ed6:	b084      	sub	sp, #16
10001ed8:	af00      	add	r7, sp, #0
10001eda:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10001edc:	687a      	ldr	r2, [r7, #4]
10001ede:	2386      	movs	r3, #134	; 0x86
10001ee0:	005b      	lsls	r3, r3, #1
10001ee2:	58d2      	ldr	r2, [r2, r3]
10001ee4:	23e0      	movs	r3, #224	; 0xe0
10001ee6:	04db      	lsls	r3, r3, #19
10001ee8:	4013      	ands	r3, r2
10001eea:	d105      	bne.n	10001ef8 <XMC_SPI_CH_GetReceivedData+0x24>
  {
    retval = (uint16_t)channel->RBUF;
10001eec:	687b      	ldr	r3, [r7, #4]
10001eee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10001ef0:	230e      	movs	r3, #14
10001ef2:	18fb      	adds	r3, r7, r3
10001ef4:	801a      	strh	r2, [r3, #0]
10001ef6:	e006      	b.n	10001f06 <XMC_SPI_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
10001ef8:	687a      	ldr	r2, [r7, #4]
10001efa:	238e      	movs	r3, #142	; 0x8e
10001efc:	005b      	lsls	r3, r3, #1
10001efe:	58d2      	ldr	r2, [r2, r3]
10001f00:	230e      	movs	r3, #14
10001f02:	18fb      	adds	r3, r7, r3
10001f04:	801a      	strh	r2, [r3, #0]
  }

  return retval;
10001f06:	230e      	movs	r3, #14
10001f08:	18fb      	adds	r3, r7, r3
10001f0a:	881b      	ldrh	r3, [r3, #0]
}
10001f0c:	1c18      	adds	r0, r3, #0
10001f0e:	46bd      	mov	sp, r7
10001f10:	b004      	add	sp, #16
10001f12:	bd80      	pop	{r7, pc}

10001f14 <XMC_SPI_CH_DisableEvent>:
  channel->CCR |= (event & 0x1fc00U);
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
}

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10001f14:	b580      	push	{r7, lr}
10001f16:	b082      	sub	sp, #8
10001f18:	af00      	add	r7, sp, #0
10001f1a:	6078      	str	r0, [r7, #4]
10001f1c:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
10001f1e:	687b      	ldr	r3, [r7, #4]
10001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001f22:	6839      	ldr	r1, [r7, #0]
10001f24:	22fe      	movs	r2, #254	; 0xfe
10001f26:	0252      	lsls	r2, r2, #9
10001f28:	400a      	ands	r2, r1
10001f2a:	43d2      	mvns	r2, r2
10001f2c:	401a      	ands	r2, r3
10001f2e:	687b      	ldr	r3, [r7, #4]
10001f30:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
10001f32:	687b      	ldr	r3, [r7, #4]
10001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001f36:	683a      	ldr	r2, [r7, #0]
10001f38:	0352      	lsls	r2, r2, #13
10001f3a:	0412      	lsls	r2, r2, #16
10001f3c:	0c12      	lsrs	r2, r2, #16
10001f3e:	43d2      	mvns	r2, r2
10001f40:	401a      	ands	r2, r3
10001f42:	687b      	ldr	r3, [r7, #4]
10001f44:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001f46:	46bd      	mov	sp, r7
10001f48:	b002      	add	sp, #8
10001f4a:	bd80      	pop	{r7, pc}

10001f4c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10001f4c:	b580      	push	{r7, lr}
10001f4e:	b082      	sub	sp, #8
10001f50:	af00      	add	r7, sp, #0
10001f52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10001f54:	687a      	ldr	r2, [r7, #4]
10001f56:	2390      	movs	r3, #144	; 0x90
10001f58:	05db      	lsls	r3, r3, #23
10001f5a:	429a      	cmp	r2, r3
10001f5c:	d003      	beq.n	10001f66 <XMC_USIC_CH_Enable+0x1a>
10001f5e:	687b      	ldr	r3, [r7, #4]
10001f60:	4a13      	ldr	r2, [pc, #76]	; (10001fb0 <XMC_USIC_CH_Enable+0x64>)
10001f62:	4293      	cmp	r3, r2
10001f64:	d104      	bne.n	10001f70 <XMC_USIC_CH_Enable+0x24>
  {
    XMC_USIC_Enable(XMC_USIC0);
10001f66:	4b13      	ldr	r3, [pc, #76]	; (10001fb4 <XMC_USIC_CH_Enable+0x68>)
10001f68:	1c18      	adds	r0, r3, #0
10001f6a:	f000 fa0f 	bl	1000238c <XMC_USIC_Enable>
10001f6e:	e00b      	b.n	10001f88 <XMC_USIC_CH_Enable+0x3c>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
10001f70:	687b      	ldr	r3, [r7, #4]
10001f72:	4a11      	ldr	r2, [pc, #68]	; (10001fb8 <XMC_USIC_CH_Enable+0x6c>)
10001f74:	4293      	cmp	r3, r2
10001f76:	d003      	beq.n	10001f80 <XMC_USIC_CH_Enable+0x34>
10001f78:	687b      	ldr	r3, [r7, #4]
10001f7a:	4a10      	ldr	r2, [pc, #64]	; (10001fbc <XMC_USIC_CH_Enable+0x70>)
10001f7c:	4293      	cmp	r3, r2
10001f7e:	d103      	bne.n	10001f88 <XMC_USIC_CH_Enable+0x3c>
  {
    XMC_USIC_Enable(XMC_USIC1);
10001f80:	4b0f      	ldr	r3, [pc, #60]	; (10001fc0 <XMC_USIC_CH_Enable+0x74>)
10001f82:	1c18      	adds	r0, r3, #0
10001f84:	f000 fa02 	bl	1000238c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10001f88:	687b      	ldr	r3, [r7, #4]
10001f8a:	2203      	movs	r2, #3
10001f8c:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10001f8e:	46c0      	nop			; (mov r8, r8)
10001f90:	687b      	ldr	r3, [r7, #4]
10001f92:	68db      	ldr	r3, [r3, #12]
10001f94:	2201      	movs	r2, #1
10001f96:	4013      	ands	r3, r2
10001f98:	d0fa      	beq.n	10001f90 <XMC_USIC_CH_Enable+0x44>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10001f9a:	687b      	ldr	r3, [r7, #4]
10001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001f9e:	220f      	movs	r2, #15
10001fa0:	4393      	bics	r3, r2
10001fa2:	1c1a      	adds	r2, r3, #0
10001fa4:	687b      	ldr	r3, [r7, #4]
10001fa6:	641a      	str	r2, [r3, #64]	; 0x40
}
10001fa8:	46bd      	mov	sp, r7
10001faa:	b002      	add	sp, #8
10001fac:	bd80      	pop	{r7, pc}
10001fae:	46c0      	nop			; (mov r8, r8)
10001fb0:	48000200 	.word	0x48000200
10001fb4:	48000008 	.word	0x48000008
10001fb8:	48004000 	.word	0x48004000
10001fbc:	48004200 	.word	0x48004200
10001fc0:	48004008 	.word	0x48004008

10001fc4 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10001fc4:	b580      	push	{r7, lr}
10001fc6:	b08e      	sub	sp, #56	; 0x38
10001fc8:	af00      	add	r7, sp, #0
10001fca:	60f8      	str	r0, [r7, #12]
10001fcc:	60b9      	str	r1, [r7, #8]
10001fce:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10001fd0:	68bb      	ldr	r3, [r7, #8]
10001fd2:	2b63      	cmp	r3, #99	; 0x63
10001fd4:	d960      	bls.n	10002098 <XMC_USIC_CH_SetBaudrate+0xd4>
10001fd6:	687b      	ldr	r3, [r7, #4]
10001fd8:	2b00      	cmp	r3, #0
10001fda:	d05d      	beq.n	10002098 <XMC_USIC_CH_SetBaudrate+0xd4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10001fdc:	f7ff fb42 	bl	10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001fe0:	1c03      	adds	r3, r0, #0
10001fe2:	1c18      	adds	r0, r3, #0
10001fe4:	2164      	movs	r1, #100	; 0x64
10001fe6:	f7ff fe69 	bl	10001cbc <__aeabi_uidiv>
10001fea:	1c03      	adds	r3, r0, #0
10001fec:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
10001fee:	68bb      	ldr	r3, [r7, #8]
10001ff0:	1c18      	adds	r0, r3, #0
10001ff2:	2164      	movs	r1, #100	; 0x64
10001ff4:	f7ff fe62 	bl	10001cbc <__aeabi_uidiv>
10001ff8:	1c03      	adds	r3, r0, #0
10001ffa:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
10001ffc:	2380      	movs	r3, #128	; 0x80
10001ffe:	00db      	lsls	r3, r3, #3
10002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
10002002:	2301      	movs	r3, #1
10002004:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
10002006:	4b2a      	ldr	r3, [pc, #168]	; (100020b0 <XMC_USIC_CH_SetBaudrate+0xec>)
10002008:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
1000200a:	2380      	movs	r3, #128	; 0x80
1000200c:	00db      	lsls	r3, r3, #3
1000200e:	633b      	str	r3, [r7, #48]	; 0x30
10002010:	e025      	b.n	1000205e <XMC_USIC_CH_SetBaudrate+0x9a>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
10002012:	6a3b      	ldr	r3, [r7, #32]
10002014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10002016:	435a      	muls	r2, r3
10002018:	1c11      	adds	r1, r2, #0
1000201a:	68bb      	ldr	r3, [r7, #8]
1000201c:	687a      	ldr	r2, [r7, #4]
1000201e:	4353      	muls	r3, r2
10002020:	1c08      	adds	r0, r1, #0
10002022:	1c19      	adds	r1, r3, #0
10002024:	f7ff fe4a 	bl	10001cbc <__aeabi_uidiv>
10002028:	1c03      	adds	r3, r0, #0
1000202a:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
1000202c:	69fb      	ldr	r3, [r7, #28]
1000202e:	0a9b      	lsrs	r3, r3, #10
10002030:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
10002032:	69fb      	ldr	r3, [r7, #28]
10002034:	059b      	lsls	r3, r3, #22
10002036:	0d9b      	lsrs	r3, r3, #22
10002038:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
1000203a:	69ba      	ldr	r2, [r7, #24]
1000203c:	2380      	movs	r3, #128	; 0x80
1000203e:	00db      	lsls	r3, r3, #3
10002040:	429a      	cmp	r2, r3
10002042:	d809      	bhi.n	10002058 <XMC_USIC_CH_SetBaudrate+0x94>
10002044:	697a      	ldr	r2, [r7, #20]
10002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002048:	429a      	cmp	r2, r3
1000204a:	d205      	bcs.n	10002058 <XMC_USIC_CH_SetBaudrate+0x94>
      {
        pdiv_frac_min = pdiv_frac;
1000204c:	697b      	ldr	r3, [r7, #20]
1000204e:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10002050:	69bb      	ldr	r3, [r7, #24]
10002052:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
10002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002056:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
10002058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000205a:	3b01      	subs	r3, #1
1000205c:	633b      	str	r3, [r7, #48]	; 0x30
1000205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002060:	2b00      	cmp	r3, #0
10002062:	d1d6      	bne.n	10002012 <XMC_USIC_CH_SetBaudrate+0x4e>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
10002064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002066:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10002068:	2280      	movs	r2, #128	; 0x80
1000206a:	0212      	lsls	r2, r2, #8
1000206c:	431a      	orrs	r2, r3
1000206e:	68fb      	ldr	r3, [r7, #12]
10002070:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002072:	68fb      	ldr	r3, [r7, #12]
10002074:	695b      	ldr	r3, [r3, #20]
10002076:	4a0f      	ldr	r2, [pc, #60]	; (100020b4 <XMC_USIC_CH_SetBaudrate+0xf0>)
10002078:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000207a:	687b      	ldr	r3, [r7, #4]
1000207c:	3b01      	subs	r3, #1
1000207e:	029b      	lsls	r3, r3, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10002080:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002084:	3b01      	subs	r3, #1
10002086:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002088:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000208a:	68fb      	ldr	r3, [r7, #12]
1000208c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
1000208e:	2337      	movs	r3, #55	; 0x37
10002090:	18fb      	adds	r3, r7, r3
10002092:	2200      	movs	r2, #0
10002094:	701a      	strb	r2, [r3, #0]
10002096:	e003      	b.n	100020a0 <XMC_USIC_CH_SetBaudrate+0xdc>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10002098:	2337      	movs	r3, #55	; 0x37
1000209a:	18fb      	adds	r3, r7, r3
1000209c:	2201      	movs	r2, #1
1000209e:	701a      	strb	r2, [r3, #0]
  }

  return status;
100020a0:	2337      	movs	r3, #55	; 0x37
100020a2:	18fb      	adds	r3, r7, r3
100020a4:	781b      	ldrb	r3, [r3, #0]
}
100020a6:	1c18      	adds	r0, r3, #0
100020a8:	46bd      	mov	sp, r7
100020aa:	b00e      	add	sp, #56	; 0x38
100020ac:	bd80      	pop	{r7, pc}
100020ae:	46c0      	nop			; (mov r8, r8)
100020b0:	000003ff 	.word	0x000003ff
100020b4:	fc0080ef 	.word	0xfc0080ef

100020b8 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
100020b8:	b580      	push	{r7, lr}
100020ba:	b08c      	sub	sp, #48	; 0x30
100020bc:	af00      	add	r7, sp, #0
100020be:	60f8      	str	r0, [r7, #12]
100020c0:	60b9      	str	r1, [r7, #8]
100020c2:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
100020c4:	f7ff face 	bl	10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
100020c8:	1c03      	adds	r3, r0, #0
100020ca:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
100020cc:	68bb      	ldr	r3, [r7, #8]
100020ce:	687a      	ldr	r2, [r7, #4]
100020d0:	4353      	muls	r3, r2
100020d2:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
100020d4:	2301      	movs	r3, #1
100020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
100020d8:	6a3a      	ldr	r2, [r7, #32]
100020da:	69fb      	ldr	r3, [r7, #28]
100020dc:	429a      	cmp	r2, r3
100020de:	dd62      	ble.n	100021a6 <XMC_USIC_CH_SetBaudrateEx+0xee>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
100020e0:	6a38      	ldr	r0, [r7, #32]
100020e2:	69f9      	ldr	r1, [r7, #28]
100020e4:	f7ff fe12 	bl	10001d0c <__aeabi_idiv>
100020e8:	1c03      	adds	r3, r0, #0
100020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
100020ec:	e00f      	b.n	1000210e <XMC_USIC_CH_SetBaudrateEx+0x56>
    {
      pdiv++;
100020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100020f0:	3301      	adds	r3, #1
100020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
100020f4:	68bb      	ldr	r3, [r7, #8]
100020f6:	687a      	ldr	r2, [r7, #4]
100020f8:	4353      	muls	r3, r2
100020fa:	1c1a      	adds	r2, r3, #0
100020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100020fe:	4353      	muls	r3, r2
10002100:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10002102:	6a38      	ldr	r0, [r7, #32]
10002104:	69f9      	ldr	r1, [r7, #28]
10002106:	f7ff fe01 	bl	10001d0c <__aeabi_idiv>
1000210a:	1c03      	adds	r3, r0, #0
1000210c:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
1000210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002110:	4a2a      	ldr	r2, [pc, #168]	; (100021bc <XMC_USIC_CH_SetBaudrateEx+0x104>)
10002112:	4293      	cmp	r3, r2
10002114:	d8eb      	bhi.n	100020ee <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
10002116:	6a39      	ldr	r1, [r7, #32]
10002118:	687b      	ldr	r3, [r7, #4]
1000211a:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000211c:	4353      	muls	r3, r2
1000211e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002120:	4353      	muls	r3, r2
10002122:	1c08      	adds	r0, r1, #0
10002124:	1c19      	adds	r1, r3, #0
10002126:	f7ff fdc9 	bl	10001cbc <__aeabi_uidiv>
1000212a:	1c03      	adds	r3, r0, #0
1000212c:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
1000212e:	6a39      	ldr	r1, [r7, #32]
10002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002132:	3301      	adds	r3, #1
10002134:	687a      	ldr	r2, [r7, #4]
10002136:	4353      	muls	r3, r2
10002138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000213a:	4353      	muls	r3, r2
1000213c:	1c08      	adds	r0, r1, #0
1000213e:	1c19      	adds	r1, r3, #0
10002140:	f7ff fdbc 	bl	10001cbc <__aeabi_uidiv>
10002144:	1c03      	adds	r3, r0, #0
10002146:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
10002148:	68ba      	ldr	r2, [r7, #8]
1000214a:	697b      	ldr	r3, [r7, #20]
1000214c:	1ad3      	subs	r3, r2, r3
1000214e:	17d9      	asrs	r1, r3, #31
10002150:	185a      	adds	r2, r3, r1
10002152:	404a      	eors	r2, r1
10002154:	68b9      	ldr	r1, [r7, #8]
10002156:	69bb      	ldr	r3, [r7, #24]
10002158:	1acb      	subs	r3, r1, r3
1000215a:	17d9      	asrs	r1, r3, #31
1000215c:	185b      	adds	r3, r3, r1
1000215e:	404b      	eors	r3, r1
10002160:	429a      	cmp	r2, r3
10002162:	da02      	bge.n	1000216a <XMC_USIC_CH_SetBaudrateEx+0xb2>
    {
      divider_step += 1;
10002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002166:	3301      	adds	r3, #1
10002168:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
1000216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000216c:	2280      	movs	r2, #128	; 0x80
1000216e:	00d2      	lsls	r2, r2, #3
10002170:	1ad3      	subs	r3, r2, r3
10002172:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
10002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002176:	2280      	movs	r2, #128	; 0x80
10002178:	01d2      	lsls	r2, r2, #7
1000217a:	431a      	orrs	r2, r3
1000217c:	68fb      	ldr	r3, [r7, #12]
1000217e:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002180:	68fb      	ldr	r3, [r7, #12]
10002182:	695b      	ldr	r3, [r3, #20]
10002184:	4a0e      	ldr	r2, [pc, #56]	; (100021c0 <XMC_USIC_CH_SetBaudrateEx+0x108>)
10002186:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002188:	687b      	ldr	r3, [r7, #4]
1000218a:	3b01      	subs	r3, #1
1000218c:	029b      	lsls	r3, r3, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
1000218e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
10002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002192:	3b01      	subs	r3, #1
10002194:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002196:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002198:	68fb      	ldr	r3, [r7, #12]
1000219a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
1000219c:	2327      	movs	r3, #39	; 0x27
1000219e:	18fb      	adds	r3, r7, r3
100021a0:	2200      	movs	r2, #0
100021a2:	701a      	strb	r2, [r3, #0]
100021a4:	e003      	b.n	100021ae <XMC_USIC_CH_SetBaudrateEx+0xf6>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
100021a6:	2327      	movs	r3, #39	; 0x27
100021a8:	18fb      	adds	r3, r7, r3
100021aa:	2201      	movs	r2, #1
100021ac:	701a      	strb	r2, [r3, #0]
  }

  return status;
100021ae:	2327      	movs	r3, #39	; 0x27
100021b0:	18fb      	adds	r3, r7, r3
100021b2:	781b      	ldrb	r3, [r3, #0]
}
100021b4:	1c18      	adds	r0, r3, #0
100021b6:	46bd      	mov	sp, r7
100021b8:	b00c      	add	sp, #48	; 0x30
100021ba:	bd80      	pop	{r7, pc}
100021bc:	000003fe 	.word	0x000003fe
100021c0:	fc0080ef 	.word	0xfc0080ef

100021c4 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
100021c4:	b580      	push	{r7, lr}
100021c6:	b084      	sub	sp, #16
100021c8:	af00      	add	r7, sp, #0
100021ca:	60f8      	str	r0, [r7, #12]
100021cc:	60b9      	str	r1, [r7, #8]
100021ce:	603b      	str	r3, [r7, #0]
100021d0:	1dfb      	adds	r3, r7, #7
100021d2:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
100021d4:	68fa      	ldr	r2, [r7, #12]
100021d6:	2384      	movs	r3, #132	; 0x84
100021d8:	005b      	lsls	r3, r3, #1
100021da:	58d3      	ldr	r3, [r2, r3]
100021dc:	4a0e      	ldr	r2, [pc, #56]	; (10002218 <XMC_USIC_CH_TXFIFO_Configure+0x54>)
100021de:	4013      	ands	r3, r2
100021e0:	1c19      	adds	r1, r3, #0
100021e2:	68fa      	ldr	r2, [r7, #12]
100021e4:	2384      	movs	r3, #132	; 0x84
100021e6:	005b      	lsls	r3, r3, #1
100021e8:	50d1      	str	r1, [r2, r3]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
100021ea:	68fa      	ldr	r2, [r7, #12]
100021ec:	2384      	movs	r3, #132	; 0x84
100021ee:	005b      	lsls	r3, r3, #1
100021f0:	58d3      	ldr	r3, [r2, r3]
100021f2:	4a0a      	ldr	r2, [pc, #40]	; (1000221c <XMC_USIC_CH_TXFIFO_Configure+0x58>)
100021f4:	401a      	ands	r2, r3
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
100021f6:	683b      	ldr	r3, [r7, #0]
100021f8:	0219      	lsls	r1, r3, #8
100021fa:	68bb      	ldr	r3, [r7, #8]
100021fc:	4319      	orrs	r1, r3
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
100021fe:	1dfb      	adds	r3, r7, #7
10002200:	781b      	ldrb	r3, [r3, #0]
10002202:	061b      	lsls	r3, r3, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
10002204:	430b      	orrs	r3, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
10002206:	431a      	orrs	r2, r3
10002208:	1c11      	adds	r1, r2, #0
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
1000220a:	68fa      	ldr	r2, [r7, #12]
1000220c:	2384      	movs	r3, #132	; 0x84
1000220e:	005b      	lsls	r3, r3, #1
10002210:	50d1      	str	r1, [r2, r3]
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
10002212:	46bd      	mov	sp, r7
10002214:	b004      	add	sp, #16
10002216:	bd80      	pop	{r7, pc}
10002218:	f8ffffff 	.word	0xf8ffffff
1000221c:	f8ffc0c0 	.word	0xf8ffc0c0

10002220 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10002220:	b580      	push	{r7, lr}
10002222:	b084      	sub	sp, #16
10002224:	af00      	add	r7, sp, #0
10002226:	60f8      	str	r0, [r7, #12]
10002228:	60b9      	str	r1, [r7, #8]
1000222a:	603b      	str	r3, [r7, #0]
1000222c:	1dfb      	adds	r3, r7, #7
1000222e:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10002230:	68fa      	ldr	r2, [r7, #12]
10002232:	2386      	movs	r3, #134	; 0x86
10002234:	005b      	lsls	r3, r3, #1
10002236:	58d3      	ldr	r3, [r2, r3]
10002238:	4a10      	ldr	r2, [pc, #64]	; (1000227c <XMC_USIC_CH_RXFIFO_Configure+0x5c>)
1000223a:	4013      	ands	r3, r2
1000223c:	1c19      	adds	r1, r3, #0
1000223e:	68fa      	ldr	r2, [r7, #12]
10002240:	2386      	movs	r3, #134	; 0x86
10002242:	005b      	lsls	r3, r3, #1
10002244:	50d1      	str	r1, [r2, r3]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10002246:	68fa      	ldr	r2, [r7, #12]
10002248:	2386      	movs	r3, #134	; 0x86
1000224a:	005b      	lsls	r3, r3, #1
1000224c:	58d3      	ldr	r3, [r2, r3]
1000224e:	4a0c      	ldr	r2, [pc, #48]	; (10002280 <XMC_USIC_CH_RXFIFO_Configure+0x60>)
10002250:	401a      	ands	r2, r3
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
10002252:	683b      	ldr	r3, [r7, #0]
10002254:	0219      	lsls	r1, r3, #8
10002256:	68bb      	ldr	r3, [r7, #8]
10002258:	4319      	orrs	r1, r3
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
1000225a:	1dfb      	adds	r3, r7, #7
1000225c:	781b      	ldrb	r3, [r3, #0]
1000225e:	061b      	lsls	r3, r3, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
10002260:	430b      	orrs	r3, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10002262:	4313      	orrs	r3, r2
10002264:	2280      	movs	r2, #128	; 0x80
10002266:	0552      	lsls	r2, r2, #21
10002268:	431a      	orrs	r2, r3
1000226a:	1c11      	adds	r1, r2, #0
1000226c:	68fa      	ldr	r2, [r7, #12]
1000226e:	2386      	movs	r3, #134	; 0x86
10002270:	005b      	lsls	r3, r3, #1
10002272:	50d1      	str	r1, [r2, r3]
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10002274:	46bd      	mov	sp, r7
10002276:	b004      	add	sp, #16
10002278:	bd80      	pop	{r7, pc}
1000227a:	46c0      	nop			; (mov r8, r8)
1000227c:	f8ffffff 	.word	0xf8ffffff
10002280:	efffc0c0 	.word	0xefffc0c0

10002284 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
10002284:	b580      	push	{r7, lr}
10002286:	b084      	sub	sp, #16
10002288:	af00      	add	r7, sp, #0
1000228a:	60f8      	str	r0, [r7, #12]
1000228c:	607a      	str	r2, [r7, #4]
1000228e:	230b      	movs	r3, #11
10002290:	18fb      	adds	r3, r7, r3
10002292:	1c0a      	adds	r2, r1, #0
10002294:	701a      	strb	r2, [r3, #0]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002296:	68fa      	ldr	r2, [r7, #12]
10002298:	2386      	movs	r3, #134	; 0x86
1000229a:	005b      	lsls	r3, r3, #1
1000229c:	58d3      	ldr	r3, [r2, r3]
1000229e:	4a06      	ldr	r2, [pc, #24]	; (100022b8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x34>)
100022a0:	401a      	ands	r2, r3
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
100022a2:	687b      	ldr	r3, [r7, #4]
100022a4:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
100022a6:	431a      	orrs	r2, r3
100022a8:	1c11      	adds	r1, r2, #0
100022aa:	68fa      	ldr	r2, [r7, #12]
100022ac:	2386      	movs	r3, #134	; 0x86
100022ae:	005b      	lsls	r3, r3, #1
100022b0:	50d1      	str	r1, [r2, r3]
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
100022b2:	46bd      	mov	sp, r7
100022b4:	b004      	add	sp, #16
100022b6:	bd80      	pop	{r7, pc}
100022b8:	ffffc0ff 	.word	0xffffc0ff

100022bc <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
100022bc:	b580      	push	{r7, lr}
100022be:	b084      	sub	sp, #16
100022c0:	af00      	add	r7, sp, #0
100022c2:	60f8      	str	r0, [r7, #12]
100022c4:	607a      	str	r2, [r7, #4]
100022c6:	230b      	movs	r3, #11
100022c8:	18fb      	adds	r3, r7, r3
100022ca:	1c0a      	adds	r2, r1, #0
100022cc:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100022ce:	68fb      	ldr	r3, [r7, #12]
100022d0:	699b      	ldr	r3, [r3, #24]
100022d2:	220b      	movs	r2, #11
100022d4:	18ba      	adds	r2, r7, r2
100022d6:	7812      	ldrb	r2, [r2, #0]
100022d8:	2107      	movs	r1, #7
100022da:	4091      	lsls	r1, r2
100022dc:	1c0a      	adds	r2, r1, #0
100022de:	43d2      	mvns	r2, r2
100022e0:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
100022e2:	230b      	movs	r3, #11
100022e4:	18fb      	adds	r3, r7, r3
100022e6:	781b      	ldrb	r3, [r3, #0]
100022e8:	6879      	ldr	r1, [r7, #4]
100022ea:	4099      	lsls	r1, r3
100022ec:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100022ee:	431a      	orrs	r2, r3
100022f0:	68fb      	ldr	r3, [r7, #12]
100022f2:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
100022f4:	46bd      	mov	sp, r7
100022f6:	b004      	add	sp, #16
100022f8:	bd80      	pop	{r7, pc}
100022fa:	46c0      	nop			; (mov r8, r8)

100022fc <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
100022fc:	b580      	push	{r7, lr}
100022fe:	b084      	sub	sp, #16
10002300:	af00      	add	r7, sp, #0
10002302:	60f8      	str	r0, [r7, #12]
10002304:	607a      	str	r2, [r7, #4]
10002306:	230b      	movs	r3, #11
10002308:	18fb      	adds	r3, r7, r3
1000230a:	1c0a      	adds	r2, r1, #0
1000230c:	701a      	strb	r2, [r3, #0]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000230e:	68fa      	ldr	r2, [r7, #12]
10002310:	2384      	movs	r3, #132	; 0x84
10002312:	005b      	lsls	r3, r3, #1
10002314:	58d3      	ldr	r3, [r2, r3]
10002316:	220b      	movs	r2, #11
10002318:	18ba      	adds	r2, r7, r2
1000231a:	7812      	ldrb	r2, [r2, #0]
1000231c:	2107      	movs	r1, #7
1000231e:	4091      	lsls	r1, r2
10002320:	1c0a      	adds	r2, r1, #0
10002322:	43d2      	mvns	r2, r2
10002324:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
10002326:	230b      	movs	r3, #11
10002328:	18fb      	adds	r3, r7, r3
1000232a:	781b      	ldrb	r3, [r3, #0]
1000232c:	6879      	ldr	r1, [r7, #4]
1000232e:	4099      	lsls	r1, r3
10002330:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10002332:	431a      	orrs	r2, r3
10002334:	1c11      	adds	r1, r2, #0
10002336:	68fa      	ldr	r2, [r7, #12]
10002338:	2384      	movs	r3, #132	; 0x84
1000233a:	005b      	lsls	r3, r3, #1
1000233c:	50d1      	str	r1, [r2, r3]
                              (service_request << (uint32_t)interrupt_node));
}
1000233e:	46bd      	mov	sp, r7
10002340:	b004      	add	sp, #16
10002342:	bd80      	pop	{r7, pc}

10002344 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
10002344:	b580      	push	{r7, lr}
10002346:	b084      	sub	sp, #16
10002348:	af00      	add	r7, sp, #0
1000234a:	60f8      	str	r0, [r7, #12]
1000234c:	607a      	str	r2, [r7, #4]
1000234e:	230b      	movs	r3, #11
10002350:	18fb      	adds	r3, r7, r3
10002352:	1c0a      	adds	r2, r1, #0
10002354:	701a      	strb	r2, [r3, #0]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10002356:	68fa      	ldr	r2, [r7, #12]
10002358:	2386      	movs	r3, #134	; 0x86
1000235a:	005b      	lsls	r3, r3, #1
1000235c:	58d3      	ldr	r3, [r2, r3]
1000235e:	220b      	movs	r2, #11
10002360:	18ba      	adds	r2, r7, r2
10002362:	7812      	ldrb	r2, [r2, #0]
10002364:	2107      	movs	r1, #7
10002366:	4091      	lsls	r1, r2
10002368:	1c0a      	adds	r2, r1, #0
1000236a:	43d2      	mvns	r2, r2
1000236c:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
1000236e:	230b      	movs	r3, #11
10002370:	18fb      	adds	r3, r7, r3
10002372:	781b      	ldrb	r3, [r3, #0]
10002374:	6879      	ldr	r1, [r7, #4]
10002376:	4099      	lsls	r1, r3
10002378:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000237a:	431a      	orrs	r2, r3
1000237c:	1c11      	adds	r1, r2, #0
1000237e:	68fa      	ldr	r2, [r7, #12]
10002380:	2386      	movs	r3, #134	; 0x86
10002382:	005b      	lsls	r3, r3, #1
10002384:	50d1      	str	r1, [r2, r3]
                              (service_request << (uint32_t)interrupt_node));
}
10002386:	46bd      	mov	sp, r7
10002388:	b004      	add	sp, #16
1000238a:	bd80      	pop	{r7, pc}

1000238c <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
1000238c:	b580      	push	{r7, lr}
1000238e:	b082      	sub	sp, #8
10002390:	af00      	add	r7, sp, #0
10002392:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
10002394:	687b      	ldr	r3, [r7, #4]
10002396:	4a10      	ldr	r2, [pc, #64]	; (100023d8 <XMC_USIC_Enable+0x4c>)
10002398:	4293      	cmp	r3, r2
1000239a:	d109      	bne.n	100023b0 <XMC_USIC_Enable+0x24>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
1000239c:	2008      	movs	r0, #8
1000239e:	f7ff f87f 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
100023a2:	46c0      	nop			; (mov r8, r8)
100023a4:	2008      	movs	r0, #8
100023a6:	f7ff f895 	bl	100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
100023aa:	1e03      	subs	r3, r0, #0
100023ac:	d1fa      	bne.n	100023a4 <XMC_USIC_Enable+0x18>
100023ae:	e010      	b.n	100023d2 <XMC_USIC_Enable+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
100023b0:	687b      	ldr	r3, [r7, #4]
100023b2:	4a0a      	ldr	r2, [pc, #40]	; (100023dc <XMC_USIC_Enable+0x50>)
100023b4:	4293      	cmp	r3, r2
100023b6:	d10c      	bne.n	100023d2 <XMC_USIC_Enable+0x46>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
100023b8:	2380      	movs	r3, #128	; 0x80
100023ba:	02db      	lsls	r3, r3, #11
100023bc:	1c18      	adds	r0, r3, #0
100023be:	f7ff f86f 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
100023c2:	46c0      	nop			; (mov r8, r8)
100023c4:	2380      	movs	r3, #128	; 0x80
100023c6:	02db      	lsls	r3, r3, #11
100023c8:	1c18      	adds	r0, r3, #0
100023ca:	f7ff f883 	bl	100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
100023ce:	1e03      	subs	r3, r0, #0
100023d0:	d1f8      	bne.n	100023c4 <XMC_USIC_Enable+0x38>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
100023d2:	46bd      	mov	sp, r7
100023d4:	b002      	add	sp, #8
100023d6:	bd80      	pop	{r7, pc}
100023d8:	48000008 	.word	0x48000008
100023dc:	48004008 	.word	0x48004008

100023e0 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
100023e0:	b580      	push	{r7, lr}
100023e2:	b084      	sub	sp, #16
100023e4:	af00      	add	r7, sp, #0
100023e6:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
100023e8:	4b14      	ldr	r3, [pc, #80]	; (1000243c <_sbrk+0x5c>)
100023ea:	681b      	ldr	r3, [r3, #0]
100023ec:	2b00      	cmp	r3, #0
100023ee:	d102      	bne.n	100023f6 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
100023f0:	4b12      	ldr	r3, [pc, #72]	; (1000243c <_sbrk+0x5c>)
100023f2:	4a13      	ldr	r2, [pc, #76]	; (10002440 <_sbrk+0x60>)
100023f4:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
100023f6:	4b11      	ldr	r3, [pc, #68]	; (1000243c <_sbrk+0x5c>)
100023f8:	681b      	ldr	r3, [r3, #0]
100023fa:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
100023fc:	687b      	ldr	r3, [r7, #4]
100023fe:	3303      	adds	r3, #3
10002400:	2203      	movs	r2, #3
10002402:	4393      	bics	r3, r2
10002404:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
10002406:	4b0d      	ldr	r3, [pc, #52]	; (1000243c <_sbrk+0x5c>)
10002408:	681a      	ldr	r2, [r3, #0]
1000240a:	687b      	ldr	r3, [r7, #4]
1000240c:	18d2      	adds	r2, r2, r3
1000240e:	4b0d      	ldr	r3, [pc, #52]	; (10002444 <_sbrk+0x64>)
10002410:	429a      	cmp	r2, r3
10002412:	d207      	bcs.n	10002424 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
10002414:	4b09      	ldr	r3, [pc, #36]	; (1000243c <_sbrk+0x5c>)
10002416:	681a      	ldr	r2, [r3, #0]
10002418:	687b      	ldr	r3, [r7, #4]
1000241a:	18d2      	adds	r2, r2, r3
1000241c:	4b07      	ldr	r3, [pc, #28]	; (1000243c <_sbrk+0x5c>)
1000241e:	601a      	str	r2, [r3, #0]
    return (base);
10002420:	68fb      	ldr	r3, [r7, #12]
10002422:	e006      	b.n	10002432 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
10002424:	f002 fd58 	bl	10004ed8 <__errno>
10002428:	1c03      	adds	r3, r0, #0
1000242a:	220c      	movs	r2, #12
1000242c:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
1000242e:	2301      	movs	r3, #1
10002430:	425b      	negs	r3, r3
  }
}
10002432:	1c18      	adds	r0, r3, #0
10002434:	46bd      	mov	sp, r7
10002436:	b004      	add	sp, #16
10002438:	bd80      	pop	{r7, pc}
1000243a:	46c0      	nop			; (mov r8, r8)
1000243c:	2000068c 	.word	0x2000068c
10002440:	200007b0 	.word	0x200007b0
10002444:	20003ffc 	.word	0x20003ffc

10002448 <_init>:

/* Init */
void _init(void)
{}
10002448:	b580      	push	{r7, lr}
1000244a:	af00      	add	r7, sp, #0
1000244c:	46bd      	mov	sp, r7
1000244e:	bd80      	pop	{r7, pc}

10002450 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t transmit_control_information)
{
10002450:	b580      	push	{r7, lr}
10002452:	b084      	sub	sp, #16
10002454:	af00      	add	r7, sp, #0
10002456:	60f8      	str	r0, [r7, #12]
10002458:	607a      	str	r2, [r7, #4]
1000245a:	230a      	movs	r3, #10
1000245c:	18fb      	adds	r3, r7, r3
1000245e:	1c0a      	adds	r2, r1, #0
10002460:	801a      	strh	r2, [r3, #0]
  channel->TBUF[transmit_control_information] = data;
10002462:	230a      	movs	r3, #10
10002464:	18fb      	adds	r3, r7, r3
10002466:	8819      	ldrh	r1, [r3, #0]
10002468:	68fb      	ldr	r3, [r7, #12]
1000246a:	687a      	ldr	r2, [r7, #4]
1000246c:	3220      	adds	r2, #32
1000246e:	0092      	lsls	r2, r2, #2
10002470:	50d1      	str	r1, [r2, r3]
}
10002472:	46bd      	mov	sp, r7
10002474:	b004      	add	sp, #16
10002476:	bd80      	pop	{r7, pc}

10002478 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002478:	b580      	push	{r7, lr}
1000247a:	b082      	sub	sp, #8
1000247c:	af00      	add	r7, sp, #0
1000247e:	6078      	str	r0, [r7, #4]
10002480:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
10002482:	687b      	ldr	r3, [r7, #4]
10002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002486:	683a      	ldr	r2, [r7, #0]
10002488:	43d2      	mvns	r2, r2
1000248a:	401a      	ands	r2, r3
1000248c:	687b      	ldr	r3, [r7, #4]
1000248e:	641a      	str	r2, [r3, #64]	; 0x40
}
10002490:	46bd      	mov	sp, r7
10002492:	b002      	add	sp, #8
10002494:	bd80      	pop	{r7, pc}
10002496:	46c0      	nop			; (mov r8, r8)

10002498 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10002498:	b580      	push	{r7, lr}
1000249a:	b082      	sub	sp, #8
1000249c:	af00      	add	r7, sp, #0
1000249e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100024a0:	687b      	ldr	r3, [r7, #4]
100024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100024a4:	b2db      	uxtb	r3, r3
100024a6:	227f      	movs	r2, #127	; 0x7f
100024a8:	4393      	bics	r3, r2
100024aa:	b2db      	uxtb	r3, r3
}
100024ac:	1c18      	adds	r0, r3, #0
100024ae:	46bd      	mov	sp, r7
100024b0:	b002      	add	sp, #8
100024b2:	bd80      	pop	{r7, pc}

100024b4 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
100024b4:	b580      	push	{r7, lr}
100024b6:	b082      	sub	sp, #8
100024b8:	af00      	add	r7, sp, #0
100024ba:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
100024bc:	687b      	ldr	r3, [r7, #4]
100024be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
100024c0:	23c0      	movs	r3, #192	; 0xc0
100024c2:	01db      	lsls	r3, r3, #7
100024c4:	4013      	ands	r3, r2
}
100024c6:	1c18      	adds	r0, r3, #0
100024c8:	46bd      	mov	sp, r7
100024ca:	b002      	add	sp, #8
100024cc:	bd80      	pop	{r7, pc}
100024ce:	46c0      	nop			; (mov r8, r8)

100024d0 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100024d0:	b580      	push	{r7, lr}
100024d2:	b082      	sub	sp, #8
100024d4:	af00      	add	r7, sp, #0
100024d6:	6078      	str	r0, [r7, #4]
100024d8:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
100024da:	687a      	ldr	r2, [r7, #4]
100024dc:	2384      	movs	r3, #132	; 0x84
100024de:	005b      	lsls	r3, r3, #1
100024e0:	58d3      	ldr	r3, [r2, r3]
100024e2:	683a      	ldr	r2, [r7, #0]
100024e4:	43d2      	mvns	r2, r2
100024e6:	401a      	ands	r2, r3
100024e8:	1c11      	adds	r1, r2, #0
100024ea:	687a      	ldr	r2, [r7, #4]
100024ec:	2384      	movs	r3, #132	; 0x84
100024ee:	005b      	lsls	r3, r3, #1
100024f0:	50d1      	str	r1, [r2, r3]
}
100024f2:	46bd      	mov	sp, r7
100024f4:	b002      	add	sp, #8
100024f6:	bd80      	pop	{r7, pc}

100024f8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t frame_length)
{
100024f8:	b580      	push	{r7, lr}
100024fa:	b084      	sub	sp, #16
100024fc:	af00      	add	r7, sp, #0
100024fe:	60f8      	str	r0, [r7, #12]
10002500:	607a      	str	r2, [r7, #4]
10002502:	230a      	movs	r3, #10
10002504:	18fb      	adds	r3, r7, r3
10002506:	1c0a      	adds	r2, r1, #0
10002508:	801a      	strh	r2, [r3, #0]
  channel->IN[frame_length] = data;
1000250a:	230a      	movs	r3, #10
1000250c:	18fb      	adds	r3, r7, r3
1000250e:	8819      	ldrh	r1, [r3, #0]
10002510:	68fb      	ldr	r3, [r7, #12]
10002512:	687a      	ldr	r2, [r7, #4]
10002514:	3260      	adds	r2, #96	; 0x60
10002516:	0092      	lsls	r2, r2, #2
10002518:	50d1      	str	r1, [r2, r3]
}
1000251a:	46bd      	mov	sp, r7
1000251c:	b004      	add	sp, #16
1000251e:	bd80      	pop	{r7, pc}

10002520 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10002520:	b580      	push	{r7, lr}
10002522:	b082      	sub	sp, #8
10002524:	af00      	add	r7, sp, #0
10002526:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10002528:	687a      	ldr	r2, [r7, #4]
1000252a:	238a      	movs	r3, #138	; 0x8a
1000252c:	005b      	lsls	r3, r3, #1
1000252e:	58d2      	ldr	r2, [r2, r3]
10002530:	2380      	movs	r3, #128	; 0x80
10002532:	015b      	lsls	r3, r3, #5
10002534:	4013      	ands	r3, r2
10002536:	1e5a      	subs	r2, r3, #1
10002538:	4193      	sbcs	r3, r2
1000253a:	b2db      	uxtb	r3, r3
}
1000253c:	1c18      	adds	r0, r3, #0
1000253e:	46bd      	mov	sp, r7
10002540:	b002      	add	sp, #8
10002542:	bd80      	pop	{r7, pc}

10002544 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10002544:	b580      	push	{r7, lr}
10002546:	b082      	sub	sp, #8
10002548:	af00      	add	r7, sp, #0
1000254a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1000254c:	687a      	ldr	r2, [r7, #4]
1000254e:	238a      	movs	r3, #138	; 0x8a
10002550:	005b      	lsls	r3, r3, #1
10002552:	58d2      	ldr	r2, [r2, r3]
10002554:	2380      	movs	r3, #128	; 0x80
10002556:	011b      	lsls	r3, r3, #4
10002558:	4013      	ands	r3, r2
1000255a:	1e5a      	subs	r2, r3, #1
1000255c:	4193      	sbcs	r3, r2
1000255e:	b2db      	uxtb	r3, r3
}
10002560:	1c18      	adds	r0, r3, #0
10002562:	46bd      	mov	sp, r7
10002564:	b002      	add	sp, #8
10002566:	bd80      	pop	{r7, pc}

10002568 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002568:	b580      	push	{r7, lr}
1000256a:	b082      	sub	sp, #8
1000256c:	af00      	add	r7, sp, #0
1000256e:	6078      	str	r0, [r7, #4]
10002570:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
10002572:	687a      	ldr	r2, [r7, #4]
10002574:	2386      	movs	r3, #134	; 0x86
10002576:	005b      	lsls	r3, r3, #1
10002578:	58d3      	ldr	r3, [r2, r3]
1000257a:	683a      	ldr	r2, [r7, #0]
1000257c:	43d2      	mvns	r2, r2
1000257e:	401a      	ands	r2, r3
10002580:	1c11      	adds	r1, r2, #0
10002582:	687a      	ldr	r2, [r7, #4]
10002584:	2386      	movs	r3, #134	; 0x86
10002586:	005b      	lsls	r3, r3, #1
10002588:	50d1      	str	r1, [r2, r3]
}
1000258a:	46bd      	mov	sp, r7
1000258c:	b002      	add	sp, #8
1000258e:	bd80      	pop	{r7, pc}

10002590 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10002590:	b580      	push	{r7, lr}
10002592:	b082      	sub	sp, #8
10002594:	af00      	add	r7, sp, #0
10002596:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
10002598:	687a      	ldr	r2, [r7, #4]
1000259a:	238a      	movs	r3, #138	; 0x8a
1000259c:	005b      	lsls	r3, r3, #1
1000259e:	58d3      	ldr	r3, [r2, r3]
100025a0:	2208      	movs	r2, #8
100025a2:	4013      	ands	r3, r2
100025a4:	1e5a      	subs	r2, r3, #1
100025a6:	4193      	sbcs	r3, r2
100025a8:	b2db      	uxtb	r3, r3
}
100025aa:	1c18      	adds	r0, r3, #0
100025ac:	46bd      	mov	sp, r7
100025ae:	b002      	add	sp, #8
100025b0:	bd80      	pop	{r7, pc}
100025b2:	46c0      	nop			; (mov r8, r8)

100025b4 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
100025b4:	b590      	push	{r4, r7, lr}
100025b6:	b085      	sub	sp, #20
100025b8:	af00      	add	r7, sp, #0
100025ba:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
100025bc:	687b      	ldr	r3, [r7, #4]
100025be:	685b      	ldr	r3, [r3, #4]
100025c0:	685b      	ldr	r3, [r3, #4]
100025c2:	220f      	movs	r2, #15
100025c4:	18bc      	adds	r4, r7, r2
100025c6:	4798      	blx	r3
100025c8:	1c03      	adds	r3, r0, #0
100025ca:	7023      	strb	r3, [r4, #0]

  return status;
100025cc:	230f      	movs	r3, #15
100025ce:	18fb      	adds	r3, r7, r3
100025d0:	781b      	ldrb	r3, [r3, #0]
}
100025d2:	1c18      	adds	r0, r3, #0
100025d4:	46bd      	mov	sp, r7
100025d6:	b005      	add	sp, #20
100025d8:	bd90      	pop	{r4, r7, pc}
100025da:	46c0      	nop			; (mov r8, r8)

100025dc <SPI_MASTER_lTransmitHandler>:
 * Transmit interrupt handler for the APP.
 * This is a common interrupt handling function called for different instances of the APP.
 *
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
100025dc:	b590      	push	{r4, r7, lr}
100025de:	b087      	sub	sp, #28
100025e0:	af00      	add	r7, sp, #0
100025e2:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
100025e4:	2301      	movs	r3, #1
100025e6:	613b      	str	r3, [r7, #16]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
100025e8:	687b      	ldr	r3, [r7, #4]
100025ea:	689b      	ldr	r3, [r3, #8]
100025ec:	60fb      	str	r3, [r7, #12]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
100025ee:	687b      	ldr	r3, [r7, #4]
100025f0:	689b      	ldr	r3, [r3, #8]
100025f2:	681b      	ldr	r3, [r3, #0]
100025f4:	2b08      	cmp	r3, #8
100025f6:	d901      	bls.n	100025fc <SPI_MASTER_lTransmitHandler+0x20>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
100025f8:	2302      	movs	r3, #2
100025fa:	613b      	str	r3, [r7, #16]
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
100025fc:	68fb      	ldr	r3, [r7, #12]
100025fe:	689a      	ldr	r2, [r3, #8]
10002600:	68fb      	ldr	r3, [r7, #12]
10002602:	685b      	ldr	r3, [r3, #4]
10002604:	429a      	cmp	r2, r3
10002606:	d300      	bcc.n	1000260a <SPI_MASTER_lTransmitHandler+0x2e>
10002608:	e09b      	b.n	10002742 <SPI_MASTER_lTransmitHandler+0x166>
  {
    data = 0U;
1000260a:	2316      	movs	r3, #22
1000260c:	18fb      	adds	r3, r7, r3
1000260e:	2200      	movs	r2, #0
10002610:	801a      	strh	r2, [r3, #0]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
10002612:	687b      	ldr	r3, [r7, #4]
10002614:	685b      	ldr	r3, [r3, #4]
10002616:	227c      	movs	r2, #124	; 0x7c
10002618:	5c9b      	ldrb	r3, [r3, r2]
1000261a:	2b00      	cmp	r3, #0
1000261c:	d053      	beq.n	100026c6 <SPI_MASTER_lTransmitHandler+0xea>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
1000261e:	e045      	b.n	100026ac <SPI_MASTER_lTransmitHandler+0xd0>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
10002620:	68fb      	ldr	r3, [r7, #12]
10002622:	689a      	ldr	r2, [r3, #8]
10002624:	68fb      	ldr	r3, [r7, #12]
10002626:	685b      	ldr	r3, [r3, #4]
10002628:	429a      	cmp	r2, r3
1000262a:	d23d      	bcs.n	100026a8 <SPI_MASTER_lTransmitHandler+0xcc>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
1000262c:	68fb      	ldr	r3, [r7, #12]
1000262e:	2221      	movs	r2, #33	; 0x21
10002630:	5c9b      	ldrb	r3, [r3, r2]
10002632:	b2db      	uxtb	r3, r3
10002634:	2b00      	cmp	r3, #0
10002636:	d00c      	beq.n	10002652 <SPI_MASTER_lTransmitHandler+0x76>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
10002638:	687b      	ldr	r3, [r7, #4]
1000263a:	681a      	ldr	r2, [r3, #0]
1000263c:	68fb      	ldr	r3, [r7, #12]
1000263e:	7f1b      	ldrb	r3, [r3, #28]
10002640:	b2db      	uxtb	r3, r3
10002642:	1c1c      	adds	r4, r3, #0
10002644:	4b60      	ldr	r3, [pc, #384]	; (100027c8 <SPI_MASTER_lTransmitHandler+0x1ec>)
10002646:	1c10      	adds	r0, r2, #0
10002648:	1c19      	adds	r1, r3, #0
1000264a:	1c22      	adds	r2, r4, #0
1000264c:	f7ff ff54 	bl	100024f8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
10002650:	e023      	b.n	1000269a <SPI_MASTER_lTransmitHandler+0xbe>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
10002652:	693b      	ldr	r3, [r7, #16]
10002654:	2b02      	cmp	r3, #2
10002656:	d109      	bne.n	1000266c <SPI_MASTER_lTransmitHandler+0x90>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
10002658:	68fb      	ldr	r3, [r7, #12]
1000265a:	699a      	ldr	r2, [r3, #24]
1000265c:	68fb      	ldr	r3, [r7, #12]
1000265e:	689b      	ldr	r3, [r3, #8]
10002660:	18d2      	adds	r2, r2, r3
10002662:	2316      	movs	r3, #22
10002664:	18fb      	adds	r3, r7, r3
10002666:	8812      	ldrh	r2, [r2, #0]
10002668:	801a      	strh	r2, [r3, #0]
1000266a:	e008      	b.n	1000267e <SPI_MASTER_lTransmitHandler+0xa2>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
1000266c:	68fb      	ldr	r3, [r7, #12]
1000266e:	699a      	ldr	r2, [r3, #24]
10002670:	68fb      	ldr	r3, [r7, #12]
10002672:	689b      	ldr	r3, [r3, #8]
10002674:	18d3      	adds	r3, r2, r3
10002676:	781a      	ldrb	r2, [r3, #0]
10002678:	2316      	movs	r3, #22
1000267a:	18fb      	adds	r3, r7, r3
1000267c:	801a      	strh	r2, [r3, #0]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
1000267e:	687b      	ldr	r3, [r7, #4]
10002680:	681a      	ldr	r2, [r3, #0]
10002682:	68fb      	ldr	r3, [r7, #12]
10002684:	7f1b      	ldrb	r3, [r3, #28]
10002686:	b2db      	uxtb	r3, r3
10002688:	1c1c      	adds	r4, r3, #0
1000268a:	2316      	movs	r3, #22
1000268c:	18fb      	adds	r3, r7, r3
1000268e:	881b      	ldrh	r3, [r3, #0]
10002690:	1c10      	adds	r0, r2, #0
10002692:	1c19      	adds	r1, r3, #0
10002694:	1c22      	adds	r2, r4, #0
10002696:	f7ff ff2f 	bl	100024f8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
1000269a:	68fb      	ldr	r3, [r7, #12]
1000269c:	689a      	ldr	r2, [r3, #8]
1000269e:	693b      	ldr	r3, [r7, #16]
100026a0:	18d2      	adds	r2, r2, r3
100026a2:	68fb      	ldr	r3, [r7, #12]
100026a4:	609a      	str	r2, [r3, #8]
100026a6:	e001      	b.n	100026ac <SPI_MASTER_lTransmitHandler+0xd0>
        }
        else
        {
          break;
100026a8:	46c0      	nop			; (mov r8, r8)
100026aa:	e089      	b.n	100027c0 <SPI_MASTER_lTransmitHandler+0x1e4>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
100026ac:	687b      	ldr	r3, [r7, #4]
100026ae:	681b      	ldr	r3, [r3, #0]
100026b0:	1c18      	adds	r0, r3, #0
100026b2:	f7ff ff35 	bl	10002520 <XMC_USIC_CH_TXFIFO_IsFull>
100026b6:	1c03      	adds	r3, r0, #0
100026b8:	1c1a      	adds	r2, r3, #0
100026ba:	2301      	movs	r3, #1
100026bc:	4053      	eors	r3, r2
100026be:	b2db      	uxtb	r3, r3
100026c0:	2b00      	cmp	r3, #0
100026c2:	d1ad      	bne.n	10002620 <SPI_MASTER_lTransmitHandler+0x44>
100026c4:	e07c      	b.n	100027c0 <SPI_MASTER_lTransmitHandler+0x1e4>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
100026c6:	68fb      	ldr	r3, [r7, #12]
100026c8:	2221      	movs	r2, #33	; 0x21
100026ca:	5c9b      	ldrb	r3, [r3, r2]
100026cc:	b2db      	uxtb	r3, r3
100026ce:	2b00      	cmp	r3, #0
100026d0:	d00c      	beq.n	100026ec <SPI_MASTER_lTransmitHandler+0x110>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
100026d2:	687b      	ldr	r3, [r7, #4]
100026d4:	681a      	ldr	r2, [r3, #0]
100026d6:	68fb      	ldr	r3, [r7, #12]
100026d8:	7f1b      	ldrb	r3, [r3, #28]
100026da:	b2db      	uxtb	r3, r3
100026dc:	1c1c      	adds	r4, r3, #0
100026de:	4b3a      	ldr	r3, [pc, #232]	; (100027c8 <SPI_MASTER_lTransmitHandler+0x1ec>)
100026e0:	1c10      	adds	r0, r2, #0
100026e2:	1c19      	adds	r1, r3, #0
100026e4:	1c22      	adds	r2, r4, #0
100026e6:	f7ff feb3 	bl	10002450 <XMC_USIC_CH_WriteToTBUFTCI>
100026ea:	e023      	b.n	10002734 <SPI_MASTER_lTransmitHandler+0x158>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
100026ec:	693b      	ldr	r3, [r7, #16]
100026ee:	2b02      	cmp	r3, #2
100026f0:	d109      	bne.n	10002706 <SPI_MASTER_lTransmitHandler+0x12a>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
100026f2:	68fb      	ldr	r3, [r7, #12]
100026f4:	699a      	ldr	r2, [r3, #24]
100026f6:	68fb      	ldr	r3, [r7, #12]
100026f8:	689b      	ldr	r3, [r3, #8]
100026fa:	18d2      	adds	r2, r2, r3
100026fc:	2316      	movs	r3, #22
100026fe:	18fb      	adds	r3, r7, r3
10002700:	8812      	ldrh	r2, [r2, #0]
10002702:	801a      	strh	r2, [r3, #0]
10002704:	e008      	b.n	10002718 <SPI_MASTER_lTransmitHandler+0x13c>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
10002706:	68fb      	ldr	r3, [r7, #12]
10002708:	699a      	ldr	r2, [r3, #24]
1000270a:	68fb      	ldr	r3, [r7, #12]
1000270c:	689b      	ldr	r3, [r3, #8]
1000270e:	18d3      	adds	r3, r2, r3
10002710:	781a      	ldrb	r2, [r3, #0]
10002712:	2316      	movs	r3, #22
10002714:	18fb      	adds	r3, r7, r3
10002716:	801a      	strh	r2, [r3, #0]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
10002718:	687b      	ldr	r3, [r7, #4]
1000271a:	681a      	ldr	r2, [r3, #0]
1000271c:	68fb      	ldr	r3, [r7, #12]
1000271e:	7f1b      	ldrb	r3, [r3, #28]
10002720:	b2db      	uxtb	r3, r3
10002722:	1c1c      	adds	r4, r3, #0
10002724:	2316      	movs	r3, #22
10002726:	18fb      	adds	r3, r7, r3
10002728:	881b      	ldrh	r3, [r3, #0]
1000272a:	1c10      	adds	r0, r2, #0
1000272c:	1c19      	adds	r1, r3, #0
1000272e:	1c22      	adds	r2, r4, #0
10002730:	f7ff fe8e 	bl	10002450 <XMC_USIC_CH_WriteToTBUFTCI>
      }
      (runtime_handle->tx_data_index)+= bytes_per_word;
10002734:	68fb      	ldr	r3, [r7, #12]
10002736:	689a      	ldr	r2, [r3, #8]
10002738:	693b      	ldr	r3, [r7, #16]
1000273a:	18d2      	adds	r2, r2, r3
1000273c:	68fb      	ldr	r3, [r7, #12]
1000273e:	609a      	str	r2, [r3, #8]
10002740:	e03e      	b.n	100027c0 <SPI_MASTER_lTransmitHandler+0x1e4>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	681b      	ldr	r3, [r3, #0]
10002746:	1c18      	adds	r0, r3, #0
10002748:	f7ff fefc 	bl	10002544 <XMC_USIC_CH_TXFIFO_IsEmpty>
1000274c:	1e03      	subs	r3, r0, #0
1000274e:	d037      	beq.n	100027c0 <SPI_MASTER_lTransmitHandler+0x1e4>
    {
      /* Clear the flag */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
10002750:	687b      	ldr	r3, [r7, #4]
10002752:	685b      	ldr	r3, [r3, #4]
10002754:	227c      	movs	r2, #124	; 0x7c
10002756:	5c9b      	ldrb	r3, [r3, r2]
10002758:	2b00      	cmp	r3, #0
1000275a:	d008      	beq.n	1000276e <SPI_MASTER_lTransmitHandler+0x192>
      {
        /* Clear the transmit FIFO event */
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
1000275c:	687b      	ldr	r3, [r7, #4]
1000275e:	681a      	ldr	r2, [r3, #0]
10002760:	2380      	movs	r3, #128	; 0x80
10002762:	05db      	lsls	r3, r3, #23
10002764:	1c10      	adds	r0, r2, #0
10002766:	1c19      	adds	r1, r3, #0
10002768:	f7ff feb2 	bl	100024d0 <XMC_USIC_CH_TXFIFO_DisableEvent>
1000276c:	e007      	b.n	1000277e <SPI_MASTER_lTransmitHandler+0x1a2>
      }
      else
      {
        /* Clear the standard transmit event */
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
1000276e:	687b      	ldr	r3, [r7, #4]
10002770:	681a      	ldr	r2, [r3, #0]
10002772:	2380      	movs	r3, #128	; 0x80
10002774:	019b      	lsls	r3, r3, #6
10002776:	1c10      	adds	r0, r2, #0
10002778:	1c19      	adds	r1, r3, #0
1000277a:	f7ff fe7d 	bl	10002478 <XMC_USIC_CH_DisableEvent>
      }

      /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000277e:	46c0      	nop			; (mov r8, r8)
10002780:	687b      	ldr	r3, [r7, #4]
10002782:	681b      	ldr	r3, [r3, #0]
10002784:	1c18      	adds	r0, r3, #0
10002786:	f7ff fe87 	bl	10002498 <XMC_USIC_CH_GetTransmitBufferStatus>
1000278a:	1e03      	subs	r3, r0, #0
1000278c:	2b80      	cmp	r3, #128	; 0x80
1000278e:	d0f7      	beq.n	10002780 <SPI_MASTER_lTransmitHandler+0x1a4>
      {

      }

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
10002790:	68fb      	ldr	r3, [r7, #12]
10002792:	2220      	movs	r2, #32
10002794:	2100      	movs	r1, #0
10002796:	5499      	strb	r1, [r3, r2]
      runtime_handle->tx_data = NULL;
10002798:	68fb      	ldr	r3, [r7, #12]
1000279a:	2200      	movs	r2, #0
1000279c:	619a      	str	r2, [r3, #24]

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
1000279e:	687b      	ldr	r3, [r7, #4]
100027a0:	685b      	ldr	r3, [r3, #4]
100027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100027a4:	2b00      	cmp	r3, #0
100027a6:	d00b      	beq.n	100027c0 <SPI_MASTER_lTransmitHandler+0x1e4>
100027a8:	68fb      	ldr	r3, [r7, #12]
100027aa:	7fdb      	ldrb	r3, [r3, #31]
100027ac:	b2db      	uxtb	r3, r3
100027ae:	2201      	movs	r2, #1
100027b0:	4053      	eors	r3, r2
100027b2:	b2db      	uxtb	r3, r3
100027b4:	2b00      	cmp	r3, #0
100027b6:	d003      	beq.n	100027c0 <SPI_MASTER_lTransmitHandler+0x1e4>
      {
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
100027b8:	687b      	ldr	r3, [r7, #4]
100027ba:	685b      	ldr	r3, [r3, #4]
100027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100027be:	4798      	blx	r3
      }
    }
  }
}
100027c0:	46bd      	mov	sp, r7
100027c2:	b007      	add	sp, #28
100027c4:	bd90      	pop	{r4, r7, pc}
100027c6:	46c0      	nop			; (mov r8, r8)
100027c8:	0000ffff 	.word	0x0000ffff

100027cc <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
100027cc:	b590      	push	{r4, r7, lr}
100027ce:	b087      	sub	sp, #28
100027d0:	af00      	add	r7, sp, #0
100027d2:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
100027d4:	2301      	movs	r3, #1
100027d6:	617b      	str	r3, [r7, #20]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
100027d8:	687b      	ldr	r3, [r7, #4]
100027da:	689b      	ldr	r3, [r3, #8]
100027dc:	613b      	str	r3, [r7, #16]

  data = 0U;
100027de:	230e      	movs	r3, #14
100027e0:	18fb      	adds	r3, r7, r3
100027e2:	2200      	movs	r2, #0
100027e4:	801a      	strh	r2, [r3, #0]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
100027e6:	687b      	ldr	r3, [r7, #4]
100027e8:	689b      	ldr	r3, [r3, #8]
100027ea:	681b      	ldr	r3, [r3, #0]
100027ec:	2b08      	cmp	r3, #8
100027ee:	d901      	bls.n	100027f4 <SPI_MASTER_lReceiveHandler+0x28>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
100027f0:	2302      	movs	r3, #2
100027f2:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
100027f4:	687b      	ldr	r3, [r7, #4]
100027f6:	685b      	ldr	r3, [r3, #4]
100027f8:	227d      	movs	r2, #125	; 0x7d
100027fa:	5c9b      	ldrb	r3, [r3, r2]
100027fc:	2b00      	cmp	r3, #0
100027fe:	d020      	beq.n	10002842 <SPI_MASTER_lReceiveHandler+0x76>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
10002800:	687a      	ldr	r2, [r7, #4]
10002802:	697b      	ldr	r3, [r7, #20]
10002804:	1c10      	adds	r0, r2, #0
10002806:	1c19      	adds	r1, r3, #0
10002808:	f000 f8c4 	bl	10002994 <SPI_MASTER_lFIFORead>
    /* Reconfigure the RXFIFO trigger limit based on pending receive bytes */
    if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= (1UL << (handle->config->rx_fifo_size - 1)))
1000280c:	693b      	ldr	r3, [r7, #16]
1000280e:	68da      	ldr	r2, [r3, #12]
10002810:	693b      	ldr	r3, [r7, #16]
10002812:	691b      	ldr	r3, [r3, #16]
10002814:	1ad2      	subs	r2, r2, r3
10002816:	687b      	ldr	r3, [r7, #4]
10002818:	685b      	ldr	r3, [r3, #4]
1000281a:	217d      	movs	r1, #125	; 0x7d
1000281c:	5c5b      	ldrb	r3, [r3, r1]
1000281e:	3b01      	subs	r3, #1
10002820:	2101      	movs	r1, #1
10002822:	4099      	lsls	r1, r3
10002824:	1c0b      	adds	r3, r1, #0
10002826:	429a      	cmp	r2, r3
10002828:	d900      	bls.n	1000282c <SPI_MASTER_lReceiveHandler+0x60>
1000282a:	e0b0      	b.n	1000298e <SPI_MASTER_lReceiveHandler+0x1c2>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
1000282c:	693b      	ldr	r3, [r7, #16]
1000282e:	68da      	ldr	r2, [r3, #12]
10002830:	693b      	ldr	r3, [r7, #16]
10002832:	691b      	ldr	r3, [r3, #16]
10002834:	1ad3      	subs	r3, r2, r3
10002836:	687a      	ldr	r2, [r7, #4]
10002838:	1c10      	adds	r0, r2, #0
1000283a:	1c19      	adds	r1, r3, #0
1000283c:	f000 f916 	bl	10002a6c <SPI_MASTER_lReconfigureRxFIFO>
10002840:	e0a5      	b.n	1000298e <SPI_MASTER_lReceiveHandler+0x1c2>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
10002842:	687b      	ldr	r3, [r7, #4]
10002844:	681b      	ldr	r3, [r3, #0]
10002846:	1c18      	adds	r0, r3, #0
10002848:	f7ff fe34 	bl	100024b4 <XMC_USIC_CH_GetReceiveBufferStatus>
1000284c:	1c02      	adds	r2, r0, #0
1000284e:	2380      	movs	r3, #128	; 0x80
10002850:	019b      	lsls	r3, r3, #6
10002852:	4013      	ands	r3, r2
10002854:	d02e      	beq.n	100028b4 <SPI_MASTER_lReceiveHandler+0xe8>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
10002856:	693b      	ldr	r3, [r7, #16]
10002858:	691a      	ldr	r2, [r3, #16]
1000285a:	693b      	ldr	r3, [r7, #16]
1000285c:	68db      	ldr	r3, [r3, #12]
1000285e:	429a      	cmp	r2, r3
10002860:	d228      	bcs.n	100028b4 <SPI_MASTER_lReceiveHandler+0xe8>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
10002862:	687b      	ldr	r3, [r7, #4]
10002864:	681b      	ldr	r3, [r3, #0]
10002866:	220e      	movs	r2, #14
10002868:	18bc      	adds	r4, r7, r2
1000286a:	1c18      	adds	r0, r3, #0
1000286c:	f7ff fb32 	bl	10001ed4 <XMC_SPI_CH_GetReceivedData>
10002870:	1c03      	adds	r3, r0, #0
10002872:	8023      	strh	r3, [r4, #0]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
10002874:	693b      	ldr	r3, [r7, #16]
10002876:	695a      	ldr	r2, [r3, #20]
10002878:	693b      	ldr	r3, [r7, #16]
1000287a:	691b      	ldr	r3, [r3, #16]
1000287c:	18d3      	adds	r3, r2, r3
1000287e:	220e      	movs	r2, #14
10002880:	18ba      	adds	r2, r7, r2
10002882:	8812      	ldrh	r2, [r2, #0]
10002884:	b2d2      	uxtb	r2, r2
10002886:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
10002888:	697b      	ldr	r3, [r7, #20]
1000288a:	2b02      	cmp	r3, #2
1000288c:	d10c      	bne.n	100028a8 <SPI_MASTER_lReceiveHandler+0xdc>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
1000288e:	693b      	ldr	r3, [r7, #16]
10002890:	695a      	ldr	r2, [r3, #20]
10002892:	693b      	ldr	r3, [r7, #16]
10002894:	691b      	ldr	r3, [r3, #16]
10002896:	3301      	adds	r3, #1
10002898:	18d3      	adds	r3, r2, r3
1000289a:	220e      	movs	r2, #14
1000289c:	18ba      	adds	r2, r7, r2
1000289e:	8812      	ldrh	r2, [r2, #0]
100028a0:	0a12      	lsrs	r2, r2, #8
100028a2:	b292      	uxth	r2, r2
100028a4:	b2d2      	uxtb	r2, r2
100028a6:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
100028a8:	693b      	ldr	r3, [r7, #16]
100028aa:	691a      	ldr	r2, [r3, #16]
100028ac:	697b      	ldr	r3, [r7, #20]
100028ae:	18d2      	adds	r2, r2, r3
100028b0:	693b      	ldr	r3, [r7, #16]
100028b2:	611a      	str	r2, [r3, #16]
      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
100028b4:	687b      	ldr	r3, [r7, #4]
100028b6:	681b      	ldr	r3, [r3, #0]
100028b8:	1c18      	adds	r0, r3, #0
100028ba:	f7ff fdfb 	bl	100024b4 <XMC_USIC_CH_GetReceiveBufferStatus>
100028be:	1c02      	adds	r2, r0, #0
100028c0:	2380      	movs	r3, #128	; 0x80
100028c2:	01db      	lsls	r3, r3, #7
100028c4:	4013      	ands	r3, r2
100028c6:	d02e      	beq.n	10002926 <SPI_MASTER_lReceiveHandler+0x15a>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
100028c8:	693b      	ldr	r3, [r7, #16]
100028ca:	691a      	ldr	r2, [r3, #16]
100028cc:	693b      	ldr	r3, [r7, #16]
100028ce:	68db      	ldr	r3, [r3, #12]
100028d0:	429a      	cmp	r2, r3
100028d2:	d228      	bcs.n	10002926 <SPI_MASTER_lReceiveHandler+0x15a>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
100028d4:	687b      	ldr	r3, [r7, #4]
100028d6:	681b      	ldr	r3, [r3, #0]
100028d8:	220e      	movs	r2, #14
100028da:	18bc      	adds	r4, r7, r2
100028dc:	1c18      	adds	r0, r3, #0
100028de:	f7ff faf9 	bl	10001ed4 <XMC_SPI_CH_GetReceivedData>
100028e2:	1c03      	adds	r3, r0, #0
100028e4:	8023      	strh	r3, [r4, #0]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
100028e6:	693b      	ldr	r3, [r7, #16]
100028e8:	695a      	ldr	r2, [r3, #20]
100028ea:	693b      	ldr	r3, [r7, #16]
100028ec:	691b      	ldr	r3, [r3, #16]
100028ee:	18d3      	adds	r3, r2, r3
100028f0:	220e      	movs	r2, #14
100028f2:	18ba      	adds	r2, r7, r2
100028f4:	8812      	ldrh	r2, [r2, #0]
100028f6:	b2d2      	uxtb	r2, r2
100028f8:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
100028fa:	697b      	ldr	r3, [r7, #20]
100028fc:	2b02      	cmp	r3, #2
100028fe:	d10c      	bne.n	1000291a <SPI_MASTER_lReceiveHandler+0x14e>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
10002900:	693b      	ldr	r3, [r7, #16]
10002902:	695a      	ldr	r2, [r3, #20]
10002904:	693b      	ldr	r3, [r7, #16]
10002906:	691b      	ldr	r3, [r3, #16]
10002908:	3301      	adds	r3, #1
1000290a:	18d3      	adds	r3, r2, r3
1000290c:	220e      	movs	r2, #14
1000290e:	18ba      	adds	r2, r7, r2
10002910:	8812      	ldrh	r2, [r2, #0]
10002912:	0a12      	lsrs	r2, r2, #8
10002914:	b292      	uxth	r2, r2
10002916:	b2d2      	uxtb	r2, r2
10002918:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
1000291a:	693b      	ldr	r3, [r7, #16]
1000291c:	691a      	ldr	r2, [r3, #16]
1000291e:	697b      	ldr	r3, [r7, #20]
10002920:	18d2      	adds	r2, r2, r3
10002922:	693b      	ldr	r3, [r7, #16]
10002924:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
10002926:	693b      	ldr	r3, [r7, #16]
10002928:	691a      	ldr	r2, [r3, #16]
1000292a:	693b      	ldr	r3, [r7, #16]
1000292c:	68db      	ldr	r3, [r3, #12]
1000292e:	429a      	cmp	r2, r3
10002930:	d12d      	bne.n	1000298e <SPI_MASTER_lReceiveHandler+0x1c2>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      if ((uint32_t)handle->config->rx_fifo_size > 0U)
10002932:	687b      	ldr	r3, [r7, #4]
10002934:	685b      	ldr	r3, [r3, #4]
10002936:	227d      	movs	r2, #125	; 0x7d
10002938:	5c9b      	ldrb	r3, [r3, r2]
1000293a:	2b00      	cmp	r3, #0
1000293c:	d008      	beq.n	10002950 <SPI_MASTER_lReceiveHandler+0x184>
      {
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
1000293e:	687b      	ldr	r3, [r7, #4]
10002940:	681a      	ldr	r2, [r3, #0]
10002942:	23c0      	movs	r3, #192	; 0xc0
10002944:	05db      	lsls	r3, r3, #23
10002946:	1c10      	adds	r0, r2, #0
10002948:	1c19      	adds	r1, r3, #0
1000294a:	f7ff fe0d 	bl	10002568 <XMC_USIC_CH_RXFIFO_DisableEvent>
1000294e:	e007      	b.n	10002960 <SPI_MASTER_lReceiveHandler+0x194>
      }
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
10002950:	687b      	ldr	r3, [r7, #4]
10002952:	681a      	ldr	r2, [r3, #0]
10002954:	23c0      	movs	r3, #192	; 0xc0
10002956:	021b      	lsls	r3, r3, #8
10002958:	1c10      	adds	r0, r2, #0
1000295a:	1c19      	adds	r1, r3, #0
1000295c:	f7ff fada 	bl	10001f14 <XMC_SPI_CH_DisableEvent>
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
10002960:	693b      	ldr	r3, [r7, #16]
10002962:	2200      	movs	r2, #0
10002964:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
10002966:	693b      	ldr	r3, [r7, #16]
10002968:	2221      	movs	r2, #33	; 0x21
1000296a:	2100      	movs	r1, #0
1000296c:	5499      	strb	r1, [r3, r2]
      runtime_handle->rx_data_dummy = true;
1000296e:	693b      	ldr	r3, [r7, #16]
10002970:	2222      	movs	r2, #34	; 0x22
10002972:	2101      	movs	r1, #1
10002974:	5499      	strb	r1, [r3, r2]
      runtime_handle->rx_data = NULL;
10002976:	693b      	ldr	r3, [r7, #16]
10002978:	2200      	movs	r2, #0
1000297a:	615a      	str	r2, [r3, #20]

      if (handle->config->rx_cbhandler != NULL)
1000297c:	687b      	ldr	r3, [r7, #4]
1000297e:	685b      	ldr	r3, [r3, #4]
10002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002982:	2b00      	cmp	r3, #0
10002984:	d003      	beq.n	1000298e <SPI_MASTER_lReceiveHandler+0x1c2>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
10002986:	687b      	ldr	r3, [r7, #4]
10002988:	685b      	ldr	r3, [r3, #4]
1000298a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000298c:	4798      	blx	r3
      }
    }
  }
}
1000298e:	46bd      	mov	sp, r7
10002990:	b007      	add	sp, #28
10002992:	bd90      	pop	{r4, r7, pc}

10002994 <SPI_MASTER_lFIFORead>:

/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word)
{
10002994:	b590      	push	{r4, r7, lr}
10002996:	b085      	sub	sp, #20
10002998:	af00      	add	r7, sp, #0
1000299a:	6078      	str	r0, [r7, #4]
1000299c:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
1000299e:	687b      	ldr	r3, [r7, #4]
100029a0:	689b      	ldr	r3, [r3, #8]
100029a2:	60fb      	str	r3, [r7, #12]
  data = 0U;
100029a4:	230a      	movs	r3, #10
100029a6:	18fb      	adds	r3, r7, r3
100029a8:	2200      	movs	r2, #0
100029aa:	801a      	strh	r2, [r3, #0]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
100029ac:	e04e      	b.n	10002a4c <SPI_MASTER_lFIFORead+0xb8>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
100029ae:	68fb      	ldr	r3, [r7, #12]
100029b0:	691a      	ldr	r2, [r3, #16]
100029b2:	68fb      	ldr	r3, [r7, #12]
100029b4:	68db      	ldr	r3, [r3, #12]
100029b6:	429a      	cmp	r2, r3
100029b8:	d228      	bcs.n	10002a0c <SPI_MASTER_lFIFORead+0x78>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
100029ba:	687b      	ldr	r3, [r7, #4]
100029bc:	681b      	ldr	r3, [r3, #0]
100029be:	220a      	movs	r2, #10
100029c0:	18bc      	adds	r4, r7, r2
100029c2:	1c18      	adds	r0, r3, #0
100029c4:	f7ff fa86 	bl	10001ed4 <XMC_SPI_CH_GetReceivedData>
100029c8:	1c03      	adds	r3, r0, #0
100029ca:	8023      	strh	r3, [r4, #0]
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
100029cc:	68fb      	ldr	r3, [r7, #12]
100029ce:	695a      	ldr	r2, [r3, #20]
100029d0:	68fb      	ldr	r3, [r7, #12]
100029d2:	691b      	ldr	r3, [r3, #16]
100029d4:	18d3      	adds	r3, r2, r3
100029d6:	220a      	movs	r2, #10
100029d8:	18ba      	adds	r2, r7, r2
100029da:	8812      	ldrh	r2, [r2, #0]
100029dc:	b2d2      	uxtb	r2, r2
100029de:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
100029e0:	683b      	ldr	r3, [r7, #0]
100029e2:	2b02      	cmp	r3, #2
100029e4:	d10c      	bne.n	10002a00 <SPI_MASTER_lFIFORead+0x6c>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
100029e6:	68fb      	ldr	r3, [r7, #12]
100029e8:	695a      	ldr	r2, [r3, #20]
100029ea:	68fb      	ldr	r3, [r7, #12]
100029ec:	691b      	ldr	r3, [r3, #16]
100029ee:	3301      	adds	r3, #1
100029f0:	18d3      	adds	r3, r2, r3
100029f2:	220a      	movs	r2, #10
100029f4:	18ba      	adds	r2, r7, r2
100029f6:	8812      	ldrh	r2, [r2, #0]
100029f8:	0a12      	lsrs	r2, r2, #8
100029fa:	b292      	uxth	r2, r2
100029fc:	b2d2      	uxtb	r2, r2
100029fe:	701a      	strb	r2, [r3, #0]
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
10002a00:	68fb      	ldr	r3, [r7, #12]
10002a02:	691a      	ldr	r2, [r3, #16]
10002a04:	683b      	ldr	r3, [r7, #0]
10002a06:	18d2      	adds	r2, r2, r3
10002a08:	68fb      	ldr	r3, [r7, #12]
10002a0a:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
10002a0c:	68fb      	ldr	r3, [r7, #12]
10002a0e:	691a      	ldr	r2, [r3, #16]
10002a10:	68fb      	ldr	r3, [r7, #12]
10002a12:	68db      	ldr	r3, [r3, #12]
10002a14:	429a      	cmp	r2, r3
10002a16:	d119      	bne.n	10002a4c <SPI_MASTER_lFIFORead+0xb8>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
10002a18:	68fb      	ldr	r3, [r7, #12]
10002a1a:	2200      	movs	r2, #0
10002a1c:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
10002a1e:	68fb      	ldr	r3, [r7, #12]
10002a20:	2221      	movs	r2, #33	; 0x21
10002a22:	2100      	movs	r1, #0
10002a24:	5499      	strb	r1, [r3, r2]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
10002a26:	687b      	ldr	r3, [r7, #4]
10002a28:	681a      	ldr	r2, [r3, #0]
10002a2a:	23c0      	movs	r3, #192	; 0xc0
10002a2c:	05db      	lsls	r3, r3, #23
10002a2e:	1c10      	adds	r0, r2, #0
10002a30:	1c19      	adds	r1, r3, #0
10002a32:	f7ff fd99 	bl	10002568 <XMC_USIC_CH_RXFIFO_DisableEvent>
      if (handle->config->rx_cbhandler != NULL)
10002a36:	687b      	ldr	r3, [r7, #4]
10002a38:	685b      	ldr	r3, [r3, #4]
10002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002a3c:	2b00      	cmp	r3, #0
10002a3e:	d004      	beq.n	10002a4a <SPI_MASTER_lFIFORead+0xb6>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
10002a40:	687b      	ldr	r3, [r7, #4]
10002a42:	685b      	ldr	r3, [r3, #4]
10002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002a46:	4798      	blx	r3
      }
      break;
10002a48:	e00c      	b.n	10002a64 <SPI_MASTER_lFIFORead+0xd0>
10002a4a:	e00b      	b.n	10002a64 <SPI_MASTER_lFIFORead+0xd0>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
10002a4c:	687b      	ldr	r3, [r7, #4]
10002a4e:	681b      	ldr	r3, [r3, #0]
10002a50:	1c18      	adds	r0, r3, #0
10002a52:	f7ff fd9d 	bl	10002590 <XMC_USIC_CH_RXFIFO_IsEmpty>
10002a56:	1c03      	adds	r3, r0, #0
10002a58:	1c1a      	adds	r2, r3, #0
10002a5a:	2301      	movs	r3, #1
10002a5c:	4053      	eors	r3, r2
10002a5e:	b2db      	uxtb	r3, r3
10002a60:	2b00      	cmp	r3, #0
10002a62:	d1a4      	bne.n	100029ae <SPI_MASTER_lFIFORead+0x1a>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
10002a64:	46bd      	mov	sp, r7
10002a66:	b005      	add	sp, #20
10002a68:	bd90      	pop	{r4, r7, pc}
10002a6a:	46c0      	nop			; (mov r8, r8)

10002a6c <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
10002a6c:	b580      	push	{r7, lr}
10002a6e:	b084      	sub	sp, #16
10002a70:	af00      	add	r7, sp, #0
10002a72:	6078      	str	r0, [r7, #4]
10002a74:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
10002a76:	687b      	ldr	r3, [r7, #4]
10002a78:	685b      	ldr	r3, [r3, #4]
10002a7a:	227d      	movs	r2, #125	; 0x7d
10002a7c:	5c9b      	ldrb	r3, [r3, r2]
10002a7e:	2b00      	cmp	r3, #0
10002a80:	d029      	beq.n	10002ad6 <SPI_MASTER_lReconfigureRxFIFO+0x6a>
10002a82:	683b      	ldr	r3, [r7, #0]
10002a84:	2b00      	cmp	r3, #0
10002a86:	d026      	beq.n	10002ad6 <SPI_MASTER_lReconfigureRxFIFO+0x6a>
  {
	fifo_size = 1UL << (handle->config->rx_fifo_size - 1);
10002a88:	687b      	ldr	r3, [r7, #4]
10002a8a:	685b      	ldr	r3, [r3, #4]
10002a8c:	227d      	movs	r2, #125	; 0x7d
10002a8e:	5c9b      	ldrb	r3, [r3, r2]
10002a90:	3b01      	subs	r3, #1
10002a92:	2201      	movs	r2, #1
10002a94:	409a      	lsls	r2, r3
10002a96:	1c13      	adds	r3, r2, #0
10002a98:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
10002a9a:	687b      	ldr	r3, [r7, #4]
10002a9c:	689b      	ldr	r3, [r3, #8]
10002a9e:	681b      	ldr	r3, [r3, #0]
10002aa0:	2b08      	cmp	r3, #8
10002aa2:	d902      	bls.n	10002aaa <SPI_MASTER_lReconfigureRxFIFO+0x3e>
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
10002aa4:	683b      	ldr	r3, [r7, #0]
10002aa6:	085b      	lsrs	r3, r3, #1
10002aa8:	603b      	str	r3, [r7, #0]
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size <= fifo_size)
10002aaa:	683a      	ldr	r2, [r7, #0]
10002aac:	68bb      	ldr	r3, [r7, #8]
10002aae:	429a      	cmp	r2, r3
10002ab0:	d803      	bhi.n	10002aba <SPI_MASTER_lReconfigureRxFIFO+0x4e>
	{
	  ret_limit_val = data_size - 1U;
10002ab2:	683b      	ldr	r3, [r7, #0]
10002ab4:	3b01      	subs	r3, #1
10002ab6:	60fb      	str	r3, [r7, #12]
10002ab8:	e001      	b.n	10002abe <SPI_MASTER_lReconfigureRxFIFO+0x52>
	}
	else
	{
	  ret_limit_val = fifo_size;
10002aba:	68bb      	ldr	r3, [r7, #8]
10002abc:	60fb      	str	r3, [r7, #12]
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
10002abe:	687b      	ldr	r3, [r7, #4]
10002ac0:	6819      	ldr	r1, [r3, #0]
10002ac2:	687b      	ldr	r3, [r7, #4]
10002ac4:	685b      	ldr	r3, [r3, #4]
10002ac6:	227d      	movs	r2, #125	; 0x7d
10002ac8:	5c9a      	ldrb	r2, [r3, r2]
10002aca:	68fb      	ldr	r3, [r7, #12]
10002acc:	1c08      	adds	r0, r1, #0
10002ace:	1c11      	adds	r1, r2, #0
10002ad0:	1c1a      	adds	r2, r3, #0
10002ad2:	f7ff fbd7 	bl	10002284 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
10002ad6:	46bd      	mov	sp, r7
10002ad8:	b004      	add	sp, #16
10002ada:	bd80      	pop	{r7, pc}

10002adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002adc:	b580      	push	{r7, lr}
10002ade:	b082      	sub	sp, #8
10002ae0:	af00      	add	r7, sp, #0
10002ae2:	1c02      	adds	r2, r0, #0
10002ae4:	1dfb      	adds	r3, r7, #7
10002ae6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002ae8:	1dfb      	adds	r3, r7, #7
10002aea:	781b      	ldrb	r3, [r3, #0]
10002aec:	2b7f      	cmp	r3, #127	; 0x7f
10002aee:	d809      	bhi.n	10002b04 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002af0:	4b06      	ldr	r3, [pc, #24]	; (10002b0c <__NVIC_EnableIRQ+0x30>)
10002af2:	1dfa      	adds	r2, r7, #7
10002af4:	7812      	ldrb	r2, [r2, #0]
10002af6:	1c11      	adds	r1, r2, #0
10002af8:	221f      	movs	r2, #31
10002afa:	400a      	ands	r2, r1
10002afc:	2101      	movs	r1, #1
10002afe:	4091      	lsls	r1, r2
10002b00:	1c0a      	adds	r2, r1, #0
10002b02:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002b04:	46bd      	mov	sp, r7
10002b06:	b002      	add	sp, #8
10002b08:	bd80      	pop	{r7, pc}
10002b0a:	46c0      	nop			; (mov r8, r8)
10002b0c:	e000e100 	.word	0xe000e100

10002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002b10:	b5b0      	push	{r4, r5, r7, lr}
10002b12:	b082      	sub	sp, #8
10002b14:	af00      	add	r7, sp, #0
10002b16:	1c02      	adds	r2, r0, #0
10002b18:	6039      	str	r1, [r7, #0]
10002b1a:	1dfb      	adds	r3, r7, #7
10002b1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002b1e:	1dfb      	adds	r3, r7, #7
10002b20:	781b      	ldrb	r3, [r3, #0]
10002b22:	2b7f      	cmp	r3, #127	; 0x7f
10002b24:	d827      	bhi.n	10002b76 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b26:	4c2d      	ldr	r4, [pc, #180]	; (10002bdc <__NVIC_SetPriority+0xcc>)
10002b28:	1dfb      	adds	r3, r7, #7
10002b2a:	781b      	ldrb	r3, [r3, #0]
10002b2c:	b25b      	sxtb	r3, r3
10002b2e:	089b      	lsrs	r3, r3, #2
10002b30:	492a      	ldr	r1, [pc, #168]	; (10002bdc <__NVIC_SetPriority+0xcc>)
10002b32:	1dfa      	adds	r2, r7, #7
10002b34:	7812      	ldrb	r2, [r2, #0]
10002b36:	b252      	sxtb	r2, r2
10002b38:	0892      	lsrs	r2, r2, #2
10002b3a:	32c0      	adds	r2, #192	; 0xc0
10002b3c:	0092      	lsls	r2, r2, #2
10002b3e:	5852      	ldr	r2, [r2, r1]
10002b40:	1df9      	adds	r1, r7, #7
10002b42:	7809      	ldrb	r1, [r1, #0]
10002b44:	1c08      	adds	r0, r1, #0
10002b46:	2103      	movs	r1, #3
10002b48:	4001      	ands	r1, r0
10002b4a:	00c9      	lsls	r1, r1, #3
10002b4c:	1c08      	adds	r0, r1, #0
10002b4e:	21ff      	movs	r1, #255	; 0xff
10002b50:	4081      	lsls	r1, r0
10002b52:	43c9      	mvns	r1, r1
10002b54:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002b56:	683a      	ldr	r2, [r7, #0]
10002b58:	0192      	lsls	r2, r2, #6
10002b5a:	20ff      	movs	r0, #255	; 0xff
10002b5c:	4002      	ands	r2, r0
10002b5e:	1df8      	adds	r0, r7, #7
10002b60:	7800      	ldrb	r0, [r0, #0]
10002b62:	1c05      	adds	r5, r0, #0
10002b64:	2003      	movs	r0, #3
10002b66:	4028      	ands	r0, r5
10002b68:	00c0      	lsls	r0, r0, #3
10002b6a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b6c:	430a      	orrs	r2, r1
10002b6e:	33c0      	adds	r3, #192	; 0xc0
10002b70:	009b      	lsls	r3, r3, #2
10002b72:	511a      	str	r2, [r3, r4]
10002b74:	e02e      	b.n	10002bd4 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b76:	4c1a      	ldr	r4, [pc, #104]	; (10002be0 <__NVIC_SetPriority+0xd0>)
10002b78:	1dfb      	adds	r3, r7, #7
10002b7a:	781b      	ldrb	r3, [r3, #0]
10002b7c:	1c1a      	adds	r2, r3, #0
10002b7e:	230f      	movs	r3, #15
10002b80:	4013      	ands	r3, r2
10002b82:	3b08      	subs	r3, #8
10002b84:	0899      	lsrs	r1, r3, #2
10002b86:	4a16      	ldr	r2, [pc, #88]	; (10002be0 <__NVIC_SetPriority+0xd0>)
10002b88:	1dfb      	adds	r3, r7, #7
10002b8a:	781b      	ldrb	r3, [r3, #0]
10002b8c:	1c18      	adds	r0, r3, #0
10002b8e:	230f      	movs	r3, #15
10002b90:	4003      	ands	r3, r0
10002b92:	3b08      	subs	r3, #8
10002b94:	089b      	lsrs	r3, r3, #2
10002b96:	3306      	adds	r3, #6
10002b98:	009b      	lsls	r3, r3, #2
10002b9a:	18d3      	adds	r3, r2, r3
10002b9c:	685b      	ldr	r3, [r3, #4]
10002b9e:	1dfa      	adds	r2, r7, #7
10002ba0:	7812      	ldrb	r2, [r2, #0]
10002ba2:	1c10      	adds	r0, r2, #0
10002ba4:	2203      	movs	r2, #3
10002ba6:	4002      	ands	r2, r0
10002ba8:	00d2      	lsls	r2, r2, #3
10002baa:	1c10      	adds	r0, r2, #0
10002bac:	22ff      	movs	r2, #255	; 0xff
10002bae:	4082      	lsls	r2, r0
10002bb0:	43d2      	mvns	r2, r2
10002bb2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002bb4:	683b      	ldr	r3, [r7, #0]
10002bb6:	019b      	lsls	r3, r3, #6
10002bb8:	20ff      	movs	r0, #255	; 0xff
10002bba:	4003      	ands	r3, r0
10002bbc:	1df8      	adds	r0, r7, #7
10002bbe:	7800      	ldrb	r0, [r0, #0]
10002bc0:	1c05      	adds	r5, r0, #0
10002bc2:	2003      	movs	r0, #3
10002bc4:	4028      	ands	r0, r5
10002bc6:	00c0      	lsls	r0, r0, #3
10002bc8:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002bca:	431a      	orrs	r2, r3
10002bcc:	1d8b      	adds	r3, r1, #6
10002bce:	009b      	lsls	r3, r3, #2
10002bd0:	18e3      	adds	r3, r4, r3
10002bd2:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002bd4:	46bd      	mov	sp, r7
10002bd6:	b002      	add	sp, #8
10002bd8:	bdb0      	pop	{r4, r5, r7, pc}
10002bda:	46c0      	nop			; (mov r8, r8)
10002bdc:	e000e100 	.word	0xe000e100
10002be0:	e000ed00 	.word	0xe000ed00

10002be4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10002be4:	b580      	push	{r7, lr}
10002be6:	b082      	sub	sp, #8
10002be8:	af00      	add	r7, sp, #0
10002bea:	6078      	str	r0, [r7, #4]
10002bec:	1c08      	adds	r0, r1, #0
10002bee:	1c11      	adds	r1, r2, #0
10002bf0:	1cfb      	adds	r3, r7, #3
10002bf2:	1c02      	adds	r2, r0, #0
10002bf4:	701a      	strb	r2, [r3, #0]
10002bf6:	1cbb      	adds	r3, r7, #2
10002bf8:	1c0a      	adds	r2, r1, #0
10002bfa:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10002bfc:	1cfb      	adds	r3, r7, #3
10002bfe:	7818      	ldrb	r0, [r3, #0]
10002c00:	1cfb      	adds	r3, r7, #3
10002c02:	781b      	ldrb	r3, [r3, #0]
10002c04:	687a      	ldr	r2, [r7, #4]
10002c06:	3306      	adds	r3, #6
10002c08:	009b      	lsls	r3, r3, #2
10002c0a:	18d3      	adds	r3, r2, r3
10002c0c:	685b      	ldr	r3, [r3, #4]
10002c0e:	2207      	movs	r2, #7
10002c10:	4393      	bics	r3, r2
10002c12:	1c1a      	adds	r2, r3, #0
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10002c14:	1cbb      	adds	r3, r7, #2
10002c16:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10002c18:	431a      	orrs	r2, r3
10002c1a:	6879      	ldr	r1, [r7, #4]
10002c1c:	1d83      	adds	r3, r0, #6
10002c1e:	009b      	lsls	r3, r3, #2
10002c20:	18cb      	adds	r3, r1, r3
10002c22:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10002c24:	46bd      	mov	sp, r7
10002c26:	b002      	add	sp, #8
10002c28:	bd80      	pop	{r7, pc}
10002c2a:	46c0      	nop			; (mov r8, r8)

10002c2c <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
10002c2c:	b580      	push	{r7, lr}
10002c2e:	b082      	sub	sp, #8
10002c30:	af00      	add	r7, sp, #0
10002c32:	6078      	str	r0, [r7, #4]
10002c34:	1c0a      	adds	r2, r1, #0
10002c36:	1cfb      	adds	r3, r7, #3
10002c38:	701a      	strb	r2, [r3, #0]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
10002c3a:	687b      	ldr	r3, [r7, #4]
10002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002c3e:	4a06      	ldr	r2, [pc, #24]	; (10002c58 <XMC_USIC_CH_SetWordLength+0x2c>)
10002c40:	401a      	ands	r2, r3
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
10002c42:	1cfb      	adds	r3, r7, #3
10002c44:	781b      	ldrb	r3, [r3, #0]
10002c46:	3b01      	subs	r3, #1
10002c48:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
10002c4a:	431a      	orrs	r2, r3
10002c4c:	687b      	ldr	r3, [r7, #4]
10002c4e:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
10002c50:	46bd      	mov	sp, r7
10002c52:	b002      	add	sp, #8
10002c54:	bd80      	pop	{r7, pc}
10002c56:	46c0      	nop			; (mov r8, r8)
10002c58:	f0ffffff 	.word	0xf0ffffff

10002c5c <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
10002c5c:	b580      	push	{r7, lr}
10002c5e:	b082      	sub	sp, #8
10002c60:	af00      	add	r7, sp, #0
10002c62:	6078      	str	r0, [r7, #4]
10002c64:	1c0a      	adds	r2, r1, #0
10002c66:	1cfb      	adds	r3, r7, #3
10002c68:	701a      	strb	r2, [r3, #0]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
10002c6a:	687b      	ldr	r3, [r7, #4]
10002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002c6e:	4a06      	ldr	r2, [pc, #24]	; (10002c88 <XMC_USIC_CH_SetFrameLength+0x2c>)
10002c70:	401a      	ands	r2, r3
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
10002c72:	1cfb      	adds	r3, r7, #3
10002c74:	781b      	ldrb	r3, [r3, #0]
10002c76:	3b01      	subs	r3, #1
10002c78:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
10002c7a:	431a      	orrs	r2, r3
10002c7c:	687b      	ldr	r3, [r7, #4]
10002c7e:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
10002c80:	46bd      	mov	sp, r7
10002c82:	b002      	add	sp, #8
10002c84:	bd80      	pop	{r7, pc}
10002c86:	46c0      	nop			; (mov r8, r8)
10002c88:	ffc0ffff 	.word	0xffc0ffff

10002c8c <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
10002c8c:	b580      	push	{r7, lr}
10002c8e:	b084      	sub	sp, #16
10002c90:	af00      	add	r7, sp, #0
10002c92:	60f8      	str	r0, [r7, #12]
10002c94:	60b9      	str	r1, [r7, #8]
10002c96:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
10002c98:	68fb      	ldr	r3, [r7, #12]
10002c9a:	695b      	ldr	r3, [r3, #20]
10002c9c:	4a05      	ldr	r2, [pc, #20]	; (10002cb4 <XMC_USIC_CH_ConfigureShiftClockOutput+0x28>)
10002c9e:	401a      	ands	r2, r3
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
10002ca0:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
10002ca2:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
10002ca4:	687b      	ldr	r3, [r7, #4]
10002ca6:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
10002ca8:	68fb      	ldr	r3, [r7, #12]
10002caa:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
10002cac:	46bd      	mov	sp, r7
10002cae:	b004      	add	sp, #16
10002cb0:	bd80      	pop	{r7, pc}
10002cb2:	46c0      	nop			; (mov r8, r8)
10002cb4:	2fffffff 	.word	0x2fffffff

10002cb8 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
10002cb8:	b580      	push	{r7, lr}
10002cba:	b082      	sub	sp, #8
10002cbc:	af00      	add	r7, sp, #0
10002cbe:	6078      	str	r0, [r7, #4]
10002cc0:	1c0a      	adds	r2, r1, #0
10002cc2:	1cfb      	adds	r3, r7, #3
10002cc4:	701a      	strb	r2, [r3, #0]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
10002cc6:	687b      	ldr	r3, [r7, #4]
10002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002cca:	220f      	movs	r2, #15
10002ccc:	4393      	bics	r3, r2
10002cce:	1c1a      	adds	r2, r3, #0
10002cd0:	1cfb      	adds	r3, r7, #3
10002cd2:	781b      	ldrb	r3, [r3, #0]
10002cd4:	431a      	orrs	r2, r3
10002cd6:	687b      	ldr	r3, [r7, #4]
10002cd8:	641a      	str	r2, [r3, #64]	; 0x40
}
10002cda:	46bd      	mov	sp, r7
10002cdc:	b002      	add	sp, #8
10002cde:	bd80      	pop	{r7, pc}

10002ce0 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
10002ce0:	b580      	push	{r7, lr}
10002ce2:	b082      	sub	sp, #8
10002ce4:	af00      	add	r7, sp, #0
10002ce6:	6078      	str	r0, [r7, #4]
10002ce8:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
10002cea:	687a      	ldr	r2, [r7, #4]
10002cec:	683b      	ldr	r3, [r7, #0]
10002cee:	1c10      	adds	r0, r2, #0
10002cf0:	1c19      	adds	r1, r3, #0
10002cf2:	2201      	movs	r2, #1
10002cf4:	f7ff f87a 	bl	10001dec <XMC_SPI_CH_InitEx>
}
10002cf8:	46bd      	mov	sp, r7
10002cfa:	b002      	add	sp, #8
10002cfc:	bd80      	pop	{r7, pc}
10002cfe:	46c0      	nop			; (mov r8, r8)

10002d00 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
10002d00:	b580      	push	{r7, lr}
10002d02:	b082      	sub	sp, #8
10002d04:	af00      	add	r7, sp, #0
10002d06:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
10002d08:	687b      	ldr	r3, [r7, #4]
10002d0a:	1c18      	adds	r0, r3, #0
10002d0c:	2101      	movs	r1, #1
10002d0e:	f7ff ffd3 	bl	10002cb8 <XMC_USIC_CH_SetMode>
}
10002d12:	46bd      	mov	sp, r7
10002d14:	b002      	add	sp, #8
10002d16:	bd80      	pop	{r7, pc}

10002d18 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
10002d18:	b580      	push	{r7, lr}
10002d1a:	b082      	sub	sp, #8
10002d1c:	af00      	add	r7, sp, #0
10002d1e:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
10002d20:	687b      	ldr	r3, [r7, #4]
10002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002d24:	2201      	movs	r2, #1
10002d26:	431a      	orrs	r2, r3
10002d28:	687b      	ldr	r3, [r7, #4]
10002d2a:	635a      	str	r2, [r3, #52]	; 0x34
}
10002d2c:	46bd      	mov	sp, r7
10002d2e:	b002      	add	sp, #8
10002d30:	bd80      	pop	{r7, pc}
10002d32:	46c0      	nop			; (mov r8, r8)

10002d34 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
10002d34:	b580      	push	{r7, lr}
10002d36:	b082      	sub	sp, #8
10002d38:	af00      	add	r7, sp, #0
10002d3a:	6078      	str	r0, [r7, #4]
10002d3c:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002d3e:	687b      	ldr	r3, [r7, #4]
10002d40:	695b      	ldr	r3, [r3, #20]
10002d42:	4a07      	ldr	r2, [pc, #28]	; (10002d60 <XMC_SPI_CH_SetSlaveSelectDelay+0x2c>)
10002d44:	401a      	ands	r2, r3
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
10002d46:	683b      	ldr	r3, [r7, #0]
10002d48:	3b01      	subs	r3, #1
10002d4a:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
10002d4c:	4313      	orrs	r3, r2
10002d4e:	2280      	movs	r2, #128	; 0x80
10002d50:	0052      	lsls	r2, r2, #1
10002d52:	431a      	orrs	r2, r3
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002d54:	687b      	ldr	r3, [r7, #4]
10002d56:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
10002d58:	46bd      	mov	sp, r7
10002d5a:	b002      	add	sp, #8
10002d5c:	bd80      	pop	{r7, pc}
10002d5e:	46c0      	nop			; (mov r8, r8)
10002d60:	ffff80ff 	.word	0xffff80ff

10002d64 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
10002d64:	b580      	push	{r7, lr}
10002d66:	b084      	sub	sp, #16
10002d68:	af00      	add	r7, sp, #0
10002d6a:	60f8      	str	r0, [r7, #12]
10002d6c:	60b9      	str	r1, [r7, #8]
10002d6e:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
10002d70:	68f9      	ldr	r1, [r7, #12]
10002d72:	68ba      	ldr	r2, [r7, #8]
10002d74:	687b      	ldr	r3, [r7, #4]
10002d76:	1c08      	adds	r0, r1, #0
10002d78:	1c11      	adds	r1, r2, #0
10002d7a:	1c1a      	adds	r2, r3, #0
10002d7c:	f7ff ff86 	bl	10002c8c <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
10002d80:	46bd      	mov	sp, r7
10002d82:	b004      	add	sp, #16
10002d84:	bd80      	pop	{r7, pc}
10002d86:	46c0      	nop			; (mov r8, r8)

10002d88 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
10002d88:	b580      	push	{r7, lr}
10002d8a:	b082      	sub	sp, #8
10002d8c:	af00      	add	r7, sp, #0
10002d8e:	6078      	str	r0, [r7, #4]
10002d90:	1c0a      	adds	r2, r1, #0
10002d92:	1cfb      	adds	r3, r7, #3
10002d94:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetWordLength(channel, word_length);
10002d96:	687a      	ldr	r2, [r7, #4]
10002d98:	1cfb      	adds	r3, r7, #3
10002d9a:	781b      	ldrb	r3, [r3, #0]
10002d9c:	1c10      	adds	r0, r2, #0
10002d9e:	1c19      	adds	r1, r3, #0
10002da0:	f7ff ff44 	bl	10002c2c <XMC_USIC_CH_SetWordLength>
}
10002da4:	46bd      	mov	sp, r7
10002da6:	b002      	add	sp, #8
10002da8:	bd80      	pop	{r7, pc}
10002daa:	46c0      	nop			; (mov r8, r8)

10002dac <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
10002dac:	b580      	push	{r7, lr}
10002dae:	b082      	sub	sp, #8
10002db0:	af00      	add	r7, sp, #0
10002db2:	6078      	str	r0, [r7, #4]
10002db4:	1c0a      	adds	r2, r1, #0
10002db6:	1cfb      	adds	r3, r7, #3
10002db8:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
10002dba:	687a      	ldr	r2, [r7, #4]
10002dbc:	1cfb      	adds	r3, r7, #3
10002dbe:	781b      	ldrb	r3, [r3, #0]
10002dc0:	1c10      	adds	r0, r2, #0
10002dc2:	1c19      	adds	r1, r3, #0
10002dc4:	f7ff ff4a 	bl	10002c5c <XMC_USIC_CH_SetFrameLength>
}
10002dc8:	46bd      	mov	sp, r7
10002dca:	b002      	add	sp, #8
10002dcc:	bd80      	pop	{r7, pc}
10002dce:	46c0      	nop			; (mov r8, r8)

10002dd0 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
10002dd0:	b580      	push	{r7, lr}
10002dd2:	b082      	sub	sp, #8
10002dd4:	af00      	add	r7, sp, #0
10002dd6:	6078      	str	r0, [r7, #4]
10002dd8:	1c08      	adds	r0, r1, #0
10002dda:	1c11      	adds	r1, r2, #0
10002ddc:	1cfb      	adds	r3, r7, #3
10002dde:	1c02      	adds	r2, r0, #0
10002de0:	701a      	strb	r2, [r3, #0]
10002de2:	1cbb      	adds	r3, r7, #2
10002de4:	1c0a      	adds	r2, r1, #0
10002de6:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
10002de8:	1cfb      	adds	r3, r7, #3
10002dea:	7818      	ldrb	r0, [r3, #0]
10002dec:	1cfb      	adds	r3, r7, #3
10002dee:	781b      	ldrb	r3, [r3, #0]
10002df0:	687a      	ldr	r2, [r7, #4]
10002df2:	3306      	adds	r3, #6
10002df4:	009b      	lsls	r3, r3, #2
10002df6:	18d3      	adds	r3, r2, r3
10002df8:	685b      	ldr	r3, [r3, #4]
10002dfa:	2250      	movs	r2, #80	; 0x50
10002dfc:	4393      	bics	r3, r2
10002dfe:	2210      	movs	r2, #16
10002e00:	431a      	orrs	r2, r3
10002e02:	6879      	ldr	r1, [r7, #4]
10002e04:	1d83      	adds	r3, r0, #6
10002e06:	009b      	lsls	r3, r3, #2
10002e08:	18cb      	adds	r3, r1, r3
10002e0a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
10002e0c:	6879      	ldr	r1, [r7, #4]
10002e0e:	1cfb      	adds	r3, r7, #3
10002e10:	781a      	ldrb	r2, [r3, #0]
10002e12:	1cbb      	adds	r3, r7, #2
10002e14:	781b      	ldrb	r3, [r3, #0]
10002e16:	1c08      	adds	r0, r1, #0
10002e18:	1c11      	adds	r1, r2, #0
10002e1a:	1c1a      	adds	r2, r3, #0
10002e1c:	f7ff fee2 	bl	10002be4 <XMC_USIC_CH_SetInputSource>
}
10002e20:	46bd      	mov	sp, r7
10002e22:	b002      	add	sp, #8
10002e24:	bd80      	pop	{r7, pc}
10002e26:	46c0      	nop			; (mov r8, r8)

10002e28 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
10002e28:	b580      	push	{r7, lr}
10002e2a:	b082      	sub	sp, #8
10002e2c:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
10002e2e:	1dfb      	adds	r3, r7, #7
10002e30:	2200      	movs	r2, #0
10002e32:	701a      	strb	r2, [r3, #0]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI1_CH1, &SPI_MASTER_0_Channel_Config);
10002e34:	4a4d      	ldr	r2, [pc, #308]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e36:	4b4e      	ldr	r3, [pc, #312]	; (10002f70 <SPI_MASTER_0_lInit+0x148>)
10002e38:	1c10      	adds	r0, r2, #0
10002e3a:	1c19      	adds	r1, r3, #0
10002e3c:	f7ff ff50 	bl	10002ce0 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI1_CH1);
10002e40:	4b4a      	ldr	r3, [pc, #296]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e42:	1c18      	adds	r0, r3, #0
10002e44:	f7ff ff68 	bl	10002d18 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI1_CH1, (uint8_t)8);
10002e48:	4b48      	ldr	r3, [pc, #288]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e4a:	1c18      	adds	r0, r3, #0
10002e4c:	2108      	movs	r1, #8
10002e4e:	f7ff ff9b 	bl	10002d88 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH1, (uint8_t)64);
10002e52:	4b46      	ldr	r3, [pc, #280]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e54:	1c18      	adds	r0, r3, #0
10002e56:	2140      	movs	r1, #64	; 0x40
10002e58:	f7ff ffa8 	bl	10002dac <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH1,
10002e5c:	4b43      	ldr	r3, [pc, #268]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e5e:	1c18      	adds	r0, r3, #0
10002e60:	2100      	movs	r1, #0
10002e62:	2200      	movs	r2, #0
10002e64:	f7ff ff7e 	bl	10002d64 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH1, 1U);
10002e68:	4b40      	ldr	r3, [pc, #256]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e6a:	1c18      	adds	r0, r3, #0
10002e6c:	2101      	movs	r1, #1
10002e6e:	f7ff ff61 	bl	10002d34 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)0, &SPI_MASTER_0_MISO_Config.port_config);
10002e72:	4a40      	ldr	r2, [pc, #256]	; (10002f74 <SPI_MASTER_0_lInit+0x14c>)
10002e74:	4b40      	ldr	r3, [pc, #256]	; (10002f78 <SPI_MASTER_0_lInit+0x150>)
10002e76:	1c10      	adds	r0, r2, #0
10002e78:	2100      	movs	r1, #0
10002e7a:	1c1a      	adds	r2, r3, #0
10002e7c:	f7fe f984 	bl	10001188 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_A);
10002e80:	4b3a      	ldr	r3, [pc, #232]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e82:	1c18      	adds	r0, r3, #0
10002e84:	2100      	movs	r1, #0
10002e86:	2200      	movs	r2, #0
10002e88:	f7ff ffa2 	bl	10002dd0 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN1, (uint8_t)SPI_MASTER_INPUT_A);
10002e8c:	4b37      	ldr	r3, [pc, #220]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e8e:	1c18      	adds	r0, r3, #0
10002e90:	2103      	movs	r1, #3
10002e92:	2200      	movs	r2, #0
10002e94:	f7ff ff9c 	bl	10002dd0 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN2, (uint8_t)SPI_MASTER_INPUT_A);
10002e98:	4b34      	ldr	r3, [pc, #208]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002e9a:	1c18      	adds	r0, r3, #0
10002e9c:	2104      	movs	r1, #4
10002e9e:	2200      	movs	r2, #0
10002ea0:	f7ff ff96 	bl	10002dd0 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN3, (uint8_t)SPI_MASTER_INPUT_A);
10002ea4:	4b31      	ldr	r3, [pc, #196]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002ea6:	1c18      	adds	r0, r3, #0
10002ea8:	2105      	movs	r1, #5
10002eaa:	2200      	movs	r2, #0
10002eac:	f7ff ff90 	bl	10002dd0 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI1_CH1);
10002eb0:	4b2e      	ldr	r3, [pc, #184]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002eb2:	1c18      	adds	r0, r3, #0
10002eb4:	f7ff ff24 	bl	10002d00 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)0, &SPI_MASTER_0_MOSI_Config.port_config);
10002eb8:	4a30      	ldr	r2, [pc, #192]	; (10002f7c <SPI_MASTER_0_lInit+0x154>)
10002eba:	4b31      	ldr	r3, [pc, #196]	; (10002f80 <SPI_MASTER_0_lInit+0x158>)
10002ebc:	1c10      	adds	r0, r2, #0
10002ebe:	2100      	movs	r1, #0
10002ec0:	1c1a      	adds	r2, r3, #0
10002ec2:	f7fe f961 	bl	10001188 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, &SPI_MASTER_0_SCLKOUT_Config.port_config);
10002ec6:	4a2b      	ldr	r2, [pc, #172]	; (10002f74 <SPI_MASTER_0_lInit+0x14c>)
10002ec8:	4b2e      	ldr	r3, [pc, #184]	; (10002f84 <SPI_MASTER_0_lInit+0x15c>)
10002eca:	1c10      	adds	r0, r2, #0
10002ecc:	2101      	movs	r1, #1
10002ece:	1c1a      	adds	r2, r3, #0
10002ed0:	f7fe f95a 	bl	10001188 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT4_BASE, (uint8_t)1, &SPI_MASTER_0_SS_0_Config.port_config);
10002ed4:	4a2c      	ldr	r2, [pc, #176]	; (10002f88 <SPI_MASTER_0_lInit+0x160>)
10002ed6:	4b2d      	ldr	r3, [pc, #180]	; (10002f8c <SPI_MASTER_0_lInit+0x164>)
10002ed8:	1c10      	adds	r0, r2, #0
10002eda:	2101      	movs	r1, #1
10002edc:	1c1a      	adds	r2, r3, #0
10002ede:	f7fe f953 	bl	10001188 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH1, XMC_SPI_CH_SLAVE_SELECT_2);
10002ee2:	4a22      	ldr	r2, [pc, #136]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002ee4:	2380      	movs	r3, #128	; 0x80
10002ee6:	02db      	lsls	r3, r3, #11
10002ee8:	1c10      	adds	r0, r2, #0
10002eea:	1c19      	adds	r1, r3, #0
10002eec:	f7fe ffc8 	bl	10001e80 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH1,
10002ef0:	4b1e      	ldr	r3, [pc, #120]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002ef2:	1c18      	adds	r0, r3, #0
10002ef4:	2104      	movs	r1, #4
10002ef6:	2201      	movs	r2, #1
10002ef8:	f7ff f9e0 	bl	100022bc <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH1,
10002efc:	4b1b      	ldr	r3, [pc, #108]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002efe:	1c18      	adds	r0, r3, #0
10002f00:	2110      	movs	r1, #16
10002f02:	2201      	movs	r2, #1
10002f04:	f7ff f9da 	bl	100022bc <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
            
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI1_CH1,
10002f08:	4b18      	ldr	r3, [pc, #96]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002f0a:	1c18      	adds	r0, r3, #0
10002f0c:	2100      	movs	r1, #0
10002f0e:	2206      	movs	r2, #6
10002f10:	2300      	movs	r3, #0
10002f12:	f7ff f985 	bl	10002220 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_64WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
10002f16:	4b15      	ldr	r3, [pc, #84]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002f18:	1c18      	adds	r0, r3, #0
10002f1a:	2110      	movs	r1, #16
10002f1c:	2200      	movs	r2, #0
10002f1e:	f7ff fa11 	bl	10002344 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
10002f22:	4b12      	ldr	r3, [pc, #72]	; (10002f6c <SPI_MASTER_0_lInit+0x144>)
10002f24:	1c18      	adds	r0, r3, #0
10002f26:	2113      	movs	r1, #19
10002f28:	2200      	movs	r2, #0
10002f2a:	f7ff fa0b 	bl	10002344 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)10, 3U);
10002f2e:	200a      	movs	r0, #10
10002f30:	2103      	movs	r1, #3
10002f32:	f7ff fded 	bl	10002b10 <__NVIC_SetPriority>
    
  XMC_SCU_SetInterruptControl(10, XMC_SCU_IRQCTRL_USIC1_SR1_IRQ10);
10002f36:	4b16      	ldr	r3, [pc, #88]	; (10002f90 <SPI_MASTER_0_lInit+0x168>)
10002f38:	200a      	movs	r0, #10
10002f3a:	1c19      	adds	r1, r3, #0
10002f3c:	f7fe fb9c 	bl	10001678 <XMC_SCU_SetInterruptControl>
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)10);
10002f40:	200a      	movs	r0, #10
10002f42:	f7ff fdcb 	bl	10002adc <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)9, 2U);
10002f46:	2009      	movs	r0, #9
10002f48:	2102      	movs	r1, #2
10002f4a:	f7ff fde1 	bl	10002b10 <__NVIC_SetPriority>
    
  XMC_SCU_SetInterruptControl(9,   XMC_SCU_IRQCTRL_USIC1_SR0_IRQ9);
10002f4e:	4b11      	ldr	r3, [pc, #68]	; (10002f94 <SPI_MASTER_0_lInit+0x16c>)
10002f50:	2009      	movs	r0, #9
10002f52:	1c19      	adds	r1, r3, #0
10002f54:	f7fe fb90 	bl	10001678 <XMC_SCU_SetInterruptControl>
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)9);
10002f58:	2009      	movs	r0, #9
10002f5a:	f7ff fdbf 	bl	10002adc <__NVIC_EnableIRQ>
    
  return status;
10002f5e:	1dfb      	adds	r3, r7, #7
10002f60:	781b      	ldrb	r3, [r3, #0]
}
10002f62:	1c18      	adds	r0, r3, #0
10002f64:	46bd      	mov	sp, r7
10002f66:	b002      	add	sp, #8
10002f68:	bd80      	pop	{r7, pc}
10002f6a:	46c0      	nop			; (mov r8, r8)
10002f6c:	48004200 	.word	0x48004200
10002f70:	20000560 	.word	0x20000560
10002f74:	40040000 	.word	0x40040000
10002f78:	20000690 	.word	0x20000690
10002f7c:	40040300 	.word	0x40040300
10002f80:	20000550 	.word	0x20000550
10002f84:	10006158 	.word	0x10006158
10002f88:	40040400 	.word	0x40040400
10002f8c:	10006170 	.word	0x10006170
10002f90:	00000a01 	.word	0x00000a01
10002f94:	00000901 	.word	0x00000901

10002f98 <IRQ10_Handler>:
/*Transmit ISR*/
void SPI_MASTER_0_tx_handler()
{
10002f98:	b580      	push	{r7, lr}
10002f9a:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_0);
10002f9c:	4b02      	ldr	r3, [pc, #8]	; (10002fa8 <IRQ10_Handler+0x10>)
10002f9e:	1c18      	adds	r0, r3, #0
10002fa0:	f7ff fb1c 	bl	100025dc <SPI_MASTER_lTransmitHandler>
}
10002fa4:	46bd      	mov	sp, r7
10002fa6:	bd80      	pop	{r7, pc}
10002fa8:	20000590 	.word	0x20000590

10002fac <IRQ9_Handler>:

/*Receive ISR*/
void SPI_MASTER_0_rx_handler()
{
10002fac:	b580      	push	{r7, lr}
10002fae:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_0);
10002fb0:	4b02      	ldr	r3, [pc, #8]	; (10002fbc <IRQ9_Handler+0x10>)
10002fb2:	1c18      	adds	r0, r3, #0
10002fb4:	f7ff fc0a 	bl	100027cc <SPI_MASTER_lReceiveHandler>
}
10002fb8:	46bd      	mov	sp, r7
10002fba:	bd80      	pop	{r7, pc}
10002fbc:	20000590 	.word	0x20000590

10002fc0 <SPI_MASTER_1_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_1_lInit(void)
{
10002fc0:	b580      	push	{r7, lr}
10002fc2:	b082      	sub	sp, #8
10002fc4:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
10002fc6:	1dfb      	adds	r3, r7, #7
10002fc8:	2200      	movs	r2, #0
10002fca:	701a      	strb	r2, [r3, #0]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_MASTER_1_Channel_Config);
10002fcc:	2390      	movs	r3, #144	; 0x90
10002fce:	05da      	lsls	r2, r3, #23
10002fd0:	4b5a      	ldr	r3, [pc, #360]	; (1000313c <SPI_MASTER_1_lInit+0x17c>)
10002fd2:	1c10      	adds	r0, r2, #0
10002fd4:	1c19      	adds	r1, r3, #0
10002fd6:	f7ff fe83 	bl	10002ce0 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
10002fda:	2390      	movs	r3, #144	; 0x90
10002fdc:	05db      	lsls	r3, r3, #23
10002fde:	1c18      	adds	r0, r3, #0
10002fe0:	f7ff fe9a 	bl	10002d18 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
10002fe4:	2390      	movs	r3, #144	; 0x90
10002fe6:	05db      	lsls	r3, r3, #23
10002fe8:	1c18      	adds	r0, r3, #0
10002fea:	2108      	movs	r1, #8
10002fec:	f7ff fecc 	bl	10002d88 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)64);
10002ff0:	2390      	movs	r3, #144	; 0x90
10002ff2:	05db      	lsls	r3, r3, #23
10002ff4:	1c18      	adds	r0, r3, #0
10002ff6:	2140      	movs	r1, #64	; 0x40
10002ff8:	f7ff fed8 	bl	10002dac <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
10002ffc:	2390      	movs	r3, #144	; 0x90
10002ffe:	05da      	lsls	r2, r3, #23
10003000:	2380      	movs	r3, #128	; 0x80
10003002:	05db      	lsls	r3, r3, #23
10003004:	1c10      	adds	r0, r2, #0
10003006:	1c19      	adds	r1, r3, #0
10003008:	2200      	movs	r2, #0
1000300a:	f7ff feab 	bl	10002d64 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 1U);
1000300e:	2390      	movs	r3, #144	; 0x90
10003010:	05db      	lsls	r3, r3, #23
10003012:	1c18      	adds	r0, r3, #0
10003014:	2101      	movs	r1, #1
10003016:	f7ff fe8d 	bl	10002d34 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_MASTER_1_MISO_Config.port_config);
1000301a:	4a49      	ldr	r2, [pc, #292]	; (10003140 <SPI_MASTER_1_lInit+0x180>)
1000301c:	4b49      	ldr	r3, [pc, #292]	; (10003144 <SPI_MASTER_1_lInit+0x184>)
1000301e:	1c10      	adds	r0, r2, #0
10003020:	2104      	movs	r1, #4
10003022:	1c1a      	adds	r2, r3, #0
10003024:	f7fe f8b0 	bl	10001188 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_G);
10003028:	2390      	movs	r3, #144	; 0x90
1000302a:	05db      	lsls	r3, r3, #23
1000302c:	1c18      	adds	r0, r3, #0
1000302e:	2100      	movs	r1, #0
10003030:	2206      	movs	r2, #6
10003032:	f7ff fecd 	bl	10002dd0 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN1, (uint8_t)SPI_MASTER_INPUT_F);
10003036:	2390      	movs	r3, #144	; 0x90
10003038:	05db      	lsls	r3, r3, #23
1000303a:	1c18      	adds	r0, r3, #0
1000303c:	2103      	movs	r1, #3
1000303e:	2205      	movs	r2, #5
10003040:	f7ff fec6 	bl	10002dd0 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN2, (uint8_t)SPI_MASTER_INPUT_A);
10003044:	2390      	movs	r3, #144	; 0x90
10003046:	05db      	lsls	r3, r3, #23
10003048:	1c18      	adds	r0, r3, #0
1000304a:	2104      	movs	r1, #4
1000304c:	2200      	movs	r2, #0
1000304e:	f7ff febf 	bl	10002dd0 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN3, (uint8_t)SPI_MASTER_INPUT_E);
10003052:	2390      	movs	r3, #144	; 0x90
10003054:	05db      	lsls	r3, r3, #23
10003056:	1c18      	adds	r0, r3, #0
10003058:	2105      	movs	r1, #5
1000305a:	2204      	movs	r2, #4
1000305c:	f7ff feb8 	bl	10002dd0 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
10003060:	2390      	movs	r3, #144	; 0x90
10003062:	05db      	lsls	r3, r3, #23
10003064:	1c18      	adds	r0, r3, #0
10003066:	f7ff fe4b 	bl	10002d00 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &SPI_MASTER_1_MOSI_Config.port_config);
1000306a:	4a35      	ldr	r2, [pc, #212]	; (10003140 <SPI_MASTER_1_lInit+0x180>)
1000306c:	4b36      	ldr	r3, [pc, #216]	; (10003148 <SPI_MASTER_1_lInit+0x188>)
1000306e:	1c10      	adds	r0, r2, #0
10003070:	2105      	movs	r1, #5
10003072:	1c1a      	adds	r2, r3, #0
10003074:	f7fe f888 	bl	10001188 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)7, &SPI_MASTER_1_SCLKOUT_Config.port_config);
10003078:	4a34      	ldr	r2, [pc, #208]	; (1000314c <SPI_MASTER_1_lInit+0x18c>)
1000307a:	4b35      	ldr	r3, [pc, #212]	; (10003150 <SPI_MASTER_1_lInit+0x190>)
1000307c:	1c10      	adds	r0, r2, #0
1000307e:	2107      	movs	r1, #7
10003080:	1c1a      	adds	r2, r3, #0
10003082:	f7fe f881 	bl	10001188 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)6, &SPI_MASTER_1_SS_0_Config.port_config);
10003086:	4a2e      	ldr	r2, [pc, #184]	; (10003140 <SPI_MASTER_1_lInit+0x180>)
10003088:	4b32      	ldr	r3, [pc, #200]	; (10003154 <SPI_MASTER_1_lInit+0x194>)
1000308a:	1c10      	adds	r0, r2, #0
1000308c:	2106      	movs	r1, #6
1000308e:	1c1a      	adds	r2, r3, #0
10003090:	f7fe f87a 	bl	10001188 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_2);
10003094:	2390      	movs	r3, #144	; 0x90
10003096:	05da      	lsls	r2, r3, #23
10003098:	2380      	movs	r3, #128	; 0x80
1000309a:	02db      	lsls	r3, r3, #11
1000309c:	1c10      	adds	r0, r2, #0
1000309e:	1c19      	adds	r1, r3, #0
100030a0:	f7fe feee 	bl	10001e80 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
100030a4:	2390      	movs	r3, #144	; 0x90
100030a6:	05db      	lsls	r3, r3, #23
100030a8:	1c18      	adds	r0, r3, #0
100030aa:	2110      	movs	r1, #16
100030ac:	2200      	movs	r2, #0
100030ae:	f7ff f905 	bl	100022bc <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH0,
100030b2:	2390      	movs	r3, #144	; 0x90
100030b4:	05db      	lsls	r3, r3, #23
100030b6:	1c18      	adds	r0, r3, #0
100030b8:	2120      	movs	r1, #32
100030ba:	2204      	movs	r2, #4
100030bc:	2301      	movs	r3, #1
100030be:	f7ff f881 	bl	100021c4 <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI0_CH0,
100030c2:	2390      	movs	r3, #144	; 0x90
100030c4:	05db      	lsls	r3, r3, #23
100030c6:	1c18      	adds	r0, r3, #0
100030c8:	2110      	movs	r1, #16
100030ca:	2204      	movs	r2, #4
100030cc:	f7ff f916 	bl	100022fc <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_4);
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI0_CH0,
100030d0:	2390      	movs	r3, #144	; 0x90
100030d2:	05db      	lsls	r3, r3, #23
100030d4:	1c18      	adds	r0, r3, #0
100030d6:	2110      	movs	r1, #16
100030d8:	2204      	movs	r2, #4
100030da:	2300      	movs	r3, #0
100030dc:	f7ff f8a0 	bl	10002220 <XMC_USIC_CH_RXFIFO_Configure>
                               16U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI0_CH0,
100030e0:	2390      	movs	r3, #144	; 0x90
100030e2:	05db      	lsls	r3, r3, #23
100030e4:	1c18      	adds	r0, r3, #0
100030e6:	2110      	movs	r1, #16
100030e8:	2202      	movs	r2, #2
100030ea:	f7ff f92b 	bl	10002344 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI0_CH0,
100030ee:	2390      	movs	r3, #144	; 0x90
100030f0:	05db      	lsls	r3, r3, #23
100030f2:	1c18      	adds	r0, r3, #0
100030f4:	2113      	movs	r1, #19
100030f6:	2202      	movs	r2, #2
100030f8:	f7ff f924 	bl	10002344 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)13, 3U);
100030fc:	200d      	movs	r0, #13
100030fe:	2103      	movs	r1, #3
10003100:	f7ff fd06 	bl	10002b10 <__NVIC_SetPriority>
    
  XMC_SCU_SetInterruptControl(13,   XMC_SCU_IRQCTRL_USIC0_SR4_IRQ13);
10003104:	23d0      	movs	r3, #208	; 0xd0
10003106:	011b      	lsls	r3, r3, #4
10003108:	200d      	movs	r0, #13
1000310a:	1c19      	adds	r1, r3, #0
1000310c:	f7fe fab4 	bl	10001678 <XMC_SCU_SetInterruptControl>
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)13);
10003110:	200d      	movs	r0, #13
10003112:	f7ff fce3 	bl	10002adc <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)11, 2U);
10003116:	200b      	movs	r0, #11
10003118:	2102      	movs	r1, #2
1000311a:	f7ff fcf9 	bl	10002b10 <__NVIC_SetPriority>
    
  XMC_SCU_SetInterruptControl(11,   XMC_SCU_IRQCTRL_USIC0_SR2_IRQ11);
1000311e:	23b0      	movs	r3, #176	; 0xb0
10003120:	011b      	lsls	r3, r3, #4
10003122:	200b      	movs	r0, #11
10003124:	1c19      	adds	r1, r3, #0
10003126:	f7fe faa7 	bl	10001678 <XMC_SCU_SetInterruptControl>
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)11);
1000312a:	200b      	movs	r0, #11
1000312c:	f7ff fcd6 	bl	10002adc <__NVIC_EnableIRQ>
    
  return status;
10003130:	1dfb      	adds	r3, r7, #7
10003132:	781b      	ldrb	r3, [r3, #0]
}
10003134:	1c18      	adds	r0, r3, #0
10003136:	46bd      	mov	sp, r7
10003138:	b002      	add	sp, #8
1000313a:	bd80      	pop	{r7, pc}
1000313c:	200005ac 	.word	0x200005ac
10003140:	40040100 	.word	0x40040100
10003144:	200006a0 	.word	0x200006a0
10003148:	2000059c 	.word	0x2000059c
1000314c:	40040000 	.word	0x40040000
10003150:	10006224 	.word	0x10006224
10003154:	1000623c 	.word	0x1000623c

10003158 <IRQ13_Handler>:
/*Transmit ISR*/
void SPI_MASTER_1_tx_handler()
{
10003158:	b580      	push	{r7, lr}
1000315a:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_1);
1000315c:	4b02      	ldr	r3, [pc, #8]	; (10003168 <IRQ13_Handler+0x10>)
1000315e:	1c18      	adds	r0, r3, #0
10003160:	f7ff fa3c 	bl	100025dc <SPI_MASTER_lTransmitHandler>
}
10003164:	46bd      	mov	sp, r7
10003166:	bd80      	pop	{r7, pc}
10003168:	200005dc 	.word	0x200005dc

1000316c <IRQ11_Handler>:

/*Receive ISR*/
void SPI_MASTER_1_rx_handler()
{
1000316c:	b580      	push	{r7, lr}
1000316e:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_1);
10003170:	4b02      	ldr	r3, [pc, #8]	; (1000317c <IRQ11_Handler+0x10>)
10003172:	1c18      	adds	r0, r3, #0
10003174:	f7ff fb2a 	bl	100027cc <SPI_MASTER_lReceiveHandler>
}
10003178:	46bd      	mov	sp, r7
1000317a:	bd80      	pop	{r7, pc}
1000317c:	200005dc 	.word	0x200005dc

10003180 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10003180:	b580      	push	{r7, lr}
10003182:	b082      	sub	sp, #8
10003184:	af00      	add	r7, sp, #0
10003186:	1c02      	adds	r2, r0, #0
10003188:	1dfb      	adds	r3, r7, #7
1000318a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1000318c:	1dfb      	adds	r3, r7, #7
1000318e:	781b      	ldrb	r3, [r3, #0]
10003190:	2b7f      	cmp	r3, #127	; 0x7f
10003192:	d80a      	bhi.n	100031aa <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10003194:	4906      	ldr	r1, [pc, #24]	; (100031b0 <__NVIC_ClearPendingIRQ+0x30>)
10003196:	1dfb      	adds	r3, r7, #7
10003198:	781b      	ldrb	r3, [r3, #0]
1000319a:	1c1a      	adds	r2, r3, #0
1000319c:	231f      	movs	r3, #31
1000319e:	4013      	ands	r3, r2
100031a0:	2201      	movs	r2, #1
100031a2:	409a      	lsls	r2, r3
100031a4:	23c0      	movs	r3, #192	; 0xc0
100031a6:	005b      	lsls	r3, r3, #1
100031a8:	50ca      	str	r2, [r1, r3]
  }
}
100031aa:	46bd      	mov	sp, r7
100031ac:	b002      	add	sp, #8
100031ae:	bd80      	pop	{r7, pc}
100031b0:	e000e100 	.word	0xe000e100

100031b4 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100031b4:	b580      	push	{r7, lr}
100031b6:	b082      	sub	sp, #8
100031b8:	af00      	add	r7, sp, #0
100031ba:	6078      	str	r0, [r7, #4]
100031bc:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
100031be:	687b      	ldr	r3, [r7, #4]
100031c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
100031c2:	683b      	ldr	r3, [r7, #0]
100031c4:	431a      	orrs	r2, r3
100031c6:	687b      	ldr	r3, [r7, #4]
100031c8:	641a      	str	r2, [r3, #64]	; 0x40
}
100031ca:	46bd      	mov	sp, r7
100031cc:	b002      	add	sp, #8
100031ce:	bd80      	pop	{r7, pc}

100031d0 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100031d0:	b580      	push	{r7, lr}
100031d2:	b082      	sub	sp, #8
100031d4:	af00      	add	r7, sp, #0
100031d6:	6078      	str	r0, [r7, #4]
100031d8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
100031da:	687b      	ldr	r3, [r7, #4]
100031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100031de:	683a      	ldr	r2, [r7, #0]
100031e0:	43d2      	mvns	r2, r2
100031e2:	401a      	ands	r2, r3
100031e4:	687b      	ldr	r3, [r7, #4]
100031e6:	641a      	str	r2, [r3, #64]	; 0x40
}
100031e8:	46bd      	mov	sp, r7
100031ea:	b002      	add	sp, #8
100031ec:	bd80      	pop	{r7, pc}
100031ee:	46c0      	nop			; (mov r8, r8)

100031f0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100031f0:	b580      	push	{r7, lr}
100031f2:	b082      	sub	sp, #8
100031f4:	af00      	add	r7, sp, #0
100031f6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100031f8:	687b      	ldr	r3, [r7, #4]
100031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100031fc:	b2db      	uxtb	r3, r3
100031fe:	227f      	movs	r2, #127	; 0x7f
10003200:	4393      	bics	r3, r2
10003202:	b2db      	uxtb	r3, r3
}
10003204:	1c18      	adds	r0, r3, #0
10003206:	46bd      	mov	sp, r7
10003208:	b002      	add	sp, #8
1000320a:	bd80      	pop	{r7, pc}

1000320c <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
1000320c:	b580      	push	{r7, lr}
1000320e:	b082      	sub	sp, #8
10003210:	af00      	add	r7, sp, #0
10003212:	6078      	str	r0, [r7, #4]
10003214:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
10003216:	683b      	ldr	r3, [r7, #0]
10003218:	2280      	movs	r2, #128	; 0x80
1000321a:	0252      	lsls	r2, r2, #9
1000321c:	409a      	lsls	r2, r3
1000321e:	687b      	ldr	r3, [r7, #4]
10003220:	669a      	str	r2, [r3, #104]	; 0x68
}
10003222:	46bd      	mov	sp, r7
10003224:	b002      	add	sp, #8
10003226:	bd80      	pop	{r7, pc}

10003228 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003228:	b580      	push	{r7, lr}
1000322a:	b082      	sub	sp, #8
1000322c:	af00      	add	r7, sp, #0
1000322e:	6078      	str	r0, [r7, #4]
10003230:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
10003232:	687a      	ldr	r2, [r7, #4]
10003234:	2384      	movs	r3, #132	; 0x84
10003236:	005b      	lsls	r3, r3, #1
10003238:	58d2      	ldr	r2, [r2, r3]
1000323a:	683b      	ldr	r3, [r7, #0]
1000323c:	431a      	orrs	r2, r3
1000323e:	1c11      	adds	r1, r2, #0
10003240:	687a      	ldr	r2, [r7, #4]
10003242:	2384      	movs	r3, #132	; 0x84
10003244:	005b      	lsls	r3, r3, #1
10003246:	50d1      	str	r1, [r2, r3]
}
10003248:	46bd      	mov	sp, r7
1000324a:	b002      	add	sp, #8
1000324c:	bd80      	pop	{r7, pc}
1000324e:	46c0      	nop			; (mov r8, r8)

10003250 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003250:	b580      	push	{r7, lr}
10003252:	b082      	sub	sp, #8
10003254:	af00      	add	r7, sp, #0
10003256:	6078      	str	r0, [r7, #4]
10003258:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
1000325a:	687a      	ldr	r2, [r7, #4]
1000325c:	2384      	movs	r3, #132	; 0x84
1000325e:	005b      	lsls	r3, r3, #1
10003260:	58d3      	ldr	r3, [r2, r3]
10003262:	683a      	ldr	r2, [r7, #0]
10003264:	43d2      	mvns	r2, r2
10003266:	401a      	ands	r2, r3
10003268:	1c11      	adds	r1, r2, #0
1000326a:	687a      	ldr	r2, [r7, #4]
1000326c:	2384      	movs	r3, #132	; 0x84
1000326e:	005b      	lsls	r3, r3, #1
10003270:	50d1      	str	r1, [r2, r3]
}
10003272:	46bd      	mov	sp, r7
10003274:	b002      	add	sp, #8
10003276:	bd80      	pop	{r7, pc}

10003278 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10003278:	b580      	push	{r7, lr}
1000327a:	b082      	sub	sp, #8
1000327c:	af00      	add	r7, sp, #0
1000327e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
10003280:	687a      	ldr	r2, [r7, #4]
10003282:	238c      	movs	r3, #140	; 0x8c
10003284:	005b      	lsls	r3, r3, #1
10003286:	2180      	movs	r1, #128	; 0x80
10003288:	0209      	lsls	r1, r1, #8
1000328a:	50d1      	str	r1, [r2, r3]
}
1000328c:	46bd      	mov	sp, r7
1000328e:	b002      	add	sp, #8
10003290:	bd80      	pop	{r7, pc}
10003292:	46c0      	nop			; (mov r8, r8)

10003294 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10003294:	b580      	push	{r7, lr}
10003296:	b082      	sub	sp, #8
10003298:	af00      	add	r7, sp, #0
1000329a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000329c:	687a      	ldr	r2, [r7, #4]
1000329e:	238a      	movs	r3, #138	; 0x8a
100032a0:	005b      	lsls	r3, r3, #1
100032a2:	58d2      	ldr	r2, [r2, r3]
100032a4:	2380      	movs	r3, #128	; 0x80
100032a6:	015b      	lsls	r3, r3, #5
100032a8:	4013      	ands	r3, r2
100032aa:	1e5a      	subs	r2, r3, #1
100032ac:	4193      	sbcs	r3, r2
100032ae:	b2db      	uxtb	r3, r3
}
100032b0:	1c18      	adds	r0, r3, #0
100032b2:	46bd      	mov	sp, r7
100032b4:	b002      	add	sp, #8
100032b6:	bd80      	pop	{r7, pc}

100032b8 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
100032b8:	b580      	push	{r7, lr}
100032ba:	b082      	sub	sp, #8
100032bc:	af00      	add	r7, sp, #0
100032be:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
100032c0:	687a      	ldr	r2, [r7, #4]
100032c2:	238a      	movs	r3, #138	; 0x8a
100032c4:	005b      	lsls	r3, r3, #1
100032c6:	58d2      	ldr	r2, [r2, r3]
100032c8:	2380      	movs	r3, #128	; 0x80
100032ca:	011b      	lsls	r3, r3, #4
100032cc:	4013      	ands	r3, r2
100032ce:	1e5a      	subs	r2, r3, #1
100032d0:	4193      	sbcs	r3, r2
100032d2:	b2db      	uxtb	r3, r3
}
100032d4:	1c18      	adds	r0, r3, #0
100032d6:	46bd      	mov	sp, r7
100032d8:	b002      	add	sp, #8
100032da:	bd80      	pop	{r7, pc}

100032dc <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100032dc:	b580      	push	{r7, lr}
100032de:	b082      	sub	sp, #8
100032e0:	af00      	add	r7, sp, #0
100032e2:	6078      	str	r0, [r7, #4]
100032e4:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
100032e6:	687a      	ldr	r2, [r7, #4]
100032e8:	2386      	movs	r3, #134	; 0x86
100032ea:	005b      	lsls	r3, r3, #1
100032ec:	58d2      	ldr	r2, [r2, r3]
100032ee:	683b      	ldr	r3, [r7, #0]
100032f0:	431a      	orrs	r2, r3
100032f2:	1c11      	adds	r1, r2, #0
100032f4:	687a      	ldr	r2, [r7, #4]
100032f6:	2386      	movs	r3, #134	; 0x86
100032f8:	005b      	lsls	r3, r3, #1
100032fa:	50d1      	str	r1, [r2, r3]
}
100032fc:	46bd      	mov	sp, r7
100032fe:	b002      	add	sp, #8
10003300:	bd80      	pop	{r7, pc}
10003302:	46c0      	nop			; (mov r8, r8)

10003304 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003304:	b580      	push	{r7, lr}
10003306:	b082      	sub	sp, #8
10003308:	af00      	add	r7, sp, #0
1000330a:	6078      	str	r0, [r7, #4]
1000330c:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
1000330e:	687a      	ldr	r2, [r7, #4]
10003310:	2386      	movs	r3, #134	; 0x86
10003312:	005b      	lsls	r3, r3, #1
10003314:	58d3      	ldr	r3, [r2, r3]
10003316:	683a      	ldr	r2, [r7, #0]
10003318:	43d2      	mvns	r2, r2
1000331a:	401a      	ands	r2, r3
1000331c:	1c11      	adds	r1, r2, #0
1000331e:	687a      	ldr	r2, [r7, #4]
10003320:	2386      	movs	r3, #134	; 0x86
10003322:	005b      	lsls	r3, r3, #1
10003324:	50d1      	str	r1, [r2, r3]
}
10003326:	46bd      	mov	sp, r7
10003328:	b002      	add	sp, #8
1000332a:	bd80      	pop	{r7, pc}

1000332c <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
1000332c:	b580      	push	{r7, lr}
1000332e:	b082      	sub	sp, #8
10003330:	af00      	add	r7, sp, #0
10003332:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
10003334:	687a      	ldr	r2, [r7, #4]
10003336:	238c      	movs	r3, #140	; 0x8c
10003338:	005b      	lsls	r3, r3, #1
1000333a:	2180      	movs	r1, #128	; 0x80
1000333c:	01c9      	lsls	r1, r1, #7
1000333e:	50d1      	str	r1, [r2, r3]
}
10003340:	46bd      	mov	sp, r7
10003342:	b002      	add	sp, #8
10003344:	bd80      	pop	{r7, pc}
10003346:	46c0      	nop			; (mov r8, r8)

10003348 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10003348:	b580      	push	{r7, lr}
1000334a:	b082      	sub	sp, #8
1000334c:	af00      	add	r7, sp, #0
1000334e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
10003350:	687a      	ldr	r2, [r7, #4]
10003352:	238a      	movs	r3, #138	; 0x8a
10003354:	005b      	lsls	r3, r3, #1
10003356:	58d3      	ldr	r3, [r2, r3]
10003358:	2208      	movs	r2, #8
1000335a:	4013      	ands	r3, r2
1000335c:	1e5a      	subs	r2, r3, #1
1000335e:	4193      	sbcs	r3, r2
10003360:	b2db      	uxtb	r3, r3
}
10003362:	1c18      	adds	r0, r3, #0
10003364:	46bd      	mov	sp, r7
10003366:	b002      	add	sp, #8
10003368:	bd80      	pop	{r7, pc}
1000336a:	46c0      	nop			; (mov r8, r8)

1000336c <XMC_I2C_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const uint8_t service_request)
{
1000336c:	b580      	push	{r7, lr}
1000336e:	b082      	sub	sp, #8
10003370:	af00      	add	r7, sp, #0
10003372:	6078      	str	r0, [r7, #4]
10003374:	1c0a      	adds	r2, r1, #0
10003376:	1cfb      	adds	r3, r7, #3
10003378:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
1000337a:	1cfb      	adds	r3, r7, #3
1000337c:	781b      	ldrb	r3, [r3, #0]
1000337e:	687a      	ldr	r2, [r7, #4]
10003380:	1c10      	adds	r0, r2, #0
10003382:	2110      	movs	r1, #16
10003384:	1c1a      	adds	r2, r3, #0
10003386:	f7fe ff99 	bl	100022bc <XMC_USIC_CH_SetInterruptNodePointer>
}
1000338a:	46bd      	mov	sp, r7
1000338c:	b002      	add	sp, #8
1000338e:	bd80      	pop	{r7, pc}

10003390 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
10003390:	b580      	push	{r7, lr}
10003392:	b082      	sub	sp, #8
10003394:	af00      	add	r7, sp, #0
10003396:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
10003398:	687b      	ldr	r3, [r7, #4]
1000339a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
1000339c:	1c18      	adds	r0, r3, #0
1000339e:	46bd      	mov	sp, r7
100033a0:	b002      	add	sp, #8
100033a2:	bd80      	pop	{r7, pc}

100033a4 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
100033a4:	b580      	push	{r7, lr}
100033a6:	b082      	sub	sp, #8
100033a8:	af00      	add	r7, sp, #0
100033aa:	6078      	str	r0, [r7, #4]
100033ac:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
100033ae:	687b      	ldr	r3, [r7, #4]
100033b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
100033b2:	683b      	ldr	r3, [r7, #0]
100033b4:	431a      	orrs	r2, r3
100033b6:	687b      	ldr	r3, [r7, #4]
100033b8:	64da      	str	r2, [r3, #76]	; 0x4c
}
100033ba:	46bd      	mov	sp, r7
100033bc:	b002      	add	sp, #8
100033be:	bd80      	pop	{r7, pc}

100033c0 <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
100033c0:	b580      	push	{r7, lr}
100033c2:	b084      	sub	sp, #16
100033c4:	af00      	add	r7, sp, #0
100033c6:	60f8      	str	r0, [r7, #12]
100033c8:	60b9      	str	r1, [r7, #8]
100033ca:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
100033cc:	68fb      	ldr	r3, [r7, #12]
100033ce:	6819      	ldr	r1, [r3, #0]
100033d0:	68bb      	ldr	r3, [r7, #8]
100033d2:	b2da      	uxtb	r2, r3
100033d4:	687b      	ldr	r3, [r7, #4]
100033d6:	1c08      	adds	r0, r1, #0
100033d8:	1c11      	adds	r1, r2, #0
100033da:	1c1a      	adds	r2, r3, #0
100033dc:	f7fe ff52 	bl	10002284 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
100033e0:	46bd      	mov	sp, r7
100033e2:	b004      	add	sp, #16
100033e4:	bd80      	pop	{r7, pc}
100033e6:	46c0      	nop			; (mov r8, r8)

100033e8 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
100033e8:	b580      	push	{r7, lr}
100033ea:	b082      	sub	sp, #8
100033ec:	af00      	add	r7, sp, #0
100033ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
100033f0:	687b      	ldr	r3, [r7, #4]
100033f2:	681b      	ldr	r3, [r3, #0]
100033f4:	1c18      	adds	r0, r3, #0
100033f6:	f7ff ff4d 	bl	10003294 <XMC_USIC_CH_TXFIFO_IsFull>
100033fa:	1c03      	adds	r3, r0, #0
}
100033fc:	1c18      	adds	r0, r3, #0
100033fe:	46bd      	mov	sp, r7
10003400:	b002      	add	sp, #8
10003402:	bd80      	pop	{r7, pc}

10003404 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
10003404:	b580      	push	{r7, lr}
10003406:	b082      	sub	sp, #8
10003408:	af00      	add	r7, sp, #0
1000340a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1000340c:	687b      	ldr	r3, [r7, #4]
1000340e:	681b      	ldr	r3, [r3, #0]
10003410:	1c18      	adds	r0, r3, #0
10003412:	f7ff ff99 	bl	10003348 <XMC_USIC_CH_RXFIFO_IsEmpty>
10003416:	1c03      	adds	r3, r0, #0
}
10003418:	1c18      	adds	r0, r3, #0
1000341a:	46bd      	mov	sp, r7
1000341c:	b002      	add	sp, #8
1000341e:	bd80      	pop	{r7, pc}

10003420 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
10003420:	b580      	push	{r7, lr}
10003422:	b082      	sub	sp, #8
10003424:	af00      	add	r7, sp, #0
10003426:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
10003428:	687b      	ldr	r3, [r7, #4]
1000342a:	681b      	ldr	r3, [r3, #0]
1000342c:	1c18      	adds	r0, r3, #0
1000342e:	f7fe fbeb 	bl	10001c08 <XMC_I2C_CH_GetReceivedData>
10003432:	1c03      	adds	r3, r0, #0
}
10003434:	1c18      	adds	r0, r3, #0
10003436:	46bd      	mov	sp, r7
10003438:	b002      	add	sp, #8
1000343a:	bd80      	pop	{r7, pc}

1000343c <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
1000343c:	b580      	push	{r7, lr}
1000343e:	b082      	sub	sp, #8
10003440:	af00      	add	r7, sp, #0
10003442:	6078      	str	r0, [r7, #4]
10003444:	1c0a      	adds	r2, r1, #0
10003446:	1cfb      	adds	r3, r7, #3
10003448:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
1000344a:	687b      	ldr	r3, [r7, #4]
1000344c:	681a      	ldr	r2, [r3, #0]
1000344e:	1cfb      	adds	r3, r7, #3
10003450:	781b      	ldrb	r3, [r3, #0]
10003452:	1c10      	adds	r0, r2, #0
10003454:	1c19      	adds	r1, r3, #0
10003456:	f7fe fb55 	bl	10001b04 <XMC_I2C_CH_MasterTransmit>
}
1000345a:	46bd      	mov	sp, r7
1000345c:	b002      	add	sp, #8
1000345e:	bd80      	pop	{r7, pc}

10003460 <I2C_MASTER_EnableEvent>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
10003460:	b580      	push	{r7, lr}
10003462:	b082      	sub	sp, #8
10003464:	af00      	add	r7, sp, #0
10003466:	6078      	str	r0, [r7, #4]
10003468:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL));
  XMC_I2C_CH_EnableEvent(handle->channel, event);
1000346a:	687b      	ldr	r3, [r7, #4]
1000346c:	681a      	ldr	r2, [r3, #0]
1000346e:	683b      	ldr	r3, [r7, #0]
10003470:	1c10      	adds	r0, r2, #0
10003472:	1c19      	adds	r1, r3, #0
10003474:	f7fe fbe8 	bl	10001c48 <XMC_I2C_CH_EnableEvent>
}
10003478:	46bd      	mov	sp, r7
1000347a:	b002      	add	sp, #8
1000347c:	bd80      	pop	{r7, pc}
1000347e:	46c0      	nop			; (mov r8, r8)

10003480 <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
10003480:	b580      	push	{r7, lr}
10003482:	b082      	sub	sp, #8
10003484:	af00      	add	r7, sp, #0
10003486:	6078      	str	r0, [r7, #4]
10003488:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
  XMC_I2C_CH_DisableEvent(handle->channel, event);
1000348a:	687b      	ldr	r3, [r7, #4]
1000348c:	681a      	ldr	r2, [r3, #0]
1000348e:	683b      	ldr	r3, [r7, #0]
10003490:	1c10      	adds	r0, r2, #0
10003492:	1c19      	adds	r1, r3, #0
10003494:	f7fe fbf4 	bl	10001c80 <XMC_I2C_CH_DisableEvent>
}
10003498:	46bd      	mov	sp, r7
1000349a:	b002      	add	sp, #8
1000349c:	bd80      	pop	{r7, pc}
1000349e:	46c0      	nop			; (mov r8, r8)

100034a0 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
100034a0:	b580      	push	{r7, lr}
100034a2:	b082      	sub	sp, #8
100034a4:	af00      	add	r7, sp, #0
100034a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
100034a8:	687b      	ldr	r3, [r7, #4]
100034aa:	681b      	ldr	r3, [r3, #0]
100034ac:	1c18      	adds	r0, r3, #0
100034ae:	f7fe fb57 	bl	10001b60 <XMC_I2C_CH_MasterReceiveAck>
}
100034b2:	46bd      	mov	sp, r7
100034b4:	b002      	add	sp, #8
100034b6:	bd80      	pop	{r7, pc}

100034b8 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
100034b8:	b580      	push	{r7, lr}
100034ba:	b082      	sub	sp, #8
100034bc:	af00      	add	r7, sp, #0
100034be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
100034c0:	687b      	ldr	r3, [r7, #4]
100034c2:	681b      	ldr	r3, [r3, #0]
100034c4:	1c18      	adds	r0, r3, #0
100034c6:	f7fe fb75 	bl	10001bb4 <XMC_I2C_CH_MasterReceiveNack>
}
100034ca:	46bd      	mov	sp, r7
100034cc:	b002      	add	sp, #8
100034ce:	bd80      	pop	{r7, pc}

100034d0 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
100034d0:	b580      	push	{r7, lr}
100034d2:	b082      	sub	sp, #8
100034d4:	af00      	add	r7, sp, #0
100034d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
100034d8:	687b      	ldr	r3, [r7, #4]
100034da:	681b      	ldr	r3, [r3, #0]
100034dc:	1c18      	adds	r0, r3, #0
100034de:	2110      	movs	r1, #16
100034e0:	f7ff ff60 	bl	100033a4 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
100034e4:	687b      	ldr	r3, [r7, #4]
100034e6:	681b      	ldr	r3, [r3, #0]
100034e8:	1c18      	adds	r0, r3, #0
100034ea:	f7fe fae1 	bl	10001ab0 <XMC_I2C_CH_MasterStop>
}
100034ee:	46bd      	mov	sp, r7
100034f0:	b002      	add	sp, #8
100034f2:	bd80      	pop	{r7, pc}

100034f4 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
100034f4:	b580      	push	{r7, lr}
100034f6:	b084      	sub	sp, #16
100034f8:	af00      	add	r7, sp, #0
100034fa:	60f8      	str	r0, [r7, #12]
100034fc:	60b9      	str	r1, [r7, #8]
100034fe:	1dfb      	adds	r3, r7, #7
10003500:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
10003502:	68fb      	ldr	r3, [r7, #12]
10003504:	681b      	ldr	r3, [r3, #0]
10003506:	1c18      	adds	r0, r3, #0
10003508:	2104      	movs	r1, #4
1000350a:	f7ff ff4b 	bl	100033a4 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
1000350e:	68fb      	ldr	r3, [r7, #12]
10003510:	6819      	ldr	r1, [r3, #0]
10003512:	68bb      	ldr	r3, [r7, #8]
10003514:	b29a      	uxth	r2, r3
10003516:	1dfb      	adds	r3, r7, #7
10003518:	781b      	ldrb	r3, [r3, #0]
1000351a:	1c08      	adds	r0, r1, #0
1000351c:	1c11      	adds	r1, r2, #0
1000351e:	1c1a      	adds	r2, r3, #0
10003520:	f7fe fa46 	bl	100019b0 <XMC_I2C_CH_MasterStart>
}
10003524:	46bd      	mov	sp, r7
10003526:	b004      	add	sp, #16
10003528:	bd80      	pop	{r7, pc}
1000352a:	46c0      	nop			; (mov r8, r8)

1000352c <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
1000352c:	b580      	push	{r7, lr}
1000352e:	b084      	sub	sp, #16
10003530:	af00      	add	r7, sp, #0
10003532:	60f8      	str	r0, [r7, #12]
10003534:	60b9      	str	r1, [r7, #8]
10003536:	1dfb      	adds	r3, r7, #7
10003538:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
1000353a:	68fb      	ldr	r3, [r7, #12]
1000353c:	681b      	ldr	r3, [r3, #0]
1000353e:	1c18      	adds	r0, r3, #0
10003540:	2108      	movs	r1, #8
10003542:	f7ff ff2f 	bl	100033a4 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
10003546:	68fb      	ldr	r3, [r7, #12]
10003548:	6819      	ldr	r1, [r3, #0]
1000354a:	68bb      	ldr	r3, [r7, #8]
1000354c:	b29a      	uxth	r2, r3
1000354e:	1dfb      	adds	r3, r7, #7
10003550:	781b      	ldrb	r3, [r3, #0]
10003552:	1c08      	adds	r0, r1, #0
10003554:	1c11      	adds	r1, r2, #0
10003556:	1c1a      	adds	r2, r3, #0
10003558:	f7fe fa6a 	bl	10001a30 <XMC_I2C_CH_MasterRepeatedStart>
}
1000355c:	46bd      	mov	sp, r7
1000355e:	b004      	add	sp, #16
10003560:	bd80      	pop	{r7, pc}
10003562:	46c0      	nop			; (mov r8, r8)

10003564 <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
10003564:	b580      	push	{r7, lr}
10003566:	b084      	sub	sp, #16
10003568:	af00      	add	r7, sp, #0
1000356a:	6078      	str	r0, [r7, #4]
1000356c:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
1000356e:	687a      	ldr	r2, [r7, #4]
10003570:	683b      	ldr	r3, [r7, #0]
10003572:	429a      	cmp	r2, r3
10003574:	d202      	bcs.n	1000357c <calculate_minfifosize+0x18>
  {
    result = a;
10003576:	687b      	ldr	r3, [r7, #4]
10003578:	60fb      	str	r3, [r7, #12]
1000357a:	e001      	b.n	10003580 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
1000357c:	683b      	ldr	r3, [r7, #0]
1000357e:	60fb      	str	r3, [r7, #12]
  }
  return (result);
10003580:	68fb      	ldr	r3, [r7, #12]
}
10003582:	1c18      	adds	r0, r3, #0
10003584:	46bd      	mov	sp, r7
10003586:	b004      	add	sp, #16
10003588:	bd80      	pop	{r7, pc}
1000358a:	46c0      	nop			; (mov r8, r8)

1000358c <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
1000358c:	b580      	push	{r7, lr}
1000358e:	b084      	sub	sp, #16
10003590:	af00      	add	r7, sp, #0
10003592:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
10003594:	687b      	ldr	r3, [r7, #4]
10003596:	2b00      	cmp	r3, #0
10003598:	d008      	beq.n	100035ac <I2C_MASTER_Init+0x20>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
1000359a:	687b      	ldr	r3, [r7, #4]
1000359c:	685b      	ldr	r3, [r3, #4]
1000359e:	685b      	ldr	r3, [r3, #4]
100035a0:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
100035a2:	230f      	movs	r3, #15
100035a4:	18fb      	adds	r3, r7, r3
100035a6:	2200      	movs	r2, #0
100035a8:	701a      	strb	r2, [r3, #0]
100035aa:	e003      	b.n	100035b4 <I2C_MASTER_Init+0x28>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
100035ac:	230f      	movs	r3, #15
100035ae:	18fb      	adds	r3, r7, r3
100035b0:	2201      	movs	r2, #1
100035b2:	701a      	strb	r2, [r3, #0]
  }
  return (status);
100035b4:	230f      	movs	r3, #15
100035b6:	18fb      	adds	r3, r7, r3
100035b8:	781b      	ldrb	r3, [r3, #0]
}
100035ba:	1c18      	adds	r0, r3, #0
100035bc:	46bd      	mov	sp, r7
100035be:	b004      	add	sp, #16
100035c0:	bd80      	pop	{r7, pc}
100035c2:	46c0      	nop			; (mov r8, r8)

100035c4 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
100035c4:	b580      	push	{r7, lr}
100035c6:	b084      	sub	sp, #16
100035c8:	af00      	add	r7, sp, #0
100035ca:	6078      	str	r0, [r7, #4]
100035cc:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
100035ce:	687b      	ldr	r3, [r7, #4]
100035d0:	681b      	ldr	r3, [r3, #0]
100035d2:	1c18      	adds	r0, r3, #0
100035d4:	f7ff fedc 	bl	10003390 <XMC_I2C_CH_GetStatusFlag>
100035d8:	1c03      	adds	r3, r0, #0
100035da:	60fb      	str	r3, [r7, #12]

  return (status & flagtype);
100035dc:	68fb      	ldr	r3, [r7, #12]
100035de:	683a      	ldr	r2, [r7, #0]
100035e0:	4013      	ands	r3, r2
}
100035e2:	1c18      	adds	r0, r3, #0
100035e4:	46bd      	mov	sp, r7
100035e6:	b004      	add	sp, #16
100035e8:	bd80      	pop	{r7, pc}
100035ea:	46c0      	nop			; (mov r8, r8)

100035ec <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
100035ec:	b580      	push	{r7, lr}
100035ee:	b082      	sub	sp, #8
100035f0:	af00      	add	r7, sp, #0
100035f2:	6078      	str	r0, [r7, #4]
100035f4:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
100035f6:	687b      	ldr	r3, [r7, #4]
100035f8:	681a      	ldr	r2, [r3, #0]
100035fa:	683b      	ldr	r3, [r7, #0]
100035fc:	1c10      	adds	r0, r2, #0
100035fe:	1c19      	adds	r1, r3, #0
10003600:	f7ff fed0 	bl	100033a4 <XMC_I2C_CH_ClearStatusFlag>
}
10003604:	46bd      	mov	sp, r7
10003606:	b002      	add	sp, #8
10003608:	bd80      	pop	{r7, pc}
1000360a:	46c0      	nop			; (mov r8, r8)

1000360c <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
1000360c:	b5b0      	push	{r4, r5, r7, lr}
1000360e:	b088      	sub	sp, #32
10003610:	af02      	add	r7, sp, #8
10003612:	60f8      	str	r0, [r7, #12]
10003614:	607a      	str	r2, [r7, #4]
10003616:	603b      	str	r3, [r7, #0]
10003618:	230b      	movs	r3, #11
1000361a:	18fb      	adds	r3, r7, r3
1000361c:	1c0a      	adds	r2, r1, #0
1000361e:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
10003620:	2317      	movs	r3, #23
10003622:	18fb      	adds	r3, r7, r3
10003624:	2202      	movs	r2, #2
10003626:	701a      	strb	r2, [r3, #0]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
10003628:	68fb      	ldr	r3, [r7, #12]
1000362a:	685b      	ldr	r3, [r3, #4]
1000362c:	2224      	movs	r2, #36	; 0x24
1000362e:	5c9b      	ldrb	r3, [r3, r2]
10003630:	2b00      	cmp	r3, #0
10003632:	d112      	bne.n	1000365a <I2C_MASTER_Transmit+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
10003634:	2317      	movs	r3, #23
10003636:	18fc      	adds	r4, r7, r3
10003638:	68f8      	ldr	r0, [r7, #12]
1000363a:	230b      	movs	r3, #11
1000363c:	18fb      	adds	r3, r7, r3
1000363e:	7819      	ldrb	r1, [r3, #0]
10003640:	687a      	ldr	r2, [r7, #4]
10003642:	683d      	ldr	r5, [r7, #0]
10003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
10003646:	9300      	str	r3, [sp, #0]
10003648:	232c      	movs	r3, #44	; 0x2c
1000364a:	18fb      	adds	r3, r7, r3
1000364c:	781b      	ldrb	r3, [r3, #0]
1000364e:	9301      	str	r3, [sp, #4]
10003650:	1c2b      	adds	r3, r5, #0
10003652:	f000 fbaf 	bl	10003db4 <I2C_MASTER_StartTransmitIRQ>
10003656:	1c03      	adds	r3, r0, #0
10003658:	7023      	strb	r3, [r4, #0]
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
1000365a:	2317      	movs	r3, #23
1000365c:	18fb      	adds	r3, r7, r3
1000365e:	781b      	ldrb	r3, [r3, #0]
} /* end of function */
10003660:	1c18      	adds	r0, r3, #0
10003662:	46bd      	mov	sp, r7
10003664:	b006      	add	sp, #24
10003666:	bdb0      	pop	{r4, r5, r7, pc}

10003668 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
10003668:	b580      	push	{r7, lr}
1000366a:	b084      	sub	sp, #16
1000366c:	af00      	add	r7, sp, #0
1000366e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
10003670:	687b      	ldr	r3, [r7, #4]
10003672:	689b      	ldr	r3, [r3, #8]
10003674:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
10003676:	230f      	movs	r3, #15
10003678:	18fb      	adds	r3, r7, r3
1000367a:	2200      	movs	r2, #0
1000367c:	701a      	strb	r2, [r3, #0]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
1000367e:	687a      	ldr	r2, [r7, #4]
10003680:	23b1      	movs	r3, #177	; 0xb1
10003682:	005b      	lsls	r3, r3, #1
10003684:	1c10      	adds	r0, r2, #0
10003686:	1c19      	adds	r1, r3, #0
10003688:	f7ff ff9c 	bl	100035c4 <I2C_MASTER_GetFlagStatus>
1000368c:	1e03      	subs	r3, r0, #0
1000368e:	d014      	beq.n	100036ba <I2C_MASTER_TransmitHandler+0x52>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003690:	687b      	ldr	r3, [r7, #4]
10003692:	681a      	ldr	r2, [r3, #0]
10003694:	2380      	movs	r3, #128	; 0x80
10003696:	05db      	lsls	r3, r3, #23
10003698:	1c10      	adds	r0, r2, #0
1000369a:	1c19      	adds	r1, r3, #0
1000369c:	f7ff fdd8 	bl	10003250 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
100036a0:	687b      	ldr	r3, [r7, #4]
100036a2:	681a      	ldr	r2, [r3, #0]
100036a4:	2380      	movs	r3, #128	; 0x80
100036a6:	019b      	lsls	r3, r3, #6
100036a8:	1c10      	adds	r0, r2, #0
100036aa:	1c19      	adds	r1, r3, #0
100036ac:	f7ff fd90 	bl	100031d0 <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
100036b0:	687b      	ldr	r3, [r7, #4]
100036b2:	1c18      	adds	r0, r3, #0
100036b4:	f000 fe8c 	bl	100043d0 <I2C_MASTER_ProtocolHandler>
100036b8:	e11f      	b.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
100036ba:	68bb      	ldr	r3, [r7, #8]
100036bc:	699b      	ldr	r3, [r3, #24]
100036be:	2b00      	cmp	r3, #0
100036c0:	d000      	beq.n	100036c4 <I2C_MASTER_TransmitHandler+0x5c>
100036c2:	e08c      	b.n	100037de <I2C_MASTER_TransmitHandler+0x176>
  {
    if (handle->config->txFIFO_size > 0)
100036c4:	687b      	ldr	r3, [r7, #4]
100036c6:	685b      	ldr	r3, [r3, #4]
100036c8:	2226      	movs	r2, #38	; 0x26
100036ca:	5c9b      	ldrb	r3, [r3, r2]
100036cc:	2b00      	cmp	r3, #0
100036ce:	d063      	beq.n	10003798 <I2C_MASTER_TransmitHandler+0x130>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
100036d0:	68bb      	ldr	r3, [r7, #8]
100036d2:	68da      	ldr	r2, [r3, #12]
100036d4:	68bb      	ldr	r3, [r7, #8]
100036d6:	689b      	ldr	r3, [r3, #8]
100036d8:	429a      	cmp	r2, r3
100036da:	d234      	bcs.n	10003746 <I2C_MASTER_TransmitHandler+0xde>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
100036dc:	687a      	ldr	r2, [r7, #4]
100036de:	2380      	movs	r3, #128	; 0x80
100036e0:	05db      	lsls	r3, r3, #23
100036e2:	1c10      	adds	r0, r2, #0
100036e4:	1c19      	adds	r1, r3, #0
100036e6:	f7ff fecb 	bl	10003480 <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
100036ea:	687b      	ldr	r3, [r7, #4]
100036ec:	681a      	ldr	r2, [r3, #0]
100036ee:	2380      	movs	r3, #128	; 0x80
100036f0:	05db      	lsls	r3, r3, #23
100036f2:	1c10      	adds	r0, r2, #0
100036f4:	1c19      	adds	r1, r3, #0
100036f6:	f7ff fd97 	bl	10003228 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
100036fa:	e018      	b.n	1000372e <I2C_MASTER_TransmitHandler+0xc6>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
100036fc:	68bb      	ldr	r3, [r7, #8]
100036fe:	68da      	ldr	r2, [r3, #12]
10003700:	68bb      	ldr	r3, [r7, #8]
10003702:	689b      	ldr	r3, [r3, #8]
10003704:	429a      	cmp	r2, r3
10003706:	d210      	bcs.n	1000372a <I2C_MASTER_TransmitHandler+0xc2>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10003708:	68bb      	ldr	r3, [r7, #8]
1000370a:	681a      	ldr	r2, [r3, #0]
1000370c:	68bb      	ldr	r3, [r7, #8]
1000370e:	68db      	ldr	r3, [r3, #12]
10003710:	18d3      	adds	r3, r2, r3
10003712:	781b      	ldrb	r3, [r3, #0]
10003714:	687a      	ldr	r2, [r7, #4]
10003716:	1c10      	adds	r0, r2, #0
10003718:	1c19      	adds	r1, r3, #0
1000371a:	f7ff fe8f 	bl	1000343c <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
1000371e:	68bb      	ldr	r3, [r7, #8]
10003720:	68db      	ldr	r3, [r3, #12]
10003722:	1c5a      	adds	r2, r3, #1
10003724:	68bb      	ldr	r3, [r7, #8]
10003726:	60da      	str	r2, [r3, #12]
10003728:	e001      	b.n	1000372e <I2C_MASTER_TransmitHandler+0xc6>
          }
          else
          {
            break;
1000372a:	46c0      	nop			; (mov r8, r8)
1000372c:	e0e5      	b.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000372e:	687b      	ldr	r3, [r7, #4]
10003730:	1c18      	adds	r0, r3, #0
10003732:	f7ff fe59 	bl	100033e8 <I2C_MASTER_IsTXFIFOFull>
10003736:	1c03      	adds	r3, r0, #0
10003738:	1c1a      	adds	r2, r3, #0
1000373a:	2301      	movs	r3, #1
1000373c:	4053      	eors	r3, r2
1000373e:	b2db      	uxtb	r3, r3
10003740:	2b00      	cmp	r3, #0
10003742:	d1db      	bne.n	100036fc <I2C_MASTER_TransmitHandler+0x94>
10003744:	e0d9      	b.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003746:	687b      	ldr	r3, [r7, #4]
10003748:	681a      	ldr	r2, [r3, #0]
1000374a:	2380      	movs	r3, #128	; 0x80
1000374c:	05db      	lsls	r3, r3, #23
1000374e:	1c10      	adds	r0, r2, #0
10003750:	1c19      	adds	r1, r3, #0
10003752:	f7ff fd7d 	bl	10003250 <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
10003756:	687b      	ldr	r3, [r7, #4]
10003758:	685b      	ldr	r3, [r3, #4]
1000375a:	2228      	movs	r2, #40	; 0x28
1000375c:	5c9b      	ldrb	r3, [r3, r2]
1000375e:	b25b      	sxtb	r3, r3
10003760:	1c18      	adds	r0, r3, #0
10003762:	f7ff fd0d 	bl	10003180 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
10003766:	46c0      	nop			; (mov r8, r8)
10003768:	687b      	ldr	r3, [r7, #4]
1000376a:	681b      	ldr	r3, [r3, #0]
1000376c:	1c18      	adds	r0, r3, #0
1000376e:	f7ff fda3 	bl	100032b8 <XMC_USIC_CH_TXFIFO_IsEmpty>
10003772:	1c03      	adds	r3, r0, #0
10003774:	1c1a      	adds	r2, r3, #0
10003776:	2301      	movs	r3, #1
10003778:	4053      	eors	r3, r2
1000377a:	b2db      	uxtb	r3, r3
1000377c:	2b00      	cmp	r3, #0
1000377e:	d1f3      	bne.n	10003768 <I2C_MASTER_TransmitHandler+0x100>

          if (ptr_runtime->bus_acquired == true)
10003780:	68bb      	ldr	r3, [r7, #8]
10003782:	2228      	movs	r2, #40	; 0x28
10003784:	5c9b      	ldrb	r3, [r3, r2]
10003786:	b2db      	uxtb	r3, r3
10003788:	2b00      	cmp	r3, #0
1000378a:	d100      	bne.n	1000378e <I2C_MASTER_TransmitHandler+0x126>
1000378c:	e0b5      	b.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
1000378e:	687b      	ldr	r3, [r7, #4]
10003790:	1c18      	adds	r0, r3, #0
10003792:	f000 f8b5 	bl	10003900 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
10003796:	e0b0      	b.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003798:	68bb      	ldr	r3, [r7, #8]
1000379a:	68da      	ldr	r2, [r3, #12]
1000379c:	68bb      	ldr	r3, [r7, #8]
1000379e:	689b      	ldr	r3, [r3, #8]
100037a0:	429a      	cmp	r2, r3
100037a2:	d210      	bcs.n	100037c6 <I2C_MASTER_TransmitHandler+0x15e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
100037a4:	68bb      	ldr	r3, [r7, #8]
100037a6:	681a      	ldr	r2, [r3, #0]
100037a8:	68bb      	ldr	r3, [r7, #8]
100037aa:	68db      	ldr	r3, [r3, #12]
100037ac:	18d3      	adds	r3, r2, r3
100037ae:	781b      	ldrb	r3, [r3, #0]
100037b0:	687a      	ldr	r2, [r7, #4]
100037b2:	1c10      	adds	r0, r2, #0
100037b4:	1c19      	adds	r1, r3, #0
100037b6:	f7ff fe41 	bl	1000343c <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
100037ba:	68bb      	ldr	r3, [r7, #8]
100037bc:	68db      	ldr	r3, [r3, #12]
100037be:	1c5a      	adds	r2, r3, #1
100037c0:	68bb      	ldr	r3, [r7, #8]
100037c2:	60da      	str	r2, [r3, #12]
100037c4:	e099      	b.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
100037c6:	68bb      	ldr	r3, [r7, #8]
100037c8:	2228      	movs	r2, #40	; 0x28
100037ca:	5c9b      	ldrb	r3, [r3, r2]
100037cc:	b2db      	uxtb	r3, r3
100037ce:	2b00      	cmp	r3, #0
100037d0:	d100      	bne.n	100037d4 <I2C_MASTER_TransmitHandler+0x16c>
100037d2:	e092      	b.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
100037d4:	687b      	ldr	r3, [r7, #4]
100037d6:	1c18      	adds	r0, r3, #0
100037d8:	f000 f892 	bl	10003900 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
100037dc:	e08d      	b.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
100037de:	687b      	ldr	r3, [r7, #4]
100037e0:	685b      	ldr	r3, [r3, #4]
100037e2:	2226      	movs	r2, #38	; 0x26
100037e4:	5c9b      	ldrb	r3, [r3, r2]
100037e6:	2b00      	cmp	r3, #0
100037e8:	d05f      	beq.n	100038aa <I2C_MASTER_TransmitHandler+0x242>
    {
      if ((handle->config->rxFIFO_size > 0))
100037ea:	687b      	ldr	r3, [r7, #4]
100037ec:	685b      	ldr	r3, [r3, #4]
100037ee:	2227      	movs	r2, #39	; 0x27
100037f0:	5c9b      	ldrb	r3, [r3, r2]
100037f2:	2b00      	cmp	r3, #0
100037f4:	d017      	beq.n	10003826 <I2C_MASTER_TransmitHandler+0x1be>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
100037f6:	687b      	ldr	r3, [r7, #4]
100037f8:	685b      	ldr	r3, [r3, #4]
100037fa:	2226      	movs	r2, #38	; 0x26
100037fc:	5c9b      	ldrb	r3, [r3, r2]
100037fe:	1c1a      	adds	r2, r3, #0
10003800:	2301      	movs	r3, #1
10003802:	4093      	lsls	r3, r2
10003804:	1c19      	adds	r1, r3, #0
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
10003806:	687b      	ldr	r3, [r7, #4]
10003808:	685b      	ldr	r3, [r3, #4]
1000380a:	2227      	movs	r2, #39	; 0x27
1000380c:	5c9b      	ldrb	r3, [r3, r2]
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
1000380e:	1c1a      	adds	r2, r3, #0
10003810:	2301      	movs	r3, #1
10003812:	4093      	lsls	r3, r2
10003814:	1c08      	adds	r0, r1, #0
10003816:	1c19      	adds	r1, r3, #0
10003818:	f7ff fea4 	bl	10003564 <calculate_minfifosize>
1000381c:	1c02      	adds	r2, r0, #0
1000381e:	230f      	movs	r3, #15
10003820:	18fb      	adds	r3, r7, r3
10003822:	701a      	strb	r2, [r3, #0]
10003824:	e003      	b.n	1000382e <I2C_MASTER_TransmitHandler+0x1c6>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
10003826:	230f      	movs	r3, #15
10003828:	18fb      	adds	r3, r7, r3
1000382a:	2202      	movs	r2, #2
1000382c:	701a      	strb	r2, [r3, #0]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
1000382e:	687b      	ldr	r3, [r7, #4]
10003830:	681a      	ldr	r2, [r3, #0]
10003832:	2380      	movs	r3, #128	; 0x80
10003834:	05db      	lsls	r3, r3, #23
10003836:	1c10      	adds	r0, r2, #0
10003838:	1c19      	adds	r1, r3, #0
1000383a:	f7ff fd09 	bl	10003250 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000383e:	e027      	b.n	10003890 <I2C_MASTER_TransmitHandler+0x228>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003840:	68bb      	ldr	r3, [r7, #8]
10003842:	68da      	ldr	r2, [r3, #12]
10003844:	68bb      	ldr	r3, [r7, #8]
10003846:	689b      	ldr	r3, [r3, #8]
10003848:	429a      	cmp	r2, r3
1000384a:	d220      	bcs.n	1000388e <I2C_MASTER_TransmitHandler+0x226>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000384c:	68bb      	ldr	r3, [r7, #8]
1000384e:	68db      	ldr	r3, [r3, #12]
10003850:	1c5a      	adds	r2, r3, #1
10003852:	68bb      	ldr	r3, [r7, #8]
10003854:	689b      	ldr	r3, [r3, #8]
10003856:	429a      	cmp	r2, r3
10003858:	d108      	bne.n	1000386c <I2C_MASTER_TransmitHandler+0x204>
1000385a:	68bb      	ldr	r3, [r7, #8]
1000385c:	6a1b      	ldr	r3, [r3, #32]
1000385e:	2b01      	cmp	r3, #1
10003860:	d104      	bne.n	1000386c <I2C_MASTER_TransmitHandler+0x204>
          {
            I2C_MASTER_ReceiveNACK(handle);
10003862:	687b      	ldr	r3, [r7, #4]
10003864:	1c18      	adds	r0, r3, #0
10003866:	f7ff fe27 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
1000386a:	e003      	b.n	10003874 <I2C_MASTER_TransmitHandler+0x20c>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
1000386c:	687b      	ldr	r3, [r7, #4]
1000386e:	1c18      	adds	r0, r3, #0
10003870:	f7ff fe16 	bl	100034a0 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
10003874:	68bb      	ldr	r3, [r7, #8]
10003876:	68db      	ldr	r3, [r3, #12]
10003878:	1c5a      	adds	r2, r3, #1
1000387a:	68bb      	ldr	r3, [r7, #8]
1000387c:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
1000387e:	68bb      	ldr	r3, [r7, #8]
10003880:	68da      	ldr	r2, [r3, #12]
10003882:	230f      	movs	r3, #15
10003884:	18fb      	adds	r3, r7, r3
10003886:	781b      	ldrb	r3, [r3, #0]
10003888:	429a      	cmp	r2, r3
1000388a:	d301      	bcc.n	10003890 <I2C_MASTER_TransmitHandler+0x228>
          {
            break;
1000388c:	e00c      	b.n	100038a8 <I2C_MASTER_TransmitHandler+0x240>
          }
        }
        else
        {
          break;
1000388e:	e00b      	b.n	100038a8 <I2C_MASTER_TransmitHandler+0x240>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003890:	687b      	ldr	r3, [r7, #4]
10003892:	1c18      	adds	r0, r3, #0
10003894:	f7ff fda8 	bl	100033e8 <I2C_MASTER_IsTXFIFOFull>
10003898:	1c03      	adds	r3, r0, #0
1000389a:	1c1a      	adds	r2, r3, #0
1000389c:	2301      	movs	r3, #1
1000389e:	4053      	eors	r3, r2
100038a0:	b2db      	uxtb	r3, r3
100038a2:	2b00      	cmp	r3, #0
100038a4:	d1cc      	bne.n	10003840 <I2C_MASTER_TransmitHandler+0x1d8>
100038a6:	e019      	b.n	100038dc <I2C_MASTER_TransmitHandler+0x274>
100038a8:	e018      	b.n	100038dc <I2C_MASTER_TransmitHandler+0x274>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
100038aa:	68bb      	ldr	r3, [r7, #8]
100038ac:	68db      	ldr	r3, [r3, #12]
100038ae:	1c5a      	adds	r2, r3, #1
100038b0:	68bb      	ldr	r3, [r7, #8]
100038b2:	689b      	ldr	r3, [r3, #8]
100038b4:	429a      	cmp	r2, r3
100038b6:	d108      	bne.n	100038ca <I2C_MASTER_TransmitHandler+0x262>
100038b8:	68bb      	ldr	r3, [r7, #8]
100038ba:	6a1b      	ldr	r3, [r3, #32]
100038bc:	2b01      	cmp	r3, #1
100038be:	d104      	bne.n	100038ca <I2C_MASTER_TransmitHandler+0x262>
      {
        I2C_MASTER_ReceiveNACK(handle);
100038c0:	687b      	ldr	r3, [r7, #4]
100038c2:	1c18      	adds	r0, r3, #0
100038c4:	f7ff fdf8 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
100038c8:	e003      	b.n	100038d2 <I2C_MASTER_TransmitHandler+0x26a>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
100038ca:	687b      	ldr	r3, [r7, #4]
100038cc:	1c18      	adds	r0, r3, #0
100038ce:	f7ff fde7 	bl	100034a0 <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
100038d2:	68bb      	ldr	r3, [r7, #8]
100038d4:	68db      	ldr	r3, [r3, #12]
100038d6:	1c5a      	adds	r2, r3, #1
100038d8:	68bb      	ldr	r3, [r7, #8]
100038da:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
100038dc:	687b      	ldr	r3, [r7, #4]
100038de:	689b      	ldr	r3, [r3, #8]
100038e0:	68da      	ldr	r2, [r3, #12]
100038e2:	687b      	ldr	r3, [r7, #4]
100038e4:	689b      	ldr	r3, [r3, #8]
100038e6:	689b      	ldr	r3, [r3, #8]
100038e8:	429a      	cmp	r2, r3
100038ea:	d106      	bne.n	100038fa <I2C_MASTER_TransmitHandler+0x292>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
100038ec:	687a      	ldr	r2, [r7, #4]
100038ee:	2380      	movs	r3, #128	; 0x80
100038f0:	05db      	lsls	r3, r3, #23
100038f2:	1c10      	adds	r0, r2, #0
100038f4:	1c19      	adds	r1, r3, #0
100038f6:	f7ff fdc3 	bl	10003480 <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
100038fa:	46bd      	mov	sp, r7
100038fc:	b004      	add	sp, #16
100038fe:	bd80      	pop	{r7, pc}

10003900 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
10003900:	b580      	push	{r7, lr}
10003902:	b084      	sub	sp, #16
10003904:	af00      	add	r7, sp, #0
10003906:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
10003908:	687b      	ldr	r3, [r7, #4]
1000390a:	689b      	ldr	r3, [r3, #8]
1000390c:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
1000390e:	687a      	ldr	r2, [r7, #4]
10003910:	2380      	movs	r3, #128	; 0x80
10003912:	05db      	lsls	r3, r3, #23
10003914:	1c10      	adds	r0, r2, #0
10003916:	1c19      	adds	r1, r3, #0
10003918:	f7ff fdb2 	bl	10003480 <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
1000391c:	68fb      	ldr	r3, [r7, #12]
1000391e:	69db      	ldr	r3, [r3, #28]
10003920:	2b01      	cmp	r3, #1
10003922:	d107      	bne.n	10003934 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x34>
  {
    ptr_runtime->bus_acquired = false;
10003924:	68fb      	ldr	r3, [r7, #12]
10003926:	2228      	movs	r2, #40	; 0x28
10003928:	2100      	movs	r1, #0
1000392a:	5499      	strb	r1, [r3, r2]
    I2C_MASTER_SendStop(handle);
1000392c:	687b      	ldr	r3, [r7, #4]
1000392e:	1c18      	adds	r0, r3, #0
10003930:	f7ff fdce 	bl	100034d0 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10003934:	46c0      	nop			; (mov r8, r8)
10003936:	687b      	ldr	r3, [r7, #4]
10003938:	681b      	ldr	r3, [r3, #0]
1000393a:	1c18      	adds	r0, r3, #0
1000393c:	f7ff fc58 	bl	100031f0 <XMC_USIC_CH_GetTransmitBufferStatus>
10003940:	1e03      	subs	r3, r0, #0
10003942:	2b80      	cmp	r3, #128	; 0x80
10003944:	d0f7      	beq.n	10003936 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x36>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
10003946:	68fb      	ldr	r3, [r7, #12]
10003948:	2226      	movs	r2, #38	; 0x26
1000394a:	2100      	movs	r1, #0
1000394c:	5499      	strb	r1, [r3, r2]

  if (handle->config->tx_cbhandler != NULL)
1000394e:	687b      	ldr	r3, [r7, #4]
10003950:	685b      	ldr	r3, [r3, #4]
10003952:	691b      	ldr	r3, [r3, #16]
10003954:	2b00      	cmp	r3, #0
10003956:	d003      	beq.n	10003960 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x60>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
10003958:	687b      	ldr	r3, [r7, #4]
1000395a:	685b      	ldr	r3, [r3, #4]
1000395c:	691b      	ldr	r3, [r3, #16]
1000395e:	4798      	blx	r3
  }
}
10003960:	46bd      	mov	sp, r7
10003962:	b004      	add	sp, #16
10003964:	bd80      	pop	{r7, pc}
10003966:	46c0      	nop			; (mov r8, r8)

10003968 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
10003968:	b5b0      	push	{r4, r5, r7, lr}
1000396a:	b08a      	sub	sp, #40	; 0x28
1000396c:	af04      	add	r7, sp, #16
1000396e:	60f8      	str	r0, [r7, #12]
10003970:	607a      	str	r2, [r7, #4]
10003972:	603b      	str	r3, [r7, #0]
10003974:	230b      	movs	r3, #11
10003976:	18fb      	adds	r3, r7, r3
10003978:	1c0a      	adds	r2, r1, #0
1000397a:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
1000397c:	2317      	movs	r3, #23
1000397e:	18fb      	adds	r3, r7, r3
10003980:	2202      	movs	r2, #2
10003982:	701a      	strb	r2, [r3, #0]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
10003984:	68fb      	ldr	r3, [r7, #12]
10003986:	685b      	ldr	r3, [r3, #4]
10003988:	2225      	movs	r2, #37	; 0x25
1000398a:	5c9b      	ldrb	r3, [r3, r2]
1000398c:	2b00      	cmp	r3, #0
1000398e:	d116      	bne.n	100039be <I2C_MASTER_Receive+0x56>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
10003990:	2317      	movs	r3, #23
10003992:	18fc      	adds	r4, r7, r3
10003994:	68f8      	ldr	r0, [r7, #12]
10003996:	230b      	movs	r3, #11
10003998:	18fb      	adds	r3, r7, r3
1000399a:	7819      	ldrb	r1, [r3, #0]
1000399c:	687a      	ldr	r2, [r7, #4]
1000399e:	683d      	ldr	r5, [r7, #0]
100039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
100039a2:	9300      	str	r3, [sp, #0]
100039a4:	232c      	movs	r3, #44	; 0x2c
100039a6:	18fb      	adds	r3, r7, r3
100039a8:	781b      	ldrb	r3, [r3, #0]
100039aa:	9301      	str	r3, [sp, #4]
100039ac:	2330      	movs	r3, #48	; 0x30
100039ae:	18fb      	adds	r3, r7, r3
100039b0:	781b      	ldrb	r3, [r3, #0]
100039b2:	9302      	str	r3, [sp, #8]
100039b4:	1c2b      	adds	r3, r5, #0
100039b6:	f000 facb 	bl	10003f50 <I2C_MASTER_StartReceiveIRQ>
100039ba:	1c03      	adds	r3, r0, #0
100039bc:	7023      	strb	r3, [r4, #0]
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
100039be:	2317      	movs	r3, #23
100039c0:	18fb      	adds	r3, r7, r3
100039c2:	781b      	ldrb	r3, [r3, #0]
}
100039c4:	1c18      	adds	r0, r3, #0
100039c6:	46bd      	mov	sp, r7
100039c8:	b006      	add	sp, #24
100039ca:	bdb0      	pop	{r4, r5, r7, pc}

100039cc <I2C_MASTER_lReceive_FIFOData>:
/***********************************************************************************************************************
     Rx FIFO data
***********************************************************************************************************************/
static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address,
                                     const uint32_t count)
{
100039cc:	b580      	push	{r7, lr}
100039ce:	b086      	sub	sp, #24
100039d0:	af00      	add	r7, sp, #0
100039d2:	60f8      	str	r0, [r7, #12]
100039d4:	607a      	str	r2, [r7, #4]
100039d6:	603b      	str	r3, [r7, #0]
100039d8:	230b      	movs	r3, #11
100039da:	18fb      	adds	r3, r7, r3
100039dc:	1c0a      	adds	r2, r1, #0
100039de:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
100039e0:	68fb      	ldr	r3, [r7, #12]
100039e2:	689b      	ldr	r3, [r3, #8]
100039e4:	617b      	str	r3, [r7, #20]

  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);
100039e6:	68fb      	ldr	r3, [r7, #12]
100039e8:	681b      	ldr	r3, [r3, #0]
100039ea:	1c18      	adds	r0, r3, #0
100039ec:	f7ff fc9e 	bl	1000332c <XMC_USIC_CH_RXFIFO_Flush>

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);
100039f0:	68fa      	ldr	r2, [r7, #12]
100039f2:	683b      	ldr	r3, [r7, #0]
100039f4:	1c10      	adds	r0, r2, #0
100039f6:	1c19      	adds	r1, r3, #0
100039f8:	f000 fd32 	bl	10004460 <I2C_MASTER_lReconfigureRxFIFO>

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
100039fc:	68fb      	ldr	r3, [r7, #12]
100039fe:	681a      	ldr	r2, [r3, #0]
10003a00:	23c0      	movs	r3, #192	; 0xc0
10003a02:	05db      	lsls	r3, r3, #23
10003a04:	1c10      	adds	r0, r2, #0
10003a06:	1c19      	adds	r1, r3, #0
10003a08:	f7ff fc68 	bl	100032dc <XMC_USIC_CH_RXFIFO_EnableEvent>
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
10003a0c:	230b      	movs	r3, #11
10003a0e:	18fb      	adds	r3, r7, r3
10003a10:	781b      	ldrb	r3, [r3, #0]
10003a12:	2b00      	cmp	r3, #0
10003a14:	d100      	bne.n	10003a18 <I2C_MASTER_lReceive_FIFOData+0x4c>
10003a16:	e078      	b.n	10003b0a <I2C_MASTER_lReceive_FIFOData+0x13e>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
10003a18:	68fb      	ldr	r3, [r7, #12]
10003a1a:	685b      	ldr	r3, [r3, #4]
10003a1c:	2224      	movs	r2, #36	; 0x24
10003a1e:	5c9b      	ldrb	r3, [r3, r2]
10003a20:	2b01      	cmp	r3, #1
10003a22:	d015      	beq.n	10003a50 <I2C_MASTER_lReceive_FIFOData+0x84>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
10003a24:	68fb      	ldr	r3, [r7, #12]
10003a26:	685b      	ldr	r3, [r3, #4]
10003a28:	2224      	movs	r2, #36	; 0x24
10003a2a:	5c9b      	ldrb	r3, [r3, r2]
  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
10003a2c:	2b02      	cmp	r3, #2
10003a2e:	d00f      	beq.n	10003a50 <I2C_MASTER_lReceive_FIFOData+0x84>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
10003a30:	68fa      	ldr	r2, [r7, #12]
10003a32:	2380      	movs	r3, #128	; 0x80
10003a34:	05db      	lsls	r3, r3, #23
10003a36:	1c10      	adds	r0, r2, #0
10003a38:	1c19      	adds	r1, r3, #0
10003a3a:	f7ff fd11 	bl	10003460 <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
10003a3e:	68fb      	ldr	r3, [r7, #12]
10003a40:	6819      	ldr	r1, [r3, #0]
10003a42:	697b      	ldr	r3, [r7, #20]
10003a44:	2224      	movs	r2, #36	; 0x24
10003a46:	5c9b      	ldrb	r3, [r3, r2]
10003a48:	1c08      	adds	r0, r1, #0
10003a4a:	1c19      	adds	r1, r3, #0
10003a4c:	f7ff fc8e 	bl	1000336c <XMC_I2C_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
10003a50:	68fa      	ldr	r2, [r7, #12]
10003a52:	687b      	ldr	r3, [r7, #4]
10003a54:	1c10      	adds	r0, r2, #0
10003a56:	1c19      	adds	r1, r3, #0
10003a58:	2201      	movs	r2, #1
10003a5a:	f000 f979 	bl	10003d50 <I2C_MASTER_lSendStart_Or_RepeatedStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
10003a5e:	68fb      	ldr	r3, [r7, #12]
10003a60:	685b      	ldr	r3, [r3, #4]
10003a62:	2224      	movs	r2, #36	; 0x24
10003a64:	5c9b      	ldrb	r3, [r3, r2]
10003a66:	2b02      	cmp	r3, #2
10003a68:	d000      	beq.n	10003a6c <I2C_MASTER_lReceive_FIFOData+0xa0>
10003a6a:	e0b2      	b.n	10003bd2 <I2C_MASTER_lReceive_FIFOData+0x206>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
10003a6c:	68fb      	ldr	r3, [r7, #12]
10003a6e:	685b      	ldr	r3, [r3, #4]
10003a70:	2226      	movs	r2, #38	; 0x26
10003a72:	5c9b      	ldrb	r3, [r3, r2]
10003a74:	2b00      	cmp	r3, #0
10003a76:	d02e      	beq.n	10003ad6 <I2C_MASTER_lReceive_FIFOData+0x10a>
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003a78:	e021      	b.n	10003abe <I2C_MASTER_lReceive_FIFOData+0xf2>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003a7a:	697b      	ldr	r3, [r7, #20]
10003a7c:	68da      	ldr	r2, [r3, #12]
10003a7e:	697b      	ldr	r3, [r7, #20]
10003a80:	689b      	ldr	r3, [r3, #8]
10003a82:	429a      	cmp	r2, r3
10003a84:	d219      	bcs.n	10003aba <I2C_MASTER_lReceive_FIFOData+0xee>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003a86:	697b      	ldr	r3, [r7, #20]
10003a88:	68db      	ldr	r3, [r3, #12]
10003a8a:	1c5a      	adds	r2, r3, #1
10003a8c:	697b      	ldr	r3, [r7, #20]
10003a8e:	689b      	ldr	r3, [r3, #8]
10003a90:	429a      	cmp	r2, r3
10003a92:	d108      	bne.n	10003aa6 <I2C_MASTER_lReceive_FIFOData+0xda>
10003a94:	697b      	ldr	r3, [r7, #20]
10003a96:	6a1b      	ldr	r3, [r3, #32]
10003a98:	2b01      	cmp	r3, #1
10003a9a:	d104      	bne.n	10003aa6 <I2C_MASTER_lReceive_FIFOData+0xda>
      {
          I2C_MASTER_ReceiveNACK(handle);
10003a9c:	68fb      	ldr	r3, [r7, #12]
10003a9e:	1c18      	adds	r0, r3, #0
10003aa0:	f7ff fd0a 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
10003aa4:	e003      	b.n	10003aae <I2C_MASTER_lReceive_FIFOData+0xe2>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
10003aa6:	68fb      	ldr	r3, [r7, #12]
10003aa8:	1c18      	adds	r0, r3, #0
10003aaa:	f7ff fcf9 	bl	100034a0 <I2C_MASTER_ReceiveACK>
        }
      ptr_runtime->tx_data_index++;
10003aae:	697b      	ldr	r3, [r7, #20]
10003ab0:	68db      	ldr	r3, [r3, #12]
10003ab2:	1c5a      	adds	r2, r3, #1
10003ab4:	697b      	ldr	r3, [r7, #20]
10003ab6:	60da      	str	r2, [r3, #12]
10003ab8:	e001      	b.n	10003abe <I2C_MASTER_lReceive_FIFOData+0xf2>
      }
      else
      {
        break;
10003aba:	46c0      	nop			; (mov r8, r8)
10003abc:	e089      	b.n	10003bd2 <I2C_MASTER_lReceive_FIFOData+0x206>
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003abe:	68fb      	ldr	r3, [r7, #12]
10003ac0:	1c18      	adds	r0, r3, #0
10003ac2:	f7ff fc91 	bl	100033e8 <I2C_MASTER_IsTXFIFOFull>
10003ac6:	1c03      	adds	r3, r0, #0
10003ac8:	1c1a      	adds	r2, r3, #0
10003aca:	2301      	movs	r3, #1
10003acc:	4053      	eors	r3, r2
10003ace:	b2db      	uxtb	r3, r3
10003ad0:	2b00      	cmp	r3, #0
10003ad2:	d1d2      	bne.n	10003a7a <I2C_MASTER_lReceive_FIFOData+0xae>
10003ad4:	e07d      	b.n	10003bd2 <I2C_MASTER_lReceive_FIFOData+0x206>
    } /* end of while */
      }
      else
      {
        /* if it is last byte and send_nack true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003ad6:	697b      	ldr	r3, [r7, #20]
10003ad8:	68db      	ldr	r3, [r3, #12]
10003ada:	1c5a      	adds	r2, r3, #1
10003adc:	697b      	ldr	r3, [r7, #20]
10003ade:	689b      	ldr	r3, [r3, #8]
10003ae0:	429a      	cmp	r2, r3
10003ae2:	d108      	bne.n	10003af6 <I2C_MASTER_lReceive_FIFOData+0x12a>
10003ae4:	697b      	ldr	r3, [r7, #20]
10003ae6:	6a1b      	ldr	r3, [r3, #32]
10003ae8:	2b01      	cmp	r3, #1
10003aea:	d104      	bne.n	10003af6 <I2C_MASTER_lReceive_FIFOData+0x12a>
    {
      I2C_MASTER_ReceiveNACK(handle);
10003aec:	68fb      	ldr	r3, [r7, #12]
10003aee:	1c18      	adds	r0, r3, #0
10003af0:	f7ff fce2 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
10003af4:	e003      	b.n	10003afe <I2C_MASTER_lReceive_FIFOData+0x132>
    }
    else
    {
      I2C_MASTER_ReceiveACK(handle);
10003af6:	68fb      	ldr	r3, [r7, #12]
10003af8:	1c18      	adds	r0, r3, #0
10003afa:	f7ff fcd1 	bl	100034a0 <I2C_MASTER_ReceiveACK>
    }
    ptr_runtime->tx_data_index++;
10003afe:	697b      	ldr	r3, [r7, #20]
10003b00:	68db      	ldr	r3, [r3, #12]
10003b02:	1c5a      	adds	r2, r3, #1
10003b04:	697b      	ldr	r3, [r7, #20]
10003b06:	60da      	str	r2, [r3, #12]
10003b08:	e063      	b.n	10003bd2 <I2C_MASTER_lReceive_FIFOData+0x206>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
10003b0a:	68fb      	ldr	r3, [r7, #12]
10003b0c:	685b      	ldr	r3, [r3, #4]
10003b0e:	2226      	movs	r2, #38	; 0x26
10003b10:	5c9b      	ldrb	r3, [r3, r2]
10003b12:	2b00      	cmp	r3, #0
10003b14:	d036      	beq.n	10003b84 <I2C_MASTER_lReceive_FIFOData+0x1b8>
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
10003b16:	68fb      	ldr	r3, [r7, #12]
10003b18:	681a      	ldr	r2, [r3, #0]
10003b1a:	2380      	movs	r3, #128	; 0x80
10003b1c:	05db      	lsls	r3, r3, #23
10003b1e:	1c10      	adds	r0, r2, #0
10003b20:	1c19      	adds	r1, r3, #0
10003b22:	f7ff fb95 	bl	10003250 <XMC_USIC_CH_TXFIFO_DisableEvent>
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003b26:	e021      	b.n	10003b6c <I2C_MASTER_lReceive_FIFOData+0x1a0>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003b28:	697b      	ldr	r3, [r7, #20]
10003b2a:	68da      	ldr	r2, [r3, #12]
10003b2c:	697b      	ldr	r3, [r7, #20]
10003b2e:	689b      	ldr	r3, [r3, #8]
10003b30:	429a      	cmp	r2, r3
10003b32:	d219      	bcs.n	10003b68 <I2C_MASTER_lReceive_FIFOData+0x19c>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
10003b34:	697b      	ldr	r3, [r7, #20]
10003b36:	68db      	ldr	r3, [r3, #12]
10003b38:	1c5a      	adds	r2, r3, #1
10003b3a:	697b      	ldr	r3, [r7, #20]
10003b3c:	689b      	ldr	r3, [r3, #8]
10003b3e:	429a      	cmp	r2, r3
10003b40:	d108      	bne.n	10003b54 <I2C_MASTER_lReceive_FIFOData+0x188>
               (ptr_runtime->send_nack == true))
10003b42:	697b      	ldr	r3, [r7, #20]
10003b44:	6a1b      	ldr	r3, [r3, #32]
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
10003b46:	2b01      	cmp	r3, #1
10003b48:	d104      	bne.n	10003b54 <I2C_MASTER_lReceive_FIFOData+0x188>
               (ptr_runtime->send_nack == true))
          {
            I2C_MASTER_ReceiveNACK(handle);
10003b4a:	68fb      	ldr	r3, [r7, #12]
10003b4c:	1c18      	adds	r0, r3, #0
10003b4e:	f7ff fcb3 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
10003b52:	e003      	b.n	10003b5c <I2C_MASTER_lReceive_FIFOData+0x190>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
10003b54:	68fb      	ldr	r3, [r7, #12]
10003b56:	1c18      	adds	r0, r3, #0
10003b58:	f7ff fca2 	bl	100034a0 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
10003b5c:	697b      	ldr	r3, [r7, #20]
10003b5e:	68db      	ldr	r3, [r3, #12]
10003b60:	1c5a      	adds	r2, r3, #1
10003b62:	697b      	ldr	r3, [r7, #20]
10003b64:	60da      	str	r2, [r3, #12]
10003b66:	e001      	b.n	10003b6c <I2C_MASTER_lReceive_FIFOData+0x1a0>
        }
        else
        {
          break;
10003b68:	46c0      	nop			; (mov r8, r8)
10003b6a:	e032      	b.n	10003bd2 <I2C_MASTER_lReceive_FIFOData+0x206>
    if (handle->config->txFIFO_size > 0)
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003b6c:	68fb      	ldr	r3, [r7, #12]
10003b6e:	1c18      	adds	r0, r3, #0
10003b70:	f7ff fc3a 	bl	100033e8 <I2C_MASTER_IsTXFIFOFull>
10003b74:	1c03      	adds	r3, r0, #0
10003b76:	1c1a      	adds	r2, r3, #0
10003b78:	2301      	movs	r3, #1
10003b7a:	4053      	eors	r3, r2
10003b7c:	b2db      	uxtb	r3, r3
10003b7e:	2b00      	cmp	r3, #0
10003b80:	d1d2      	bne.n	10003b28 <I2C_MASTER_lReceive_FIFOData+0x15c>
10003b82:	e026      	b.n	10003bd2 <I2C_MASTER_lReceive_FIFOData+0x206>
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003b84:	697b      	ldr	r3, [r7, #20]
10003b86:	68da      	ldr	r2, [r3, #12]
10003b88:	697b      	ldr	r3, [r7, #20]
10003b8a:	689b      	ldr	r3, [r3, #8]
10003b8c:	429a      	cmp	r2, r3
10003b8e:	d220      	bcs.n	10003bd2 <I2C_MASTER_lReceive_FIFOData+0x206>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
10003b90:	697b      	ldr	r3, [r7, #20]
10003b92:	68db      	ldr	r3, [r3, #12]
10003b94:	1c5a      	adds	r2, r3, #1
10003b96:	697b      	ldr	r3, [r7, #20]
10003b98:	689b      	ldr	r3, [r3, #8]
10003b9a:	429a      	cmp	r2, r3
10003b9c:	d108      	bne.n	10003bb0 <I2C_MASTER_lReceive_FIFOData+0x1e4>
             (ptr_runtime->send_nack == true))
10003b9e:	697b      	ldr	r3, [r7, #20]
10003ba0:	6a1b      	ldr	r3, [r3, #32]
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
10003ba2:	2b01      	cmp	r3, #1
10003ba4:	d104      	bne.n	10003bb0 <I2C_MASTER_lReceive_FIFOData+0x1e4>
             (ptr_runtime->send_nack == true))
        {
          I2C_MASTER_ReceiveNACK(handle);
10003ba6:	68fb      	ldr	r3, [r7, #12]
10003ba8:	1c18      	adds	r0, r3, #0
10003baa:	f7ff fc85 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
10003bae:	e00b      	b.n	10003bc8 <I2C_MASTER_lReceive_FIFOData+0x1fc>
        }
        else
        {
          XMC_I2C_CH_ClearStatusFlag(handle->channel, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED |
10003bb0:	68fb      	ldr	r3, [r7, #12]
10003bb2:	681a      	ldr	r2, [r3, #0]
10003bb4:	23f2      	movs	r3, #242	; 0xf2
10003bb6:	021b      	lsls	r3, r3, #8
10003bb8:	1c10      	adds	r0, r2, #0
10003bba:	1c19      	adds	r1, r3, #0
10003bbc:	f7ff fbf2 	bl	100033a4 <XMC_I2C_CH_ClearStatusFlag>
                                              (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION |
                          (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION|
                                              (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
                          (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
          I2C_MASTER_ReceiveACK(handle);
10003bc0:	68fb      	ldr	r3, [r7, #12]
10003bc2:	1c18      	adds	r0, r3, #0
10003bc4:	f7ff fc6c 	bl	100034a0 <I2C_MASTER_ReceiveACK>
        }
        ptr_runtime->tx_data_index++;
10003bc8:	697b      	ldr	r3, [r7, #20]
10003bca:	68db      	ldr	r3, [r3, #12]
10003bcc:	1c5a      	adds	r2, r3, #1
10003bce:	697b      	ldr	r3, [r7, #20]
10003bd0:	60da      	str	r2, [r3, #12]
      }
    } /* end of else */
   } /* end of  if(send_start == false) */
}
10003bd2:	46bd      	mov	sp, r7
10003bd4:	b006      	add	sp, #24
10003bd6:	bd80      	pop	{r7, pc}

10003bd8 <I2C_MASTER_lReceive_StdData>:
/***********************************************************************************************************************
    Standard receive mode
***********************************************************************************************************************/
static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address)
{
10003bd8:	b580      	push	{r7, lr}
10003bda:	b086      	sub	sp, #24
10003bdc:	af00      	add	r7, sp, #0
10003bde:	60f8      	str	r0, [r7, #12]
10003be0:	607a      	str	r2, [r7, #4]
10003be2:	230b      	movs	r3, #11
10003be4:	18fb      	adds	r3, r7, r3
10003be6:	1c0a      	adds	r2, r1, #0
10003be8:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
10003bea:	68fb      	ldr	r3, [r7, #12]
10003bec:	689b      	ldr	r3, [r3, #8]
10003bee:	617b      	str	r3, [r7, #20]

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
10003bf0:	68fb      	ldr	r3, [r7, #12]
10003bf2:	681a      	ldr	r2, [r3, #0]
10003bf4:	23c0      	movs	r3, #192	; 0xc0
10003bf6:	021b      	lsls	r3, r3, #8
10003bf8:	1c10      	adds	r0, r2, #0
10003bfa:	1c19      	adds	r1, r3, #0
10003bfc:	f7ff fada 	bl	100031b4 <XMC_USIC_CH_EnableEvent>
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
10003c00:	230b      	movs	r3, #11
10003c02:	18fb      	adds	r3, r7, r3
10003c04:	781b      	ldrb	r3, [r3, #0]
10003c06:	2b00      	cmp	r3, #0
10003c08:	d049      	beq.n	10003c9e <I2C_MASTER_lReceive_StdData+0xc6>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
10003c0a:	68fb      	ldr	r3, [r7, #12]
10003c0c:	685b      	ldr	r3, [r3, #4]
10003c0e:	2224      	movs	r2, #36	; 0x24
10003c10:	5c9b      	ldrb	r3, [r3, r2]
10003c12:	2b01      	cmp	r3, #1
10003c14:	d015      	beq.n	10003c42 <I2C_MASTER_lReceive_StdData+0x6a>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
10003c16:	68fb      	ldr	r3, [r7, #12]
10003c18:	685b      	ldr	r3, [r3, #4]
10003c1a:	2224      	movs	r2, #36	; 0x24
10003c1c:	5c9b      	ldrb	r3, [r3, r2]
  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
10003c1e:	2b02      	cmp	r3, #2
10003c20:	d00f      	beq.n	10003c42 <I2C_MASTER_lReceive_StdData+0x6a>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
10003c22:	68fa      	ldr	r2, [r7, #12]
10003c24:	2380      	movs	r3, #128	; 0x80
10003c26:	05db      	lsls	r3, r3, #23
10003c28:	1c10      	adds	r0, r2, #0
10003c2a:	1c19      	adds	r1, r3, #0
10003c2c:	f7ff fc18 	bl	10003460 <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
10003c30:	68fb      	ldr	r3, [r7, #12]
10003c32:	6819      	ldr	r1, [r3, #0]
10003c34:	697b      	ldr	r3, [r7, #20]
10003c36:	2224      	movs	r2, #36	; 0x24
10003c38:	5c9b      	ldrb	r3, [r3, r2]
10003c3a:	1c08      	adds	r0, r1, #0
10003c3c:	1c19      	adds	r1, r3, #0
10003c3e:	f7ff fb95 	bl	1000336c <XMC_I2C_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
10003c42:	68fa      	ldr	r2, [r7, #12]
10003c44:	687b      	ldr	r3, [r7, #4]
10003c46:	1c10      	adds	r0, r2, #0
10003c48:	1c19      	adds	r1, r3, #0
10003c4a:	2201      	movs	r2, #1
10003c4c:	f000 f880 	bl	10003d50 <I2C_MASTER_lSendStart_Or_RepeatedStart>

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
10003c50:	68fb      	ldr	r3, [r7, #12]
10003c52:	685b      	ldr	r3, [r3, #4]
10003c54:	2224      	movs	r2, #36	; 0x24
10003c56:	5c9b      	ldrb	r3, [r3, r2]
10003c58:	2b01      	cmp	r3, #1
10003c5a:	d006      	beq.n	10003c6a <I2C_MASTER_lReceive_StdData+0x92>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
10003c5c:	68fb      	ldr	r3, [r7, #12]
10003c5e:	685b      	ldr	r3, [r3, #4]
10003c60:	2224      	movs	r2, #36	; 0x24
10003c62:	5c9b      	ldrb	r3, [r3, r2]
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
10003c64:	2b02      	cmp	r3, #2
10003c66:	d000      	beq.n	10003c6a <I2C_MASTER_lReceive_StdData+0x92>
10003c68:	e06e      	b.n	10003d48 <I2C_MASTER_lReceive_StdData+0x170>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003c6a:	697b      	ldr	r3, [r7, #20]
10003c6c:	68db      	ldr	r3, [r3, #12]
10003c6e:	1c5a      	adds	r2, r3, #1
10003c70:	697b      	ldr	r3, [r7, #20]
10003c72:	689b      	ldr	r3, [r3, #8]
10003c74:	429a      	cmp	r2, r3
10003c76:	d108      	bne.n	10003c8a <I2C_MASTER_lReceive_StdData+0xb2>
10003c78:	697b      	ldr	r3, [r7, #20]
10003c7a:	6a1b      	ldr	r3, [r3, #32]
10003c7c:	2b01      	cmp	r3, #1
10003c7e:	d104      	bne.n	10003c8a <I2C_MASTER_lReceive_StdData+0xb2>
    {
        I2C_MASTER_ReceiveNACK(handle);
10003c80:	68fb      	ldr	r3, [r7, #12]
10003c82:	1c18      	adds	r0, r3, #0
10003c84:	f7ff fc18 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
10003c88:	e003      	b.n	10003c92 <I2C_MASTER_lReceive_StdData+0xba>
    }
    else
    {
    I2C_MASTER_ReceiveACK(handle);
10003c8a:	68fb      	ldr	r3, [r7, #12]
10003c8c:	1c18      	adds	r0, r3, #0
10003c8e:	f7ff fc07 	bl	100034a0 <I2C_MASTER_ReceiveACK>
      }
    ptr_runtime->tx_data_index++;
10003c92:	697b      	ldr	r3, [r7, #20]
10003c94:	68db      	ldr	r3, [r3, #12]
10003c96:	1c5a      	adds	r2, r3, #1
10003c98:	697b      	ldr	r3, [r7, #20]
10003c9a:	60da      	str	r2, [r3, #12]
10003c9c:	e054      	b.n	10003d48 <I2C_MASTER_lReceive_StdData+0x170>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
10003c9e:	68fb      	ldr	r3, [r7, #12]
10003ca0:	685b      	ldr	r3, [r3, #4]
10003ca2:	2226      	movs	r2, #38	; 0x26
10003ca4:	5c9b      	ldrb	r3, [r3, r2]
10003ca6:	2b00      	cmp	r3, #0
10003ca8:	d119      	bne.n	10003cde <I2C_MASTER_lReceive_StdData+0x106>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003caa:	697b      	ldr	r3, [r7, #20]
10003cac:	68db      	ldr	r3, [r3, #12]
10003cae:	1c5a      	adds	r2, r3, #1
10003cb0:	697b      	ldr	r3, [r7, #20]
10003cb2:	689b      	ldr	r3, [r3, #8]
10003cb4:	429a      	cmp	r2, r3
10003cb6:	d108      	bne.n	10003cca <I2C_MASTER_lReceive_StdData+0xf2>
10003cb8:	697b      	ldr	r3, [r7, #20]
10003cba:	6a1b      	ldr	r3, [r3, #32]
10003cbc:	2b01      	cmp	r3, #1
10003cbe:	d104      	bne.n	10003cca <I2C_MASTER_lReceive_StdData+0xf2>
      {
        I2C_MASTER_ReceiveNACK(handle);
10003cc0:	68fb      	ldr	r3, [r7, #12]
10003cc2:	1c18      	adds	r0, r3, #0
10003cc4:	f7ff fbf8 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
10003cc8:	e003      	b.n	10003cd2 <I2C_MASTER_lReceive_StdData+0xfa>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
10003cca:	68fb      	ldr	r3, [r7, #12]
10003ccc:	1c18      	adds	r0, r3, #0
10003cce:	f7ff fbe7 	bl	100034a0 <I2C_MASTER_ReceiveACK>
      }

      ptr_runtime->tx_data_index++;
10003cd2:	697b      	ldr	r3, [r7, #20]
10003cd4:	68db      	ldr	r3, [r3, #12]
10003cd6:	1c5a      	adds	r2, r3, #1
10003cd8:	697b      	ldr	r3, [r7, #20]
10003cda:	60da      	str	r2, [r3, #12]
10003cdc:	e034      	b.n	10003d48 <I2C_MASTER_lReceive_StdData+0x170>
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is enabled
***********************************************************************************************************************/
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003cde:	68fb      	ldr	r3, [r7, #12]
10003ce0:	681a      	ldr	r2, [r3, #0]
10003ce2:	2380      	movs	r3, #128	; 0x80
10003ce4:	05db      	lsls	r3, r3, #23
10003ce6:	1c10      	adds	r0, r2, #0
10003ce8:	1c19      	adds	r1, r3, #0
10003cea:	f7ff fab1 	bl	10003250 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003cee:	e020      	b.n	10003d32 <I2C_MASTER_lReceive_StdData+0x15a>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003cf0:	697b      	ldr	r3, [r7, #20]
10003cf2:	68da      	ldr	r2, [r3, #12]
10003cf4:	697b      	ldr	r3, [r7, #20]
10003cf6:	689b      	ldr	r3, [r3, #8]
10003cf8:	429a      	cmp	r2, r3
10003cfa:	d219      	bcs.n	10003d30 <I2C_MASTER_lReceive_StdData+0x158>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003cfc:	697b      	ldr	r3, [r7, #20]
10003cfe:	68db      	ldr	r3, [r3, #12]
10003d00:	1c5a      	adds	r2, r3, #1
10003d02:	697b      	ldr	r3, [r7, #20]
10003d04:	689b      	ldr	r3, [r3, #8]
10003d06:	429a      	cmp	r2, r3
10003d08:	d108      	bne.n	10003d1c <I2C_MASTER_lReceive_StdData+0x144>
10003d0a:	697b      	ldr	r3, [r7, #20]
10003d0c:	6a1b      	ldr	r3, [r3, #32]
10003d0e:	2b01      	cmp	r3, #1
10003d10:	d104      	bne.n	10003d1c <I2C_MASTER_lReceive_StdData+0x144>
          {
            I2C_MASTER_ReceiveNACK(handle);
10003d12:	68fb      	ldr	r3, [r7, #12]
10003d14:	1c18      	adds	r0, r3, #0
10003d16:	f7ff fbcf 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
10003d1a:	e003      	b.n	10003d24 <I2C_MASTER_lReceive_StdData+0x14c>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
10003d1c:	68fb      	ldr	r3, [r7, #12]
10003d1e:	1c18      	adds	r0, r3, #0
10003d20:	f7ff fbbe 	bl	100034a0 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
10003d24:	697b      	ldr	r3, [r7, #20]
10003d26:	68db      	ldr	r3, [r3, #12]
10003d28:	1c5a      	adds	r2, r3, #1
10003d2a:	697b      	ldr	r3, [r7, #20]
10003d2c:	60da      	str	r2, [r3, #12]
10003d2e:	e000      	b.n	10003d32 <I2C_MASTER_lReceive_StdData+0x15a>
        }
        else
        {
          break;
10003d30:	e00a      	b.n	10003d48 <I2C_MASTER_lReceive_StdData+0x170>
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003d32:	68fb      	ldr	r3, [r7, #12]
10003d34:	1c18      	adds	r0, r3, #0
10003d36:	f7ff fb57 	bl	100033e8 <I2C_MASTER_IsTXFIFOFull>
10003d3a:	1c03      	adds	r3, r0, #0
10003d3c:	1c1a      	adds	r2, r3, #0
10003d3e:	2301      	movs	r3, #1
10003d40:	4053      	eors	r3, r2
10003d42:	b2db      	uxtb	r3, r3
10003d44:	2b00      	cmp	r3, #0
10003d46:	d1d3      	bne.n	10003cf0 <I2C_MASTER_lReceive_StdData+0x118>
          break;
        }
      } /* end of while */
    } /* end of else */
  } /* end of else */
} /* end of function */
10003d48:	46bd      	mov	sp, r7
10003d4a:	b006      	add	sp, #24
10003d4c:	bd80      	pop	{r7, pc}
10003d4e:	46c0      	nop			; (mov r8, r8)

10003d50 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
10003d50:	b580      	push	{r7, lr}
10003d52:	b084      	sub	sp, #16
10003d54:	af00      	add	r7, sp, #0
10003d56:	60f8      	str	r0, [r7, #12]
10003d58:	60b9      	str	r1, [r7, #8]
10003d5a:	1dfb      	adds	r3, r7, #7
10003d5c:	701a      	strb	r2, [r3, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
10003d5e:	68fb      	ldr	r3, [r7, #12]
10003d60:	681b      	ldr	r3, [r3, #0]
10003d62:	1c18      	adds	r0, r3, #0
10003d64:	210c      	movs	r1, #12
10003d66:	f7ff fb1d 	bl	100033a4 <XMC_I2C_CH_ClearStatusFlag>

  if (handle->runtime->bus_acquired == true)
10003d6a:	68fb      	ldr	r3, [r7, #12]
10003d6c:	689b      	ldr	r3, [r3, #8]
10003d6e:	2228      	movs	r2, #40	; 0x28
10003d70:	5c9b      	ldrb	r3, [r3, r2]
10003d72:	b2db      	uxtb	r3, r3
10003d74:	2b00      	cmp	r3, #0
10003d76:	d00a      	beq.n	10003d8e <I2C_MASTER_lSendStart_Or_RepeatedStart+0x3e>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
10003d78:	68bb      	ldr	r3, [r7, #8]
10003d7a:	b29b      	uxth	r3, r3
10003d7c:	1c19      	adds	r1, r3, #0
10003d7e:	68fa      	ldr	r2, [r7, #12]
10003d80:	1dfb      	adds	r3, r7, #7
10003d82:	781b      	ldrb	r3, [r3, #0]
10003d84:	1c10      	adds	r0, r2, #0
10003d86:	1c1a      	adds	r2, r3, #0
10003d88:	f7ff fbd0 	bl	1000352c <I2C_MASTER_SendRepeatedStart>
10003d8c:	e00e      	b.n	10003dac <I2C_MASTER_lSendStart_Or_RepeatedStart+0x5c>
  }
  else
  {
    handle->runtime->bus_acquired = true;
10003d8e:	68fb      	ldr	r3, [r7, #12]
10003d90:	689b      	ldr	r3, [r3, #8]
10003d92:	2228      	movs	r2, #40	; 0x28
10003d94:	2101      	movs	r1, #1
10003d96:	5499      	strb	r1, [r3, r2]
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
10003d98:	68bb      	ldr	r3, [r7, #8]
10003d9a:	b29b      	uxth	r3, r3
10003d9c:	1c19      	adds	r1, r3, #0
10003d9e:	68fa      	ldr	r2, [r7, #12]
10003da0:	1dfb      	adds	r3, r7, #7
10003da2:	781b      	ldrb	r3, [r3, #0]
10003da4:	1c10      	adds	r0, r2, #0
10003da6:	1c1a      	adds	r2, r3, #0
10003da8:	f7ff fba4 	bl	100034f4 <I2C_MASTER_SendStart>
  }
}
10003dac:	46bd      	mov	sp, r7
10003dae:	b004      	add	sp, #16
10003db0:	bd80      	pop	{r7, pc}
10003db2:	46c0      	nop			; (mov r8, r8)

10003db4 <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
10003db4:	b580      	push	{r7, lr}
10003db6:	b088      	sub	sp, #32
10003db8:	af00      	add	r7, sp, #0
10003dba:	60f8      	str	r0, [r7, #12]
10003dbc:	607a      	str	r2, [r7, #4]
10003dbe:	603b      	str	r3, [r7, #0]
10003dc0:	230b      	movs	r3, #11
10003dc2:	18fb      	adds	r3, r7, r3
10003dc4:	1c0a      	adds	r2, r1, #0
10003dc6:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
10003dc8:	231f      	movs	r3, #31
10003dca:	18fb      	adds	r3, r7, r3
10003dcc:	2202      	movs	r2, #2
10003dce:	701a      	strb	r2, [r3, #0]
  ptr_runtime = handle->runtime;
10003dd0:	68fb      	ldr	r3, [r7, #12]
10003dd2:	689b      	ldr	r3, [r3, #8]
10003dd4:	617b      	str	r3, [r7, #20]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
10003dd6:	230b      	movs	r3, #11
10003dd8:	18fb      	adds	r3, r7, r3
10003dda:	781b      	ldrb	r3, [r3, #0]
10003ddc:	2201      	movs	r2, #1
10003dde:	4053      	eors	r3, r2
10003de0:	b2db      	uxtb	r3, r3
10003de2:	2b00      	cmp	r3, #0
10003de4:	d009      	beq.n	10003dfa <I2C_MASTER_StartTransmitIRQ+0x46>
10003de6:	68fb      	ldr	r3, [r7, #12]
10003de8:	689b      	ldr	r3, [r3, #8]
10003dea:	2228      	movs	r2, #40	; 0x28
10003dec:	5c9b      	ldrb	r3, [r3, r2]
10003dee:	b2db      	uxtb	r3, r3
10003df0:	2201      	movs	r2, #1
10003df2:	4053      	eors	r3, r2
10003df4:	b2db      	uxtb	r3, r3
10003df6:	2b00      	cmp	r3, #0
10003df8:	d105      	bne.n	10003e06 <I2C_MASTER_StartTransmitIRQ+0x52>
10003dfa:	683b      	ldr	r3, [r7, #0]
10003dfc:	2b00      	cmp	r3, #0
10003dfe:	d002      	beq.n	10003e06 <I2C_MASTER_StartTransmitIRQ+0x52>
10003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
10003e02:	2b00      	cmp	r3, #0
10003e04:	d104      	bne.n	10003e10 <I2C_MASTER_StartTransmitIRQ+0x5c>
  {
    status = I2C_MASTER_STATUS_FAILURE;
10003e06:	231f      	movs	r3, #31
10003e08:	18fb      	adds	r3, r7, r3
10003e0a:	2201      	movs	r2, #1
10003e0c:	701a      	strb	r2, [r3, #0]
10003e0e:	e065      	b.n	10003edc <I2C_MASTER_StartTransmitIRQ+0x128>
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
10003e10:	697b      	ldr	r3, [r7, #20]
10003e12:	2200      	movs	r2, #0
10003e14:	619a      	str	r2, [r3, #24]

    if (ptr_runtime->tx_busy == false)
10003e16:	697b      	ldr	r3, [r7, #20]
10003e18:	2226      	movs	r2, #38	; 0x26
10003e1a:	5c9b      	ldrb	r3, [r3, r2]
10003e1c:	b2db      	uxtb	r3, r3
10003e1e:	2201      	movs	r2, #1
10003e20:	4053      	eors	r3, r2
10003e22:	b2db      	uxtb	r3, r3
10003e24:	2b00      	cmp	r3, #0
10003e26:	d059      	beq.n	10003edc <I2C_MASTER_StartTransmitIRQ+0x128>
    {
      /*If there is no transmission in progress, obtain the address of data, size of data*/
      ptr_runtime->tx_data = data;
10003e28:	697b      	ldr	r3, [r7, #20]
10003e2a:	683a      	ldr	r2, [r7, #0]
10003e2c:	601a      	str	r2, [r3, #0]
      ptr_runtime->tx_data_count = size;
10003e2e:	697b      	ldr	r3, [r7, #20]
10003e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
10003e32:	609a      	str	r2, [r3, #8]

      /*Initialize to first index and set the busy flag*/
      ptr_runtime->tx_data_index = 0U;
10003e34:	697b      	ldr	r3, [r7, #20]
10003e36:	2200      	movs	r2, #0
10003e38:	60da      	str	r2, [r3, #12]
      ptr_runtime->tx_busy = true;
10003e3a:	697b      	ldr	r3, [r7, #20]
10003e3c:	2226      	movs	r2, #38	; 0x26
10003e3e:	2101      	movs	r1, #1
10003e40:	5499      	strb	r1, [r3, r2]
      ptr_runtime->send_stop = send_stop;
10003e42:	232c      	movs	r3, #44	; 0x2c
10003e44:	18fb      	adds	r3, r7, r3
10003e46:	781a      	ldrb	r2, [r3, #0]
10003e48:	697b      	ldr	r3, [r7, #20]
10003e4a:	61da      	str	r2, [r3, #28]

      /* Enable ACK event */
      I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
10003e4c:	68fa      	ldr	r2, [r7, #12]
10003e4e:	2380      	movs	r3, #128	; 0x80
10003e50:	05db      	lsls	r3, r3, #23
10003e52:	1c10      	adds	r0, r2, #0
10003e54:	1c19      	adds	r1, r3, #0
10003e56:	f7ff fb03 	bl	10003460 <I2C_MASTER_EnableEvent>
      XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
10003e5a:	68fb      	ldr	r3, [r7, #12]
10003e5c:	6819      	ldr	r1, [r3, #0]
10003e5e:	697b      	ldr	r3, [r7, #20]
10003e60:	2224      	movs	r2, #36	; 0x24
10003e62:	5c9b      	ldrb	r3, [r3, r2]
10003e64:	1c08      	adds	r0, r1, #0
10003e66:	1c19      	adds	r1, r3, #0
10003e68:	f7ff fa80 	bl	1000336c <XMC_I2C_CH_SetInterruptNodePointer>

      if (send_start == true)
10003e6c:	230b      	movs	r3, #11
10003e6e:	18fb      	adds	r3, r7, r3
10003e70:	781b      	ldrb	r3, [r3, #0]
10003e72:	2b00      	cmp	r3, #0
10003e74:	d025      	beq.n	10003ec2 <I2C_MASTER_StartTransmitIRQ+0x10e>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
10003e76:	68fa      	ldr	r2, [r7, #12]
10003e78:	687b      	ldr	r3, [r7, #4]
10003e7a:	1c10      	adds	r0, r2, #0
10003e7c:	1c19      	adds	r1, r3, #0
10003e7e:	2200      	movs	r2, #0
10003e80:	f7ff ff66 	bl	10003d50 <I2C_MASTER_lSendStart_Or_RepeatedStart>

        // Detect problems in multi master environments
        uint32_t retries = I2C_MASTER_START_TRANSMIT_RETRIES;
10003e84:	4b19      	ldr	r3, [pc, #100]	; (10003eec <I2C_MASTER_StartTransmitIRQ+0x138>)
10003e86:	61bb      	str	r3, [r7, #24]
        while (((XMC_I2C_CH_GetStatusFlag(handle->channel) & (XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED)) == 0) && --retries);
10003e88:	46c0      	nop			; (mov r8, r8)
10003e8a:	68fb      	ldr	r3, [r7, #12]
10003e8c:	681b      	ldr	r3, [r3, #0]
10003e8e:	1c18      	adds	r0, r3, #0
10003e90:	f7ff fa7e 	bl	10003390 <XMC_I2C_CH_GetStatusFlag>
10003e94:	1c02      	adds	r2, r0, #0
10003e96:	230c      	movs	r3, #12
10003e98:	4013      	ands	r3, r2
10003e9a:	d105      	bne.n	10003ea8 <I2C_MASTER_StartTransmitIRQ+0xf4>
10003e9c:	69bb      	ldr	r3, [r7, #24]
10003e9e:	3b01      	subs	r3, #1
10003ea0:	61bb      	str	r3, [r7, #24]
10003ea2:	69bb      	ldr	r3, [r7, #24]
10003ea4:	2b00      	cmp	r3, #0
10003ea6:	d1f0      	bne.n	10003e8a <I2C_MASTER_StartTransmitIRQ+0xd6>
        if (retries == 0)
10003ea8:	69bb      	ldr	r3, [r7, #24]
10003eaa:	2b00      	cmp	r3, #0
10003eac:	d104      	bne.n	10003eb8 <I2C_MASTER_StartTransmitIRQ+0x104>
        {
    	  status = I2C_MASTER_STATUS_BUS_ERROR;
10003eae:	231f      	movs	r3, #31
10003eb0:	18fb      	adds	r3, r7, r3
10003eb2:	2204      	movs	r2, #4
10003eb4:	701a      	strb	r2, [r3, #0]
10003eb6:	e011      	b.n	10003edc <I2C_MASTER_StartTransmitIRQ+0x128>
        }
        else
        {
          status = I2C_MASTER_STATUS_SUCCESS;
10003eb8:	231f      	movs	r3, #31
10003eba:	18fb      	adds	r3, r7, r3
10003ebc:	2200      	movs	r2, #0
10003ebe:	701a      	strb	r2, [r3, #0]
10003ec0:	e00c      	b.n	10003edc <I2C_MASTER_StartTransmitIRQ+0x128>
        }
      }
      else
      {
        /*Trigger the Ack interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
10003ec2:	68fb      	ldr	r3, [r7, #12]
10003ec4:	6819      	ldr	r1, [r3, #0]
10003ec6:	697b      	ldr	r3, [r7, #20]
10003ec8:	2224      	movs	r2, #36	; 0x24
10003eca:	5c9b      	ldrb	r3, [r3, r2]
10003ecc:	1c08      	adds	r0, r1, #0
10003ece:	1c19      	adds	r1, r3, #0
10003ed0:	f7ff f99c 	bl	1000320c <XMC_USIC_CH_TriggerServiceRequest>
        status = I2C_MASTER_STATUS_SUCCESS;
10003ed4:	231f      	movs	r3, #31
10003ed6:	18fb      	adds	r3, r7, r3
10003ed8:	2200      	movs	r2, #0
10003eda:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return (status);
10003edc:	231f      	movs	r3, #31
10003ede:	18fb      	adds	r3, r7, r3
10003ee0:	781b      	ldrb	r3, [r3, #0]
}
10003ee2:	1c18      	adds	r0, r3, #0
10003ee4:	46bd      	mov	sp, r7
10003ee6:	b008      	add	sp, #32
10003ee8:	bd80      	pop	{r7, pc}
10003eea:	46c0      	nop			; (mov r8, r8)
10003eec:	00007fff 	.word	0x00007fff

10003ef0 <I2C_MASTER_AbortTransmitIRQ>:

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
10003ef0:	b580      	push	{r7, lr}
10003ef2:	b082      	sub	sp, #8
10003ef4:	af00      	add	r7, sp, #0
10003ef6:	6078      	str	r0, [r7, #4]
  handle->runtime->tx_busy = false;
10003ef8:	687b      	ldr	r3, [r7, #4]
10003efa:	689b      	ldr	r3, [r3, #8]
10003efc:	2226      	movs	r2, #38	; 0x26
10003efe:	2100      	movs	r1, #0
10003f00:	5499      	strb	r1, [r3, r2]
  handle->runtime->tx_data = NULL;
10003f02:	687b      	ldr	r3, [r7, #4]
10003f04:	689b      	ldr	r3, [r3, #8]
10003f06:	2200      	movs	r2, #0
10003f08:	601a      	str	r2, [r3, #0]
  handle->runtime->bus_acquired = false;
10003f0a:	687b      	ldr	r3, [r7, #4]
10003f0c:	689b      	ldr	r3, [r3, #8]
10003f0e:	2228      	movs	r2, #40	; 0x28
10003f10:	2100      	movs	r1, #0
10003f12:	5499      	strb	r1, [r3, r2]

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
10003f14:	687b      	ldr	r3, [r7, #4]
10003f16:	685b      	ldr	r3, [r3, #4]
10003f18:	2226      	movs	r2, #38	; 0x26
10003f1a:	5c9b      	ldrb	r3, [r3, r2]
10003f1c:	2b00      	cmp	r3, #0
10003f1e:	d00c      	beq.n	10003f3a <I2C_MASTER_AbortTransmitIRQ+0x4a>
  {
    /*Disable the transmit FIFO event*/
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003f20:	687b      	ldr	r3, [r7, #4]
10003f22:	681a      	ldr	r2, [r3, #0]
10003f24:	2380      	movs	r3, #128	; 0x80
10003f26:	05db      	lsls	r3, r3, #23
10003f28:	1c10      	adds	r0, r2, #0
10003f2a:	1c19      	adds	r1, r3, #0
10003f2c:	f7ff f990 	bl	10003250 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_TXFIFO_Flush(handle->channel);
10003f30:	687b      	ldr	r3, [r7, #4]
10003f32:	681b      	ldr	r3, [r3, #0]
10003f34:	1c18      	adds	r0, r3, #0
10003f36:	f7ff f99f 	bl	10003278 <XMC_USIC_CH_TXFIFO_Flush>
  }
  I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
10003f3a:	687a      	ldr	r2, [r7, #4]
10003f3c:	2380      	movs	r3, #128	; 0x80
10003f3e:	05db      	lsls	r3, r3, #23
10003f40:	1c10      	adds	r0, r2, #0
10003f42:	1c19      	adds	r1, r3, #0
10003f44:	f7ff fa9c 	bl	10003480 <I2C_MASTER_DisableEvent>
}
10003f48:	46bd      	mov	sp, r7
10003f4a:	b002      	add	sp, #8
10003f4c:	bd80      	pop	{r7, pc}
10003f4e:	46c0      	nop			; (mov r8, r8)

10003f50 <I2C_MASTER_StartReceiveIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
10003f50:	b580      	push	{r7, lr}
10003f52:	b086      	sub	sp, #24
10003f54:	af00      	add	r7, sp, #0
10003f56:	60f8      	str	r0, [r7, #12]
10003f58:	607a      	str	r2, [r7, #4]
10003f5a:	603b      	str	r3, [r7, #0]
10003f5c:	230b      	movs	r3, #11
10003f5e:	18fb      	adds	r3, r7, r3
10003f60:	1c0a      	adds	r2, r1, #0
10003f62:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
10003f64:	2317      	movs	r3, #23
10003f66:	18fb      	adds	r3, r7, r3
10003f68:	2202      	movs	r2, #2
10003f6a:	701a      	strb	r2, [r3, #0]
  ptr_runtime = handle->runtime;
10003f6c:	68fb      	ldr	r3, [r7, #12]
10003f6e:	689b      	ldr	r3, [r3, #8]
10003f70:	613b      	str	r3, [r7, #16]

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
10003f72:	68fb      	ldr	r3, [r7, #12]
10003f74:	2b00      	cmp	r3, #0
10003f76:	d017      	beq.n	10003fa8 <I2C_MASTER_StartReceiveIRQ+0x58>
10003f78:	230b      	movs	r3, #11
10003f7a:	18fb      	adds	r3, r7, r3
10003f7c:	781b      	ldrb	r3, [r3, #0]
10003f7e:	2201      	movs	r2, #1
10003f80:	4053      	eors	r3, r2
10003f82:	b2db      	uxtb	r3, r3
10003f84:	2b00      	cmp	r3, #0
10003f86:	d009      	beq.n	10003f9c <I2C_MASTER_StartReceiveIRQ+0x4c>
10003f88:	68fb      	ldr	r3, [r7, #12]
10003f8a:	689b      	ldr	r3, [r3, #8]
10003f8c:	2228      	movs	r2, #40	; 0x28
10003f8e:	5c9b      	ldrb	r3, [r3, r2]
10003f90:	b2db      	uxtb	r3, r3
10003f92:	2201      	movs	r2, #1
10003f94:	4053      	eors	r3, r2
10003f96:	b2db      	uxtb	r3, r3
10003f98:	2b00      	cmp	r3, #0
10003f9a:	d105      	bne.n	10003fa8 <I2C_MASTER_StartReceiveIRQ+0x58>
10003f9c:	683b      	ldr	r3, [r7, #0]
10003f9e:	2b00      	cmp	r3, #0
10003fa0:	d002      	beq.n	10003fa8 <I2C_MASTER_StartReceiveIRQ+0x58>
10003fa2:	6a3b      	ldr	r3, [r7, #32]
10003fa4:	2b00      	cmp	r3, #0
10003fa6:	d104      	bne.n	10003fb2 <I2C_MASTER_StartReceiveIRQ+0x62>
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
10003fa8:	2317      	movs	r3, #23
10003faa:	18fb      	adds	r3, r7, r3
10003fac:	2201      	movs	r2, #1
10003fae:	701a      	strb	r2, [r3, #0]
10003fb0:	e04c      	b.n	1000404c <I2C_MASTER_StartReceiveIRQ+0xfc>
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
10003fb2:	693b      	ldr	r3, [r7, #16]
10003fb4:	2227      	movs	r2, #39	; 0x27
10003fb6:	5c9b      	ldrb	r3, [r3, r2]
10003fb8:	b2db      	uxtb	r3, r3
10003fba:	2201      	movs	r2, #1
10003fbc:	4053      	eors	r3, r2
10003fbe:	b2db      	uxtb	r3, r3
10003fc0:	2b00      	cmp	r3, #0
10003fc2:	d043      	beq.n	1000404c <I2C_MASTER_StartReceiveIRQ+0xfc>
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
10003fc4:	693b      	ldr	r3, [r7, #16]
10003fc6:	2201      	movs	r2, #1
10003fc8:	619a      	str	r2, [r3, #24]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
10003fca:	693b      	ldr	r3, [r7, #16]
10003fcc:	683a      	ldr	r2, [r7, #0]
10003fce:	605a      	str	r2, [r3, #4]
    ptr_runtime->rx_data_count = count;
10003fd0:	693b      	ldr	r3, [r7, #16]
10003fd2:	6a3a      	ldr	r2, [r7, #32]
10003fd4:	611a      	str	r2, [r3, #16]
    ptr_runtime->tx_data = data;
10003fd6:	693b      	ldr	r3, [r7, #16]
10003fd8:	683a      	ldr	r2, [r7, #0]
10003fda:	601a      	str	r2, [r3, #0]
    ptr_runtime->tx_data_count = count;
10003fdc:	693b      	ldr	r3, [r7, #16]
10003fde:	6a3a      	ldr	r2, [r7, #32]
10003fe0:	609a      	str	r2, [r3, #8]
    ptr_runtime->tx_busy = true;
10003fe2:	693b      	ldr	r3, [r7, #16]
10003fe4:	2226      	movs	r2, #38	; 0x26
10003fe6:	2101      	movs	r1, #1
10003fe8:	5499      	strb	r1, [r3, r2]
    ptr_runtime->rx_busy = true;
10003fea:	693b      	ldr	r3, [r7, #16]
10003fec:	2227      	movs	r2, #39	; 0x27
10003fee:	2101      	movs	r1, #1
10003ff0:	5499      	strb	r1, [r3, r2]
    ptr_runtime->send_stop = send_stop;
10003ff2:	2324      	movs	r3, #36	; 0x24
10003ff4:	18fb      	adds	r3, r7, r3
10003ff6:	781a      	ldrb	r2, [r3, #0]
10003ff8:	693b      	ldr	r3, [r7, #16]
10003ffa:	61da      	str	r2, [r3, #28]
    ptr_runtime->send_nack = send_nack;
10003ffc:	2328      	movs	r3, #40	; 0x28
10003ffe:	18fb      	adds	r3, r7, r3
10004000:	781a      	ldrb	r2, [r3, #0]
10004002:	693b      	ldr	r3, [r7, #16]
10004004:	621a      	str	r2, [r3, #32]
    ptr_runtime->rx_data_index = 0U;
10004006:	693b      	ldr	r3, [r7, #16]
10004008:	2200      	movs	r2, #0
1000400a:	615a      	str	r2, [r3, #20]
    ptr_runtime->tx_data_index = 0U;
1000400c:	693b      	ldr	r3, [r7, #16]
1000400e:	2200      	movs	r2, #0
10004010:	60da      	str	r2, [r3, #12]

    if (handle->config->rxFIFO_size > 0)
10004012:	68fb      	ldr	r3, [r7, #12]
10004014:	685b      	ldr	r3, [r3, #4]
10004016:	2227      	movs	r2, #39	; 0x27
10004018:	5c9b      	ldrb	r3, [r3, r2]
1000401a:	2b00      	cmp	r3, #0
1000401c:	d008      	beq.n	10004030 <I2C_MASTER_StartReceiveIRQ+0xe0>
    {
      I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
1000401e:	68f8      	ldr	r0, [r7, #12]
10004020:	230b      	movs	r3, #11
10004022:	18fb      	adds	r3, r7, r3
10004024:	7819      	ldrb	r1, [r3, #0]
10004026:	687a      	ldr	r2, [r7, #4]
10004028:	6a3b      	ldr	r3, [r7, #32]
1000402a:	f7ff fccf 	bl	100039cc <I2C_MASTER_lReceive_FIFOData>
1000402e:	e009      	b.n	10004044 <I2C_MASTER_StartReceiveIRQ+0xf4>
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
10004030:	68f9      	ldr	r1, [r7, #12]
10004032:	230b      	movs	r3, #11
10004034:	18fb      	adds	r3, r7, r3
10004036:	781a      	ldrb	r2, [r3, #0]
10004038:	687b      	ldr	r3, [r7, #4]
1000403a:	1c08      	adds	r0, r1, #0
1000403c:	1c11      	adds	r1, r2, #0
1000403e:	1c1a      	adds	r2, r3, #0
10004040:	f7ff fdca 	bl	10003bd8 <I2C_MASTER_lReceive_StdData>
    }
    status = I2C_MASTER_STATUS_SUCCESS;
10004044:	2317      	movs	r3, #23
10004046:	18fb      	adds	r3, r7, r3
10004048:	2200      	movs	r2, #0
1000404a:	701a      	strb	r2, [r3, #0]
  }
  }
  return (status);
1000404c:	2317      	movs	r3, #23
1000404e:	18fb      	adds	r3, r7, r3
10004050:	781b      	ldrb	r3, [r3, #0]
}
10004052:	1c18      	adds	r0, r3, #0
10004054:	46bd      	mov	sp, r7
10004056:	b006      	add	sp, #24
10004058:	bd80      	pop	{r7, pc}
1000405a:	46c0      	nop			; (mov r8, r8)

1000405c <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
1000405c:	b590      	push	{r4, r7, lr}
1000405e:	b085      	sub	sp, #20
10004060:	af00      	add	r7, sp, #0
10004062:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
10004064:	687b      	ldr	r3, [r7, #4]
10004066:	689b      	ldr	r3, [r3, #8]
10004068:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
1000406a:	230f      	movs	r3, #15
1000406c:	18fb      	adds	r3, r7, r3
1000406e:	2200      	movs	r2, #0
10004070:	701a      	strb	r2, [r3, #0]

  if (ptr_runtime->rx_busy == true)
10004072:	68bb      	ldr	r3, [r7, #8]
10004074:	2227      	movs	r2, #39	; 0x27
10004076:	5c9b      	ldrb	r3, [r3, r2]
10004078:	b2db      	uxtb	r3, r3
1000407a:	2b00      	cmp	r3, #0
1000407c:	d100      	bne.n	10004080 <I2C_MASTER_ReceiveHandler+0x24>
1000407e:	e132      	b.n	100042e6 <I2C_MASTER_ReceiveHandler+0x28a>
  {
    if (handle->config->rxFIFO_size > 0)
10004080:	687b      	ldr	r3, [r7, #4]
10004082:	685b      	ldr	r3, [r3, #4]
10004084:	2227      	movs	r2, #39	; 0x27
10004086:	5c9b      	ldrb	r3, [r3, r2]
10004088:	2b00      	cmp	r3, #0
1000408a:	d100      	bne.n	1000408e <I2C_MASTER_ReceiveHandler+0x32>
1000408c:	e0e3      	b.n	10004256 <I2C_MASTER_ReceiveHandler+0x1fa>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
1000408e:	e022      	b.n	100040d6 <I2C_MASTER_ReceiveHandler+0x7a>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
10004090:	68bb      	ldr	r3, [r7, #8]
10004092:	685a      	ldr	r2, [r3, #4]
10004094:	68bb      	ldr	r3, [r7, #8]
10004096:	695b      	ldr	r3, [r3, #20]
10004098:	18d4      	adds	r4, r2, r3
1000409a:	687b      	ldr	r3, [r7, #4]
1000409c:	1c18      	adds	r0, r3, #0
1000409e:	f7ff f9bf 	bl	10003420 <I2C_MASTER_GetReceivedByte>
100040a2:	1c03      	adds	r3, r0, #0
100040a4:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
100040a6:	68bb      	ldr	r3, [r7, #8]
100040a8:	695b      	ldr	r3, [r3, #20]
100040aa:	1c5a      	adds	r2, r3, #1
100040ac:	68bb      	ldr	r3, [r7, #8]
100040ae:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
100040b0:	68bb      	ldr	r3, [r7, #8]
100040b2:	695a      	ldr	r2, [r3, #20]
100040b4:	68bb      	ldr	r3, [r7, #8]
100040b6:	691b      	ldr	r3, [r3, #16]
100040b8:	429a      	cmp	r2, r3
100040ba:	d10c      	bne.n	100040d6 <I2C_MASTER_ReceiveHandler+0x7a>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
100040bc:	68bb      	ldr	r3, [r7, #8]
100040be:	2227      	movs	r2, #39	; 0x27
100040c0:	2100      	movs	r1, #0
100040c2:	5499      	strb	r1, [r3, r2]

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
100040c4:	687b      	ldr	r3, [r7, #4]
100040c6:	681a      	ldr	r2, [r3, #0]
100040c8:	23c0      	movs	r3, #192	; 0xc0
100040ca:	05db      	lsls	r3, r3, #23
100040cc:	1c10      	adds	r0, r2, #0
100040ce:	1c19      	adds	r1, r3, #0
100040d0:	f7ff f918 	bl	10003304 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
100040d4:	e00a      	b.n	100040ec <I2C_MASTER_ReceiveHandler+0x90>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
100040d6:	687b      	ldr	r3, [r7, #4]
100040d8:	1c18      	adds	r0, r3, #0
100040da:	f7ff f993 	bl	10003404 <I2C_MASTER_IsRXFIFOEmpty>
100040de:	1c03      	adds	r3, r0, #0
100040e0:	1c1a      	adds	r2, r3, #0
100040e2:	2301      	movs	r3, #1
100040e4:	4053      	eors	r3, r2
100040e6:	b2db      	uxtb	r3, r3
100040e8:	2b00      	cmp	r3, #0
100040ea:	d1d1      	bne.n	10004090 <I2C_MASTER_ReceiveHandler+0x34>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
100040ec:	68bb      	ldr	r3, [r7, #8]
100040ee:	695a      	ldr	r2, [r3, #20]
100040f0:	68bb      	ldr	r3, [r7, #8]
100040f2:	691b      	ldr	r3, [r3, #16]
100040f4:	429a      	cmp	r2, r3
100040f6:	d300      	bcc.n	100040fa <I2C_MASTER_ReceiveHandler+0x9e>
100040f8:	e08c      	b.n	10004214 <I2C_MASTER_ReceiveHandler+0x1b8>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
100040fa:	68bb      	ldr	r3, [r7, #8]
100040fc:	691a      	ldr	r2, [r3, #16]
100040fe:	68bb      	ldr	r3, [r7, #8]
10004100:	695b      	ldr	r3, [r3, #20]
10004102:	1ad3      	subs	r3, r2, r3
10004104:	687a      	ldr	r2, [r7, #4]
10004106:	1c10      	adds	r0, r2, #0
10004108:	1c19      	adds	r1, r3, #0
1000410a:	f000 f9a9 	bl	10004460 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
1000410e:	687b      	ldr	r3, [r7, #4]
10004110:	685b      	ldr	r3, [r3, #4]
10004112:	2226      	movs	r2, #38	; 0x26
10004114:	5c9b      	ldrb	r3, [r3, r2]
10004116:	2b00      	cmp	r3, #0
10004118:	d017      	beq.n	1000414a <I2C_MASTER_ReceiveHandler+0xee>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
1000411a:	687b      	ldr	r3, [r7, #4]
1000411c:	685b      	ldr	r3, [r3, #4]
1000411e:	2226      	movs	r2, #38	; 0x26
10004120:	5c9b      	ldrb	r3, [r3, r2]
10004122:	1c1a      	adds	r2, r3, #0
10004124:	2301      	movs	r3, #1
10004126:	4093      	lsls	r3, r2
10004128:	1c19      	adds	r1, r3, #0
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
1000412a:	687b      	ldr	r3, [r7, #4]
1000412c:	685b      	ldr	r3, [r3, #4]
1000412e:	2227      	movs	r2, #39	; 0x27
10004130:	5c9b      	ldrb	r3, [r3, r2]
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10004132:	1c1a      	adds	r2, r3, #0
10004134:	2301      	movs	r3, #1
10004136:	4093      	lsls	r3, r2
10004138:	1c08      	adds	r0, r1, #0
1000413a:	1c19      	adds	r1, r3, #0
1000413c:	f7ff fa12 	bl	10003564 <calculate_minfifosize>
10004140:	1c02      	adds	r2, r0, #0
10004142:	230e      	movs	r3, #14
10004144:	18fb      	adds	r3, r7, r3
10004146:	701a      	strb	r2, [r3, #0]
10004148:	e003      	b.n	10004152 <I2C_MASTER_ReceiveHandler+0xf6>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
1000414a:	230e      	movs	r3, #14
1000414c:	18fb      	adds	r3, r7, r3
1000414e:	2202      	movs	r2, #2
10004150:	701a      	strb	r2, [r3, #0]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
10004152:	687b      	ldr	r3, [r7, #4]
10004154:	685b      	ldr	r3, [r3, #4]
10004156:	2226      	movs	r2, #38	; 0x26
10004158:	5c9b      	ldrb	r3, [r3, r2]
1000415a:	2b00      	cmp	r3, #0
1000415c:	d041      	beq.n	100041e2 <I2C_MASTER_ReceiveHandler+0x186>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000415e:	e033      	b.n	100041c8 <I2C_MASTER_ReceiveHandler+0x16c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10004160:	68bb      	ldr	r3, [r7, #8]
10004162:	68da      	ldr	r2, [r3, #12]
10004164:	68bb      	ldr	r3, [r7, #8]
10004166:	689b      	ldr	r3, [r3, #8]
10004168:	429a      	cmp	r2, r3
1000416a:	d22c      	bcs.n	100041c6 <I2C_MASTER_ReceiveHandler+0x16a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000416c:	68bb      	ldr	r3, [r7, #8]
1000416e:	68db      	ldr	r3, [r3, #12]
10004170:	1c5a      	adds	r2, r3, #1
10004172:	68bb      	ldr	r3, [r7, #8]
10004174:	689b      	ldr	r3, [r3, #8]
10004176:	429a      	cmp	r2, r3
10004178:	d108      	bne.n	1000418c <I2C_MASTER_ReceiveHandler+0x130>
1000417a:	68bb      	ldr	r3, [r7, #8]
1000417c:	6a1b      	ldr	r3, [r3, #32]
1000417e:	2b01      	cmp	r3, #1
10004180:	d104      	bne.n	1000418c <I2C_MASTER_ReceiveHandler+0x130>
              {
                I2C_MASTER_ReceiveNACK(handle);
10004182:	687b      	ldr	r3, [r7, #4]
10004184:	1c18      	adds	r0, r3, #0
10004186:	f7ff f997 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
1000418a:	e003      	b.n	10004194 <I2C_MASTER_ReceiveHandler+0x138>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
1000418c:	687b      	ldr	r3, [r7, #4]
1000418e:	1c18      	adds	r0, r3, #0
10004190:	f7ff f986 	bl	100034a0 <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
10004194:	68bb      	ldr	r3, [r7, #8]
10004196:	68db      	ldr	r3, [r3, #12]
10004198:	1c5a      	adds	r2, r3, #1
1000419a:	68bb      	ldr	r3, [r7, #8]
1000419c:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
1000419e:	230f      	movs	r3, #15
100041a0:	18fb      	adds	r3, r7, r3
100041a2:	220f      	movs	r2, #15
100041a4:	18ba      	adds	r2, r7, r2
100041a6:	7812      	ldrb	r2, [r2, #0]
100041a8:	3201      	adds	r2, #1
100041aa:	701a      	strb	r2, [r3, #0]
100041ac:	230f      	movs	r3, #15
100041ae:	18fa      	adds	r2, r7, r3
100041b0:	230e      	movs	r3, #14
100041b2:	18fb      	adds	r3, r7, r3
100041b4:	7812      	ldrb	r2, [r2, #0]
100041b6:	781b      	ldrb	r3, [r3, #0]
100041b8:	429a      	cmp	r2, r3
100041ba:	d305      	bcc.n	100041c8 <I2C_MASTER_ReceiveHandler+0x16c>
              {
                fifo_lindex = 0U;
100041bc:	230f      	movs	r3, #15
100041be:	18fb      	adds	r3, r7, r3
100041c0:	2200      	movs	r2, #0
100041c2:	701a      	strb	r2, [r3, #0]
                break;
100041c4:	e00c      	b.n	100041e0 <I2C_MASTER_ReceiveHandler+0x184>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
100041c6:	e00b      	b.n	100041e0 <I2C_MASTER_ReceiveHandler+0x184>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
100041c8:	687b      	ldr	r3, [r7, #4]
100041ca:	1c18      	adds	r0, r3, #0
100041cc:	f7ff f90c 	bl	100033e8 <I2C_MASTER_IsTXFIFOFull>
100041d0:	1c03      	adds	r3, r0, #0
100041d2:	1c1a      	adds	r2, r3, #0
100041d4:	2301      	movs	r3, #1
100041d6:	4053      	eors	r3, r2
100041d8:	b2db      	uxtb	r3, r3
100041da:	2b00      	cmp	r3, #0
100041dc:	d1c0      	bne.n	10004160 <I2C_MASTER_ReceiveHandler+0x104>
100041de:	e019      	b.n	10004214 <I2C_MASTER_ReceiveHandler+0x1b8>
100041e0:	e018      	b.n	10004214 <I2C_MASTER_ReceiveHandler+0x1b8>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
100041e2:	68bb      	ldr	r3, [r7, #8]
100041e4:	68db      	ldr	r3, [r3, #12]
100041e6:	1c5a      	adds	r2, r3, #1
100041e8:	68bb      	ldr	r3, [r7, #8]
100041ea:	689b      	ldr	r3, [r3, #8]
100041ec:	429a      	cmp	r2, r3
100041ee:	d108      	bne.n	10004202 <I2C_MASTER_ReceiveHandler+0x1a6>
100041f0:	68bb      	ldr	r3, [r7, #8]
100041f2:	6a1b      	ldr	r3, [r3, #32]
100041f4:	2b01      	cmp	r3, #1
100041f6:	d104      	bne.n	10004202 <I2C_MASTER_ReceiveHandler+0x1a6>
         {
           I2C_MASTER_ReceiveNACK(handle);
100041f8:	687b      	ldr	r3, [r7, #4]
100041fa:	1c18      	adds	r0, r3, #0
100041fc:	f7ff f95c 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
10004200:	e003      	b.n	1000420a <I2C_MASTER_ReceiveHandler+0x1ae>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
10004202:	687b      	ldr	r3, [r7, #4]
10004204:	1c18      	adds	r0, r3, #0
10004206:	f7ff f94b 	bl	100034a0 <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
1000420a:	68bb      	ldr	r3, [r7, #8]
1000420c:	68db      	ldr	r3, [r3, #12]
1000420e:	1c5a      	adds	r2, r3, #1
10004210:	68bb      	ldr	r3, [r7, #8]
10004212:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10004214:	68bb      	ldr	r3, [r7, #8]
10004216:	695a      	ldr	r2, [r3, #20]
10004218:	68bb      	ldr	r3, [r7, #8]
1000421a:	691b      	ldr	r3, [r3, #16]
1000421c:	429a      	cmp	r2, r3
1000421e:	d162      	bne.n	100042e6 <I2C_MASTER_ReceiveHandler+0x28a>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
10004220:	687b      	ldr	r3, [r7, #4]
10004222:	681a      	ldr	r2, [r3, #0]
10004224:	23c0      	movs	r3, #192	; 0xc0
10004226:	05db      	lsls	r3, r3, #23
10004228:	1c10      	adds	r0, r2, #0
1000422a:	1c19      	adds	r1, r3, #0
1000422c:	f7ff f86a 	bl	10003304 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
10004230:	687b      	ldr	r3, [r7, #4]
10004232:	681a      	ldr	r2, [r3, #0]
10004234:	23c0      	movs	r3, #192	; 0xc0
10004236:	021b      	lsls	r3, r3, #8
10004238:	1c10      	adds	r0, r2, #0
1000423a:	1c19      	adds	r1, r3, #0
1000423c:	f7fe ffc8 	bl	100031d0 <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
10004240:	68bb      	ldr	r3, [r7, #8]
10004242:	2228      	movs	r2, #40	; 0x28
10004244:	5c9b      	ldrb	r3, [r3, r2]
10004246:	b2db      	uxtb	r3, r3
10004248:	2b00      	cmp	r3, #0
1000424a:	d04c      	beq.n	100042e6 <I2C_MASTER_ReceiveHandler+0x28a>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
1000424c:	687b      	ldr	r3, [r7, #4]
1000424e:	1c18      	adds	r0, r3, #0
10004250:	f000 f84c 	bl	100042ec <I2C_MASTER_lSendStop_JumpTo_RxCallback>
10004254:	e047      	b.n	100042e6 <I2C_MASTER_ReceiveHandler+0x28a>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
10004256:	68bb      	ldr	r3, [r7, #8]
10004258:	685a      	ldr	r2, [r3, #4]
1000425a:	68bb      	ldr	r3, [r7, #8]
1000425c:	695b      	ldr	r3, [r3, #20]
1000425e:	18d4      	adds	r4, r2, r3
10004260:	687b      	ldr	r3, [r7, #4]
10004262:	1c18      	adds	r0, r3, #0
10004264:	f7ff f8dc 	bl	10003420 <I2C_MASTER_GetReceivedByte>
10004268:	1c03      	adds	r3, r0, #0
1000426a:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
1000426c:	68bb      	ldr	r3, [r7, #8]
1000426e:	695b      	ldr	r3, [r3, #20]
10004270:	1c5a      	adds	r2, r3, #1
10004272:	68bb      	ldr	r3, [r7, #8]
10004274:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10004276:	68bb      	ldr	r3, [r7, #8]
10004278:	695a      	ldr	r2, [r3, #20]
1000427a:	68bb      	ldr	r3, [r7, #8]
1000427c:	691b      	ldr	r3, [r3, #16]
1000427e:	429a      	cmp	r2, r3
10004280:	d21f      	bcs.n	100042c2 <I2C_MASTER_ReceiveHandler+0x266>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10004282:	68bb      	ldr	r3, [r7, #8]
10004284:	68da      	ldr	r2, [r3, #12]
10004286:	68bb      	ldr	r3, [r7, #8]
10004288:	689b      	ldr	r3, [r3, #8]
1000428a:	429a      	cmp	r2, r3
1000428c:	d22b      	bcs.n	100042e6 <I2C_MASTER_ReceiveHandler+0x28a>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
1000428e:	68bb      	ldr	r3, [r7, #8]
10004290:	68da      	ldr	r2, [r3, #12]
10004292:	68bb      	ldr	r3, [r7, #8]
10004294:	689b      	ldr	r3, [r3, #8]
10004296:	3b01      	subs	r3, #1
10004298:	429a      	cmp	r2, r3
1000429a:	d108      	bne.n	100042ae <I2C_MASTER_ReceiveHandler+0x252>
1000429c:	68bb      	ldr	r3, [r7, #8]
1000429e:	6a1b      	ldr	r3, [r3, #32]
100042a0:	2b01      	cmp	r3, #1
100042a2:	d104      	bne.n	100042ae <I2C_MASTER_ReceiveHandler+0x252>
          {
            I2C_MASTER_ReceiveNACK(handle);
100042a4:	687b      	ldr	r3, [r7, #4]
100042a6:	1c18      	adds	r0, r3, #0
100042a8:	f7ff f906 	bl	100034b8 <I2C_MASTER_ReceiveNACK>
100042ac:	e003      	b.n	100042b6 <I2C_MASTER_ReceiveHandler+0x25a>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
100042ae:	687b      	ldr	r3, [r7, #4]
100042b0:	1c18      	adds	r0, r3, #0
100042b2:	f7ff f8f5 	bl	100034a0 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
100042b6:	68bb      	ldr	r3, [r7, #8]
100042b8:	68db      	ldr	r3, [r3, #12]
100042ba:	1c5a      	adds	r2, r3, #1
100042bc:	68bb      	ldr	r3, [r7, #8]
100042be:	60da      	str	r2, [r3, #12]
100042c0:	e011      	b.n	100042e6 <I2C_MASTER_ReceiveHandler+0x28a>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
100042c2:	687b      	ldr	r3, [r7, #4]
100042c4:	681a      	ldr	r2, [r3, #0]
100042c6:	23c0      	movs	r3, #192	; 0xc0
100042c8:	021b      	lsls	r3, r3, #8
100042ca:	1c10      	adds	r0, r2, #0
100042cc:	1c19      	adds	r1, r3, #0
100042ce:	f7fe ff7f 	bl	100031d0 <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
100042d2:	68bb      	ldr	r3, [r7, #8]
100042d4:	2228      	movs	r2, #40	; 0x28
100042d6:	5c9b      	ldrb	r3, [r3, r2]
100042d8:	b2db      	uxtb	r3, r3
100042da:	2b00      	cmp	r3, #0
100042dc:	d003      	beq.n	100042e6 <I2C_MASTER_ReceiveHandler+0x28a>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
100042de:	687b      	ldr	r3, [r7, #4]
100042e0:	1c18      	adds	r0, r3, #0
100042e2:	f000 f803 	bl	100042ec <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
100042e6:	46bd      	mov	sp, r7
100042e8:	b005      	add	sp, #20
100042ea:	bd90      	pop	{r4, r7, pc}

100042ec <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
100042ec:	b580      	push	{r7, lr}
100042ee:	b084      	sub	sp, #16
100042f0:	af00      	add	r7, sp, #0
100042f2:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
100042f4:	687b      	ldr	r3, [r7, #4]
100042f6:	689b      	ldr	r3, [r3, #8]
100042f8:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
100042fa:	68fb      	ldr	r3, [r7, #12]
100042fc:	69db      	ldr	r3, [r3, #28]
100042fe:	2b01      	cmp	r3, #1
10004300:	d110      	bne.n	10004324 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10004302:	46c0      	nop			; (mov r8, r8)
10004304:	687b      	ldr	r3, [r7, #4]
10004306:	681b      	ldr	r3, [r3, #0]
10004308:	1c18      	adds	r0, r3, #0
1000430a:	f7fe ff71 	bl	100031f0 <XMC_USIC_CH_GetTransmitBufferStatus>
1000430e:	1e03      	subs	r3, r0, #0
10004310:	2b80      	cmp	r3, #128	; 0x80
10004312:	d0f7      	beq.n	10004304 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
10004314:	68fb      	ldr	r3, [r7, #12]
10004316:	2228      	movs	r2, #40	; 0x28
10004318:	2100      	movs	r1, #0
1000431a:	5499      	strb	r1, [r3, r2]

    I2C_MASTER_SendStop(handle);
1000431c:	687b      	ldr	r3, [r7, #4]
1000431e:	1c18      	adds	r0, r3, #0
10004320:	f7ff f8d6 	bl	100034d0 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10004324:	46c0      	nop			; (mov r8, r8)
10004326:	687b      	ldr	r3, [r7, #4]
10004328:	681b      	ldr	r3, [r3, #0]
1000432a:	1c18      	adds	r0, r3, #0
1000432c:	f7fe ff60 	bl	100031f0 <XMC_USIC_CH_GetTransmitBufferStatus>
10004330:	1e03      	subs	r3, r0, #0
10004332:	2b80      	cmp	r3, #128	; 0x80
10004334:	d0f7      	beq.n	10004326 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x3a>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
10004336:	68fb      	ldr	r3, [r7, #12]
10004338:	2227      	movs	r2, #39	; 0x27
1000433a:	2100      	movs	r1, #0
1000433c:	5499      	strb	r1, [r3, r2]
  ptr_runtime->tx_busy = false;
1000433e:	68fb      	ldr	r3, [r7, #12]
10004340:	2226      	movs	r2, #38	; 0x26
10004342:	2100      	movs	r1, #0
10004344:	5499      	strb	r1, [r3, r2]

  if (handle->config->rx_cbhandler != NULL)
10004346:	687b      	ldr	r3, [r7, #4]
10004348:	685b      	ldr	r3, [r3, #4]
1000434a:	695b      	ldr	r3, [r3, #20]
1000434c:	2b00      	cmp	r3, #0
1000434e:	d003      	beq.n	10004358 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6c>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
10004350:	687b      	ldr	r3, [r7, #4]
10004352:	685b      	ldr	r3, [r3, #4]
10004354:	695b      	ldr	r3, [r3, #20]
10004356:	4798      	blx	r3
  }
}
10004358:	46bd      	mov	sp, r7
1000435a:	b004      	add	sp, #16
1000435c:	bd80      	pop	{r7, pc}
1000435e:	46c0      	nop			; (mov r8, r8)

10004360 <I2C_MASTER_lAbortReceiveIRQ>:


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
10004360:	b580      	push	{r7, lr}
10004362:	b082      	sub	sp, #8
10004364:	af00      	add	r7, sp, #0
10004366:	6078      	str	r0, [r7, #4]
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
10004368:	687b      	ldr	r3, [r7, #4]
1000436a:	689b      	ldr	r3, [r3, #8]
1000436c:	2227      	movs	r2, #39	; 0x27
1000436e:	2100      	movs	r1, #0
10004370:	5499      	strb	r1, [r3, r2]
  handle->runtime->tx_busy = false;
10004372:	687b      	ldr	r3, [r7, #4]
10004374:	689b      	ldr	r3, [r3, #8]
10004376:	2226      	movs	r2, #38	; 0x26
10004378:	2100      	movs	r1, #0
1000437a:	5499      	strb	r1, [r3, r2]
  handle->runtime->rx_data = NULL;
1000437c:	687b      	ldr	r3, [r7, #4]
1000437e:	689b      	ldr	r3, [r3, #8]
10004380:	2200      	movs	r2, #0
10004382:	605a      	str	r2, [r3, #4]

  handle->runtime->bus_acquired = false;
10004384:	687b      	ldr	r3, [r7, #4]
10004386:	689b      	ldr	r3, [r3, #8]
10004388:	2228      	movs	r2, #40	; 0x28
1000438a:	2100      	movs	r1, #0
1000438c:	5499      	strb	r1, [r3, r2]

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000438e:	687b      	ldr	r3, [r7, #4]
10004390:	685b      	ldr	r3, [r3, #4]
10004392:	2227      	movs	r2, #39	; 0x27
10004394:	5c9b      	ldrb	r3, [r3, r2]
10004396:	2b00      	cmp	r3, #0
10004398:	d008      	beq.n	100043ac <I2C_MASTER_lAbortReceiveIRQ+0x4c>
  {
    XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
1000439a:	687b      	ldr	r3, [r7, #4]
1000439c:	681a      	ldr	r2, [r3, #0]
1000439e:	23c0      	movs	r3, #192	; 0xc0
100043a0:	05db      	lsls	r3, r3, #23
100043a2:	1c10      	adds	r0, r2, #0
100043a4:	1c19      	adds	r1, r3, #0
100043a6:	f7fe ffad 	bl	10003304 <XMC_USIC_CH_RXFIFO_DisableEvent>
100043aa:	e007      	b.n	100043bc <I2C_MASTER_lAbortReceiveIRQ+0x5c>
                                                    (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  }
  else
  {
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
100043ac:	687b      	ldr	r3, [r7, #4]
100043ae:	681a      	ldr	r2, [r3, #0]
100043b0:	23c0      	movs	r3, #192	; 0xc0
100043b2:	021b      	lsls	r3, r3, #8
100043b4:	1c10      	adds	r0, r2, #0
100043b6:	1c19      	adds	r1, r3, #0
100043b8:	f7fe ff0a 	bl	100031d0 <XMC_USIC_CH_DisableEvent>
                                                 (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
  }
  I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
100043bc:	687a      	ldr	r2, [r7, #4]
100043be:	2380      	movs	r3, #128	; 0x80
100043c0:	05db      	lsls	r3, r3, #23
100043c2:	1c10      	adds	r0, r2, #0
100043c4:	1c19      	adds	r1, r3, #0
100043c6:	f7ff f85b 	bl	10003480 <I2C_MASTER_DisableEvent>
}
100043ca:	46bd      	mov	sp, r7
100043cc:	b002      	add	sp, #8
100043ce:	bd80      	pop	{r7, pc}

100043d0 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
100043d0:	b580      	push	{r7, lr}
100043d2:	b084      	sub	sp, #16
100043d4:	af00      	add	r7, sp, #0
100043d6:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
100043d8:	687b      	ldr	r3, [r7, #4]
100043da:	681b      	ldr	r3, [r3, #0]
100043dc:	1c18      	adds	r0, r3, #0
100043de:	f7fe ffd7 	bl	10003390 <XMC_I2C_CH_GetStatusFlag>
100043e2:	1c03      	adds	r3, r0, #0
100043e4:	60fb      	str	r3, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
100043e6:	687b      	ldr	r3, [r7, #4]
100043e8:	685b      	ldr	r3, [r3, #4]
100043ea:	699b      	ldr	r3, [r3, #24]
100043ec:	2b00      	cmp	r3, #0
100043ee:	d00c      	beq.n	1000440a <I2C_MASTER_ProtocolHandler+0x3a>
100043f0:	68fb      	ldr	r3, [r7, #12]
100043f2:	2220      	movs	r2, #32
100043f4:	4013      	ands	r3, r2
100043f6:	d008      	beq.n	1000440a <I2C_MASTER_ProtocolHandler+0x3a>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
100043f8:	687b      	ldr	r3, [r7, #4]
100043fa:	1c18      	adds	r0, r3, #0
100043fc:	2120      	movs	r1, #32
100043fe:	f7ff f8f5 	bl	100035ec <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
10004402:	687b      	ldr	r3, [r7, #4]
10004404:	685b      	ldr	r3, [r3, #4]
10004406:	699b      	ldr	r3, [r3, #24]
10004408:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
1000440a:	687b      	ldr	r3, [r7, #4]
1000440c:	685b      	ldr	r3, [r3, #4]
1000440e:	69db      	ldr	r3, [r3, #28]
10004410:	2b00      	cmp	r3, #0
10004412:	d00c      	beq.n	1000442e <I2C_MASTER_ProtocolHandler+0x5e>
10004414:	68fb      	ldr	r3, [r7, #12]
10004416:	2240      	movs	r2, #64	; 0x40
10004418:	4013      	ands	r3, r2
1000441a:	d008      	beq.n	1000442e <I2C_MASTER_ProtocolHandler+0x5e>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
1000441c:	687b      	ldr	r3, [r7, #4]
1000441e:	1c18      	adds	r0, r3, #0
10004420:	2140      	movs	r1, #64	; 0x40
10004422:	f7ff f8e3 	bl	100035ec <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
10004426:	687b      	ldr	r3, [r7, #4]
10004428:	685b      	ldr	r3, [r3, #4]
1000442a:	69db      	ldr	r3, [r3, #28]
1000442c:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
1000442e:	687b      	ldr	r3, [r7, #4]
10004430:	685b      	ldr	r3, [r3, #4]
10004432:	6a1b      	ldr	r3, [r3, #32]
10004434:	2b00      	cmp	r3, #0
10004436:	d00f      	beq.n	10004458 <I2C_MASTER_ProtocolHandler+0x88>
10004438:	68fa      	ldr	r2, [r7, #12]
1000443a:	2381      	movs	r3, #129	; 0x81
1000443c:	005b      	lsls	r3, r3, #1
1000443e:	4013      	ands	r3, r2
10004440:	d00a      	beq.n	10004458 <I2C_MASTER_ProtocolHandler+0x88>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
10004442:	687a      	ldr	r2, [r7, #4]
10004444:	2380      	movs	r3, #128	; 0x80
10004446:	005b      	lsls	r3, r3, #1
10004448:	1c10      	adds	r0, r2, #0
1000444a:	1c19      	adds	r1, r3, #0
1000444c:	f7ff f8ce 	bl	100035ec <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
10004450:	687b      	ldr	r3, [r7, #4]
10004452:	685b      	ldr	r3, [r3, #4]
10004454:	6a1b      	ldr	r3, [r3, #32]
10004456:	4798      	blx	r3
  }
}
10004458:	46bd      	mov	sp, r7
1000445a:	b004      	add	sp, #16
1000445c:	bd80      	pop	{r7, pc}
1000445e:	46c0      	nop			; (mov r8, r8)

10004460 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
10004460:	b580      	push	{r7, lr}
10004462:	b086      	sub	sp, #24
10004464:	af00      	add	r7, sp, #0
10004466:	6078      	str	r0, [r7, #4]
10004468:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1000446a:	687b      	ldr	r3, [r7, #4]
1000446c:	685b      	ldr	r3, [r3, #4]
1000446e:	2227      	movs	r2, #39	; 0x27
10004470:	5c9b      	ldrb	r3, [r3, r2]
10004472:	1c1a      	adds	r2, r3, #0
10004474:	2301      	movs	r3, #1
10004476:	4093      	lsls	r3, r2
10004478:	1c1a      	adds	r2, r3, #0
1000447a:	2316      	movs	r3, #22
1000447c:	18fb      	adds	r3, r7, r3
1000447e:	701a      	strb	r2, [r3, #0]

  if ((handle->config->txFIFO_size > 0))
10004480:	687b      	ldr	r3, [r7, #4]
10004482:	685b      	ldr	r3, [r3, #4]
10004484:	2226      	movs	r2, #38	; 0x26
10004486:	5c9b      	ldrb	r3, [r3, r2]
10004488:	2b00      	cmp	r3, #0
1000448a:	d00b      	beq.n	100044a4 <I2C_MASTER_lReconfigureRxFIFO+0x44>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
1000448c:	687b      	ldr	r3, [r7, #4]
1000448e:	685b      	ldr	r3, [r3, #4]
10004490:	2226      	movs	r2, #38	; 0x26
10004492:	5c9b      	ldrb	r3, [r3, r2]
10004494:	1c1a      	adds	r2, r3, #0
10004496:	2301      	movs	r3, #1
10004498:	4093      	lsls	r3, r2
1000449a:	1c1a      	adds	r2, r3, #0
1000449c:	2317      	movs	r3, #23
1000449e:	18fb      	adds	r3, r7, r3
100044a0:	701a      	strb	r2, [r3, #0]
100044a2:	e003      	b.n	100044ac <I2C_MASTER_lReconfigureRxFIFO+0x4c>
  }
  else
  {
    tx_fifo_size = 1U;
100044a4:	2317      	movs	r3, #23
100044a6:	18fb      	adds	r3, r7, r3
100044a8:	2201      	movs	r2, #1
100044aa:	701a      	strb	r2, [r3, #0]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
100044ac:	2317      	movs	r3, #23
100044ae:	18fb      	adds	r3, r7, r3
100044b0:	781a      	ldrb	r2, [r3, #0]
100044b2:	2316      	movs	r3, #22
100044b4:	18fb      	adds	r3, r7, r3
100044b6:	781b      	ldrb	r3, [r3, #0]
100044b8:	1c10      	adds	r0, r2, #0
100044ba:	1c19      	adds	r1, r3, #0
100044bc:	f7ff f852 	bl	10003564 <calculate_minfifosize>
100044c0:	1c03      	adds	r3, r0, #0
100044c2:	613b      	str	r3, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
100044c4:	683a      	ldr	r2, [r7, #0]
100044c6:	693b      	ldr	r3, [r7, #16]
100044c8:	1c10      	adds	r0, r2, #0
100044ca:	1c19      	adds	r1, r3, #0
100044cc:	f7ff f84a 	bl	10003564 <calculate_minfifosize>
100044d0:	1c02      	adds	r2, r0, #0
100044d2:	230f      	movs	r3, #15
100044d4:	18fb      	adds	r3, r7, r3
100044d6:	701a      	strb	r2, [r3, #0]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
100044d8:	687b      	ldr	r3, [r7, #4]
100044da:	685b      	ldr	r3, [r3, #4]
100044dc:	2227      	movs	r2, #39	; 0x27
100044de:	5c9b      	ldrb	r3, [r3, r2]
100044e0:	1c19      	adds	r1, r3, #0
100044e2:	230f      	movs	r3, #15
100044e4:	18fb      	adds	r3, r7, r3
100044e6:	781b      	ldrb	r3, [r3, #0]
100044e8:	3b01      	subs	r3, #1
100044ea:	687a      	ldr	r2, [r7, #4]
100044ec:	1c10      	adds	r0, r2, #0
100044ee:	1c1a      	adds	r2, r3, #0
100044f0:	f7fe ff66 	bl	100033c0 <I2C_MASTER_SetRXFIFOTriggerLimit>
}
100044f4:	46bd      	mov	sp, r7
100044f6:	b006      	add	sp, #24
100044f8:	bd80      	pop	{r7, pc}
100044fa:	46c0      	nop			; (mov r8, r8)

100044fc <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
100044fc:	b580      	push	{r7, lr}
100044fe:	b084      	sub	sp, #16
10004500:	af00      	add	r7, sp, #0
10004502:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
10004504:	230f      	movs	r3, #15
10004506:	18fb      	adds	r3, r7, r3
10004508:	2200      	movs	r2, #0
1000450a:	701a      	strb	r2, [r3, #0]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000450c:	687b      	ldr	r3, [r7, #4]
1000450e:	685b      	ldr	r3, [r3, #4]
10004510:	2224      	movs	r2, #36	; 0x24
10004512:	5c9b      	ldrb	r3, [r3, r2]
10004514:	2b00      	cmp	r3, #0
10004516:	d104      	bne.n	10004522 <I2C_MASTER_AbortTransmit+0x26>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
10004518:	687b      	ldr	r3, [r7, #4]
1000451a:	1c18      	adds	r0, r3, #0
1000451c:	f7ff fce8 	bl	10003ef0 <I2C_MASTER_AbortTransmitIRQ>
10004520:	e009      	b.n	10004536 <I2C_MASTER_AbortTransmit+0x3a>
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
10004522:	687b      	ldr	r3, [r7, #4]
10004524:	685b      	ldr	r3, [r3, #4]
10004526:	2224      	movs	r2, #36	; 0x24
10004528:	5c9b      	ldrb	r3, [r3, r2]
1000452a:	2b01      	cmp	r3, #1
1000452c:	d003      	beq.n	10004536 <I2C_MASTER_AbortTransmit+0x3a>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
1000452e:	230f      	movs	r3, #15
10004530:	18fb      	adds	r3, r7, r3
10004532:	2201      	movs	r2, #1
10004534:	701a      	strb	r2, [r3, #0]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
10004536:	687b      	ldr	r3, [r7, #4]
10004538:	681b      	ldr	r3, [r3, #0]
1000453a:	687a      	ldr	r2, [r7, #4]
1000453c:	6812      	ldr	r2, [r2, #0]
1000453e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
10004540:	2102      	movs	r1, #2
10004542:	430a      	orrs	r2, r1
10004544:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
10004546:	687b      	ldr	r3, [r7, #4]
10004548:	681b      	ldr	r3, [r3, #0]
1000454a:	2202      	movs	r2, #2
1000454c:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
1000454e:	230f      	movs	r3, #15
10004550:	18fb      	adds	r3, r7, r3
10004552:	781b      	ldrb	r3, [r3, #0]
}
10004554:	1c18      	adds	r0, r3, #0
10004556:	46bd      	mov	sp, r7
10004558:	b004      	add	sp, #16
1000455a:	bd80      	pop	{r7, pc}

1000455c <I2C_MASTER_AbortReceive>:
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
1000455c:	b580      	push	{r7, lr}
1000455e:	b084      	sub	sp, #16
10004560:	af00      	add	r7, sp, #0
10004562:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
10004564:	230f      	movs	r3, #15
10004566:	18fb      	adds	r3, r7, r3
10004568:	2200      	movs	r2, #0
1000456a:	701a      	strb	r2, [r3, #0]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000456c:	687b      	ldr	r3, [r7, #4]
1000456e:	685b      	ldr	r3, [r3, #4]
10004570:	2225      	movs	r2, #37	; 0x25
10004572:	5c9b      	ldrb	r3, [r3, r2]
10004574:	2b00      	cmp	r3, #0
10004576:	d104      	bne.n	10004582 <I2C_MASTER_AbortReceive+0x26>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
    I2C_MASTER_lAbortReceiveIRQ(handle);
10004578:	687b      	ldr	r3, [r7, #4]
1000457a:	1c18      	adds	r0, r3, #0
1000457c:	f7ff fef0 	bl	10004360 <I2C_MASTER_lAbortReceiveIRQ>
10004580:	e009      	b.n	10004596 <I2C_MASTER_AbortReceive+0x3a>
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
10004582:	687b      	ldr	r3, [r7, #4]
10004584:	685b      	ldr	r3, [r3, #4]
10004586:	2225      	movs	r2, #37	; 0x25
10004588:	5c9b      	ldrb	r3, [r3, r2]
1000458a:	2b01      	cmp	r3, #1
1000458c:	d003      	beq.n	10004596 <I2C_MASTER_AbortReceive+0x3a>
    I2C_MASTER_lAbortReceiveDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
1000458e:	230f      	movs	r3, #15
10004590:	18fb      	adds	r3, r7, r3
10004592:	2201      	movs	r2, #1
10004594:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10004596:	230f      	movs	r3, #15
10004598:	18fb      	adds	r3, r7, r3
1000459a:	781b      	ldrb	r3, [r3, #0]
}
1000459c:	1c18      	adds	r0, r3, #0
1000459e:	46bd      	mov	sp, r7
100045a0:	b004      	add	sp, #16
100045a2:	bd80      	pop	{r7, pc}

100045a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100045a4:	b580      	push	{r7, lr}
100045a6:	b082      	sub	sp, #8
100045a8:	af00      	add	r7, sp, #0
100045aa:	1c02      	adds	r2, r0, #0
100045ac:	1dfb      	adds	r3, r7, #7
100045ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100045b0:	1dfb      	adds	r3, r7, #7
100045b2:	781b      	ldrb	r3, [r3, #0]
100045b4:	2b7f      	cmp	r3, #127	; 0x7f
100045b6:	d809      	bhi.n	100045cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100045b8:	4b06      	ldr	r3, [pc, #24]	; (100045d4 <__NVIC_EnableIRQ+0x30>)
100045ba:	1dfa      	adds	r2, r7, #7
100045bc:	7812      	ldrb	r2, [r2, #0]
100045be:	1c11      	adds	r1, r2, #0
100045c0:	221f      	movs	r2, #31
100045c2:	400a      	ands	r2, r1
100045c4:	2101      	movs	r1, #1
100045c6:	4091      	lsls	r1, r2
100045c8:	1c0a      	adds	r2, r1, #0
100045ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100045cc:	46bd      	mov	sp, r7
100045ce:	b002      	add	sp, #8
100045d0:	bd80      	pop	{r7, pc}
100045d2:	46c0      	nop			; (mov r8, r8)
100045d4:	e000e100 	.word	0xe000e100

100045d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100045d8:	b5b0      	push	{r4, r5, r7, lr}
100045da:	b082      	sub	sp, #8
100045dc:	af00      	add	r7, sp, #0
100045de:	1c02      	adds	r2, r0, #0
100045e0:	6039      	str	r1, [r7, #0]
100045e2:	1dfb      	adds	r3, r7, #7
100045e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100045e6:	1dfb      	adds	r3, r7, #7
100045e8:	781b      	ldrb	r3, [r3, #0]
100045ea:	2b7f      	cmp	r3, #127	; 0x7f
100045ec:	d827      	bhi.n	1000463e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100045ee:	4c2d      	ldr	r4, [pc, #180]	; (100046a4 <__NVIC_SetPriority+0xcc>)
100045f0:	1dfb      	adds	r3, r7, #7
100045f2:	781b      	ldrb	r3, [r3, #0]
100045f4:	b25b      	sxtb	r3, r3
100045f6:	089b      	lsrs	r3, r3, #2
100045f8:	492a      	ldr	r1, [pc, #168]	; (100046a4 <__NVIC_SetPriority+0xcc>)
100045fa:	1dfa      	adds	r2, r7, #7
100045fc:	7812      	ldrb	r2, [r2, #0]
100045fe:	b252      	sxtb	r2, r2
10004600:	0892      	lsrs	r2, r2, #2
10004602:	32c0      	adds	r2, #192	; 0xc0
10004604:	0092      	lsls	r2, r2, #2
10004606:	5852      	ldr	r2, [r2, r1]
10004608:	1df9      	adds	r1, r7, #7
1000460a:	7809      	ldrb	r1, [r1, #0]
1000460c:	1c08      	adds	r0, r1, #0
1000460e:	2103      	movs	r1, #3
10004610:	4001      	ands	r1, r0
10004612:	00c9      	lsls	r1, r1, #3
10004614:	1c08      	adds	r0, r1, #0
10004616:	21ff      	movs	r1, #255	; 0xff
10004618:	4081      	lsls	r1, r0
1000461a:	43c9      	mvns	r1, r1
1000461c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000461e:	683a      	ldr	r2, [r7, #0]
10004620:	0192      	lsls	r2, r2, #6
10004622:	20ff      	movs	r0, #255	; 0xff
10004624:	4002      	ands	r2, r0
10004626:	1df8      	adds	r0, r7, #7
10004628:	7800      	ldrb	r0, [r0, #0]
1000462a:	1c05      	adds	r5, r0, #0
1000462c:	2003      	movs	r0, #3
1000462e:	4028      	ands	r0, r5
10004630:	00c0      	lsls	r0, r0, #3
10004632:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004634:	430a      	orrs	r2, r1
10004636:	33c0      	adds	r3, #192	; 0xc0
10004638:	009b      	lsls	r3, r3, #2
1000463a:	511a      	str	r2, [r3, r4]
1000463c:	e02e      	b.n	1000469c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000463e:	4c1a      	ldr	r4, [pc, #104]	; (100046a8 <__NVIC_SetPriority+0xd0>)
10004640:	1dfb      	adds	r3, r7, #7
10004642:	781b      	ldrb	r3, [r3, #0]
10004644:	1c1a      	adds	r2, r3, #0
10004646:	230f      	movs	r3, #15
10004648:	4013      	ands	r3, r2
1000464a:	3b08      	subs	r3, #8
1000464c:	0899      	lsrs	r1, r3, #2
1000464e:	4a16      	ldr	r2, [pc, #88]	; (100046a8 <__NVIC_SetPriority+0xd0>)
10004650:	1dfb      	adds	r3, r7, #7
10004652:	781b      	ldrb	r3, [r3, #0]
10004654:	1c18      	adds	r0, r3, #0
10004656:	230f      	movs	r3, #15
10004658:	4003      	ands	r3, r0
1000465a:	3b08      	subs	r3, #8
1000465c:	089b      	lsrs	r3, r3, #2
1000465e:	3306      	adds	r3, #6
10004660:	009b      	lsls	r3, r3, #2
10004662:	18d3      	adds	r3, r2, r3
10004664:	685b      	ldr	r3, [r3, #4]
10004666:	1dfa      	adds	r2, r7, #7
10004668:	7812      	ldrb	r2, [r2, #0]
1000466a:	1c10      	adds	r0, r2, #0
1000466c:	2203      	movs	r2, #3
1000466e:	4002      	ands	r2, r0
10004670:	00d2      	lsls	r2, r2, #3
10004672:	1c10      	adds	r0, r2, #0
10004674:	22ff      	movs	r2, #255	; 0xff
10004676:	4082      	lsls	r2, r0
10004678:	43d2      	mvns	r2, r2
1000467a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000467c:	683b      	ldr	r3, [r7, #0]
1000467e:	019b      	lsls	r3, r3, #6
10004680:	20ff      	movs	r0, #255	; 0xff
10004682:	4003      	ands	r3, r0
10004684:	1df8      	adds	r0, r7, #7
10004686:	7800      	ldrb	r0, [r0, #0]
10004688:	1c05      	adds	r5, r0, #0
1000468a:	2003      	movs	r0, #3
1000468c:	4028      	ands	r0, r5
1000468e:	00c0      	lsls	r0, r0, #3
10004690:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004692:	431a      	orrs	r2, r3
10004694:	1d8b      	adds	r3, r1, #6
10004696:	009b      	lsls	r3, r3, #2
10004698:	18e3      	adds	r3, r4, r3
1000469a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1000469c:	46bd      	mov	sp, r7
1000469e:	b002      	add	sp, #8
100046a0:	bdb0      	pop	{r4, r5, r7, pc}
100046a2:	46c0      	nop			; (mov r8, r8)
100046a4:	e000e100 	.word	0xe000e100
100046a8:	e000ed00 	.word	0xe000ed00

100046ac <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
100046ac:	b580      	push	{r7, lr}
100046ae:	b082      	sub	sp, #8
100046b0:	af00      	add	r7, sp, #0
100046b2:	6078      	str	r0, [r7, #4]
100046b4:	1c08      	adds	r0, r1, #0
100046b6:	1c11      	adds	r1, r2, #0
100046b8:	1cfb      	adds	r3, r7, #3
100046ba:	1c02      	adds	r2, r0, #0
100046bc:	701a      	strb	r2, [r3, #0]
100046be:	1cbb      	adds	r3, r7, #2
100046c0:	1c0a      	adds	r2, r1, #0
100046c2:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100046c4:	1cfb      	adds	r3, r7, #3
100046c6:	7818      	ldrb	r0, [r3, #0]
100046c8:	1cfb      	adds	r3, r7, #3
100046ca:	781b      	ldrb	r3, [r3, #0]
100046cc:	687a      	ldr	r2, [r7, #4]
100046ce:	3306      	adds	r3, #6
100046d0:	009b      	lsls	r3, r3, #2
100046d2:	18d3      	adds	r3, r2, r3
100046d4:	685b      	ldr	r3, [r3, #4]
100046d6:	2207      	movs	r2, #7
100046d8:	4393      	bics	r3, r2
100046da:	1c1a      	adds	r2, r3, #0
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
100046dc:	1cbb      	adds	r3, r7, #2
100046de:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100046e0:	431a      	orrs	r2, r3
100046e2:	6879      	ldr	r1, [r7, #4]
100046e4:	1d83      	adds	r3, r0, #6
100046e6:	009b      	lsls	r3, r3, #2
100046e8:	18cb      	adds	r3, r1, r3
100046ea:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
100046ec:	46bd      	mov	sp, r7
100046ee:	b002      	add	sp, #8
100046f0:	bd80      	pop	{r7, pc}
100046f2:	46c0      	nop			; (mov r8, r8)

100046f4 <XMC_USIC_CH_EnableInputDigitalFilter>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
100046f4:	b580      	push	{r7, lr}
100046f6:	b082      	sub	sp, #8
100046f8:	af00      	add	r7, sp, #0
100046fa:	6078      	str	r0, [r7, #4]
100046fc:	1c0a      	adds	r2, r1, #0
100046fe:	1cfb      	adds	r3, r7, #3
10004700:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
10004702:	1cfb      	adds	r3, r7, #3
10004704:	7818      	ldrb	r0, [r3, #0]
10004706:	1cfb      	adds	r3, r7, #3
10004708:	781b      	ldrb	r3, [r3, #0]
1000470a:	687a      	ldr	r2, [r7, #4]
1000470c:	3306      	adds	r3, #6
1000470e:	009b      	lsls	r3, r3, #2
10004710:	18d3      	adds	r3, r2, r3
10004712:	685b      	ldr	r3, [r3, #4]
10004714:	2220      	movs	r2, #32
10004716:	431a      	orrs	r2, r3
10004718:	6879      	ldr	r1, [r7, #4]
1000471a:	1d83      	adds	r3, r0, #6
1000471c:	009b      	lsls	r3, r3, #2
1000471e:	18cb      	adds	r3, r1, r3
10004720:	605a      	str	r2, [r3, #4]
}
10004722:	46bd      	mov	sp, r7
10004724:	b002      	add	sp, #8
10004726:	bd80      	pop	{r7, pc}

10004728 <XMC_USIC_CH_EnableInputSync>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
10004728:	b580      	push	{r7, lr}
1000472a:	b082      	sub	sp, #8
1000472c:	af00      	add	r7, sp, #0
1000472e:	6078      	str	r0, [r7, #4]
10004730:	1c0a      	adds	r2, r1, #0
10004732:	1cfb      	adds	r3, r7, #3
10004734:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
10004736:	1cfb      	adds	r3, r7, #3
10004738:	7818      	ldrb	r0, [r3, #0]
1000473a:	1cfb      	adds	r3, r7, #3
1000473c:	781b      	ldrb	r3, [r3, #0]
1000473e:	687a      	ldr	r2, [r7, #4]
10004740:	3306      	adds	r3, #6
10004742:	009b      	lsls	r3, r3, #2
10004744:	18d3      	adds	r3, r2, r3
10004746:	685b      	ldr	r3, [r3, #4]
10004748:	2240      	movs	r2, #64	; 0x40
1000474a:	431a      	orrs	r2, r3
1000474c:	6879      	ldr	r1, [r7, #4]
1000474e:	1d83      	adds	r3, r0, #6
10004750:	009b      	lsls	r3, r3, #2
10004752:	18cb      	adds	r3, r1, r3
10004754:	605a      	str	r2, [r3, #4]
}
10004756:	46bd      	mov	sp, r7
10004758:	b002      	add	sp, #8
1000475a:	bd80      	pop	{r7, pc}

1000475c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
1000475c:	b580      	push	{r7, lr}
1000475e:	b082      	sub	sp, #8
10004760:	af00      	add	r7, sp, #0
10004762:	6078      	str	r0, [r7, #4]
10004764:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
10004766:	687a      	ldr	r2, [r7, #4]
10004768:	2384      	movs	r3, #132	; 0x84
1000476a:	005b      	lsls	r3, r3, #1
1000476c:	58d2      	ldr	r2, [r2, r3]
1000476e:	683b      	ldr	r3, [r7, #0]
10004770:	431a      	orrs	r2, r3
10004772:	1c11      	adds	r1, r2, #0
10004774:	687a      	ldr	r2, [r7, #4]
10004776:	2384      	movs	r3, #132	; 0x84
10004778:	005b      	lsls	r3, r3, #1
1000477a:	50d1      	str	r1, [r2, r3]
}
1000477c:	46bd      	mov	sp, r7
1000477e:	b002      	add	sp, #8
10004780:	bd80      	pop	{r7, pc}
10004782:	46c0      	nop			; (mov r8, r8)

10004784 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10004784:	b580      	push	{r7, lr}
10004786:	b082      	sub	sp, #8
10004788:	af00      	add	r7, sp, #0
1000478a:	6078      	str	r0, [r7, #4]
1000478c:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
1000478e:	687a      	ldr	r2, [r7, #4]
10004790:	2386      	movs	r3, #134	; 0x86
10004792:	005b      	lsls	r3, r3, #1
10004794:	58d2      	ldr	r2, [r2, r3]
10004796:	683b      	ldr	r3, [r7, #0]
10004798:	431a      	orrs	r2, r3
1000479a:	1c11      	adds	r1, r2, #0
1000479c:	687a      	ldr	r2, [r7, #4]
1000479e:	2386      	movs	r3, #134	; 0x86
100047a0:	005b      	lsls	r3, r3, #1
100047a2:	50d1      	str	r1, [r2, r3]
}
100047a4:	46bd      	mov	sp, r7
100047a6:	b002      	add	sp, #8
100047a8:	bd80      	pop	{r7, pc}
100047aa:	46c0      	nop			; (mov r8, r8)

100047ac <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
100047ac:	b580      	push	{r7, lr}
100047ae:	b082      	sub	sp, #8
100047b0:	af00      	add	r7, sp, #0
100047b2:	6078      	str	r0, [r7, #4]
100047b4:	1c0a      	adds	r2, r1, #0
100047b6:	1cfb      	adds	r3, r7, #3
100047b8:	701a      	strb	r2, [r3, #0]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
100047ba:	687b      	ldr	r3, [r7, #4]
100047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100047be:	220f      	movs	r2, #15
100047c0:	4393      	bics	r3, r2
100047c2:	1c1a      	adds	r2, r3, #0
100047c4:	1cfb      	adds	r3, r7, #3
100047c6:	781b      	ldrb	r3, [r3, #0]
100047c8:	431a      	orrs	r2, r3
100047ca:	687b      	ldr	r3, [r7, #4]
100047cc:	641a      	str	r2, [r3, #64]	; 0x40
}
100047ce:	46bd      	mov	sp, r7
100047d0:	b002      	add	sp, #8
100047d2:	bd80      	pop	{r7, pc}

100047d4 <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
100047d4:	b580      	push	{r7, lr}
100047d6:	b082      	sub	sp, #8
100047d8:	af00      	add	r7, sp, #0
100047da:	6078      	str	r0, [r7, #4]
100047dc:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
100047de:	687a      	ldr	r2, [r7, #4]
100047e0:	683b      	ldr	r3, [r7, #0]
100047e2:	1c10      	adds	r0, r2, #0
100047e4:	1c19      	adds	r1, r3, #0
100047e6:	2201      	movs	r2, #1
100047e8:	f7fd f816 	bl	10001818 <XMC_I2C_CH_InitEx>
}
100047ec:	46bd      	mov	sp, r7
100047ee:	b002      	add	sp, #8
100047f0:	bd80      	pop	{r7, pc}
100047f2:	46c0      	nop			; (mov r8, r8)

100047f4 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
100047f4:	b580      	push	{r7, lr}
100047f6:	b082      	sub	sp, #8
100047f8:	af00      	add	r7, sp, #0
100047fa:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
100047fc:	687b      	ldr	r3, [r7, #4]
100047fe:	1c18      	adds	r0, r3, #0
10004800:	2104      	movs	r1, #4
10004802:	f7ff ffd3 	bl	100047ac <XMC_USIC_CH_SetMode>
}
10004806:	46bd      	mov	sp, r7
10004808:	b002      	add	sp, #8
1000480a:	bd80      	pop	{r7, pc}

1000480c <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
1000480c:	b580      	push	{r7, lr}
1000480e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)10, XMC_GPIO_MODE_INPUT_TRISTATE);
10004810:	4b06      	ldr	r3, [pc, #24]	; (1000482c <I2C_MASTER_0_disable_io+0x20>)
10004812:	1c18      	adds	r0, r3, #0
10004814:	210a      	movs	r1, #10
10004816:	2200      	movs	r2, #0
10004818:	f7fc ff74 	bl	10001704 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)11, XMC_GPIO_MODE_INPUT_TRISTATE);
1000481c:	4b03      	ldr	r3, [pc, #12]	; (1000482c <I2C_MASTER_0_disable_io+0x20>)
1000481e:	1c18      	adds	r0, r3, #0
10004820:	210b      	movs	r1, #11
10004822:	2200      	movs	r2, #0
10004824:	f7fc ff6e 	bl	10001704 <XMC_GPIO_SetMode>
}
10004828:	46bd      	mov	sp, r7
1000482a:	bd80      	pop	{r7, pc}
1000482c:	40040200 	.word	0x40040200

10004830 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
10004830:	b580      	push	{r7, lr}
10004832:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)10, I2C_MASTER_0_sda_pin_config.mode);
10004834:	239c      	movs	r3, #156	; 0x9c
10004836:	4a07      	ldr	r2, [pc, #28]	; (10004854 <I2C_MASTER_0_enable_io+0x24>)
10004838:	1c10      	adds	r0, r2, #0
1000483a:	210a      	movs	r1, #10
1000483c:	1c1a      	adds	r2, r3, #0
1000483e:	f7fc ff61 	bl	10001704 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)11, I2C_MASTER_0_scl_pin_config.mode);
10004842:	2398      	movs	r3, #152	; 0x98
10004844:	4a03      	ldr	r2, [pc, #12]	; (10004854 <I2C_MASTER_0_enable_io+0x24>)
10004846:	1c10      	adds	r0, r2, #0
10004848:	210b      	movs	r1, #11
1000484a:	1c1a      	adds	r2, r3, #0
1000484c:	f7fc ff5a 	bl	10001704 <XMC_GPIO_SetMode>
}
10004850:	46bd      	mov	sp, r7
10004852:	bd80      	pop	{r7, pc}
10004854:	40040200 	.word	0x40040200

10004858 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
10004858:	b580      	push	{r7, lr}
1000485a:	b084      	sub	sp, #16
1000485c:	af00      	add	r7, sp, #0
 
  const uint32_t enabled_protocol_events = (uint32_t)(XMC_I2C_CH_EVENT_NACK | 
1000485e:	23b0      	movs	r3, #176	; 0xb0
10004860:	045b      	lsls	r3, r3, #17
10004862:	60fb      	str	r3, [r7, #12]
                               XMC_I2C_CH_EVENT_ARBITRATION_LOST | 
                               XMC_I2C_CH_EVENT_ERROR); 

  const uint32_t tx_fifo_events = (uint32_t)(0);
10004864:	2300      	movs	r3, #0
10004866:	60bb      	str	r3, [r7, #8]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
10004868:	23c0      	movs	r3, #192	; 0xc0
1000486a:	05db      	lsls	r3, r3, #23
1000486c:	607b      	str	r3, [r7, #4]
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
1000486e:	4a4f      	ldr	r2, [pc, #316]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004870:	4b4f      	ldr	r3, [pc, #316]	; (100049b0 <I2C_MASTER_0_init+0x158>)
10004872:	1c10      	adds	r0, r2, #0
10004874:	1c19      	adds	r1, r3, #0
10004876:	f7ff ffad 	bl	100047d4 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 5);
1000487a:	4b4c      	ldr	r3, [pc, #304]	; (100049ac <I2C_MASTER_0_init+0x154>)
1000487c:	1c18      	adds	r0, r3, #0
1000487e:	2100      	movs	r1, #0
10004880:	2205      	movs	r2, #5
10004882:	f7ff ff13 	bl	100046ac <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 4);
10004886:	4b49      	ldr	r3, [pc, #292]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004888:	1c18      	adds	r0, r3, #0
1000488a:	2101      	movs	r1, #1
1000488c:	2204      	movs	r2, #4
1000488e:	f7ff ff0d 	bl	100046ac <XMC_USIC_CH_SetInputSource>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
10004892:	4b46      	ldr	r3, [pc, #280]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004894:	1c18      	adds	r0, r3, #0
10004896:	2103      	movs	r1, #3
10004898:	2200      	movs	r2, #0
1000489a:	f7ff ff07 	bl	100046ac <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX4, 0U);
1000489e:	4b43      	ldr	r3, [pc, #268]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048a0:	1c18      	adds	r0, r3, #0
100048a2:	2104      	movs	r1, #4
100048a4:	2200      	movs	r2, #0
100048a6:	f7ff ff01 	bl	100046ac <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
100048aa:	4b40      	ldr	r3, [pc, #256]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048ac:	1c18      	adds	r0, r3, #0
100048ae:	2105      	movs	r1, #5
100048b0:	2200      	movs	r2, #0
100048b2:	f7ff fefb 	bl	100046ac <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0);
100048b6:	4b3d      	ldr	r3, [pc, #244]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048b8:	1c18      	adds	r0, r3, #0
100048ba:	2100      	movs	r1, #0
100048bc:	f7ff ff1a 	bl	100046f4 <XMC_USIC_CH_EnableInputDigitalFilter>
  XMC_USIC_CH_EnableInputSync(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0);
100048c0:	4b3a      	ldr	r3, [pc, #232]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048c2:	1c18      	adds	r0, r3, #0
100048c4:	2100      	movs	r1, #0
100048c6:	f7ff ff2f 	bl	10004728 <XMC_USIC_CH_EnableInputSync>
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1);
100048ca:	4b38      	ldr	r3, [pc, #224]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048cc:	1c18      	adds	r0, r3, #0
100048ce:	2101      	movs	r1, #1
100048d0:	f7ff ff10 	bl	100046f4 <XMC_USIC_CH_EnableInputDigitalFilter>
  XMC_USIC_CH_EnableInputSync(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1);
100048d4:	4b35      	ldr	r3, [pc, #212]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048d6:	1c18      	adds	r0, r3, #0
100048d8:	2101      	movs	r1, #1
100048da:	f7ff ff25 	bl	10004728 <XMC_USIC_CH_EnableInputSync>
    
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
100048de:	4b33      	ldr	r3, [pc, #204]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048e0:	1c18      	adds	r0, r3, #0
100048e2:	2108      	movs	r1, #8
100048e4:	2203      	movs	r2, #3
100048e6:	2301      	movs	r3, #1
100048e8:	f7fd fc6c 	bl	100021c4 <XMC_USIC_CH_TXFIFO_Configure>
                               8,
                               XMC_USIC_CH_FIFO_SIZE_8WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
100048ec:	4b2f      	ldr	r3, [pc, #188]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048ee:	1c18      	adds	r0, r3, #0
100048f0:	2110      	movs	r1, #16
100048f2:	2205      	movs	r2, #5
100048f4:	f7fd fd02 	bl	100022fc <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)5));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C0_CH1, tx_fifo_events);
100048f8:	4a2c      	ldr	r2, [pc, #176]	; (100049ac <I2C_MASTER_0_init+0x154>)
100048fa:	68bb      	ldr	r3, [r7, #8]
100048fc:	1c10      	adds	r0, r2, #0
100048fe:	1c19      	adds	r1, r3, #0
10004900:	f7ff ff2c 	bl	1000475c <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
10004904:	4b29      	ldr	r3, [pc, #164]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004906:	1c18      	adds	r0, r3, #0
10004908:	2100      	movs	r1, #0
1000490a:	2203      	movs	r2, #3
1000490c:	2307      	movs	r3, #7
1000490e:	f7fd fc87 	bl	10002220 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_8WORDS,
                                (uint32_t)(7));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
10004912:	4b26      	ldr	r3, [pc, #152]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004914:	1c18      	adds	r0, r3, #0
10004916:	2110      	movs	r1, #16
10004918:	2203      	movs	r2, #3
1000491a:	f7fd fd13 	bl	10002344 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x3));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
1000491e:	4b23      	ldr	r3, [pc, #140]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004920:	1c18      	adds	r0, r3, #0
10004922:	2113      	movs	r1, #19
10004924:	2203      	movs	r2, #3
10004926:	f7fd fd0d 	bl	10002344 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x3));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C0_CH1, rx_fifo_events);
1000492a:	4a20      	ldr	r2, [pc, #128]	; (100049ac <I2C_MASTER_0_init+0x154>)
1000492c:	687b      	ldr	r3, [r7, #4]
1000492e:	1c10      	adds	r0, r2, #0
10004930:	1c19      	adds	r1, r3, #0
10004932:	f7ff ff27 	bl	10004784 <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH1,
10004936:	4b1d      	ldr	r3, [pc, #116]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004938:	1c18      	adds	r0, r3, #0
1000493a:	2110      	movs	r1, #16
1000493c:	2200      	movs	r2, #0
1000493e:	f7fd fcbd 	bl	100022bc <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)0));
  XMC_I2C_CH_EnableEvent(XMC_I2C0_CH1, enabled_protocol_events);
10004942:	4a1a      	ldr	r2, [pc, #104]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004944:	68fb      	ldr	r3, [r7, #12]
10004946:	1c10      	adds	r0, r2, #0
10004948:	1c19      	adds	r1, r3, #0
1000494a:	f7fd f97d 	bl	10001c48 <XMC_I2C_CH_EnableEvent>
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
1000494e:	4b17      	ldr	r3, [pc, #92]	; (100049ac <I2C_MASTER_0_init+0x154>)
10004950:	1c18      	adds	r0, r3, #0
10004952:	f7ff ff4f 	bl	100047f4 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)10, &I2C_MASTER_0_sda_pin_config);
10004956:	4a17      	ldr	r2, [pc, #92]	; (100049b4 <I2C_MASTER_0_init+0x15c>)
10004958:	4b17      	ldr	r3, [pc, #92]	; (100049b8 <I2C_MASTER_0_init+0x160>)
1000495a:	1c10      	adds	r0, r2, #0
1000495c:	210a      	movs	r1, #10
1000495e:	1c1a      	adds	r2, r3, #0
10004960:	f7fc fc12 	bl	10001188 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)11, &I2C_MASTER_0_scl_pin_config);
10004964:	4a13      	ldr	r2, [pc, #76]	; (100049b4 <I2C_MASTER_0_init+0x15c>)
10004966:	4b15      	ldr	r3, [pc, #84]	; (100049bc <I2C_MASTER_0_init+0x164>)
10004968:	1c10      	adds	r0, r2, #0
1000496a:	210b      	movs	r1, #11
1000496c:	1c1a      	adds	r2, r3, #0
1000496e:	f7fc fc0b 	bl	10001188 <XMC_GPIO_Init>

  NVIC_SetPriority((IRQn_Type)14, 3);
10004972:	200e      	movs	r0, #14
10004974:	2103      	movs	r1, #3
10004976:	f7ff fe2f 	bl	100045d8 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(14, XMC_SCU_IRQCTRL_USIC0_SR5_IRQ14);
1000497a:	23e0      	movs	r3, #224	; 0xe0
1000497c:	011b      	lsls	r3, r3, #4
1000497e:	200e      	movs	r0, #14
10004980:	1c19      	adds	r1, r3, #0
10004982:	f7fc fe79 	bl	10001678 <XMC_SCU_SetInterruptControl>
  NVIC_EnableIRQ((IRQn_Type)14);
10004986:	200e      	movs	r0, #14
10004988:	f7ff fe0c 	bl	100045a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)12, 3);
1000498c:	200c      	movs	r0, #12
1000498e:	2103      	movs	r1, #3
10004990:	f7ff fe22 	bl	100045d8 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(12, XMC_SCU_IRQCTRL_USIC0_SR3_IRQ12);
10004994:	23c0      	movs	r3, #192	; 0xc0
10004996:	011b      	lsls	r3, r3, #4
10004998:	200c      	movs	r0, #12
1000499a:	1c19      	adds	r1, r3, #0
1000499c:	f7fc fe6c 	bl	10001678 <XMC_SCU_SetInterruptControl>
  NVIC_EnableIRQ((IRQn_Type)12);}
100049a0:	200c      	movs	r0, #12
100049a2:	f7ff fdff 	bl	100045a4 <__NVIC_EnableIRQ>
100049a6:	46bd      	mov	sp, r7
100049a8:	b004      	add	sp, #16
100049aa:	bd80      	pop	{r7, pc}
100049ac:	48000200 	.word	0x48000200
100049b0:	100062e8 	.word	0x100062e8
100049b4:	40040200 	.word	0x40040200
100049b8:	100062d8 	.word	0x100062d8
100049bc:	100062e0 	.word	0x100062e0

100049c0 <IRQ14_Handler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
100049c0:	b580      	push	{r7, lr}
100049c2:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
100049c4:	4b02      	ldr	r3, [pc, #8]	; (100049d0 <IRQ14_Handler+0x10>)
100049c6:	1c18      	adds	r0, r3, #0
100049c8:	f7fe fe4e 	bl	10003668 <I2C_MASTER_TransmitHandler>
}
100049cc:	46bd      	mov	sp, r7
100049ce:	bd80      	pop	{r7, pc}
100049d0:	20000614 	.word	0x20000614

100049d4 <IRQ12_Handler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
100049d4:	b580      	push	{r7, lr}
100049d6:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
100049d8:	4b02      	ldr	r3, [pc, #8]	; (100049e4 <IRQ12_Handler+0x10>)
100049da:	1c18      	adds	r0, r3, #0
100049dc:	f7ff fb3e 	bl	1000405c <I2C_MASTER_ReceiveHandler>
}
100049e0:	46bd      	mov	sp, r7
100049e2:	bd80      	pop	{r7, pc}
100049e4:	20000614 	.word	0x20000614

100049e8 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
100049e8:	b580      	push	{r7, lr}
100049ea:	b082      	sub	sp, #8
100049ec:	af00      	add	r7, sp, #0
100049ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
100049f0:	687b      	ldr	r3, [r7, #4]
100049f2:	6819      	ldr	r1, [r3, #0]
100049f4:	687b      	ldr	r3, [r7, #4]
100049f6:	7b1a      	ldrb	r2, [r3, #12]
100049f8:	687b      	ldr	r3, [r7, #4]
100049fa:	3304      	adds	r3, #4
100049fc:	1c08      	adds	r0, r1, #0
100049fe:	1c11      	adds	r1, r2, #0
10004a00:	1c1a      	adds	r2, r3, #0
10004a02:	f7fc fbc1 	bl	10001188 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10004a06:	687b      	ldr	r3, [r7, #4]
10004a08:	6819      	ldr	r1, [r3, #0]
10004a0a:	687b      	ldr	r3, [r7, #4]
10004a0c:	7b1a      	ldrb	r2, [r3, #12]
10004a0e:	687b      	ldr	r3, [r7, #4]
10004a10:	7b5b      	ldrb	r3, [r3, #13]
10004a12:	1c08      	adds	r0, r1, #0
10004a14:	1c11      	adds	r1, r2, #0
10004a16:	1c1a      	adds	r2, r3, #0
10004a18:	f7fc febc 	bl	10001794 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
10004a1c:	2300      	movs	r3, #0
}
10004a1e:	1c18      	adds	r0, r3, #0
10004a20:	46bd      	mov	sp, r7
10004a22:	b002      	add	sp, #8
10004a24:	bd80      	pop	{r7, pc}
10004a26:	46c0      	nop			; (mov r8, r8)

10004a28 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10004a28:	b580      	push	{r7, lr}
10004a2a:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
10004a2c:	4b03      	ldr	r3, [pc, #12]	; (10004a3c <SystemCoreSetup+0x14>)
10004a2e:	4a03      	ldr	r2, [pc, #12]	; (10004a3c <SystemCoreSetup+0x14>)
10004a30:	6e92      	ldr	r2, [r2, #104]	; 0x68
10004a32:	2101      	movs	r1, #1
10004a34:	438a      	bics	r2, r1
10004a36:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
10004a38:	46bd      	mov	sp, r7
10004a3a:	bd80      	pop	{r7, pc}
10004a3c:	40010000 	.word	0x40010000

10004a40 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
10004a40:	b580      	push	{r7, lr}
10004a42:	b084      	sub	sp, #16
10004a44:	af00      	add	r7, sp, #0
10004a46:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10004a48:	230f      	movs	r3, #15
10004a4a:	18fb      	adds	r3, r7, r3
10004a4c:	2200      	movs	r2, #0
10004a4e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10004a50:	230e      	movs	r3, #14
10004a52:	18fb      	adds	r3, r7, r3
10004a54:	2200      	movs	r2, #0
10004a56:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10004a58:	230d      	movs	r3, #13
10004a5a:	18fb      	adds	r3, r7, r3
10004a5c:	2200      	movs	r2, #0
10004a5e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10004a60:	230c      	movs	r3, #12
10004a62:	18fb      	adds	r3, r7, r3
10004a64:	2200      	movs	r2, #0
10004a66:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10004a68:	230b      	movs	r3, #11
10004a6a:	18fb      	adds	r3, r7, r3
10004a6c:	2200      	movs	r2, #0
10004a6e:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10004a70:	687b      	ldr	r3, [r7, #4]
10004a72:	781b      	ldrb	r3, [r3, #0]
10004a74:	2201      	movs	r2, #1
10004a76:	4053      	eors	r3, r2
10004a78:	b2db      	uxtb	r3, r3
10004a7a:	2b00      	cmp	r3, #0
10004a7c:	d01b      	beq.n	10004ab6 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10004a7e:	230e      	movs	r3, #14
10004a80:	18fa      	adds	r2, r7, r3
10004a82:	230d      	movs	r3, #13
10004a84:	18fb      	adds	r3, r7, r3
10004a86:	7812      	ldrb	r2, [r2, #0]
10004a88:	781b      	ldrb	r3, [r3, #0]
10004a8a:	4313      	orrs	r3, r2
10004a8c:	b2da      	uxtb	r2, r3
10004a8e:	230c      	movs	r3, #12
10004a90:	18fb      	adds	r3, r7, r3
10004a92:	781b      	ldrb	r3, [r3, #0]
10004a94:	4313      	orrs	r3, r2
10004a96:	b2d9      	uxtb	r1, r3
10004a98:	230f      	movs	r3, #15
10004a9a:	18fb      	adds	r3, r7, r3
10004a9c:	220b      	movs	r2, #11
10004a9e:	18ba      	adds	r2, r7, r2
10004aa0:	7812      	ldrb	r2, [r2, #0]
10004aa2:	430a      	orrs	r2, r1
10004aa4:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10004aa6:	230f      	movs	r3, #15
10004aa8:	18fb      	adds	r3, r7, r3
10004aaa:	781b      	ldrb	r3, [r3, #0]
10004aac:	2b00      	cmp	r3, #0
10004aae:	d102      	bne.n	10004ab6 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10004ab0:	687b      	ldr	r3, [r7, #4]
10004ab2:	2201      	movs	r2, #1
10004ab4:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10004ab6:	230f      	movs	r3, #15
10004ab8:	18fb      	adds	r3, r7, r3
10004aba:	781b      	ldrb	r3, [r3, #0]
}
10004abc:	1c18      	adds	r0, r3, #0
10004abe:	46bd      	mov	sp, r7
10004ac0:	b004      	add	sp, #16
10004ac2:	bd80      	pop	{r7, pc}

10004ac4 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10004ac4:	b590      	push	{r4, r7, lr}
10004ac6:	b085      	sub	sp, #20
10004ac8:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10004aca:	1c3b      	adds	r3, r7, #0
10004acc:	4a05      	ldr	r2, [pc, #20]	; (10004ae4 <SystemCoreClockSetup+0x20>)
10004ace:	ca13      	ldmia	r2!, {r0, r1, r4}
10004ad0:	c313      	stmia	r3!, {r0, r1, r4}
10004ad2:	6812      	ldr	r2, [r2, #0]
10004ad4:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10004ad6:	1c3b      	adds	r3, r7, #0
10004ad8:	1c18      	adds	r0, r3, #0
10004ada:	f7fc fc2d 	bl	10001338 <XMC_SCU_CLOCK_Init>
}
10004ade:	46bd      	mov	sp, r7
10004ae0:	b005      	add	sp, #20
10004ae2:	bd90      	pop	{r4, r7, pc}
10004ae4:	1000632c 	.word	0x1000632c

10004ae8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
10004ae8:	b590      	push	{r4, r7, lr}
10004aea:	b083      	sub	sp, #12
10004aec:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10004aee:	1dfb      	adds	r3, r7, #7
10004af0:	2200      	movs	r2, #0
10004af2:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10004af4:	1dfc      	adds	r4, r7, #7
10004af6:	4b1c      	ldr	r3, [pc, #112]	; (10004b68 <DAVE_Init+0x80>)
10004af8:	1c18      	adds	r0, r3, #0
10004afa:	f7ff ffa1 	bl	10004a40 <CLOCK_XMC1_Init>
10004afe:	1c03      	adds	r3, r0, #0
10004b00:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10004b02:	1dfb      	adds	r3, r7, #7
10004b04:	781b      	ldrb	r3, [r3, #0]
10004b06:	2b00      	cmp	r3, #0
10004b08:	d106      	bne.n	10004b18 <DAVE_Init+0x30>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
10004b0a:	1dfc      	adds	r4, r7, #7
10004b0c:	4b17      	ldr	r3, [pc, #92]	; (10004b6c <DAVE_Init+0x84>)
10004b0e:	1c18      	adds	r0, r3, #0
10004b10:	f7fd fd50 	bl	100025b4 <SPI_MASTER_Init>
10004b14:	1c03      	adds	r3, r0, #0
10004b16:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004b18:	1dfb      	adds	r3, r7, #7
10004b1a:	781b      	ldrb	r3, [r3, #0]
10004b1c:	2b00      	cmp	r3, #0
10004b1e:	d106      	bne.n	10004b2e <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance SPI_CE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SPI_CE); 
10004b20:	1dfc      	adds	r4, r7, #7
10004b22:	4b13      	ldr	r3, [pc, #76]	; (10004b70 <DAVE_Init+0x88>)
10004b24:	1c18      	adds	r0, r3, #0
10004b26:	f7ff ff5f 	bl	100049e8 <DIGITAL_IO_Init>
10004b2a:	1c03      	adds	r3, r0, #0
10004b2c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004b2e:	1dfb      	adds	r3, r7, #7
10004b30:	781b      	ldrb	r3, [r3, #0]
10004b32:	2b00      	cmp	r3, #0
10004b34:	d106      	bne.n	10004b44 <DAVE_Init+0x5c>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_1 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_1); 
10004b36:	1dfc      	adds	r4, r7, #7
10004b38:	4b0e      	ldr	r3, [pc, #56]	; (10004b74 <DAVE_Init+0x8c>)
10004b3a:	1c18      	adds	r0, r3, #0
10004b3c:	f7fd fd3a 	bl	100025b4 <SPI_MASTER_Init>
10004b40:	1c03      	adds	r3, r0, #0
10004b42:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004b44:	1dfb      	adds	r3, r7, #7
10004b46:	781b      	ldrb	r3, [r3, #0]
10004b48:	2b00      	cmp	r3, #0
10004b4a:	d106      	bne.n	10004b5a <DAVE_Init+0x72>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
10004b4c:	1dfc      	adds	r4, r7, #7
10004b4e:	4b0a      	ldr	r3, [pc, #40]	; (10004b78 <DAVE_Init+0x90>)
10004b50:	1c18      	adds	r0, r3, #0
10004b52:	f7fe fd1b 	bl	1000358c <I2C_MASTER_Init>
10004b56:	1c03      	adds	r3, r0, #0
10004b58:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10004b5a:	1dfb      	adds	r3, r7, #7
10004b5c:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10004b5e:	1c18      	adds	r0, r3, #0
10004b60:	46bd      	mov	sp, r7
10004b62:	b003      	add	sp, #12
10004b64:	bd90      	pop	{r4, r7, pc}
10004b66:	46c0      	nop			; (mov r8, r8)
10004b68:	200006b0 	.word	0x200006b0
10004b6c:	20000590 	.word	0x20000590
10004b70:	1000631c 	.word	0x1000631c
10004b74:	200005dc 	.word	0x200005dc
10004b78:	20000614 	.word	0x20000614

10004b7c <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10004b7c:	b580      	push	{r7, lr}
10004b7e:	b082      	sub	sp, #8
10004b80:	af00      	add	r7, sp, #0
10004b82:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
10004b84:	687a      	ldr	r2, [r7, #4]
10004b86:	238c      	movs	r3, #140	; 0x8c
10004b88:	005b      	lsls	r3, r3, #1
10004b8a:	2180      	movs	r1, #128	; 0x80
10004b8c:	0209      	lsls	r1, r1, #8
10004b8e:	50d1      	str	r1, [r2, r3]
}
10004b90:	46bd      	mov	sp, r7
10004b92:	b002      	add	sp, #8
10004b94:	bd80      	pop	{r7, pc}
10004b96:	46c0      	nop			; (mov r8, r8)

10004b98 <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10004b98:	b580      	push	{r7, lr}
10004b9a:	b082      	sub	sp, #8
10004b9c:	af00      	add	r7, sp, #0
10004b9e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
10004ba0:	687a      	ldr	r2, [r7, #4]
10004ba2:	238c      	movs	r3, #140	; 0x8c
10004ba4:	005b      	lsls	r3, r3, #1
10004ba6:	2180      	movs	r1, #128	; 0x80
10004ba8:	01c9      	lsls	r1, r1, #7
10004baa:	50d1      	str	r1, [r2, r3]
}
10004bac:	46bd      	mov	sp, r7
10004bae:	b002      	add	sp, #8
10004bb0:	bd80      	pop	{r7, pc}
10004bb2:	46c0      	nop			; (mov r8, r8)

10004bb4 <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
10004bb4:	b580      	push	{r7, lr}
10004bb6:	b082      	sub	sp, #8
10004bb8:	af00      	add	r7, sp, #0
10004bba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
  return handle->runtime->tx_busy;
10004bbc:	687b      	ldr	r3, [r7, #4]
10004bbe:	689b      	ldr	r3, [r3, #8]
10004bc0:	2226      	movs	r2, #38	; 0x26
10004bc2:	5c9b      	ldrb	r3, [r3, r2]
10004bc4:	b2db      	uxtb	r3, r3
}
10004bc6:	1c18      	adds	r0, r3, #0
10004bc8:	46bd      	mov	sp, r7
10004bca:	b002      	add	sp, #8
10004bcc:	bd80      	pop	{r7, pc}
10004bce:	46c0      	nop			; (mov r8, r8)

10004bd0 <I2C_MASTER_FlushTxFifo>:
 * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 * @return None
 *
 */
__STATIC_INLINE void I2C_MASTER_FlushTxFifo(I2C_MASTER_t * const handle)
{
10004bd0:	b580      	push	{r7, lr}
10004bd2:	b082      	sub	sp, #8
10004bd4:	af00      	add	r7, sp, #0
10004bd6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_FlushTxFifo: invalid handle", (handle != NULL));
  XMC_USIC_CH_TXFIFO_Flush(handle->channel);
10004bd8:	687b      	ldr	r3, [r7, #4]
10004bda:	681b      	ldr	r3, [r3, #0]
10004bdc:	1c18      	adds	r0, r3, #0
10004bde:	f7ff ffcd 	bl	10004b7c <XMC_USIC_CH_TXFIFO_Flush>
}
10004be2:	46bd      	mov	sp, r7
10004be4:	b002      	add	sp, #8
10004be6:	bd80      	pop	{r7, pc}

10004be8 <I2C_MASTER_FlushRxFifo>:
 * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 * @return None
 *
 */
__STATIC_INLINE void I2C_MASTER_FlushRxFifo(I2C_MASTER_t * const handle)
{
10004be8:	b580      	push	{r7, lr}
10004bea:	b082      	sub	sp, #8
10004bec:	af00      	add	r7, sp, #0
10004bee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_FlushRxFifo: invalid handle", (handle != NULL));
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);
10004bf0:	687b      	ldr	r3, [r7, #4]
10004bf2:	681b      	ldr	r3, [r3, #0]
10004bf4:	1c18      	adds	r0, r3, #0
10004bf6:	f7ff ffcf 	bl	10004b98 <XMC_USIC_CH_RXFIFO_Flush>
}
10004bfa:	46bd      	mov	sp, r7
10004bfc:	b002      	add	sp, #8
10004bfe:	bd80      	pop	{r7, pc}

10004c00 <BMP180_init>:
	for(int i = 0 ; i < 0xFFF;i++); //delay
	}

	XMC_DEBUG("Done \n");
}
uint8_t BMP180_init(){
10004c00:	b590      	push	{r4, r7, lr}
10004c02:	b083      	sub	sp, #12
10004c04:	af02      	add	r7, sp, #8
	BMP180_DataRead[0] = BMP180_Reset;
10004c06:	4b1c      	ldr	r3, [pc, #112]	; (10004c78 <BMP180_init+0x78>)
10004c08:	22e0      	movs	r2, #224	; 0xe0
10004c0a:	701a      	strb	r2, [r3, #0]
	BMP180_DataRead[1] = 0xB6;  //reset registers and goes to sleep mode
10004c0c:	4b1a      	ldr	r3, [pc, #104]	; (10004c78 <BMP180_init+0x78>)
10004c0e:	22b6      	movs	r2, #182	; 0xb6
10004c10:	705a      	strb	r2, [r3, #1]
	BMP180_DataRead[2] = BMP180_CTRL_hum;
10004c12:	4b19      	ldr	r3, [pc, #100]	; (10004c78 <BMP180_init+0x78>)
10004c14:	22f2      	movs	r2, #242	; 0xf2
10004c16:	709a      	strb	r2, [r3, #2]
	BMP180_DataRead[3] = 1; // oversampling -> 1
10004c18:	4b17      	ldr	r3, [pc, #92]	; (10004c78 <BMP180_init+0x78>)
10004c1a:	2201      	movs	r2, #1
10004c1c:	70da      	strb	r2, [r3, #3]
	BMP180_DataRead[4] = BMP180_CTRL_meas;
10004c1e:	4b16      	ldr	r3, [pc, #88]	; (10004c78 <BMP180_init+0x78>)
10004c20:	22f4      	movs	r2, #244	; 0xf4
10004c22:	711a      	strb	r2, [r3, #4]
	BMP180_DataRead[5] = 0b00100101; //temp oversampling->1,pressure oversampling->1, forced mode
10004c24:	4b14      	ldr	r3, [pc, #80]	; (10004c78 <BMP180_init+0x78>)
10004c26:	2225      	movs	r2, #37	; 0x25
10004c28:	715a      	strb	r2, [r3, #5]
	BMP180_DataRead[6] = BMP180_CONFIG;
10004c2a:	4b13      	ldr	r3, [pc, #76]	; (10004c78 <BMP180_init+0x78>)
10004c2c:	22f5      	movs	r2, #245	; 0xf5
10004c2e:	719a      	strb	r2, [r3, #6]
	BMP180_DataRead[7] = 0b00000000; //time standby is not important as the IIR filter is off, SPI 3 wire disabled
10004c30:	4b11      	ldr	r3, [pc, #68]	; (10004c78 <BMP180_init+0x78>)
10004c32:	2200      	movs	r2, #0
10004c34:	71da      	strb	r2, [r3, #7]
	BMP180_I2C_Status = 0;
10004c36:	4b11      	ldr	r3, [pc, #68]	; (10004c7c <BMP180_init+0x7c>)
10004c38:	2200      	movs	r2, #0
10004c3a:	701a      	strb	r2, [r3, #0]
	I2C_MASTER_Transmit(&I2C_MASTER_0,true,_DS(BME180_Address,1),BMP180_DataRead,8,true);
10004c3c:	4a10      	ldr	r2, [pc, #64]	; (10004c80 <BMP180_init+0x80>)
10004c3e:	4c0e      	ldr	r4, [pc, #56]	; (10004c78 <BMP180_init+0x78>)
10004c40:	2308      	movs	r3, #8
10004c42:	9300      	str	r3, [sp, #0]
10004c44:	2301      	movs	r3, #1
10004c46:	9301      	str	r3, [sp, #4]
10004c48:	1c10      	adds	r0, r2, #0
10004c4a:	2101      	movs	r1, #1
10004c4c:	22ec      	movs	r2, #236	; 0xec
10004c4e:	1c23      	adds	r3, r4, #0
10004c50:	f7fe fcdc 	bl	1000360c <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
10004c54:	46c0      	nop			; (mov r8, r8)
10004c56:	4b0a      	ldr	r3, [pc, #40]	; (10004c80 <BMP180_init+0x80>)
10004c58:	1c18      	adds	r0, r3, #0
10004c5a:	f7ff ffab 	bl	10004bb4 <I2C_MASTER_IsTxBusy>
10004c5e:	1e03      	subs	r3, r0, #0
10004c60:	d1f9      	bne.n	10004c56 <BMP180_init+0x56>
	if(BMP180_I2C_Status == 2) return 0;
10004c62:	4b06      	ldr	r3, [pc, #24]	; (10004c7c <BMP180_init+0x7c>)
10004c64:	781b      	ldrb	r3, [r3, #0]
10004c66:	2b02      	cmp	r3, #2
10004c68:	d101      	bne.n	10004c6e <BMP180_init+0x6e>
10004c6a:	2300      	movs	r3, #0
10004c6c:	e000      	b.n	10004c70 <BMP180_init+0x70>


	return 1;
10004c6e:	2301      	movs	r3, #1
}
10004c70:	1c18      	adds	r0, r3, #0
10004c72:	46bd      	mov	sp, r7
10004c74:	b001      	add	sp, #4
10004c76:	bd90      	pop	{r4, r7, pc}
10004c78:	20000768 	.word	0x20000768
10004c7c:	200007a8 	.word	0x200007a8
10004c80:	20000614 	.word	0x20000614

10004c84 <Text_Communication>:
uint8_t Text_Communication(uint8_t SlaveAddress){
10004c84:	b590      	push	{r4, r7, lr}
10004c86:	b087      	sub	sp, #28
10004c88:	af04      	add	r7, sp, #16
10004c8a:	1c02      	adds	r2, r0, #0
10004c8c:	1dfb      	adds	r3, r7, #7
10004c8e:	701a      	strb	r2, [r3, #0]
	XMC_DEBUG("\n\nCommunication Test .... \n");
10004c90:	4b29      	ldr	r3, [pc, #164]	; (10004d38 <Text_Communication+0xb4>)
10004c92:	1c18      	adds	r0, r3, #0
10004c94:	f000 f9c8 	bl	10005028 <puts>
	I2C_MASTER_FlushRxFifo(&I2C_MASTER_0);
10004c98:	4b28      	ldr	r3, [pc, #160]	; (10004d3c <Text_Communication+0xb8>)
10004c9a:	1c18      	adds	r0, r3, #0
10004c9c:	f7ff ffa4 	bl	10004be8 <I2C_MASTER_FlushRxFifo>
	I2C_MASTER_FlushTxFifo(&I2C_MASTER_0);
10004ca0:	4b26      	ldr	r3, [pc, #152]	; (10004d3c <Text_Communication+0xb8>)
10004ca2:	1c18      	adds	r0, r3, #0
10004ca4:	f7ff ff94 	bl	10004bd0 <I2C_MASTER_FlushTxFifo>
	SlaveAddress = _DS(SlaveAddress,1);
10004ca8:	1dfa      	adds	r2, r7, #7
10004caa:	1dfb      	adds	r3, r7, #7
10004cac:	781b      	ldrb	r3, [r3, #0]
10004cae:	18db      	adds	r3, r3, r3
10004cb0:	7013      	strb	r3, [r2, #0]
	BMP180_DataRead[0] = BMP180_ID_Reg;
10004cb2:	4b23      	ldr	r3, [pc, #140]	; (10004d40 <Text_Communication+0xbc>)
10004cb4:	22d0      	movs	r2, #208	; 0xd0
10004cb6:	701a      	strb	r2, [r3, #0]
	I2C_MASTER_Transmit(&I2C_MASTER_0,true,SlaveAddress,BMP180_DataRead,1,false);
10004cb8:	1dfb      	adds	r3, r7, #7
10004cba:	781a      	ldrb	r2, [r3, #0]
10004cbc:	491f      	ldr	r1, [pc, #124]	; (10004d3c <Text_Communication+0xb8>)
10004cbe:	4c20      	ldr	r4, [pc, #128]	; (10004d40 <Text_Communication+0xbc>)
10004cc0:	2301      	movs	r3, #1
10004cc2:	9300      	str	r3, [sp, #0]
10004cc4:	2300      	movs	r3, #0
10004cc6:	9301      	str	r3, [sp, #4]
10004cc8:	1c08      	adds	r0, r1, #0
10004cca:	2101      	movs	r1, #1
10004ccc:	1c23      	adds	r3, r4, #0
10004cce:	f7fe fc9d 	bl	1000360c <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0)); //
10004cd2:	46c0      	nop			; (mov r8, r8)
10004cd4:	4b19      	ldr	r3, [pc, #100]	; (10004d3c <Text_Communication+0xb8>)
10004cd6:	1c18      	adds	r0, r3, #0
10004cd8:	f7ff ff6c 	bl	10004bb4 <I2C_MASTER_IsTxBusy>
10004cdc:	1e03      	subs	r3, r0, #0
10004cde:	d1f9      	bne.n	10004cd4 <Text_Communication+0x50>
	if(BMP180_I2C_Status == 2) return 0;
10004ce0:	4b18      	ldr	r3, [pc, #96]	; (10004d44 <Text_Communication+0xc0>)
10004ce2:	781b      	ldrb	r3, [r3, #0]
10004ce4:	2b02      	cmp	r3, #2
10004ce6:	d101      	bne.n	10004cec <Text_Communication+0x68>
10004ce8:	2300      	movs	r3, #0
10004cea:	e020      	b.n	10004d2e <Text_Communication+0xaa>
	I2C_MASTER_Receive(&I2C_MASTER_0,true,SlaveAddress,BMP180_DataRead,1,true,true);
10004cec:	1dfb      	adds	r3, r7, #7
10004cee:	781a      	ldrb	r2, [r3, #0]
10004cf0:	4912      	ldr	r1, [pc, #72]	; (10004d3c <Text_Communication+0xb8>)
10004cf2:	4c13      	ldr	r4, [pc, #76]	; (10004d40 <Text_Communication+0xbc>)
10004cf4:	2301      	movs	r3, #1
10004cf6:	9300      	str	r3, [sp, #0]
10004cf8:	2301      	movs	r3, #1
10004cfa:	9301      	str	r3, [sp, #4]
10004cfc:	2301      	movs	r3, #1
10004cfe:	9302      	str	r3, [sp, #8]
10004d00:	1c08      	adds	r0, r1, #0
10004d02:	2101      	movs	r1, #1
10004d04:	1c23      	adds	r3, r4, #0
10004d06:	f7fe fe2f 	bl	10003968 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
10004d0a:	46c0      	nop			; (mov r8, r8)
10004d0c:	4b0b      	ldr	r3, [pc, #44]	; (10004d3c <Text_Communication+0xb8>)
10004d0e:	1c18      	adds	r0, r3, #0
10004d10:	f7ff ff50 	bl	10004bb4 <I2C_MASTER_IsTxBusy>
10004d14:	1e03      	subs	r3, r0, #0
10004d16:	d1f9      	bne.n	10004d0c <Text_Communication+0x88>
	if(BMP180_DataRead[0] == BMP180_FixedAlternativID){
10004d18:	4b09      	ldr	r3, [pc, #36]	; (10004d40 <Text_Communication+0xbc>)
10004d1a:	781b      	ldrb	r3, [r3, #0]
10004d1c:	2b60      	cmp	r3, #96	; 0x60
10004d1e:	d105      	bne.n	10004d2c <Text_Communication+0xa8>
		XMC_DEBUG("BME280 connected\n");
10004d20:	4b09      	ldr	r3, [pc, #36]	; (10004d48 <Text_Communication+0xc4>)
10004d22:	1c18      	adds	r0, r3, #0
10004d24:	f000 f980 	bl	10005028 <puts>
		return 1;
10004d28:	2301      	movs	r3, #1
10004d2a:	e000      	b.n	10004d2e <Text_Communication+0xaa>
	}
	return 0;
10004d2c:	2300      	movs	r3, #0
}
10004d2e:	1c18      	adds	r0, r3, #0
10004d30:	46bd      	mov	sp, r7
10004d32:	b003      	add	sp, #12
10004d34:	bd90      	pop	{r4, r7, pc}
10004d36:	46c0      	nop			; (mov r8, r8)
10004d38:	10006360 	.word	0x10006360
10004d3c:	20000614 	.word	0x20000614
10004d40:	20000768 	.word	0x20000768
10004d44:	200007a8 	.word	0x200007a8
10004d48:	1000637c 	.word	0x1000637c

10004d4c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004d4c:	b580      	push	{r7, lr}
10004d4e:	b082      	sub	sp, #8
10004d50:	af00      	add	r7, sp, #0
10004d52:	6078      	str	r0, [r7, #4]
10004d54:	1c0a      	adds	r2, r1, #0
10004d56:	1cfb      	adds	r3, r7, #3
10004d58:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10004d5a:	1cfb      	adds	r3, r7, #3
10004d5c:	781b      	ldrb	r3, [r3, #0]
10004d5e:	2280      	movs	r2, #128	; 0x80
10004d60:	0252      	lsls	r2, r2, #9
10004d62:	409a      	lsls	r2, r3
10004d64:	687b      	ldr	r3, [r7, #4]
10004d66:	605a      	str	r2, [r3, #4]
}
10004d68:	46bd      	mov	sp, r7
10004d6a:	b002      	add	sp, #8
10004d6c:	bd80      	pop	{r7, pc}
10004d6e:	46c0      	nop			; (mov r8, r8)

10004d70 <SPI_MASTER_DisableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_DisableSlaveSelectSignal(const SPI_MASTER_t* handle)
{
10004d70:	b580      	push	{r7, lr}
10004d72:	b082      	sub	sp, #8
10004d74:	af00      	add	r7, sp, #0
10004d76:	6078      	str	r0, [r7, #4]
    XMC_ASSERT("SPI_MASTER_Transmit:handle NULL" , (handle != NULL));
    XMC_SPI_CH_DisableSlaveSelect(handle->channel);
10004d78:	687b      	ldr	r3, [r7, #4]
10004d7a:	681b      	ldr	r3, [r3, #0]
10004d7c:	1c18      	adds	r0, r3, #0
10004d7e:	f7fd f895 	bl	10001eac <XMC_SPI_CH_DisableSlaveSelect>
}
10004d82:	46bd      	mov	sp, r7
10004d84:	b002      	add	sp, #8
10004d86:	bd80      	pop	{r7, pc}

10004d88 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10004d88:	b580      	push	{r7, lr}
10004d8a:	b082      	sub	sp, #8
10004d8c:	af00      	add	r7, sp, #0
10004d8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10004d90:	687b      	ldr	r3, [r7, #4]
10004d92:	681a      	ldr	r2, [r3, #0]
10004d94:	687b      	ldr	r3, [r7, #4]
10004d96:	7b1b      	ldrb	r3, [r3, #12]
10004d98:	1c10      	adds	r0, r2, #0
10004d9a:	1c19      	adds	r1, r3, #0
10004d9c:	f7ff ffd6 	bl	10004d4c <XMC_GPIO_SetOutputLow>
}
10004da0:	46bd      	mov	sp, r7
10004da2:	b002      	add	sp, #8
10004da4:	bd80      	pop	{r7, pc}
10004da6:	46c0      	nop			; (mov r8, r8)

10004da8 <main>:
extern uint8_t ADXL345_DataRead[32];
char data[] = "X, .Y, .Z, ";
uint8_t slaveID = 236;

int main(void)
{
10004da8:	b590      	push	{r4, r7, lr}
10004daa:	b083      	sub	sp, #12
10004dac:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();
10004dae:	1dfc      	adds	r4, r7, #7
10004db0:	f7ff fe9a 	bl	10004ae8 <DAVE_Init>
10004db4:	1c03      	adds	r3, r0, #0
10004db6:	7023      	strb	r3, [r4, #0]
  initialise_monitor_handles(); // enable XMC_DEBUG outputs
10004db8:	f001 f85c 	bl	10005e74 <initialise_monitor_handles>


  if (status != DAVE_STATUS_SUCCESS)
10004dbc:	1dfb      	adds	r3, r7, #7
10004dbe:	781b      	ldrb	r3, [r3, #0]
10004dc0:	2b00      	cmp	r3, #0
10004dc2:	d004      	beq.n	10004dce <main+0x26>
  	  { XMC_DEBUG("DAVE APPs initialization failed\n");  while(1U); }
10004dc4:	4b14      	ldr	r3, [pc, #80]	; (10004e18 <main+0x70>)
10004dc6:	1c18      	adds	r0, r3, #0
10004dc8:	f000 f92e 	bl	10005028 <puts>
10004dcc:	e7fe      	b.n	10004dcc <main+0x24>

  XMC_DEBUG("DAVE APPs initialization passed\n");
10004dce:	4b13      	ldr	r3, [pc, #76]	; (10004e1c <main+0x74>)
10004dd0:	1c18      	adds	r0, r3, #0
10004dd2:	f000 f929 	bl	10005028 <puts>
  DIGITAL_IO_SetOutputLow(&SPI_CE);
10004dd6:	4b12      	ldr	r3, [pc, #72]	; (10004e20 <main+0x78>)
10004dd8:	1c18      	adds	r0, r3, #0
10004dda:	f7ff ffd5 	bl	10004d88 <DIGITAL_IO_SetOutputLow>
  SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004dde:	4b11      	ldr	r3, [pc, #68]	; (10004e24 <main+0x7c>)
10004de0:	1c18      	adds	r0, r3, #0
10004de2:	f7ff ffc5 	bl	10004d70 <SPI_MASTER_DisableSlaveSelectSignal>
  SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_1);
10004de6:	4b10      	ldr	r3, [pc, #64]	; (10004e28 <main+0x80>)
10004de8:	1c18      	adds	r0, r3, #0
10004dea:	f7ff ffc1 	bl	10004d70 <SPI_MASTER_DisableSlaveSelectSignal>
  //XMC_DEBUG("Data moved %d",0x76<<1);
  //I2C_Scanner();
  //Init_RF24();
  //TX_Mode();
  //Init_ADXL345();
  XMC_DEBUG("Test Communication returned %d \n",Text_Communication(BME180_Address));
10004dee:	2076      	movs	r0, #118	; 0x76
10004df0:	f7ff ff48 	bl	10004c84 <Text_Communication>
10004df4:	1c03      	adds	r3, r0, #0
10004df6:	1c1a      	adds	r2, r3, #0
10004df8:	4b0c      	ldr	r3, [pc, #48]	; (10004e2c <main+0x84>)
10004dfa:	1c18      	adds	r0, r3, #0
10004dfc:	1c11      	adds	r1, r2, #0
10004dfe:	f000 f897 	bl	10004f30 <iprintf>
  XMC_DEBUG("Init returned %d \n",BMP180_init());
10004e02:	f7ff fefd 	bl	10004c00 <BMP180_init>
10004e06:	1c03      	adds	r3, r0, #0
10004e08:	1c1a      	adds	r2, r3, #0
10004e0a:	4b09      	ldr	r3, [pc, #36]	; (10004e30 <main+0x88>)
10004e0c:	1c18      	adds	r0, r3, #0
10004e0e:	1c11      	adds	r1, r2, #0
10004e10:	f000 f88e 	bl	10004f30 <iprintf>
	  //Send_OneByte(ADXL345_DataRead[1]);
	  //for(int i = 0 ; i < 0xFF;i++); //delay
	  //data = ReadRegister(POWER_CTL);
	  //for(int i = 0 ; i < 0xFFFF;i++); //delay

  }
10004e14:	e7fe      	b.n	10004e14 <main+0x6c>
10004e16:	46c0      	nop			; (mov r8, r8)
10004e18:	10006390 	.word	0x10006390
10004e1c:	100063b0 	.word	0x100063b0
10004e20:	1000631c 	.word	0x1000631c
10004e24:	20000590 	.word	0x20000590
10004e28:	200005dc 	.word	0x200005dc
10004e2c:	100063d0 	.word	0x100063d0
10004e30:	100063f4 	.word	0x100063f4

10004e34 <Nack_ISR>:
}

void Nack_ISR(){
10004e34:	b580      	push	{r7, lr}
10004e36:	af00      	add	r7, sp, #0
	XMC_DEBUG("NO ACK, Check Communication or slave address. (Aborting)\n");
10004e38:	4b08      	ldr	r3, [pc, #32]	; (10004e5c <Nack_ISR+0x28>)
10004e3a:	1c18      	adds	r0, r3, #0
10004e3c:	f000 f8f4 	bl	10005028 <puts>
	BMP180_I2C_Status = 2;
10004e40:	4b07      	ldr	r3, [pc, #28]	; (10004e60 <Nack_ISR+0x2c>)
10004e42:	2202      	movs	r2, #2
10004e44:	701a      	strb	r2, [r3, #0]
	I2C_MASTER_ClearFlag(&I2C_MASTER_0, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
10004e46:	4b07      	ldr	r3, [pc, #28]	; (10004e64 <Nack_ISR+0x30>)
10004e48:	1c18      	adds	r0, r3, #0
10004e4a:	2120      	movs	r1, #32
10004e4c:	f7fe fbce 	bl	100035ec <I2C_MASTER_ClearFlag>
	I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
10004e50:	4b04      	ldr	r3, [pc, #16]	; (10004e64 <Nack_ISR+0x30>)
10004e52:	1c18      	adds	r0, r3, #0
10004e54:	f7ff fb52 	bl	100044fc <I2C_MASTER_AbortTransmit>
}
10004e58:	46bd      	mov	sp, r7
10004e5a:	bd80      	pop	{r7, pc}
10004e5c:	10006408 	.word	0x10006408
10004e60:	200007a8 	.word	0x200007a8
10004e64:	20000614 	.word	0x20000614

10004e68 <ARB_LOST_ISR>:

void ARB_LOST_ISR(){
10004e68:	b580      	push	{r7, lr}
10004e6a:	af00      	add	r7, sp, #0
	XMC_DEBUG("\bARB lost\n");
10004e6c:	4b02      	ldr	r3, [pc, #8]	; (10004e78 <ARB_LOST_ISR+0x10>)
10004e6e:	1c18      	adds	r0, r3, #0
10004e70:	f000 f8da 	bl	10005028 <puts>
}
10004e74:	46bd      	mov	sp, r7
10004e76:	bd80      	pop	{r7, pc}
10004e78:	10006444 	.word	0x10006444

10004e7c <Error_detect_ISR>:
void Error_detect_ISR(){
10004e7c:	b580      	push	{r7, lr}
10004e7e:	af00      	add	r7, sp, #0
	XMC_DEBUG("I2C error detect\n");
10004e80:	4b0a      	ldr	r3, [pc, #40]	; (10004eac <Error_detect_ISR+0x30>)
10004e82:	1c18      	adds	r0, r3, #0
10004e84:	f000 f8d0 	bl	10005028 <puts>
	I2C_MASTER_ClearFlag(&I2C_MASTER_0, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
10004e88:	4a09      	ldr	r2, [pc, #36]	; (10004eb0 <Error_detect_ISR+0x34>)
10004e8a:	2380      	movs	r3, #128	; 0x80
10004e8c:	005b      	lsls	r3, r3, #1
10004e8e:	1c10      	adds	r0, r2, #0
10004e90:	1c19      	adds	r1, r3, #0
10004e92:	f7fe fbab 	bl	100035ec <I2C_MASTER_ClearFlag>
	I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
10004e96:	4b06      	ldr	r3, [pc, #24]	; (10004eb0 <Error_detect_ISR+0x34>)
10004e98:	1c18      	adds	r0, r3, #0
10004e9a:	f7ff fb2f 	bl	100044fc <I2C_MASTER_AbortTransmit>
	I2C_MASTER_AbortReceive(&I2C_MASTER_0);
10004e9e:	4b04      	ldr	r3, [pc, #16]	; (10004eb0 <Error_detect_ISR+0x34>)
10004ea0:	1c18      	adds	r0, r3, #0
10004ea2:	f7ff fb5b 	bl	1000455c <I2C_MASTER_AbortReceive>
}
10004ea6:	46bd      	mov	sp, r7
10004ea8:	bd80      	pop	{r7, pc}
10004eaa:	46c0      	nop			; (mov r8, r8)
10004eac:	10006450 	.word	0x10006450
10004eb0:	20000614 	.word	0x20000614

10004eb4 <I2C_Transmit_ISR>:
void I2C_Transmit_ISR(){
10004eb4:	b580      	push	{r7, lr}
10004eb6:	af00      	add	r7, sp, #0
	//XMC_DEBUG("I2C device found, Slave ID %d\n",ROTATE_RIGHT(BMP180_DataRead[31],1));
	//I2C_MASTER_ClearFlag(&I2C_MASTER_0, (uint32_t)XMC_I2C_CH_STATUS_FLAG_r);

}
10004eb8:	46bd      	mov	sp, r7
10004eba:	bd80      	pop	{r7, pc}

10004ebc <I2C_Recive_ISR>:
void I2C_Recive_ISR(){
10004ebc:	b580      	push	{r7, lr}
10004ebe:	af00      	add	r7, sp, #0
	//XMC_DEBUG("\nI2C Rx ISR, Data recived %d",BMP180_DataRead[0]);
}
10004ec0:	46bd      	mov	sp, r7
10004ec2:	bd80      	pop	{r7, pc}

10004ec4 <SPI_Test>:
void SPI_Test(){
10004ec4:	b580      	push	{r7, lr}
10004ec6:	af00      	add	r7, sp, #0
	XMC_DEBUG("SPI test error\n");
10004ec8:	4b02      	ldr	r3, [pc, #8]	; (10004ed4 <SPI_Test+0x10>)
10004eca:	1c18      	adds	r0, r3, #0
10004ecc:	f000 f8ac 	bl	10005028 <puts>
}
10004ed0:	46bd      	mov	sp, r7
10004ed2:	bd80      	pop	{r7, pc}
10004ed4:	10006464 	.word	0x10006464

10004ed8 <__errno>:
10004ed8:	4b01      	ldr	r3, [pc, #4]	; (10004ee0 <__errno+0x8>)
10004eda:	6818      	ldr	r0, [r3, #0]
10004edc:	4770      	bx	lr
10004ede:	46c0      	nop			; (mov r8, r8)
10004ee0:	20000680 	.word	0x20000680

10004ee4 <__libc_init_array>:
10004ee4:	4b0e      	ldr	r3, [pc, #56]	; (10004f20 <__libc_init_array+0x3c>)
10004ee6:	b570      	push	{r4, r5, r6, lr}
10004ee8:	2500      	movs	r5, #0
10004eea:	1c1e      	adds	r6, r3, #0
10004eec:	4c0d      	ldr	r4, [pc, #52]	; (10004f24 <__libc_init_array+0x40>)
10004eee:	1ae4      	subs	r4, r4, r3
10004ef0:	10a4      	asrs	r4, r4, #2
10004ef2:	42a5      	cmp	r5, r4
10004ef4:	d004      	beq.n	10004f00 <__libc_init_array+0x1c>
10004ef6:	00ab      	lsls	r3, r5, #2
10004ef8:	58f3      	ldr	r3, [r6, r3]
10004efa:	4798      	blx	r3
10004efc:	3501      	adds	r5, #1
10004efe:	e7f8      	b.n	10004ef2 <__libc_init_array+0xe>
10004f00:	f7fd faa2 	bl	10002448 <_init>
10004f04:	4b08      	ldr	r3, [pc, #32]	; (10004f28 <__libc_init_array+0x44>)
10004f06:	2500      	movs	r5, #0
10004f08:	1c1e      	adds	r6, r3, #0
10004f0a:	4c08      	ldr	r4, [pc, #32]	; (10004f2c <__libc_init_array+0x48>)
10004f0c:	1ae4      	subs	r4, r4, r3
10004f0e:	10a4      	asrs	r4, r4, #2
10004f10:	42a5      	cmp	r5, r4
10004f12:	d004      	beq.n	10004f1e <__libc_init_array+0x3a>
10004f14:	00ab      	lsls	r3, r5, #2
10004f16:	58f3      	ldr	r3, [r6, r3]
10004f18:	4798      	blx	r3
10004f1a:	3501      	adds	r5, #1
10004f1c:	e7f8      	b.n	10004f10 <__libc_init_array+0x2c>
10004f1e:	bd70      	pop	{r4, r5, r6, pc}
10004f20:	20000684 	.word	0x20000684
10004f24:	20000684 	.word	0x20000684
10004f28:	20000684 	.word	0x20000684
10004f2c:	20000684 	.word	0x20000684

10004f30 <iprintf>:
10004f30:	b40f      	push	{r0, r1, r2, r3}
10004f32:	4b0b      	ldr	r3, [pc, #44]	; (10004f60 <iprintf+0x30>)
10004f34:	b513      	push	{r0, r1, r4, lr}
10004f36:	681c      	ldr	r4, [r3, #0]
10004f38:	2c00      	cmp	r4, #0
10004f3a:	d005      	beq.n	10004f48 <iprintf+0x18>
10004f3c:	69a3      	ldr	r3, [r4, #24]
10004f3e:	2b00      	cmp	r3, #0
10004f40:	d102      	bne.n	10004f48 <iprintf+0x18>
10004f42:	1c20      	adds	r0, r4, #0
10004f44:	f000 fa3e 	bl	100053c4 <__sinit>
10004f48:	ab05      	add	r3, sp, #20
10004f4a:	1c20      	adds	r0, r4, #0
10004f4c:	68a1      	ldr	r1, [r4, #8]
10004f4e:	9a04      	ldr	r2, [sp, #16]
10004f50:	9301      	str	r3, [sp, #4]
10004f52:	f000 fbef 	bl	10005734 <_vfiprintf_r>
10004f56:	bc16      	pop	{r1, r2, r4}
10004f58:	bc08      	pop	{r3}
10004f5a:	b004      	add	sp, #16
10004f5c:	4718      	bx	r3
10004f5e:	46c0      	nop			; (mov r8, r8)
10004f60:	20000680 	.word	0x20000680

10004f64 <_puts_r>:
10004f64:	b570      	push	{r4, r5, r6, lr}
10004f66:	1c05      	adds	r5, r0, #0
10004f68:	1c0e      	adds	r6, r1, #0
10004f6a:	2800      	cmp	r0, #0
10004f6c:	d004      	beq.n	10004f78 <_puts_r+0x14>
10004f6e:	6983      	ldr	r3, [r0, #24]
10004f70:	2b00      	cmp	r3, #0
10004f72:	d101      	bne.n	10004f78 <_puts_r+0x14>
10004f74:	f000 fa26 	bl	100053c4 <__sinit>
10004f78:	68ac      	ldr	r4, [r5, #8]
10004f7a:	89a3      	ldrh	r3, [r4, #12]
10004f7c:	071b      	lsls	r3, r3, #28
10004f7e:	d502      	bpl.n	10004f86 <_puts_r+0x22>
10004f80:	6923      	ldr	r3, [r4, #16]
10004f82:	2b00      	cmp	r3, #0
10004f84:	d119      	bne.n	10004fba <_puts_r+0x56>
10004f86:	1c28      	adds	r0, r5, #0
10004f88:	1c21      	adds	r1, r4, #0
10004f8a:	f000 f8af 	bl	100050ec <__swsetup_r>
10004f8e:	2800      	cmp	r0, #0
10004f90:	d013      	beq.n	10004fba <_puts_r+0x56>
10004f92:	2001      	movs	r0, #1
10004f94:	4240      	negs	r0, r0
10004f96:	e045      	b.n	10005024 <_puts_r+0xc0>
10004f98:	7831      	ldrb	r1, [r6, #0]
10004f9a:	2b00      	cmp	r3, #0
10004f9c:	da1b      	bge.n	10004fd6 <_puts_r+0x72>
10004f9e:	69a2      	ldr	r2, [r4, #24]
10004fa0:	4293      	cmp	r3, r2
10004fa2:	da11      	bge.n	10004fc8 <_puts_r+0x64>
10004fa4:	1c22      	adds	r2, r4, #0
10004fa6:	1c28      	adds	r0, r5, #0
10004fa8:	f000 f848 	bl	1000503c <__swbuf_r>
10004fac:	3001      	adds	r0, #1
10004fae:	4242      	negs	r2, r0
10004fb0:	4142      	adcs	r2, r0
10004fb2:	b2d0      	uxtb	r0, r2
10004fb4:	2800      	cmp	r0, #0
10004fb6:	d1ec      	bne.n	10004f92 <_puts_r+0x2e>
10004fb8:	3601      	adds	r6, #1
10004fba:	68a3      	ldr	r3, [r4, #8]
10004fbc:	7832      	ldrb	r2, [r6, #0]
10004fbe:	3b01      	subs	r3, #1
10004fc0:	60a3      	str	r3, [r4, #8]
10004fc2:	2a00      	cmp	r2, #0
10004fc4:	d1e8      	bne.n	10004f98 <_puts_r+0x34>
10004fc6:	e00c      	b.n	10004fe2 <_puts_r+0x7e>
10004fc8:	6823      	ldr	r3, [r4, #0]
10004fca:	7019      	strb	r1, [r3, #0]
10004fcc:	6823      	ldr	r3, [r4, #0]
10004fce:	7819      	ldrb	r1, [r3, #0]
10004fd0:	290a      	cmp	r1, #10
10004fd2:	d103      	bne.n	10004fdc <_puts_r+0x78>
10004fd4:	e7e6      	b.n	10004fa4 <_puts_r+0x40>
10004fd6:	6823      	ldr	r3, [r4, #0]
10004fd8:	7019      	strb	r1, [r3, #0]
10004fda:	6823      	ldr	r3, [r4, #0]
10004fdc:	3301      	adds	r3, #1
10004fde:	6023      	str	r3, [r4, #0]
10004fe0:	e7ea      	b.n	10004fb8 <_puts_r+0x54>
10004fe2:	2b00      	cmp	r3, #0
10004fe4:	da17      	bge.n	10005016 <_puts_r+0xb2>
10004fe6:	69a2      	ldr	r2, [r4, #24]
10004fe8:	4293      	cmp	r3, r2
10004fea:	db08      	blt.n	10004ffe <_puts_r+0x9a>
10004fec:	230a      	movs	r3, #10
10004fee:	6822      	ldr	r2, [r4, #0]
10004ff0:	7013      	strb	r3, [r2, #0]
10004ff2:	6823      	ldr	r3, [r4, #0]
10004ff4:	7819      	ldrb	r1, [r3, #0]
10004ff6:	290a      	cmp	r1, #10
10004ff8:	d111      	bne.n	1000501e <_puts_r+0xba>
10004ffa:	1c28      	adds	r0, r5, #0
10004ffc:	e001      	b.n	10005002 <_puts_r+0x9e>
10004ffe:	1c28      	adds	r0, r5, #0
10005000:	210a      	movs	r1, #10
10005002:	1c22      	adds	r2, r4, #0
10005004:	f000 f81a 	bl	1000503c <__swbuf_r>
10005008:	3001      	adds	r0, #1
1000500a:	4242      	negs	r2, r0
1000500c:	4142      	adcs	r2, r0
1000500e:	b2d0      	uxtb	r0, r2
10005010:	2800      	cmp	r0, #0
10005012:	d006      	beq.n	10005022 <_puts_r+0xbe>
10005014:	e7bd      	b.n	10004f92 <_puts_r+0x2e>
10005016:	230a      	movs	r3, #10
10005018:	6822      	ldr	r2, [r4, #0]
1000501a:	7013      	strb	r3, [r2, #0]
1000501c:	6823      	ldr	r3, [r4, #0]
1000501e:	3301      	adds	r3, #1
10005020:	6023      	str	r3, [r4, #0]
10005022:	200a      	movs	r0, #10
10005024:	bd70      	pop	{r4, r5, r6, pc}
	...

10005028 <puts>:
10005028:	b508      	push	{r3, lr}
1000502a:	4b03      	ldr	r3, [pc, #12]	; (10005038 <puts+0x10>)
1000502c:	1c01      	adds	r1, r0, #0
1000502e:	6818      	ldr	r0, [r3, #0]
10005030:	f7ff ff98 	bl	10004f64 <_puts_r>
10005034:	bd08      	pop	{r3, pc}
10005036:	46c0      	nop			; (mov r8, r8)
10005038:	20000680 	.word	0x20000680

1000503c <__swbuf_r>:
1000503c:	b570      	push	{r4, r5, r6, lr}
1000503e:	1c05      	adds	r5, r0, #0
10005040:	1c0e      	adds	r6, r1, #0
10005042:	1c14      	adds	r4, r2, #0
10005044:	2800      	cmp	r0, #0
10005046:	d004      	beq.n	10005052 <__swbuf_r+0x16>
10005048:	6983      	ldr	r3, [r0, #24]
1000504a:	2b00      	cmp	r3, #0
1000504c:	d101      	bne.n	10005052 <__swbuf_r+0x16>
1000504e:	f000 f9b9 	bl	100053c4 <__sinit>
10005052:	4b23      	ldr	r3, [pc, #140]	; (100050e0 <__swbuf_r+0xa4>)
10005054:	429c      	cmp	r4, r3
10005056:	d101      	bne.n	1000505c <__swbuf_r+0x20>
10005058:	686c      	ldr	r4, [r5, #4]
1000505a:	e008      	b.n	1000506e <__swbuf_r+0x32>
1000505c:	4b21      	ldr	r3, [pc, #132]	; (100050e4 <__swbuf_r+0xa8>)
1000505e:	429c      	cmp	r4, r3
10005060:	d101      	bne.n	10005066 <__swbuf_r+0x2a>
10005062:	68ac      	ldr	r4, [r5, #8]
10005064:	e003      	b.n	1000506e <__swbuf_r+0x32>
10005066:	4b20      	ldr	r3, [pc, #128]	; (100050e8 <__swbuf_r+0xac>)
10005068:	429c      	cmp	r4, r3
1000506a:	d100      	bne.n	1000506e <__swbuf_r+0x32>
1000506c:	68ec      	ldr	r4, [r5, #12]
1000506e:	69a3      	ldr	r3, [r4, #24]
10005070:	60a3      	str	r3, [r4, #8]
10005072:	89a3      	ldrh	r3, [r4, #12]
10005074:	071b      	lsls	r3, r3, #28
10005076:	d50a      	bpl.n	1000508e <__swbuf_r+0x52>
10005078:	6923      	ldr	r3, [r4, #16]
1000507a:	2b00      	cmp	r3, #0
1000507c:	d007      	beq.n	1000508e <__swbuf_r+0x52>
1000507e:	6823      	ldr	r3, [r4, #0]
10005080:	6922      	ldr	r2, [r4, #16]
10005082:	b2f6      	uxtb	r6, r6
10005084:	1a98      	subs	r0, r3, r2
10005086:	6963      	ldr	r3, [r4, #20]
10005088:	4298      	cmp	r0, r3
1000508a:	db0f      	blt.n	100050ac <__swbuf_r+0x70>
1000508c:	e008      	b.n	100050a0 <__swbuf_r+0x64>
1000508e:	1c28      	adds	r0, r5, #0
10005090:	1c21      	adds	r1, r4, #0
10005092:	f000 f82b 	bl	100050ec <__swsetup_r>
10005096:	2800      	cmp	r0, #0
10005098:	d0f1      	beq.n	1000507e <__swbuf_r+0x42>
1000509a:	2001      	movs	r0, #1
1000509c:	4240      	negs	r0, r0
1000509e:	e01d      	b.n	100050dc <__swbuf_r+0xa0>
100050a0:	1c28      	adds	r0, r5, #0
100050a2:	1c21      	adds	r1, r4, #0
100050a4:	f000 f920 	bl	100052e8 <_fflush_r>
100050a8:	2800      	cmp	r0, #0
100050aa:	d1f6      	bne.n	1000509a <__swbuf_r+0x5e>
100050ac:	68a3      	ldr	r3, [r4, #8]
100050ae:	3001      	adds	r0, #1
100050b0:	3b01      	subs	r3, #1
100050b2:	60a3      	str	r3, [r4, #8]
100050b4:	6823      	ldr	r3, [r4, #0]
100050b6:	1c5a      	adds	r2, r3, #1
100050b8:	6022      	str	r2, [r4, #0]
100050ba:	701e      	strb	r6, [r3, #0]
100050bc:	6963      	ldr	r3, [r4, #20]
100050be:	4298      	cmp	r0, r3
100050c0:	d005      	beq.n	100050ce <__swbuf_r+0x92>
100050c2:	89a3      	ldrh	r3, [r4, #12]
100050c4:	1c30      	adds	r0, r6, #0
100050c6:	07db      	lsls	r3, r3, #31
100050c8:	d508      	bpl.n	100050dc <__swbuf_r+0xa0>
100050ca:	2e0a      	cmp	r6, #10
100050cc:	d106      	bne.n	100050dc <__swbuf_r+0xa0>
100050ce:	1c28      	adds	r0, r5, #0
100050d0:	1c21      	adds	r1, r4, #0
100050d2:	f000 f909 	bl	100052e8 <_fflush_r>
100050d6:	2800      	cmp	r0, #0
100050d8:	d1df      	bne.n	1000509a <__swbuf_r+0x5e>
100050da:	1c30      	adds	r0, r6, #0
100050dc:	bd70      	pop	{r4, r5, r6, pc}
100050de:	46c0      	nop			; (mov r8, r8)
100050e0:	1000647c 	.word	0x1000647c
100050e4:	1000649c 	.word	0x1000649c
100050e8:	100064bc 	.word	0x100064bc

100050ec <__swsetup_r>:
100050ec:	4b35      	ldr	r3, [pc, #212]	; (100051c4 <__swsetup_r+0xd8>)
100050ee:	b570      	push	{r4, r5, r6, lr}
100050f0:	681d      	ldr	r5, [r3, #0]
100050f2:	1c06      	adds	r6, r0, #0
100050f4:	1c0c      	adds	r4, r1, #0
100050f6:	2d00      	cmp	r5, #0
100050f8:	d005      	beq.n	10005106 <__swsetup_r+0x1a>
100050fa:	69ab      	ldr	r3, [r5, #24]
100050fc:	2b00      	cmp	r3, #0
100050fe:	d102      	bne.n	10005106 <__swsetup_r+0x1a>
10005100:	1c28      	adds	r0, r5, #0
10005102:	f000 f95f 	bl	100053c4 <__sinit>
10005106:	4b30      	ldr	r3, [pc, #192]	; (100051c8 <__swsetup_r+0xdc>)
10005108:	429c      	cmp	r4, r3
1000510a:	d101      	bne.n	10005110 <__swsetup_r+0x24>
1000510c:	686c      	ldr	r4, [r5, #4]
1000510e:	e008      	b.n	10005122 <__swsetup_r+0x36>
10005110:	4b2e      	ldr	r3, [pc, #184]	; (100051cc <__swsetup_r+0xe0>)
10005112:	429c      	cmp	r4, r3
10005114:	d101      	bne.n	1000511a <__swsetup_r+0x2e>
10005116:	68ac      	ldr	r4, [r5, #8]
10005118:	e003      	b.n	10005122 <__swsetup_r+0x36>
1000511a:	4b2d      	ldr	r3, [pc, #180]	; (100051d0 <__swsetup_r+0xe4>)
1000511c:	429c      	cmp	r4, r3
1000511e:	d100      	bne.n	10005122 <__swsetup_r+0x36>
10005120:	68ec      	ldr	r4, [r5, #12]
10005122:	89a3      	ldrh	r3, [r4, #12]
10005124:	b29a      	uxth	r2, r3
10005126:	0711      	lsls	r1, r2, #28
10005128:	d423      	bmi.n	10005172 <__swsetup_r+0x86>
1000512a:	06d1      	lsls	r1, r2, #27
1000512c:	d407      	bmi.n	1000513e <__swsetup_r+0x52>
1000512e:	2209      	movs	r2, #9
10005130:	2001      	movs	r0, #1
10005132:	6032      	str	r2, [r6, #0]
10005134:	3237      	adds	r2, #55	; 0x37
10005136:	4313      	orrs	r3, r2
10005138:	81a3      	strh	r3, [r4, #12]
1000513a:	4240      	negs	r0, r0
1000513c:	e040      	b.n	100051c0 <__swsetup_r+0xd4>
1000513e:	0753      	lsls	r3, r2, #29
10005140:	d513      	bpl.n	1000516a <__swsetup_r+0x7e>
10005142:	6b61      	ldr	r1, [r4, #52]	; 0x34
10005144:	2900      	cmp	r1, #0
10005146:	d008      	beq.n	1000515a <__swsetup_r+0x6e>
10005148:	1c23      	adds	r3, r4, #0
1000514a:	3344      	adds	r3, #68	; 0x44
1000514c:	4299      	cmp	r1, r3
1000514e:	d002      	beq.n	10005156 <__swsetup_r+0x6a>
10005150:	1c30      	adds	r0, r6, #0
10005152:	f000 fa29 	bl	100055a8 <_free_r>
10005156:	2300      	movs	r3, #0
10005158:	6363      	str	r3, [r4, #52]	; 0x34
1000515a:	2224      	movs	r2, #36	; 0x24
1000515c:	89a3      	ldrh	r3, [r4, #12]
1000515e:	4393      	bics	r3, r2
10005160:	81a3      	strh	r3, [r4, #12]
10005162:	2300      	movs	r3, #0
10005164:	6063      	str	r3, [r4, #4]
10005166:	6923      	ldr	r3, [r4, #16]
10005168:	6023      	str	r3, [r4, #0]
1000516a:	2208      	movs	r2, #8
1000516c:	89a3      	ldrh	r3, [r4, #12]
1000516e:	4313      	orrs	r3, r2
10005170:	81a3      	strh	r3, [r4, #12]
10005172:	6923      	ldr	r3, [r4, #16]
10005174:	2b00      	cmp	r3, #0
10005176:	d10b      	bne.n	10005190 <__swsetup_r+0xa4>
10005178:	23a0      	movs	r3, #160	; 0xa0
1000517a:	89a2      	ldrh	r2, [r4, #12]
1000517c:	009b      	lsls	r3, r3, #2
1000517e:	4013      	ands	r3, r2
10005180:	2280      	movs	r2, #128	; 0x80
10005182:	0092      	lsls	r2, r2, #2
10005184:	4293      	cmp	r3, r2
10005186:	d003      	beq.n	10005190 <__swsetup_r+0xa4>
10005188:	1c30      	adds	r0, r6, #0
1000518a:	1c21      	adds	r1, r4, #0
1000518c:	f000 f9ac 	bl	100054e8 <__smakebuf_r>
10005190:	2301      	movs	r3, #1
10005192:	89a2      	ldrh	r2, [r4, #12]
10005194:	4013      	ands	r3, r2
10005196:	d005      	beq.n	100051a4 <__swsetup_r+0xb8>
10005198:	2300      	movs	r3, #0
1000519a:	60a3      	str	r3, [r4, #8]
1000519c:	6963      	ldr	r3, [r4, #20]
1000519e:	425b      	negs	r3, r3
100051a0:	61a3      	str	r3, [r4, #24]
100051a2:	e003      	b.n	100051ac <__swsetup_r+0xc0>
100051a4:	0791      	lsls	r1, r2, #30
100051a6:	d400      	bmi.n	100051aa <__swsetup_r+0xbe>
100051a8:	6963      	ldr	r3, [r4, #20]
100051aa:	60a3      	str	r3, [r4, #8]
100051ac:	2000      	movs	r0, #0
100051ae:	6923      	ldr	r3, [r4, #16]
100051b0:	4283      	cmp	r3, r0
100051b2:	d105      	bne.n	100051c0 <__swsetup_r+0xd4>
100051b4:	0613      	lsls	r3, r2, #24
100051b6:	d503      	bpl.n	100051c0 <__swsetup_r+0xd4>
100051b8:	2340      	movs	r3, #64	; 0x40
100051ba:	431a      	orrs	r2, r3
100051bc:	81a2      	strh	r2, [r4, #12]
100051be:	3801      	subs	r0, #1
100051c0:	bd70      	pop	{r4, r5, r6, pc}
100051c2:	46c0      	nop			; (mov r8, r8)
100051c4:	20000680 	.word	0x20000680
100051c8:	1000647c 	.word	0x1000647c
100051cc:	1000649c 	.word	0x1000649c
100051d0:	100064bc 	.word	0x100064bc

100051d4 <__sflush_r>:
100051d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100051d6:	898a      	ldrh	r2, [r1, #12]
100051d8:	1c05      	adds	r5, r0, #0
100051da:	1c0c      	adds	r4, r1, #0
100051dc:	0713      	lsls	r3, r2, #28
100051de:	d45e      	bmi.n	1000529e <__sflush_r+0xca>
100051e0:	684b      	ldr	r3, [r1, #4]
100051e2:	2b00      	cmp	r3, #0
100051e4:	dc02      	bgt.n	100051ec <__sflush_r+0x18>
100051e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
100051e8:	2b00      	cmp	r3, #0
100051ea:	dd1a      	ble.n	10005222 <__sflush_r+0x4e>
100051ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100051ee:	2f00      	cmp	r7, #0
100051f0:	d017      	beq.n	10005222 <__sflush_r+0x4e>
100051f2:	2300      	movs	r3, #0
100051f4:	682e      	ldr	r6, [r5, #0]
100051f6:	602b      	str	r3, [r5, #0]
100051f8:	2380      	movs	r3, #128	; 0x80
100051fa:	015b      	lsls	r3, r3, #5
100051fc:	401a      	ands	r2, r3
100051fe:	d001      	beq.n	10005204 <__sflush_r+0x30>
10005200:	6d62      	ldr	r2, [r4, #84]	; 0x54
10005202:	e015      	b.n	10005230 <__sflush_r+0x5c>
10005204:	1c28      	adds	r0, r5, #0
10005206:	6a21      	ldr	r1, [r4, #32]
10005208:	2301      	movs	r3, #1
1000520a:	47b8      	blx	r7
1000520c:	1c02      	adds	r2, r0, #0
1000520e:	1c43      	adds	r3, r0, #1
10005210:	d10e      	bne.n	10005230 <__sflush_r+0x5c>
10005212:	682b      	ldr	r3, [r5, #0]
10005214:	2b00      	cmp	r3, #0
10005216:	d00b      	beq.n	10005230 <__sflush_r+0x5c>
10005218:	2b1d      	cmp	r3, #29
1000521a:	d001      	beq.n	10005220 <__sflush_r+0x4c>
1000521c:	2b16      	cmp	r3, #22
1000521e:	d102      	bne.n	10005226 <__sflush_r+0x52>
10005220:	602e      	str	r6, [r5, #0]
10005222:	2000      	movs	r0, #0
10005224:	e05e      	b.n	100052e4 <__sflush_r+0x110>
10005226:	2140      	movs	r1, #64	; 0x40
10005228:	89a3      	ldrh	r3, [r4, #12]
1000522a:	430b      	orrs	r3, r1
1000522c:	81a3      	strh	r3, [r4, #12]
1000522e:	e059      	b.n	100052e4 <__sflush_r+0x110>
10005230:	89a3      	ldrh	r3, [r4, #12]
10005232:	075b      	lsls	r3, r3, #29
10005234:	d506      	bpl.n	10005244 <__sflush_r+0x70>
10005236:	6863      	ldr	r3, [r4, #4]
10005238:	1ad2      	subs	r2, r2, r3
1000523a:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000523c:	2b00      	cmp	r3, #0
1000523e:	d001      	beq.n	10005244 <__sflush_r+0x70>
10005240:	6c23      	ldr	r3, [r4, #64]	; 0x40
10005242:	1ad2      	subs	r2, r2, r3
10005244:	2300      	movs	r3, #0
10005246:	1c28      	adds	r0, r5, #0
10005248:	6a21      	ldr	r1, [r4, #32]
1000524a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000524c:	47b8      	blx	r7
1000524e:	89a3      	ldrh	r3, [r4, #12]
10005250:	1c42      	adds	r2, r0, #1
10005252:	d106      	bne.n	10005262 <__sflush_r+0x8e>
10005254:	682a      	ldr	r2, [r5, #0]
10005256:	2a00      	cmp	r2, #0
10005258:	d003      	beq.n	10005262 <__sflush_r+0x8e>
1000525a:	2a1d      	cmp	r2, #29
1000525c:	d001      	beq.n	10005262 <__sflush_r+0x8e>
1000525e:	2a16      	cmp	r2, #22
10005260:	d119      	bne.n	10005296 <__sflush_r+0xc2>
10005262:	2200      	movs	r2, #0
10005264:	6062      	str	r2, [r4, #4]
10005266:	6922      	ldr	r2, [r4, #16]
10005268:	6022      	str	r2, [r4, #0]
1000526a:	04db      	lsls	r3, r3, #19
1000526c:	d505      	bpl.n	1000527a <__sflush_r+0xa6>
1000526e:	1c43      	adds	r3, r0, #1
10005270:	d102      	bne.n	10005278 <__sflush_r+0xa4>
10005272:	682b      	ldr	r3, [r5, #0]
10005274:	2b00      	cmp	r3, #0
10005276:	d100      	bne.n	1000527a <__sflush_r+0xa6>
10005278:	6560      	str	r0, [r4, #84]	; 0x54
1000527a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000527c:	602e      	str	r6, [r5, #0]
1000527e:	2900      	cmp	r1, #0
10005280:	d0cf      	beq.n	10005222 <__sflush_r+0x4e>
10005282:	1c23      	adds	r3, r4, #0
10005284:	3344      	adds	r3, #68	; 0x44
10005286:	4299      	cmp	r1, r3
10005288:	d002      	beq.n	10005290 <__sflush_r+0xbc>
1000528a:	1c28      	adds	r0, r5, #0
1000528c:	f000 f98c 	bl	100055a8 <_free_r>
10005290:	2000      	movs	r0, #0
10005292:	6360      	str	r0, [r4, #52]	; 0x34
10005294:	e026      	b.n	100052e4 <__sflush_r+0x110>
10005296:	2240      	movs	r2, #64	; 0x40
10005298:	4313      	orrs	r3, r2
1000529a:	81a3      	strh	r3, [r4, #12]
1000529c:	e022      	b.n	100052e4 <__sflush_r+0x110>
1000529e:	690f      	ldr	r7, [r1, #16]
100052a0:	2f00      	cmp	r7, #0
100052a2:	d0be      	beq.n	10005222 <__sflush_r+0x4e>
100052a4:	680b      	ldr	r3, [r1, #0]
100052a6:	600f      	str	r7, [r1, #0]
100052a8:	1bdb      	subs	r3, r3, r7
100052aa:	9301      	str	r3, [sp, #4]
100052ac:	2300      	movs	r3, #0
100052ae:	0792      	lsls	r2, r2, #30
100052b0:	d100      	bne.n	100052b4 <__sflush_r+0xe0>
100052b2:	694b      	ldr	r3, [r1, #20]
100052b4:	60a3      	str	r3, [r4, #8]
100052b6:	9b01      	ldr	r3, [sp, #4]
100052b8:	2b00      	cmp	r3, #0
100052ba:	ddb2      	ble.n	10005222 <__sflush_r+0x4e>
100052bc:	1c28      	adds	r0, r5, #0
100052be:	6a21      	ldr	r1, [r4, #32]
100052c0:	1c3a      	adds	r2, r7, #0
100052c2:	9b01      	ldr	r3, [sp, #4]
100052c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100052c6:	47b0      	blx	r6
100052c8:	2800      	cmp	r0, #0
100052ca:	dc06      	bgt.n	100052da <__sflush_r+0x106>
100052cc:	2240      	movs	r2, #64	; 0x40
100052ce:	2001      	movs	r0, #1
100052d0:	89a3      	ldrh	r3, [r4, #12]
100052d2:	4240      	negs	r0, r0
100052d4:	4313      	orrs	r3, r2
100052d6:	81a3      	strh	r3, [r4, #12]
100052d8:	e004      	b.n	100052e4 <__sflush_r+0x110>
100052da:	9b01      	ldr	r3, [sp, #4]
100052dc:	183f      	adds	r7, r7, r0
100052de:	1a1b      	subs	r3, r3, r0
100052e0:	9301      	str	r3, [sp, #4]
100052e2:	e7e8      	b.n	100052b6 <__sflush_r+0xe2>
100052e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

100052e8 <_fflush_r>:
100052e8:	b538      	push	{r3, r4, r5, lr}
100052ea:	690b      	ldr	r3, [r1, #16]
100052ec:	1c05      	adds	r5, r0, #0
100052ee:	1c0c      	adds	r4, r1, #0
100052f0:	2b00      	cmp	r3, #0
100052f2:	d101      	bne.n	100052f8 <_fflush_r+0x10>
100052f4:	2000      	movs	r0, #0
100052f6:	e01c      	b.n	10005332 <_fflush_r+0x4a>
100052f8:	2800      	cmp	r0, #0
100052fa:	d004      	beq.n	10005306 <_fflush_r+0x1e>
100052fc:	6983      	ldr	r3, [r0, #24]
100052fe:	2b00      	cmp	r3, #0
10005300:	d101      	bne.n	10005306 <_fflush_r+0x1e>
10005302:	f000 f85f 	bl	100053c4 <__sinit>
10005306:	4b0b      	ldr	r3, [pc, #44]	; (10005334 <_fflush_r+0x4c>)
10005308:	429c      	cmp	r4, r3
1000530a:	d101      	bne.n	10005310 <_fflush_r+0x28>
1000530c:	686c      	ldr	r4, [r5, #4]
1000530e:	e008      	b.n	10005322 <_fflush_r+0x3a>
10005310:	4b09      	ldr	r3, [pc, #36]	; (10005338 <_fflush_r+0x50>)
10005312:	429c      	cmp	r4, r3
10005314:	d101      	bne.n	1000531a <_fflush_r+0x32>
10005316:	68ac      	ldr	r4, [r5, #8]
10005318:	e003      	b.n	10005322 <_fflush_r+0x3a>
1000531a:	4b08      	ldr	r3, [pc, #32]	; (1000533c <_fflush_r+0x54>)
1000531c:	429c      	cmp	r4, r3
1000531e:	d100      	bne.n	10005322 <_fflush_r+0x3a>
10005320:	68ec      	ldr	r4, [r5, #12]
10005322:	220c      	movs	r2, #12
10005324:	5ea3      	ldrsh	r3, [r4, r2]
10005326:	2b00      	cmp	r3, #0
10005328:	d0e4      	beq.n	100052f4 <_fflush_r+0xc>
1000532a:	1c28      	adds	r0, r5, #0
1000532c:	1c21      	adds	r1, r4, #0
1000532e:	f7ff ff51 	bl	100051d4 <__sflush_r>
10005332:	bd38      	pop	{r3, r4, r5, pc}
10005334:	1000647c 	.word	0x1000647c
10005338:	1000649c 	.word	0x1000649c
1000533c:	100064bc 	.word	0x100064bc

10005340 <_cleanup_r>:
10005340:	b508      	push	{r3, lr}
10005342:	4902      	ldr	r1, [pc, #8]	; (1000534c <_cleanup_r+0xc>)
10005344:	f000 f8ae 	bl	100054a4 <_fwalk_reent>
10005348:	bd08      	pop	{r3, pc}
1000534a:	46c0      	nop			; (mov r8, r8)
1000534c:	100052e9 	.word	0x100052e9

10005350 <std.isra.0>:
10005350:	2300      	movs	r3, #0
10005352:	b510      	push	{r4, lr}
10005354:	1c04      	adds	r4, r0, #0
10005356:	6003      	str	r3, [r0, #0]
10005358:	6043      	str	r3, [r0, #4]
1000535a:	6083      	str	r3, [r0, #8]
1000535c:	8181      	strh	r1, [r0, #12]
1000535e:	6643      	str	r3, [r0, #100]	; 0x64
10005360:	81c2      	strh	r2, [r0, #14]
10005362:	6103      	str	r3, [r0, #16]
10005364:	6143      	str	r3, [r0, #20]
10005366:	6183      	str	r3, [r0, #24]
10005368:	1c19      	adds	r1, r3, #0
1000536a:	2208      	movs	r2, #8
1000536c:	305c      	adds	r0, #92	; 0x5c
1000536e:	f000 f913 	bl	10005598 <memset>
10005372:	4b05      	ldr	r3, [pc, #20]	; (10005388 <std.isra.0+0x38>)
10005374:	6224      	str	r4, [r4, #32]
10005376:	6263      	str	r3, [r4, #36]	; 0x24
10005378:	4b04      	ldr	r3, [pc, #16]	; (1000538c <std.isra.0+0x3c>)
1000537a:	62a3      	str	r3, [r4, #40]	; 0x28
1000537c:	4b04      	ldr	r3, [pc, #16]	; (10005390 <std.isra.0+0x40>)
1000537e:	62e3      	str	r3, [r4, #44]	; 0x2c
10005380:	4b04      	ldr	r3, [pc, #16]	; (10005394 <std.isra.0+0x44>)
10005382:	6323      	str	r3, [r4, #48]	; 0x30
10005384:	bd10      	pop	{r4, pc}
10005386:	46c0      	nop			; (mov r8, r8)
10005388:	10005c85 	.word	0x10005c85
1000538c:	10005cad 	.word	0x10005cad
10005390:	10005ce5 	.word	0x10005ce5
10005394:	10005d11 	.word	0x10005d11

10005398 <__sfmoreglue>:
10005398:	b570      	push	{r4, r5, r6, lr}
1000539a:	2568      	movs	r5, #104	; 0x68
1000539c:	1e4b      	subs	r3, r1, #1
1000539e:	435d      	muls	r5, r3
100053a0:	1c0e      	adds	r6, r1, #0
100053a2:	1c29      	adds	r1, r5, #0
100053a4:	3174      	adds	r1, #116	; 0x74
100053a6:	f000 f945 	bl	10005634 <_malloc_r>
100053aa:	1e04      	subs	r4, r0, #0
100053ac:	d008      	beq.n	100053c0 <__sfmoreglue+0x28>
100053ae:	2100      	movs	r1, #0
100053b0:	1c2a      	adds	r2, r5, #0
100053b2:	6001      	str	r1, [r0, #0]
100053b4:	6046      	str	r6, [r0, #4]
100053b6:	300c      	adds	r0, #12
100053b8:	60a0      	str	r0, [r4, #8]
100053ba:	3268      	adds	r2, #104	; 0x68
100053bc:	f000 f8ec 	bl	10005598 <memset>
100053c0:	1c20      	adds	r0, r4, #0
100053c2:	bd70      	pop	{r4, r5, r6, pc}

100053c4 <__sinit>:
100053c4:	6983      	ldr	r3, [r0, #24]
100053c6:	b513      	push	{r0, r1, r4, lr}
100053c8:	2b00      	cmp	r3, #0
100053ca:	d128      	bne.n	1000541e <__sinit+0x5a>
100053cc:	6483      	str	r3, [r0, #72]	; 0x48
100053ce:	64c3      	str	r3, [r0, #76]	; 0x4c
100053d0:	6503      	str	r3, [r0, #80]	; 0x50
100053d2:	4b13      	ldr	r3, [pc, #76]	; (10005420 <__sinit+0x5c>)
100053d4:	4a13      	ldr	r2, [pc, #76]	; (10005424 <__sinit+0x60>)
100053d6:	681b      	ldr	r3, [r3, #0]
100053d8:	6282      	str	r2, [r0, #40]	; 0x28
100053da:	9301      	str	r3, [sp, #4]
100053dc:	4298      	cmp	r0, r3
100053de:	d101      	bne.n	100053e4 <__sinit+0x20>
100053e0:	2301      	movs	r3, #1
100053e2:	6183      	str	r3, [r0, #24]
100053e4:	1c04      	adds	r4, r0, #0
100053e6:	f000 f81f 	bl	10005428 <__sfp>
100053ea:	6060      	str	r0, [r4, #4]
100053ec:	1c20      	adds	r0, r4, #0
100053ee:	f000 f81b 	bl	10005428 <__sfp>
100053f2:	60a0      	str	r0, [r4, #8]
100053f4:	1c20      	adds	r0, r4, #0
100053f6:	f000 f817 	bl	10005428 <__sfp>
100053fa:	2104      	movs	r1, #4
100053fc:	60e0      	str	r0, [r4, #12]
100053fe:	2200      	movs	r2, #0
10005400:	6860      	ldr	r0, [r4, #4]
10005402:	f7ff ffa5 	bl	10005350 <std.isra.0>
10005406:	68a0      	ldr	r0, [r4, #8]
10005408:	2109      	movs	r1, #9
1000540a:	2201      	movs	r2, #1
1000540c:	f7ff ffa0 	bl	10005350 <std.isra.0>
10005410:	68e0      	ldr	r0, [r4, #12]
10005412:	2112      	movs	r1, #18
10005414:	2202      	movs	r2, #2
10005416:	f7ff ff9b 	bl	10005350 <std.isra.0>
1000541a:	2301      	movs	r3, #1
1000541c:	61a3      	str	r3, [r4, #24]
1000541e:	bd13      	pop	{r0, r1, r4, pc}
10005420:	10006478 	.word	0x10006478
10005424:	10005341 	.word	0x10005341

10005428 <__sfp>:
10005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000542a:	4b1d      	ldr	r3, [pc, #116]	; (100054a0 <__sfp+0x78>)
1000542c:	1c06      	adds	r6, r0, #0
1000542e:	681d      	ldr	r5, [r3, #0]
10005430:	69ab      	ldr	r3, [r5, #24]
10005432:	2b00      	cmp	r3, #0
10005434:	d102      	bne.n	1000543c <__sfp+0x14>
10005436:	1c28      	adds	r0, r5, #0
10005438:	f7ff ffc4 	bl	100053c4 <__sinit>
1000543c:	3548      	adds	r5, #72	; 0x48
1000543e:	68ac      	ldr	r4, [r5, #8]
10005440:	686b      	ldr	r3, [r5, #4]
10005442:	3b01      	subs	r3, #1
10005444:	d405      	bmi.n	10005452 <__sfp+0x2a>
10005446:	220c      	movs	r2, #12
10005448:	5ea7      	ldrsh	r7, [r4, r2]
1000544a:	2f00      	cmp	r7, #0
1000544c:	d010      	beq.n	10005470 <__sfp+0x48>
1000544e:	3468      	adds	r4, #104	; 0x68
10005450:	e7f7      	b.n	10005442 <__sfp+0x1a>
10005452:	682b      	ldr	r3, [r5, #0]
10005454:	2b00      	cmp	r3, #0
10005456:	d106      	bne.n	10005466 <__sfp+0x3e>
10005458:	1c30      	adds	r0, r6, #0
1000545a:	2104      	movs	r1, #4
1000545c:	f7ff ff9c 	bl	10005398 <__sfmoreglue>
10005460:	6028      	str	r0, [r5, #0]
10005462:	2800      	cmp	r0, #0
10005464:	d001      	beq.n	1000546a <__sfp+0x42>
10005466:	682d      	ldr	r5, [r5, #0]
10005468:	e7e9      	b.n	1000543e <__sfp+0x16>
1000546a:	230c      	movs	r3, #12
1000546c:	6033      	str	r3, [r6, #0]
1000546e:	e016      	b.n	1000549e <__sfp+0x76>
10005470:	2301      	movs	r3, #1
10005472:	1c20      	adds	r0, r4, #0
10005474:	425b      	negs	r3, r3
10005476:	81e3      	strh	r3, [r4, #14]
10005478:	3302      	adds	r3, #2
1000547a:	81a3      	strh	r3, [r4, #12]
1000547c:	6667      	str	r7, [r4, #100]	; 0x64
1000547e:	6027      	str	r7, [r4, #0]
10005480:	60a7      	str	r7, [r4, #8]
10005482:	6067      	str	r7, [r4, #4]
10005484:	6127      	str	r7, [r4, #16]
10005486:	6167      	str	r7, [r4, #20]
10005488:	61a7      	str	r7, [r4, #24]
1000548a:	305c      	adds	r0, #92	; 0x5c
1000548c:	1c39      	adds	r1, r7, #0
1000548e:	2208      	movs	r2, #8
10005490:	f000 f882 	bl	10005598 <memset>
10005494:	1c20      	adds	r0, r4, #0
10005496:	6367      	str	r7, [r4, #52]	; 0x34
10005498:	63a7      	str	r7, [r4, #56]	; 0x38
1000549a:	64a7      	str	r7, [r4, #72]	; 0x48
1000549c:	64e7      	str	r7, [r4, #76]	; 0x4c
1000549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100054a0:	10006478 	.word	0x10006478

100054a4 <_fwalk_reent>:
100054a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100054a6:	1c04      	adds	r4, r0, #0
100054a8:	1c07      	adds	r7, r0, #0
100054aa:	2600      	movs	r6, #0
100054ac:	9101      	str	r1, [sp, #4]
100054ae:	3448      	adds	r4, #72	; 0x48
100054b0:	2c00      	cmp	r4, #0
100054b2:	d016      	beq.n	100054e2 <_fwalk_reent+0x3e>
100054b4:	6863      	ldr	r3, [r4, #4]
100054b6:	68a5      	ldr	r5, [r4, #8]
100054b8:	9300      	str	r3, [sp, #0]
100054ba:	9b00      	ldr	r3, [sp, #0]
100054bc:	3b01      	subs	r3, #1
100054be:	9300      	str	r3, [sp, #0]
100054c0:	d40d      	bmi.n	100054de <_fwalk_reent+0x3a>
100054c2:	89ab      	ldrh	r3, [r5, #12]
100054c4:	2b01      	cmp	r3, #1
100054c6:	d908      	bls.n	100054da <_fwalk_reent+0x36>
100054c8:	220e      	movs	r2, #14
100054ca:	5eab      	ldrsh	r3, [r5, r2]
100054cc:	3301      	adds	r3, #1
100054ce:	d004      	beq.n	100054da <_fwalk_reent+0x36>
100054d0:	1c38      	adds	r0, r7, #0
100054d2:	1c29      	adds	r1, r5, #0
100054d4:	9b01      	ldr	r3, [sp, #4]
100054d6:	4798      	blx	r3
100054d8:	4306      	orrs	r6, r0
100054da:	3568      	adds	r5, #104	; 0x68
100054dc:	e7ed      	b.n	100054ba <_fwalk_reent+0x16>
100054de:	6824      	ldr	r4, [r4, #0]
100054e0:	e7e6      	b.n	100054b0 <_fwalk_reent+0xc>
100054e2:	1c30      	adds	r0, r6, #0
100054e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

100054e8 <__smakebuf_r>:
100054e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100054ea:	898b      	ldrh	r3, [r1, #12]
100054ec:	b091      	sub	sp, #68	; 0x44
100054ee:	079b      	lsls	r3, r3, #30
100054f0:	d506      	bpl.n	10005500 <__smakebuf_r+0x18>
100054f2:	1c0b      	adds	r3, r1, #0
100054f4:	3347      	adds	r3, #71	; 0x47
100054f6:	600b      	str	r3, [r1, #0]
100054f8:	610b      	str	r3, [r1, #16]
100054fa:	2301      	movs	r3, #1
100054fc:	614b      	str	r3, [r1, #20]
100054fe:	e045      	b.n	1000558c <__smakebuf_r+0xa4>
10005500:	1c0c      	adds	r4, r1, #0
10005502:	230e      	movs	r3, #14
10005504:	5ec9      	ldrsh	r1, [r1, r3]
10005506:	1c06      	adds	r6, r0, #0
10005508:	2900      	cmp	r1, #0
1000550a:	da04      	bge.n	10005516 <__smakebuf_r+0x2e>
1000550c:	2380      	movs	r3, #128	; 0x80
1000550e:	89a5      	ldrh	r5, [r4, #12]
10005510:	401d      	ands	r5, r3
10005512:	d110      	bne.n	10005536 <__smakebuf_r+0x4e>
10005514:	e00c      	b.n	10005530 <__smakebuf_r+0x48>
10005516:	aa01      	add	r2, sp, #4
10005518:	f000 fc26 	bl	10005d68 <_fstat_r>
1000551c:	2800      	cmp	r0, #0
1000551e:	dbf5      	blt.n	1000550c <__smakebuf_r+0x24>
10005520:	23f0      	movs	r3, #240	; 0xf0
10005522:	9d02      	ldr	r5, [sp, #8]
10005524:	021b      	lsls	r3, r3, #8
10005526:	401d      	ands	r5, r3
10005528:	4b19      	ldr	r3, [pc, #100]	; (10005590 <__smakebuf_r+0xa8>)
1000552a:	18ed      	adds	r5, r5, r3
1000552c:	426b      	negs	r3, r5
1000552e:	415d      	adcs	r5, r3
10005530:	2780      	movs	r7, #128	; 0x80
10005532:	00ff      	lsls	r7, r7, #3
10005534:	e001      	b.n	1000553a <__smakebuf_r+0x52>
10005536:	2500      	movs	r5, #0
10005538:	2740      	movs	r7, #64	; 0x40
1000553a:	1c30      	adds	r0, r6, #0
1000553c:	1c39      	adds	r1, r7, #0
1000553e:	f000 f879 	bl	10005634 <_malloc_r>
10005542:	2800      	cmp	r0, #0
10005544:	d10c      	bne.n	10005560 <__smakebuf_r+0x78>
10005546:	89a3      	ldrh	r3, [r4, #12]
10005548:	059a      	lsls	r2, r3, #22
1000554a:	d41f      	bmi.n	1000558c <__smakebuf_r+0xa4>
1000554c:	2202      	movs	r2, #2
1000554e:	4313      	orrs	r3, r2
10005550:	81a3      	strh	r3, [r4, #12]
10005552:	1c23      	adds	r3, r4, #0
10005554:	3347      	adds	r3, #71	; 0x47
10005556:	6023      	str	r3, [r4, #0]
10005558:	6123      	str	r3, [r4, #16]
1000555a:	2301      	movs	r3, #1
1000555c:	6163      	str	r3, [r4, #20]
1000555e:	e015      	b.n	1000558c <__smakebuf_r+0xa4>
10005560:	2280      	movs	r2, #128	; 0x80
10005562:	4b0c      	ldr	r3, [pc, #48]	; (10005594 <__smakebuf_r+0xac>)
10005564:	62b3      	str	r3, [r6, #40]	; 0x28
10005566:	89a3      	ldrh	r3, [r4, #12]
10005568:	6020      	str	r0, [r4, #0]
1000556a:	4313      	orrs	r3, r2
1000556c:	81a3      	strh	r3, [r4, #12]
1000556e:	6120      	str	r0, [r4, #16]
10005570:	6167      	str	r7, [r4, #20]
10005572:	2d00      	cmp	r5, #0
10005574:	d00a      	beq.n	1000558c <__smakebuf_r+0xa4>
10005576:	230e      	movs	r3, #14
10005578:	5ee1      	ldrsh	r1, [r4, r3]
1000557a:	1c30      	adds	r0, r6, #0
1000557c:	f000 fc06 	bl	10005d8c <_isatty_r>
10005580:	2800      	cmp	r0, #0
10005582:	d003      	beq.n	1000558c <__smakebuf_r+0xa4>
10005584:	2201      	movs	r2, #1
10005586:	89a3      	ldrh	r3, [r4, #12]
10005588:	4313      	orrs	r3, r2
1000558a:	81a3      	strh	r3, [r4, #12]
1000558c:	b011      	add	sp, #68	; 0x44
1000558e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005590:	ffffe000 	.word	0xffffe000
10005594:	10005341 	.word	0x10005341

10005598 <memset>:
10005598:	1c03      	adds	r3, r0, #0
1000559a:	1882      	adds	r2, r0, r2
1000559c:	4293      	cmp	r3, r2
1000559e:	d002      	beq.n	100055a6 <memset+0xe>
100055a0:	7019      	strb	r1, [r3, #0]
100055a2:	3301      	adds	r3, #1
100055a4:	e7fa      	b.n	1000559c <memset+0x4>
100055a6:	4770      	bx	lr

100055a8 <_free_r>:
100055a8:	b530      	push	{r4, r5, lr}
100055aa:	2900      	cmp	r1, #0
100055ac:	d03e      	beq.n	1000562c <_free_r+0x84>
100055ae:	3904      	subs	r1, #4
100055b0:	680b      	ldr	r3, [r1, #0]
100055b2:	2b00      	cmp	r3, #0
100055b4:	da00      	bge.n	100055b8 <_free_r+0x10>
100055b6:	18c9      	adds	r1, r1, r3
100055b8:	4a1d      	ldr	r2, [pc, #116]	; (10005630 <_free_r+0x88>)
100055ba:	6813      	ldr	r3, [r2, #0]
100055bc:	1c14      	adds	r4, r2, #0
100055be:	2b00      	cmp	r3, #0
100055c0:	d102      	bne.n	100055c8 <_free_r+0x20>
100055c2:	604b      	str	r3, [r1, #4]
100055c4:	6011      	str	r1, [r2, #0]
100055c6:	e031      	b.n	1000562c <_free_r+0x84>
100055c8:	4299      	cmp	r1, r3
100055ca:	d20d      	bcs.n	100055e8 <_free_r+0x40>
100055cc:	6808      	ldr	r0, [r1, #0]
100055ce:	180a      	adds	r2, r1, r0
100055d0:	429a      	cmp	r2, r3
100055d2:	d103      	bne.n	100055dc <_free_r+0x34>
100055d4:	6813      	ldr	r3, [r2, #0]
100055d6:	18c3      	adds	r3, r0, r3
100055d8:	600b      	str	r3, [r1, #0]
100055da:	6853      	ldr	r3, [r2, #4]
100055dc:	604b      	str	r3, [r1, #4]
100055de:	6021      	str	r1, [r4, #0]
100055e0:	e024      	b.n	1000562c <_free_r+0x84>
100055e2:	428a      	cmp	r2, r1
100055e4:	d803      	bhi.n	100055ee <_free_r+0x46>
100055e6:	1c13      	adds	r3, r2, #0
100055e8:	685a      	ldr	r2, [r3, #4]
100055ea:	2a00      	cmp	r2, #0
100055ec:	d1f9      	bne.n	100055e2 <_free_r+0x3a>
100055ee:	681d      	ldr	r5, [r3, #0]
100055f0:	195c      	adds	r4, r3, r5
100055f2:	428c      	cmp	r4, r1
100055f4:	d10b      	bne.n	1000560e <_free_r+0x66>
100055f6:	6809      	ldr	r1, [r1, #0]
100055f8:	1869      	adds	r1, r5, r1
100055fa:	1858      	adds	r0, r3, r1
100055fc:	6019      	str	r1, [r3, #0]
100055fe:	4290      	cmp	r0, r2
10005600:	d114      	bne.n	1000562c <_free_r+0x84>
10005602:	6810      	ldr	r0, [r2, #0]
10005604:	6852      	ldr	r2, [r2, #4]
10005606:	1809      	adds	r1, r1, r0
10005608:	6019      	str	r1, [r3, #0]
1000560a:	605a      	str	r2, [r3, #4]
1000560c:	e00e      	b.n	1000562c <_free_r+0x84>
1000560e:	428c      	cmp	r4, r1
10005610:	d902      	bls.n	10005618 <_free_r+0x70>
10005612:	230c      	movs	r3, #12
10005614:	6003      	str	r3, [r0, #0]
10005616:	e009      	b.n	1000562c <_free_r+0x84>
10005618:	6808      	ldr	r0, [r1, #0]
1000561a:	180c      	adds	r4, r1, r0
1000561c:	4294      	cmp	r4, r2
1000561e:	d103      	bne.n	10005628 <_free_r+0x80>
10005620:	6814      	ldr	r4, [r2, #0]
10005622:	6852      	ldr	r2, [r2, #4]
10005624:	1900      	adds	r0, r0, r4
10005626:	6008      	str	r0, [r1, #0]
10005628:	604a      	str	r2, [r1, #4]
1000562a:	6059      	str	r1, [r3, #4]
1000562c:	bd30      	pop	{r4, r5, pc}
1000562e:	46c0      	nop			; (mov r8, r8)
10005630:	200006b8 	.word	0x200006b8

10005634 <_malloc_r>:
10005634:	2303      	movs	r3, #3
10005636:	b570      	push	{r4, r5, r6, lr}
10005638:	1ccc      	adds	r4, r1, #3
1000563a:	439c      	bics	r4, r3
1000563c:	3408      	adds	r4, #8
1000563e:	1c05      	adds	r5, r0, #0
10005640:	2c0c      	cmp	r4, #12
10005642:	d201      	bcs.n	10005648 <_malloc_r+0x14>
10005644:	240c      	movs	r4, #12
10005646:	e005      	b.n	10005654 <_malloc_r+0x20>
10005648:	2c00      	cmp	r4, #0
1000564a:	da03      	bge.n	10005654 <_malloc_r+0x20>
1000564c:	230c      	movs	r3, #12
1000564e:	2000      	movs	r0, #0
10005650:	602b      	str	r3, [r5, #0]
10005652:	e042      	b.n	100056da <_malloc_r+0xa6>
10005654:	428c      	cmp	r4, r1
10005656:	d3f9      	bcc.n	1000564c <_malloc_r+0x18>
10005658:	4a20      	ldr	r2, [pc, #128]	; (100056dc <_malloc_r+0xa8>)
1000565a:	6813      	ldr	r3, [r2, #0]
1000565c:	1c10      	adds	r0, r2, #0
1000565e:	1c19      	adds	r1, r3, #0
10005660:	2900      	cmp	r1, #0
10005662:	d013      	beq.n	1000568c <_malloc_r+0x58>
10005664:	680a      	ldr	r2, [r1, #0]
10005666:	1b12      	subs	r2, r2, r4
10005668:	d40d      	bmi.n	10005686 <_malloc_r+0x52>
1000566a:	2a0b      	cmp	r2, #11
1000566c:	d902      	bls.n	10005674 <_malloc_r+0x40>
1000566e:	600a      	str	r2, [r1, #0]
10005670:	188b      	adds	r3, r1, r2
10005672:	e01f      	b.n	100056b4 <_malloc_r+0x80>
10005674:	428b      	cmp	r3, r1
10005676:	d102      	bne.n	1000567e <_malloc_r+0x4a>
10005678:	685a      	ldr	r2, [r3, #4]
1000567a:	6002      	str	r2, [r0, #0]
1000567c:	e01b      	b.n	100056b6 <_malloc_r+0x82>
1000567e:	684a      	ldr	r2, [r1, #4]
10005680:	605a      	str	r2, [r3, #4]
10005682:	1c0b      	adds	r3, r1, #0
10005684:	e017      	b.n	100056b6 <_malloc_r+0x82>
10005686:	1c0b      	adds	r3, r1, #0
10005688:	6849      	ldr	r1, [r1, #4]
1000568a:	e7e9      	b.n	10005660 <_malloc_r+0x2c>
1000568c:	4e14      	ldr	r6, [pc, #80]	; (100056e0 <_malloc_r+0xac>)
1000568e:	6833      	ldr	r3, [r6, #0]
10005690:	2b00      	cmp	r3, #0
10005692:	d103      	bne.n	1000569c <_malloc_r+0x68>
10005694:	1c28      	adds	r0, r5, #0
10005696:	f000 fae3 	bl	10005c60 <_sbrk_r>
1000569a:	6030      	str	r0, [r6, #0]
1000569c:	1c28      	adds	r0, r5, #0
1000569e:	1c21      	adds	r1, r4, #0
100056a0:	f000 fade 	bl	10005c60 <_sbrk_r>
100056a4:	1c03      	adds	r3, r0, #0
100056a6:	1c42      	adds	r2, r0, #1
100056a8:	d0d0      	beq.n	1000564c <_malloc_r+0x18>
100056aa:	2203      	movs	r2, #3
100056ac:	1cc6      	adds	r6, r0, #3
100056ae:	4396      	bics	r6, r2
100056b0:	4286      	cmp	r6, r0
100056b2:	d10a      	bne.n	100056ca <_malloc_r+0x96>
100056b4:	601c      	str	r4, [r3, #0]
100056b6:	1c18      	adds	r0, r3, #0
100056b8:	2107      	movs	r1, #7
100056ba:	300b      	adds	r0, #11
100056bc:	1d1a      	adds	r2, r3, #4
100056be:	4388      	bics	r0, r1
100056c0:	1a82      	subs	r2, r0, r2
100056c2:	d00a      	beq.n	100056da <_malloc_r+0xa6>
100056c4:	4251      	negs	r1, r2
100056c6:	5099      	str	r1, [r3, r2]
100056c8:	e007      	b.n	100056da <_malloc_r+0xa6>
100056ca:	1a31      	subs	r1, r6, r0
100056cc:	1c28      	adds	r0, r5, #0
100056ce:	f000 fac7 	bl	10005c60 <_sbrk_r>
100056d2:	1c43      	adds	r3, r0, #1
100056d4:	d0ba      	beq.n	1000564c <_malloc_r+0x18>
100056d6:	1c33      	adds	r3, r6, #0
100056d8:	e7ec      	b.n	100056b4 <_malloc_r+0x80>
100056da:	bd70      	pop	{r4, r5, r6, pc}
100056dc:	200006b8 	.word	0x200006b8
100056e0:	200006b4 	.word	0x200006b4

100056e4 <__sfputc_r>:
100056e4:	6893      	ldr	r3, [r2, #8]
100056e6:	b510      	push	{r4, lr}
100056e8:	3b01      	subs	r3, #1
100056ea:	6093      	str	r3, [r2, #8]
100056ec:	2b00      	cmp	r3, #0
100056ee:	da05      	bge.n	100056fc <__sfputc_r+0x18>
100056f0:	6994      	ldr	r4, [r2, #24]
100056f2:	42a3      	cmp	r3, r4
100056f4:	db08      	blt.n	10005708 <__sfputc_r+0x24>
100056f6:	b2cb      	uxtb	r3, r1
100056f8:	2b0a      	cmp	r3, #10
100056fa:	d005      	beq.n	10005708 <__sfputc_r+0x24>
100056fc:	6813      	ldr	r3, [r2, #0]
100056fe:	1c58      	adds	r0, r3, #1
10005700:	6010      	str	r0, [r2, #0]
10005702:	7019      	strb	r1, [r3, #0]
10005704:	b2c8      	uxtb	r0, r1
10005706:	e001      	b.n	1000570c <__sfputc_r+0x28>
10005708:	f7ff fc98 	bl	1000503c <__swbuf_r>
1000570c:	bd10      	pop	{r4, pc}

1000570e <__sfputs_r>:
1000570e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005710:	1c06      	adds	r6, r0, #0
10005712:	1c0f      	adds	r7, r1, #0
10005714:	1c14      	adds	r4, r2, #0
10005716:	18d5      	adds	r5, r2, r3
10005718:	42ac      	cmp	r4, r5
1000571a:	d008      	beq.n	1000572e <__sfputs_r+0x20>
1000571c:	7821      	ldrb	r1, [r4, #0]
1000571e:	1c30      	adds	r0, r6, #0
10005720:	1c3a      	adds	r2, r7, #0
10005722:	f7ff ffdf 	bl	100056e4 <__sfputc_r>
10005726:	3401      	adds	r4, #1
10005728:	1c43      	adds	r3, r0, #1
1000572a:	d1f5      	bne.n	10005718 <__sfputs_r+0xa>
1000572c:	e000      	b.n	10005730 <__sfputs_r+0x22>
1000572e:	2000      	movs	r0, #0
10005730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10005734 <_vfiprintf_r>:
10005734:	b5f0      	push	{r4, r5, r6, r7, lr}
10005736:	b09f      	sub	sp, #124	; 0x7c
10005738:	1c06      	adds	r6, r0, #0
1000573a:	1c0f      	adds	r7, r1, #0
1000573c:	9202      	str	r2, [sp, #8]
1000573e:	9305      	str	r3, [sp, #20]
10005740:	2800      	cmp	r0, #0
10005742:	d004      	beq.n	1000574e <_vfiprintf_r+0x1a>
10005744:	6983      	ldr	r3, [r0, #24]
10005746:	2b00      	cmp	r3, #0
10005748:	d101      	bne.n	1000574e <_vfiprintf_r+0x1a>
1000574a:	f7ff fe3b 	bl	100053c4 <__sinit>
1000574e:	4b79      	ldr	r3, [pc, #484]	; (10005934 <_vfiprintf_r+0x200>)
10005750:	429f      	cmp	r7, r3
10005752:	d101      	bne.n	10005758 <_vfiprintf_r+0x24>
10005754:	6877      	ldr	r7, [r6, #4]
10005756:	e008      	b.n	1000576a <_vfiprintf_r+0x36>
10005758:	4b77      	ldr	r3, [pc, #476]	; (10005938 <_vfiprintf_r+0x204>)
1000575a:	429f      	cmp	r7, r3
1000575c:	d101      	bne.n	10005762 <_vfiprintf_r+0x2e>
1000575e:	68b7      	ldr	r7, [r6, #8]
10005760:	e003      	b.n	1000576a <_vfiprintf_r+0x36>
10005762:	4b76      	ldr	r3, [pc, #472]	; (1000593c <_vfiprintf_r+0x208>)
10005764:	429f      	cmp	r7, r3
10005766:	d100      	bne.n	1000576a <_vfiprintf_r+0x36>
10005768:	68f7      	ldr	r7, [r6, #12]
1000576a:	89bb      	ldrh	r3, [r7, #12]
1000576c:	071b      	lsls	r3, r3, #28
1000576e:	d50a      	bpl.n	10005786 <_vfiprintf_r+0x52>
10005770:	693b      	ldr	r3, [r7, #16]
10005772:	2b00      	cmp	r3, #0
10005774:	d007      	beq.n	10005786 <_vfiprintf_r+0x52>
10005776:	2300      	movs	r3, #0
10005778:	ad06      	add	r5, sp, #24
1000577a:	616b      	str	r3, [r5, #20]
1000577c:	3320      	adds	r3, #32
1000577e:	766b      	strb	r3, [r5, #25]
10005780:	3310      	adds	r3, #16
10005782:	76ab      	strb	r3, [r5, #26]
10005784:	e03d      	b.n	10005802 <_vfiprintf_r+0xce>
10005786:	1c30      	adds	r0, r6, #0
10005788:	1c39      	adds	r1, r7, #0
1000578a:	f7ff fcaf 	bl	100050ec <__swsetup_r>
1000578e:	2800      	cmp	r0, #0
10005790:	d0f1      	beq.n	10005776 <_vfiprintf_r+0x42>
10005792:	2001      	movs	r0, #1
10005794:	4240      	negs	r0, r0
10005796:	e0ca      	b.n	1000592e <_vfiprintf_r+0x1fa>
10005798:	9a05      	ldr	r2, [sp, #20]
1000579a:	1d11      	adds	r1, r2, #4
1000579c:	6812      	ldr	r2, [r2, #0]
1000579e:	9105      	str	r1, [sp, #20]
100057a0:	2a00      	cmp	r2, #0
100057a2:	db7e      	blt.n	100058a2 <_vfiprintf_r+0x16e>
100057a4:	9209      	str	r2, [sp, #36]	; 0x24
100057a6:	3401      	adds	r4, #1
100057a8:	7823      	ldrb	r3, [r4, #0]
100057aa:	2b2e      	cmp	r3, #46	; 0x2e
100057ac:	d100      	bne.n	100057b0 <_vfiprintf_r+0x7c>
100057ae:	e089      	b.n	100058c4 <_vfiprintf_r+0x190>
100057b0:	7821      	ldrb	r1, [r4, #0]
100057b2:	4863      	ldr	r0, [pc, #396]	; (10005940 <_vfiprintf_r+0x20c>)
100057b4:	2203      	movs	r2, #3
100057b6:	f000 fb0f 	bl	10005dd8 <memchr>
100057ba:	2800      	cmp	r0, #0
100057bc:	d008      	beq.n	100057d0 <_vfiprintf_r+0x9c>
100057be:	4b60      	ldr	r3, [pc, #384]	; (10005940 <_vfiprintf_r+0x20c>)
100057c0:	3401      	adds	r4, #1
100057c2:	1ac0      	subs	r0, r0, r3
100057c4:	2340      	movs	r3, #64	; 0x40
100057c6:	4083      	lsls	r3, r0
100057c8:	1c18      	adds	r0, r3, #0
100057ca:	682b      	ldr	r3, [r5, #0]
100057cc:	4318      	orrs	r0, r3
100057ce:	6028      	str	r0, [r5, #0]
100057d0:	7821      	ldrb	r1, [r4, #0]
100057d2:	1c63      	adds	r3, r4, #1
100057d4:	485b      	ldr	r0, [pc, #364]	; (10005944 <_vfiprintf_r+0x210>)
100057d6:	2206      	movs	r2, #6
100057d8:	9302      	str	r3, [sp, #8]
100057da:	7629      	strb	r1, [r5, #24]
100057dc:	f000 fafc 	bl	10005dd8 <memchr>
100057e0:	2800      	cmp	r0, #0
100057e2:	d100      	bne.n	100057e6 <_vfiprintf_r+0xb2>
100057e4:	e091      	b.n	1000590a <_vfiprintf_r+0x1d6>
100057e6:	4b58      	ldr	r3, [pc, #352]	; (10005948 <_vfiprintf_r+0x214>)
100057e8:	2b00      	cmp	r3, #0
100057ea:	d000      	beq.n	100057ee <_vfiprintf_r+0xba>
100057ec:	e084      	b.n	100058f8 <_vfiprintf_r+0x1c4>
100057ee:	2207      	movs	r2, #7
100057f0:	9b05      	ldr	r3, [sp, #20]
100057f2:	3307      	adds	r3, #7
100057f4:	4393      	bics	r3, r2
100057f6:	3308      	adds	r3, #8
100057f8:	9305      	str	r3, [sp, #20]
100057fa:	696b      	ldr	r3, [r5, #20]
100057fc:	9a03      	ldr	r2, [sp, #12]
100057fe:	189b      	adds	r3, r3, r2
10005800:	616b      	str	r3, [r5, #20]
10005802:	9c02      	ldr	r4, [sp, #8]
10005804:	7823      	ldrb	r3, [r4, #0]
10005806:	2b00      	cmp	r3, #0
10005808:	d104      	bne.n	10005814 <_vfiprintf_r+0xe0>
1000580a:	9b02      	ldr	r3, [sp, #8]
1000580c:	1ae3      	subs	r3, r4, r3
1000580e:	9304      	str	r3, [sp, #16]
10005810:	d011      	beq.n	10005836 <_vfiprintf_r+0x102>
10005812:	e003      	b.n	1000581c <_vfiprintf_r+0xe8>
10005814:	2b25      	cmp	r3, #37	; 0x25
10005816:	d0f8      	beq.n	1000580a <_vfiprintf_r+0xd6>
10005818:	3401      	adds	r4, #1
1000581a:	e7f3      	b.n	10005804 <_vfiprintf_r+0xd0>
1000581c:	9b04      	ldr	r3, [sp, #16]
1000581e:	1c30      	adds	r0, r6, #0
10005820:	1c39      	adds	r1, r7, #0
10005822:	9a02      	ldr	r2, [sp, #8]
10005824:	f7ff ff73 	bl	1000570e <__sfputs_r>
10005828:	1c43      	adds	r3, r0, #1
1000582a:	d07b      	beq.n	10005924 <_vfiprintf_r+0x1f0>
1000582c:	696a      	ldr	r2, [r5, #20]
1000582e:	9b04      	ldr	r3, [sp, #16]
10005830:	4694      	mov	ip, r2
10005832:	4463      	add	r3, ip
10005834:	616b      	str	r3, [r5, #20]
10005836:	7823      	ldrb	r3, [r4, #0]
10005838:	2b00      	cmp	r3, #0
1000583a:	d073      	beq.n	10005924 <_vfiprintf_r+0x1f0>
1000583c:	2201      	movs	r2, #1
1000583e:	2300      	movs	r3, #0
10005840:	4252      	negs	r2, r2
10005842:	606a      	str	r2, [r5, #4]
10005844:	a902      	add	r1, sp, #8
10005846:	3254      	adds	r2, #84	; 0x54
10005848:	1852      	adds	r2, r2, r1
1000584a:	3401      	adds	r4, #1
1000584c:	602b      	str	r3, [r5, #0]
1000584e:	60eb      	str	r3, [r5, #12]
10005850:	60ab      	str	r3, [r5, #8]
10005852:	7013      	strb	r3, [r2, #0]
10005854:	65ab      	str	r3, [r5, #88]	; 0x58
10005856:	7821      	ldrb	r1, [r4, #0]
10005858:	483c      	ldr	r0, [pc, #240]	; (1000594c <_vfiprintf_r+0x218>)
1000585a:	2205      	movs	r2, #5
1000585c:	f000 fabc 	bl	10005dd8 <memchr>
10005860:	2800      	cmp	r0, #0
10005862:	d009      	beq.n	10005878 <_vfiprintf_r+0x144>
10005864:	4b39      	ldr	r3, [pc, #228]	; (1000594c <_vfiprintf_r+0x218>)
10005866:	3401      	adds	r4, #1
10005868:	1ac0      	subs	r0, r0, r3
1000586a:	2301      	movs	r3, #1
1000586c:	4083      	lsls	r3, r0
1000586e:	1c18      	adds	r0, r3, #0
10005870:	682b      	ldr	r3, [r5, #0]
10005872:	4318      	orrs	r0, r3
10005874:	6028      	str	r0, [r5, #0]
10005876:	e7ee      	b.n	10005856 <_vfiprintf_r+0x122>
10005878:	682b      	ldr	r3, [r5, #0]
1000587a:	06da      	lsls	r2, r3, #27
1000587c:	d504      	bpl.n	10005888 <_vfiprintf_r+0x154>
1000587e:	2253      	movs	r2, #83	; 0x53
10005880:	2120      	movs	r1, #32
10005882:	a802      	add	r0, sp, #8
10005884:	1812      	adds	r2, r2, r0
10005886:	7011      	strb	r1, [r2, #0]
10005888:	071a      	lsls	r2, r3, #28
1000588a:	d504      	bpl.n	10005896 <_vfiprintf_r+0x162>
1000588c:	2253      	movs	r2, #83	; 0x53
1000588e:	212b      	movs	r1, #43	; 0x2b
10005890:	a802      	add	r0, sp, #8
10005892:	1812      	adds	r2, r2, r0
10005894:	7011      	strb	r1, [r2, #0]
10005896:	7822      	ldrb	r2, [r4, #0]
10005898:	2a2a      	cmp	r2, #42	; 0x2a
1000589a:	d100      	bne.n	1000589e <_vfiprintf_r+0x16a>
1000589c:	e77c      	b.n	10005798 <_vfiprintf_r+0x64>
1000589e:	9b09      	ldr	r3, [sp, #36]	; 0x24
100058a0:	e005      	b.n	100058ae <_vfiprintf_r+0x17a>
100058a2:	4252      	negs	r2, r2
100058a4:	60ea      	str	r2, [r5, #12]
100058a6:	2202      	movs	r2, #2
100058a8:	4313      	orrs	r3, r2
100058aa:	602b      	str	r3, [r5, #0]
100058ac:	e77b      	b.n	100057a6 <_vfiprintf_r+0x72>
100058ae:	7822      	ldrb	r2, [r4, #0]
100058b0:	3a30      	subs	r2, #48	; 0x30
100058b2:	2a09      	cmp	r2, #9
100058b4:	d804      	bhi.n	100058c0 <_vfiprintf_r+0x18c>
100058b6:	210a      	movs	r1, #10
100058b8:	434b      	muls	r3, r1
100058ba:	3401      	adds	r4, #1
100058bc:	189b      	adds	r3, r3, r2
100058be:	e7f6      	b.n	100058ae <_vfiprintf_r+0x17a>
100058c0:	9309      	str	r3, [sp, #36]	; 0x24
100058c2:	e771      	b.n	100057a8 <_vfiprintf_r+0x74>
100058c4:	7863      	ldrb	r3, [r4, #1]
100058c6:	2b2a      	cmp	r3, #42	; 0x2a
100058c8:	d109      	bne.n	100058de <_vfiprintf_r+0x1aa>
100058ca:	9b05      	ldr	r3, [sp, #20]
100058cc:	3402      	adds	r4, #2
100058ce:	1d1a      	adds	r2, r3, #4
100058d0:	681b      	ldr	r3, [r3, #0]
100058d2:	9205      	str	r2, [sp, #20]
100058d4:	2b00      	cmp	r3, #0
100058d6:	da0d      	bge.n	100058f4 <_vfiprintf_r+0x1c0>
100058d8:	2301      	movs	r3, #1
100058da:	425b      	negs	r3, r3
100058dc:	e00a      	b.n	100058f4 <_vfiprintf_r+0x1c0>
100058de:	2300      	movs	r3, #0
100058e0:	3401      	adds	r4, #1
100058e2:	7822      	ldrb	r2, [r4, #0]
100058e4:	3a30      	subs	r2, #48	; 0x30
100058e6:	2a09      	cmp	r2, #9
100058e8:	d804      	bhi.n	100058f4 <_vfiprintf_r+0x1c0>
100058ea:	210a      	movs	r1, #10
100058ec:	434b      	muls	r3, r1
100058ee:	3401      	adds	r4, #1
100058f0:	189b      	adds	r3, r3, r2
100058f2:	e7f6      	b.n	100058e2 <_vfiprintf_r+0x1ae>
100058f4:	9307      	str	r3, [sp, #28]
100058f6:	e75b      	b.n	100057b0 <_vfiprintf_r+0x7c>
100058f8:	ab05      	add	r3, sp, #20
100058fa:	9300      	str	r3, [sp, #0]
100058fc:	1c30      	adds	r0, r6, #0
100058fe:	1c29      	adds	r1, r5, #0
10005900:	1c3a      	adds	r2, r7, #0
10005902:	4b13      	ldr	r3, [pc, #76]	; (10005950 <_vfiprintf_r+0x21c>)
10005904:	e000      	b.n	10005908 <_vfiprintf_r+0x1d4>
10005906:	bf00      	nop
10005908:	e007      	b.n	1000591a <_vfiprintf_r+0x1e6>
1000590a:	ab05      	add	r3, sp, #20
1000590c:	9300      	str	r3, [sp, #0]
1000590e:	1c30      	adds	r0, r6, #0
10005910:	1c29      	adds	r1, r5, #0
10005912:	1c3a      	adds	r2, r7, #0
10005914:	4b0e      	ldr	r3, [pc, #56]	; (10005950 <_vfiprintf_r+0x21c>)
10005916:	f000 f88b 	bl	10005a30 <_printf_i>
1000591a:	9003      	str	r0, [sp, #12]
1000591c:	9b03      	ldr	r3, [sp, #12]
1000591e:	3301      	adds	r3, #1
10005920:	d000      	beq.n	10005924 <_vfiprintf_r+0x1f0>
10005922:	e76a      	b.n	100057fa <_vfiprintf_r+0xc6>
10005924:	89bb      	ldrh	r3, [r7, #12]
10005926:	065b      	lsls	r3, r3, #25
10005928:	d500      	bpl.n	1000592c <_vfiprintf_r+0x1f8>
1000592a:	e732      	b.n	10005792 <_vfiprintf_r+0x5e>
1000592c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000592e:	b01f      	add	sp, #124	; 0x7c
10005930:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005932:	46c0      	nop			; (mov r8, r8)
10005934:	1000647c 	.word	0x1000647c
10005938:	1000649c 	.word	0x1000649c
1000593c:	100064bc 	.word	0x100064bc
10005940:	100064e2 	.word	0x100064e2
10005944:	100064e6 	.word	0x100064e6
10005948:	00000000 	.word	0x00000000
1000594c:	100064dc 	.word	0x100064dc
10005950:	1000570f 	.word	0x1000570f

10005954 <_printf_common>:
10005954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005956:	1c17      	adds	r7, r2, #0
10005958:	9301      	str	r3, [sp, #4]
1000595a:	690a      	ldr	r2, [r1, #16]
1000595c:	688b      	ldr	r3, [r1, #8]
1000595e:	9000      	str	r0, [sp, #0]
10005960:	1c0c      	adds	r4, r1, #0
10005962:	4293      	cmp	r3, r2
10005964:	da00      	bge.n	10005968 <_printf_common+0x14>
10005966:	1c13      	adds	r3, r2, #0
10005968:	1c22      	adds	r2, r4, #0
1000596a:	603b      	str	r3, [r7, #0]
1000596c:	3243      	adds	r2, #67	; 0x43
1000596e:	7812      	ldrb	r2, [r2, #0]
10005970:	2a00      	cmp	r2, #0
10005972:	d001      	beq.n	10005978 <_printf_common+0x24>
10005974:	3301      	adds	r3, #1
10005976:	603b      	str	r3, [r7, #0]
10005978:	6823      	ldr	r3, [r4, #0]
1000597a:	069b      	lsls	r3, r3, #26
1000597c:	d502      	bpl.n	10005984 <_printf_common+0x30>
1000597e:	683b      	ldr	r3, [r7, #0]
10005980:	3302      	adds	r3, #2
10005982:	603b      	str	r3, [r7, #0]
10005984:	2506      	movs	r5, #6
10005986:	6823      	ldr	r3, [r4, #0]
10005988:	401d      	ands	r5, r3
1000598a:	d01e      	beq.n	100059ca <_printf_common+0x76>
1000598c:	1c23      	adds	r3, r4, #0
1000598e:	3343      	adds	r3, #67	; 0x43
10005990:	781b      	ldrb	r3, [r3, #0]
10005992:	1e5a      	subs	r2, r3, #1
10005994:	4193      	sbcs	r3, r2
10005996:	6822      	ldr	r2, [r4, #0]
10005998:	0692      	lsls	r2, r2, #26
1000599a:	d51c      	bpl.n	100059d6 <_printf_common+0x82>
1000599c:	2030      	movs	r0, #48	; 0x30
1000599e:	18e1      	adds	r1, r4, r3
100059a0:	3140      	adds	r1, #64	; 0x40
100059a2:	70c8      	strb	r0, [r1, #3]
100059a4:	1c21      	adds	r1, r4, #0
100059a6:	1c5a      	adds	r2, r3, #1
100059a8:	3145      	adds	r1, #69	; 0x45
100059aa:	7809      	ldrb	r1, [r1, #0]
100059ac:	18a2      	adds	r2, r4, r2
100059ae:	3240      	adds	r2, #64	; 0x40
100059b0:	3302      	adds	r3, #2
100059b2:	70d1      	strb	r1, [r2, #3]
100059b4:	e00f      	b.n	100059d6 <_printf_common+0x82>
100059b6:	1c22      	adds	r2, r4, #0
100059b8:	2301      	movs	r3, #1
100059ba:	9800      	ldr	r0, [sp, #0]
100059bc:	9901      	ldr	r1, [sp, #4]
100059be:	3219      	adds	r2, #25
100059c0:	9e08      	ldr	r6, [sp, #32]
100059c2:	47b0      	blx	r6
100059c4:	1c43      	adds	r3, r0, #1
100059c6:	d00e      	beq.n	100059e6 <_printf_common+0x92>
100059c8:	3501      	adds	r5, #1
100059ca:	68e3      	ldr	r3, [r4, #12]
100059cc:	683a      	ldr	r2, [r7, #0]
100059ce:	1a9b      	subs	r3, r3, r2
100059d0:	429d      	cmp	r5, r3
100059d2:	dbf0      	blt.n	100059b6 <_printf_common+0x62>
100059d4:	e7da      	b.n	1000598c <_printf_common+0x38>
100059d6:	1c22      	adds	r2, r4, #0
100059d8:	9800      	ldr	r0, [sp, #0]
100059da:	9901      	ldr	r1, [sp, #4]
100059dc:	3243      	adds	r2, #67	; 0x43
100059de:	9d08      	ldr	r5, [sp, #32]
100059e0:	47a8      	blx	r5
100059e2:	1c43      	adds	r3, r0, #1
100059e4:	d102      	bne.n	100059ec <_printf_common+0x98>
100059e6:	2001      	movs	r0, #1
100059e8:	4240      	negs	r0, r0
100059ea:	e020      	b.n	10005a2e <_printf_common+0xda>
100059ec:	2306      	movs	r3, #6
100059ee:	6820      	ldr	r0, [r4, #0]
100059f0:	68e1      	ldr	r1, [r4, #12]
100059f2:	683a      	ldr	r2, [r7, #0]
100059f4:	4003      	ands	r3, r0
100059f6:	2500      	movs	r5, #0
100059f8:	2b04      	cmp	r3, #4
100059fa:	d103      	bne.n	10005a04 <_printf_common+0xb0>
100059fc:	1a8d      	subs	r5, r1, r2
100059fe:	43eb      	mvns	r3, r5
10005a00:	17db      	asrs	r3, r3, #31
10005a02:	401d      	ands	r5, r3
10005a04:	68a3      	ldr	r3, [r4, #8]
10005a06:	6922      	ldr	r2, [r4, #16]
10005a08:	4293      	cmp	r3, r2
10005a0a:	dd01      	ble.n	10005a10 <_printf_common+0xbc>
10005a0c:	1a9b      	subs	r3, r3, r2
10005a0e:	18ed      	adds	r5, r5, r3
10005a10:	2700      	movs	r7, #0
10005a12:	42af      	cmp	r7, r5
10005a14:	da0a      	bge.n	10005a2c <_printf_common+0xd8>
10005a16:	1c22      	adds	r2, r4, #0
10005a18:	2301      	movs	r3, #1
10005a1a:	9800      	ldr	r0, [sp, #0]
10005a1c:	9901      	ldr	r1, [sp, #4]
10005a1e:	321a      	adds	r2, #26
10005a20:	9e08      	ldr	r6, [sp, #32]
10005a22:	47b0      	blx	r6
10005a24:	1c43      	adds	r3, r0, #1
10005a26:	d0de      	beq.n	100059e6 <_printf_common+0x92>
10005a28:	3701      	adds	r7, #1
10005a2a:	e7f2      	b.n	10005a12 <_printf_common+0xbe>
10005a2c:	2000      	movs	r0, #0
10005a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10005a30 <_printf_i>:
10005a30:	b5f0      	push	{r4, r5, r6, r7, lr}
10005a32:	b08b      	sub	sp, #44	; 0x2c
10005a34:	9206      	str	r2, [sp, #24]
10005a36:	1c0a      	adds	r2, r1, #0
10005a38:	3243      	adds	r2, #67	; 0x43
10005a3a:	9307      	str	r3, [sp, #28]
10005a3c:	9005      	str	r0, [sp, #20]
10005a3e:	9204      	str	r2, [sp, #16]
10005a40:	7e0a      	ldrb	r2, [r1, #24]
10005a42:	1c0c      	adds	r4, r1, #0
10005a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
10005a46:	2a6e      	cmp	r2, #110	; 0x6e
10005a48:	d100      	bne.n	10005a4c <_printf_i+0x1c>
10005a4a:	e0a8      	b.n	10005b9e <_printf_i+0x16e>
10005a4c:	d811      	bhi.n	10005a72 <_printf_i+0x42>
10005a4e:	2a63      	cmp	r2, #99	; 0x63
10005a50:	d022      	beq.n	10005a98 <_printf_i+0x68>
10005a52:	d809      	bhi.n	10005a68 <_printf_i+0x38>
10005a54:	2a00      	cmp	r2, #0
10005a56:	d100      	bne.n	10005a5a <_printf_i+0x2a>
10005a58:	e0b2      	b.n	10005bc0 <_printf_i+0x190>
10005a5a:	2a58      	cmp	r2, #88	; 0x58
10005a5c:	d000      	beq.n	10005a60 <_printf_i+0x30>
10005a5e:	e0c2      	b.n	10005be6 <_printf_i+0x1b6>
10005a60:	3145      	adds	r1, #69	; 0x45
10005a62:	700a      	strb	r2, [r1, #0]
10005a64:	4a7c      	ldr	r2, [pc, #496]	; (10005c58 <_printf_i+0x228>)
10005a66:	e04f      	b.n	10005b08 <_printf_i+0xd8>
10005a68:	2a64      	cmp	r2, #100	; 0x64
10005a6a:	d01d      	beq.n	10005aa8 <_printf_i+0x78>
10005a6c:	2a69      	cmp	r2, #105	; 0x69
10005a6e:	d01b      	beq.n	10005aa8 <_printf_i+0x78>
10005a70:	e0b9      	b.n	10005be6 <_printf_i+0x1b6>
10005a72:	2a73      	cmp	r2, #115	; 0x73
10005a74:	d100      	bne.n	10005a78 <_printf_i+0x48>
10005a76:	e0a7      	b.n	10005bc8 <_printf_i+0x198>
10005a78:	d809      	bhi.n	10005a8e <_printf_i+0x5e>
10005a7a:	2a6f      	cmp	r2, #111	; 0x6f
10005a7c:	d029      	beq.n	10005ad2 <_printf_i+0xa2>
10005a7e:	2a70      	cmp	r2, #112	; 0x70
10005a80:	d000      	beq.n	10005a84 <_printf_i+0x54>
10005a82:	e0b0      	b.n	10005be6 <_printf_i+0x1b6>
10005a84:	2220      	movs	r2, #32
10005a86:	6809      	ldr	r1, [r1, #0]
10005a88:	430a      	orrs	r2, r1
10005a8a:	6022      	str	r2, [r4, #0]
10005a8c:	e037      	b.n	10005afe <_printf_i+0xce>
10005a8e:	2a75      	cmp	r2, #117	; 0x75
10005a90:	d01f      	beq.n	10005ad2 <_printf_i+0xa2>
10005a92:	2a78      	cmp	r2, #120	; 0x78
10005a94:	d033      	beq.n	10005afe <_printf_i+0xce>
10005a96:	e0a6      	b.n	10005be6 <_printf_i+0x1b6>
10005a98:	1c0d      	adds	r5, r1, #0
10005a9a:	681a      	ldr	r2, [r3, #0]
10005a9c:	3542      	adds	r5, #66	; 0x42
10005a9e:	1d11      	adds	r1, r2, #4
10005aa0:	6019      	str	r1, [r3, #0]
10005aa2:	6813      	ldr	r3, [r2, #0]
10005aa4:	702b      	strb	r3, [r5, #0]
10005aa6:	e0a1      	b.n	10005bec <_printf_i+0x1bc>
10005aa8:	6821      	ldr	r1, [r4, #0]
10005aaa:	681a      	ldr	r2, [r3, #0]
10005aac:	0608      	lsls	r0, r1, #24
10005aae:	d503      	bpl.n	10005ab8 <_printf_i+0x88>
10005ab0:	1d11      	adds	r1, r2, #4
10005ab2:	6019      	str	r1, [r3, #0]
10005ab4:	6816      	ldr	r6, [r2, #0]
10005ab6:	e005      	b.n	10005ac4 <_printf_i+0x94>
10005ab8:	0649      	lsls	r1, r1, #25
10005aba:	d5f9      	bpl.n	10005ab0 <_printf_i+0x80>
10005abc:	1d11      	adds	r1, r2, #4
10005abe:	6019      	str	r1, [r3, #0]
10005ac0:	2300      	movs	r3, #0
10005ac2:	5ed6      	ldrsh	r6, [r2, r3]
10005ac4:	2e00      	cmp	r6, #0
10005ac6:	da3b      	bge.n	10005b40 <_printf_i+0x110>
10005ac8:	232d      	movs	r3, #45	; 0x2d
10005aca:	9a04      	ldr	r2, [sp, #16]
10005acc:	4276      	negs	r6, r6
10005ace:	7013      	strb	r3, [r2, #0]
10005ad0:	e036      	b.n	10005b40 <_printf_i+0x110>
10005ad2:	6821      	ldr	r1, [r4, #0]
10005ad4:	681a      	ldr	r2, [r3, #0]
10005ad6:	0608      	lsls	r0, r1, #24
10005ad8:	d503      	bpl.n	10005ae2 <_printf_i+0xb2>
10005ada:	1d11      	adds	r1, r2, #4
10005adc:	6019      	str	r1, [r3, #0]
10005ade:	6816      	ldr	r6, [r2, #0]
10005ae0:	e005      	b.n	10005aee <_printf_i+0xbe>
10005ae2:	0649      	lsls	r1, r1, #25
10005ae4:	d5f9      	bpl.n	10005ada <_printf_i+0xaa>
10005ae6:	1d11      	adds	r1, r2, #4
10005ae8:	6019      	str	r1, [r3, #0]
10005aea:	6816      	ldr	r6, [r2, #0]
10005aec:	b2b6      	uxth	r6, r6
10005aee:	4b5a      	ldr	r3, [pc, #360]	; (10005c58 <_printf_i+0x228>)
10005af0:	7e22      	ldrb	r2, [r4, #24]
10005af2:	9303      	str	r3, [sp, #12]
10005af4:	270a      	movs	r7, #10
10005af6:	2a6f      	cmp	r2, #111	; 0x6f
10005af8:	d11d      	bne.n	10005b36 <_printf_i+0x106>
10005afa:	2708      	movs	r7, #8
10005afc:	e01b      	b.n	10005b36 <_printf_i+0x106>
10005afe:	1c22      	adds	r2, r4, #0
10005b00:	2178      	movs	r1, #120	; 0x78
10005b02:	3245      	adds	r2, #69	; 0x45
10005b04:	7011      	strb	r1, [r2, #0]
10005b06:	4a55      	ldr	r2, [pc, #340]	; (10005c5c <_printf_i+0x22c>)
10005b08:	6819      	ldr	r1, [r3, #0]
10005b0a:	9203      	str	r2, [sp, #12]
10005b0c:	1d08      	adds	r0, r1, #4
10005b0e:	6822      	ldr	r2, [r4, #0]
10005b10:	6018      	str	r0, [r3, #0]
10005b12:	680e      	ldr	r6, [r1, #0]
10005b14:	0610      	lsls	r0, r2, #24
10005b16:	d402      	bmi.n	10005b1e <_printf_i+0xee>
10005b18:	0650      	lsls	r0, r2, #25
10005b1a:	d500      	bpl.n	10005b1e <_printf_i+0xee>
10005b1c:	b2b6      	uxth	r6, r6
10005b1e:	07d3      	lsls	r3, r2, #31
10005b20:	d502      	bpl.n	10005b28 <_printf_i+0xf8>
10005b22:	2320      	movs	r3, #32
10005b24:	431a      	orrs	r2, r3
10005b26:	6022      	str	r2, [r4, #0]
10005b28:	2710      	movs	r7, #16
10005b2a:	2e00      	cmp	r6, #0
10005b2c:	d103      	bne.n	10005b36 <_printf_i+0x106>
10005b2e:	2320      	movs	r3, #32
10005b30:	6822      	ldr	r2, [r4, #0]
10005b32:	439a      	bics	r2, r3
10005b34:	6022      	str	r2, [r4, #0]
10005b36:	1c23      	adds	r3, r4, #0
10005b38:	2200      	movs	r2, #0
10005b3a:	3343      	adds	r3, #67	; 0x43
10005b3c:	701a      	strb	r2, [r3, #0]
10005b3e:	e002      	b.n	10005b46 <_printf_i+0x116>
10005b40:	270a      	movs	r7, #10
10005b42:	4b45      	ldr	r3, [pc, #276]	; (10005c58 <_printf_i+0x228>)
10005b44:	9303      	str	r3, [sp, #12]
10005b46:	6863      	ldr	r3, [r4, #4]
10005b48:	60a3      	str	r3, [r4, #8]
10005b4a:	2b00      	cmp	r3, #0
10005b4c:	db03      	blt.n	10005b56 <_printf_i+0x126>
10005b4e:	2204      	movs	r2, #4
10005b50:	6821      	ldr	r1, [r4, #0]
10005b52:	4391      	bics	r1, r2
10005b54:	6021      	str	r1, [r4, #0]
10005b56:	2e00      	cmp	r6, #0
10005b58:	d102      	bne.n	10005b60 <_printf_i+0x130>
10005b5a:	9d04      	ldr	r5, [sp, #16]
10005b5c:	2b00      	cmp	r3, #0
10005b5e:	d00e      	beq.n	10005b7e <_printf_i+0x14e>
10005b60:	9d04      	ldr	r5, [sp, #16]
10005b62:	1c30      	adds	r0, r6, #0
10005b64:	1c39      	adds	r1, r7, #0
10005b66:	f7fc f8f9 	bl	10001d5c <__aeabi_uidivmod>
10005b6a:	9b03      	ldr	r3, [sp, #12]
10005b6c:	3d01      	subs	r5, #1
10005b6e:	5c5b      	ldrb	r3, [r3, r1]
10005b70:	1c30      	adds	r0, r6, #0
10005b72:	702b      	strb	r3, [r5, #0]
10005b74:	1c39      	adds	r1, r7, #0
10005b76:	f7fc f8a1 	bl	10001cbc <__aeabi_uidiv>
10005b7a:	1e06      	subs	r6, r0, #0
10005b7c:	d1f1      	bne.n	10005b62 <_printf_i+0x132>
10005b7e:	2f08      	cmp	r7, #8
10005b80:	d109      	bne.n	10005b96 <_printf_i+0x166>
10005b82:	6823      	ldr	r3, [r4, #0]
10005b84:	07db      	lsls	r3, r3, #31
10005b86:	d506      	bpl.n	10005b96 <_printf_i+0x166>
10005b88:	6863      	ldr	r3, [r4, #4]
10005b8a:	6922      	ldr	r2, [r4, #16]
10005b8c:	4293      	cmp	r3, r2
10005b8e:	dc02      	bgt.n	10005b96 <_printf_i+0x166>
10005b90:	2330      	movs	r3, #48	; 0x30
10005b92:	3d01      	subs	r5, #1
10005b94:	702b      	strb	r3, [r5, #0]
10005b96:	9b04      	ldr	r3, [sp, #16]
10005b98:	1b5b      	subs	r3, r3, r5
10005b9a:	6123      	str	r3, [r4, #16]
10005b9c:	e02b      	b.n	10005bf6 <_printf_i+0x1c6>
10005b9e:	6809      	ldr	r1, [r1, #0]
10005ba0:	681a      	ldr	r2, [r3, #0]
10005ba2:	0608      	lsls	r0, r1, #24
10005ba4:	d407      	bmi.n	10005bb6 <_printf_i+0x186>
10005ba6:	0649      	lsls	r1, r1, #25
10005ba8:	d505      	bpl.n	10005bb6 <_printf_i+0x186>
10005baa:	1d11      	adds	r1, r2, #4
10005bac:	6019      	str	r1, [r3, #0]
10005bae:	6813      	ldr	r3, [r2, #0]
10005bb0:	8aa2      	ldrh	r2, [r4, #20]
10005bb2:	801a      	strh	r2, [r3, #0]
10005bb4:	e004      	b.n	10005bc0 <_printf_i+0x190>
10005bb6:	1d11      	adds	r1, r2, #4
10005bb8:	6019      	str	r1, [r3, #0]
10005bba:	6813      	ldr	r3, [r2, #0]
10005bbc:	6962      	ldr	r2, [r4, #20]
10005bbe:	601a      	str	r2, [r3, #0]
10005bc0:	2300      	movs	r3, #0
10005bc2:	9d04      	ldr	r5, [sp, #16]
10005bc4:	6123      	str	r3, [r4, #16]
10005bc6:	e016      	b.n	10005bf6 <_printf_i+0x1c6>
10005bc8:	681a      	ldr	r2, [r3, #0]
10005bca:	1d11      	adds	r1, r2, #4
10005bcc:	6019      	str	r1, [r3, #0]
10005bce:	6815      	ldr	r5, [r2, #0]
10005bd0:	2100      	movs	r1, #0
10005bd2:	1c28      	adds	r0, r5, #0
10005bd4:	6862      	ldr	r2, [r4, #4]
10005bd6:	f000 f8ff 	bl	10005dd8 <memchr>
10005bda:	2800      	cmp	r0, #0
10005bdc:	d001      	beq.n	10005be2 <_printf_i+0x1b2>
10005bde:	1b40      	subs	r0, r0, r5
10005be0:	6060      	str	r0, [r4, #4]
10005be2:	6863      	ldr	r3, [r4, #4]
10005be4:	e003      	b.n	10005bee <_printf_i+0x1be>
10005be6:	1c25      	adds	r5, r4, #0
10005be8:	3542      	adds	r5, #66	; 0x42
10005bea:	702a      	strb	r2, [r5, #0]
10005bec:	2301      	movs	r3, #1
10005bee:	6123      	str	r3, [r4, #16]
10005bf0:	2300      	movs	r3, #0
10005bf2:	9a04      	ldr	r2, [sp, #16]
10005bf4:	7013      	strb	r3, [r2, #0]
10005bf6:	9b07      	ldr	r3, [sp, #28]
10005bf8:	9805      	ldr	r0, [sp, #20]
10005bfa:	9300      	str	r3, [sp, #0]
10005bfc:	1c21      	adds	r1, r4, #0
10005bfe:	9b06      	ldr	r3, [sp, #24]
10005c00:	aa09      	add	r2, sp, #36	; 0x24
10005c02:	f7ff fea7 	bl	10005954 <_printf_common>
10005c06:	1c43      	adds	r3, r0, #1
10005c08:	d102      	bne.n	10005c10 <_printf_i+0x1e0>
10005c0a:	2001      	movs	r0, #1
10005c0c:	4240      	negs	r0, r0
10005c0e:	e021      	b.n	10005c54 <_printf_i+0x224>
10005c10:	1c2a      	adds	r2, r5, #0
10005c12:	6923      	ldr	r3, [r4, #16]
10005c14:	9805      	ldr	r0, [sp, #20]
10005c16:	9906      	ldr	r1, [sp, #24]
10005c18:	9d07      	ldr	r5, [sp, #28]
10005c1a:	47a8      	blx	r5
10005c1c:	1c43      	adds	r3, r0, #1
10005c1e:	d0f4      	beq.n	10005c0a <_printf_i+0x1da>
10005c20:	6823      	ldr	r3, [r4, #0]
10005c22:	079b      	lsls	r3, r3, #30
10005c24:	d405      	bmi.n	10005c32 <_printf_i+0x202>
10005c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
10005c28:	68e0      	ldr	r0, [r4, #12]
10005c2a:	4298      	cmp	r0, r3
10005c2c:	da12      	bge.n	10005c54 <_printf_i+0x224>
10005c2e:	1c18      	adds	r0, r3, #0
10005c30:	e010      	b.n	10005c54 <_printf_i+0x224>
10005c32:	2500      	movs	r5, #0
10005c34:	68e3      	ldr	r3, [r4, #12]
10005c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
10005c38:	1a9b      	subs	r3, r3, r2
10005c3a:	429d      	cmp	r5, r3
10005c3c:	daf3      	bge.n	10005c26 <_printf_i+0x1f6>
10005c3e:	1c22      	adds	r2, r4, #0
10005c40:	2301      	movs	r3, #1
10005c42:	9805      	ldr	r0, [sp, #20]
10005c44:	9906      	ldr	r1, [sp, #24]
10005c46:	3219      	adds	r2, #25
10005c48:	9e07      	ldr	r6, [sp, #28]
10005c4a:	47b0      	blx	r6
10005c4c:	1c43      	adds	r3, r0, #1
10005c4e:	d0dc      	beq.n	10005c0a <_printf_i+0x1da>
10005c50:	3501      	adds	r5, #1
10005c52:	e7ef      	b.n	10005c34 <_printf_i+0x204>
10005c54:	b00b      	add	sp, #44	; 0x2c
10005c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005c58:	100064ed 	.word	0x100064ed
10005c5c:	100064fe 	.word	0x100064fe

10005c60 <_sbrk_r>:
10005c60:	b538      	push	{r3, r4, r5, lr}
10005c62:	2300      	movs	r3, #0
10005c64:	4c06      	ldr	r4, [pc, #24]	; (10005c80 <_sbrk_r+0x20>)
10005c66:	1c05      	adds	r5, r0, #0
10005c68:	1c08      	adds	r0, r1, #0
10005c6a:	6023      	str	r3, [r4, #0]
10005c6c:	f7fc fbb8 	bl	100023e0 <_sbrk>
10005c70:	1c43      	adds	r3, r0, #1
10005c72:	d103      	bne.n	10005c7c <_sbrk_r+0x1c>
10005c74:	6823      	ldr	r3, [r4, #0]
10005c76:	2b00      	cmp	r3, #0
10005c78:	d000      	beq.n	10005c7c <_sbrk_r+0x1c>
10005c7a:	602b      	str	r3, [r5, #0]
10005c7c:	bd38      	pop	{r3, r4, r5, pc}
10005c7e:	46c0      	nop			; (mov r8, r8)
10005c80:	200007ac 	.word	0x200007ac

10005c84 <__sread>:
10005c84:	b538      	push	{r3, r4, r5, lr}
10005c86:	1c0c      	adds	r4, r1, #0
10005c88:	250e      	movs	r5, #14
10005c8a:	5f49      	ldrsh	r1, [r1, r5]
10005c8c:	f000 f8b0 	bl	10005df0 <_read_r>
10005c90:	2800      	cmp	r0, #0
10005c92:	db03      	blt.n	10005c9c <__sread+0x18>
10005c94:	6d63      	ldr	r3, [r4, #84]	; 0x54
10005c96:	181b      	adds	r3, r3, r0
10005c98:	6563      	str	r3, [r4, #84]	; 0x54
10005c9a:	e003      	b.n	10005ca4 <__sread+0x20>
10005c9c:	89a2      	ldrh	r2, [r4, #12]
10005c9e:	4b02      	ldr	r3, [pc, #8]	; (10005ca8 <__sread+0x24>)
10005ca0:	4013      	ands	r3, r2
10005ca2:	81a3      	strh	r3, [r4, #12]
10005ca4:	bd38      	pop	{r3, r4, r5, pc}
10005ca6:	46c0      	nop			; (mov r8, r8)
10005ca8:	ffffefff 	.word	0xffffefff

10005cac <__swrite>:
10005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005cae:	1c1e      	adds	r6, r3, #0
10005cb0:	898b      	ldrh	r3, [r1, #12]
10005cb2:	1c05      	adds	r5, r0, #0
10005cb4:	1c0c      	adds	r4, r1, #0
10005cb6:	1c17      	adds	r7, r2, #0
10005cb8:	05db      	lsls	r3, r3, #23
10005cba:	d505      	bpl.n	10005cc8 <__swrite+0x1c>
10005cbc:	230e      	movs	r3, #14
10005cbe:	5ec9      	ldrsh	r1, [r1, r3]
10005cc0:	2200      	movs	r2, #0
10005cc2:	2302      	movs	r3, #2
10005cc4:	f000 f874 	bl	10005db0 <_lseek_r>
10005cc8:	89a2      	ldrh	r2, [r4, #12]
10005cca:	4b05      	ldr	r3, [pc, #20]	; (10005ce0 <__swrite+0x34>)
10005ccc:	1c28      	adds	r0, r5, #0
10005cce:	4013      	ands	r3, r2
10005cd0:	81a3      	strh	r3, [r4, #12]
10005cd2:	1c3a      	adds	r2, r7, #0
10005cd4:	230e      	movs	r3, #14
10005cd6:	5ee1      	ldrsh	r1, [r4, r3]
10005cd8:	1c33      	adds	r3, r6, #0
10005cda:	f000 f81f 	bl	10005d1c <_write_r>
10005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005ce0:	ffffefff 	.word	0xffffefff

10005ce4 <__sseek>:
10005ce4:	b538      	push	{r3, r4, r5, lr}
10005ce6:	1c0c      	adds	r4, r1, #0
10005ce8:	250e      	movs	r5, #14
10005cea:	5f49      	ldrsh	r1, [r1, r5]
10005cec:	f000 f860 	bl	10005db0 <_lseek_r>
10005cf0:	89a3      	ldrh	r3, [r4, #12]
10005cf2:	1c42      	adds	r2, r0, #1
10005cf4:	d103      	bne.n	10005cfe <__sseek+0x1a>
10005cf6:	4a05      	ldr	r2, [pc, #20]	; (10005d0c <__sseek+0x28>)
10005cf8:	4013      	ands	r3, r2
10005cfa:	81a3      	strh	r3, [r4, #12]
10005cfc:	e004      	b.n	10005d08 <__sseek+0x24>
10005cfe:	2280      	movs	r2, #128	; 0x80
10005d00:	0152      	lsls	r2, r2, #5
10005d02:	4313      	orrs	r3, r2
10005d04:	81a3      	strh	r3, [r4, #12]
10005d06:	6560      	str	r0, [r4, #84]	; 0x54
10005d08:	bd38      	pop	{r3, r4, r5, pc}
10005d0a:	46c0      	nop			; (mov r8, r8)
10005d0c:	ffffefff 	.word	0xffffefff

10005d10 <__sclose>:
10005d10:	b508      	push	{r3, lr}
10005d12:	230e      	movs	r3, #14
10005d14:	5ec9      	ldrsh	r1, [r1, r3]
10005d16:	f000 f815 	bl	10005d44 <_close_r>
10005d1a:	bd08      	pop	{r3, pc}

10005d1c <_write_r>:
10005d1c:	b538      	push	{r3, r4, r5, lr}
10005d1e:	1c05      	adds	r5, r0, #0
10005d20:	2000      	movs	r0, #0
10005d22:	4c07      	ldr	r4, [pc, #28]	; (10005d40 <_write_r+0x24>)
10005d24:	6020      	str	r0, [r4, #0]
10005d26:	1c08      	adds	r0, r1, #0
10005d28:	1c11      	adds	r1, r2, #0
10005d2a:	1c1a      	adds	r2, r3, #0
10005d2c:	f000 f968 	bl	10006000 <_write>
10005d30:	1c43      	adds	r3, r0, #1
10005d32:	d103      	bne.n	10005d3c <_write_r+0x20>
10005d34:	6823      	ldr	r3, [r4, #0]
10005d36:	2b00      	cmp	r3, #0
10005d38:	d000      	beq.n	10005d3c <_write_r+0x20>
10005d3a:	602b      	str	r3, [r5, #0]
10005d3c:	bd38      	pop	{r3, r4, r5, pc}
10005d3e:	46c0      	nop			; (mov r8, r8)
10005d40:	200007ac 	.word	0x200007ac

10005d44 <_close_r>:
10005d44:	b538      	push	{r3, r4, r5, lr}
10005d46:	2300      	movs	r3, #0
10005d48:	4c06      	ldr	r4, [pc, #24]	; (10005d64 <_close_r+0x20>)
10005d4a:	1c05      	adds	r5, r0, #0
10005d4c:	1c08      	adds	r0, r1, #0
10005d4e:	6023      	str	r3, [r4, #0]
10005d50:	f000 f982 	bl	10006058 <_close>
10005d54:	1c43      	adds	r3, r0, #1
10005d56:	d103      	bne.n	10005d60 <_close_r+0x1c>
10005d58:	6823      	ldr	r3, [r4, #0]
10005d5a:	2b00      	cmp	r3, #0
10005d5c:	d000      	beq.n	10005d60 <_close_r+0x1c>
10005d5e:	602b      	str	r3, [r5, #0]
10005d60:	bd38      	pop	{r3, r4, r5, pc}
10005d62:	46c0      	nop			; (mov r8, r8)
10005d64:	200007ac 	.word	0x200007ac

10005d68 <_fstat_r>:
10005d68:	b538      	push	{r3, r4, r5, lr}
10005d6a:	2300      	movs	r3, #0
10005d6c:	4c06      	ldr	r4, [pc, #24]	; (10005d88 <_fstat_r+0x20>)
10005d6e:	1c05      	adds	r5, r0, #0
10005d70:	1c08      	adds	r0, r1, #0
10005d72:	1c11      	adds	r1, r2, #0
10005d74:	6023      	str	r3, [r4, #0]
10005d76:	f000 f9b8 	bl	100060ea <_fstat>
10005d7a:	1c43      	adds	r3, r0, #1
10005d7c:	d103      	bne.n	10005d86 <_fstat_r+0x1e>
10005d7e:	6823      	ldr	r3, [r4, #0]
10005d80:	2b00      	cmp	r3, #0
10005d82:	d000      	beq.n	10005d86 <_fstat_r+0x1e>
10005d84:	602b      	str	r3, [r5, #0]
10005d86:	bd38      	pop	{r3, r4, r5, pc}
10005d88:	200007ac 	.word	0x200007ac

10005d8c <_isatty_r>:
10005d8c:	b538      	push	{r3, r4, r5, lr}
10005d8e:	2300      	movs	r3, #0
10005d90:	4c06      	ldr	r4, [pc, #24]	; (10005dac <_isatty_r+0x20>)
10005d92:	1c05      	adds	r5, r0, #0
10005d94:	1c08      	adds	r0, r1, #0
10005d96:	6023      	str	r3, [r4, #0]
10005d98:	f000 f9b4 	bl	10006104 <_isatty>
10005d9c:	1c43      	adds	r3, r0, #1
10005d9e:	d103      	bne.n	10005da8 <_isatty_r+0x1c>
10005da0:	6823      	ldr	r3, [r4, #0]
10005da2:	2b00      	cmp	r3, #0
10005da4:	d000      	beq.n	10005da8 <_isatty_r+0x1c>
10005da6:	602b      	str	r3, [r5, #0]
10005da8:	bd38      	pop	{r3, r4, r5, pc}
10005daa:	46c0      	nop			; (mov r8, r8)
10005dac:	200007ac 	.word	0x200007ac

10005db0 <_lseek_r>:
10005db0:	b538      	push	{r3, r4, r5, lr}
10005db2:	1c05      	adds	r5, r0, #0
10005db4:	2000      	movs	r0, #0
10005db6:	4c07      	ldr	r4, [pc, #28]	; (10005dd4 <_lseek_r+0x24>)
10005db8:	6020      	str	r0, [r4, #0]
10005dba:	1c08      	adds	r0, r1, #0
10005dbc:	1c11      	adds	r1, r2, #0
10005dbe:	1c1a      	adds	r2, r3, #0
10005dc0:	f000 f90a 	bl	10005fd8 <_lseek>
10005dc4:	1c43      	adds	r3, r0, #1
10005dc6:	d103      	bne.n	10005dd0 <_lseek_r+0x20>
10005dc8:	6823      	ldr	r3, [r4, #0]
10005dca:	2b00      	cmp	r3, #0
10005dcc:	d000      	beq.n	10005dd0 <_lseek_r+0x20>
10005dce:	602b      	str	r3, [r5, #0]
10005dd0:	bd38      	pop	{r3, r4, r5, pc}
10005dd2:	46c0      	nop			; (mov r8, r8)
10005dd4:	200007ac 	.word	0x200007ac

10005dd8 <memchr>:
10005dd8:	b2c9      	uxtb	r1, r1
10005dda:	1882      	adds	r2, r0, r2
10005ddc:	4290      	cmp	r0, r2
10005dde:	d004      	beq.n	10005dea <memchr+0x12>
10005de0:	7803      	ldrb	r3, [r0, #0]
10005de2:	428b      	cmp	r3, r1
10005de4:	d002      	beq.n	10005dec <memchr+0x14>
10005de6:	3001      	adds	r0, #1
10005de8:	e7f8      	b.n	10005ddc <memchr+0x4>
10005dea:	2000      	movs	r0, #0
10005dec:	4770      	bx	lr
	...

10005df0 <_read_r>:
10005df0:	b538      	push	{r3, r4, r5, lr}
10005df2:	1c05      	adds	r5, r0, #0
10005df4:	2000      	movs	r0, #0
10005df6:	4c07      	ldr	r4, [pc, #28]	; (10005e14 <_read_r+0x24>)
10005df8:	6020      	str	r0, [r4, #0]
10005dfa:	1c08      	adds	r0, r1, #0
10005dfc:	1c11      	adds	r1, r2, #0
10005dfe:	1c1a      	adds	r2, r3, #0
10005e00:	f000 f894 	bl	10005f2c <_read>
10005e04:	1c43      	adds	r3, r0, #1
10005e06:	d103      	bne.n	10005e10 <_read_r+0x20>
10005e08:	6823      	ldr	r3, [r4, #0]
10005e0a:	2b00      	cmp	r3, #0
10005e0c:	d000      	beq.n	10005e10 <_read_r+0x20>
10005e0e:	602b      	str	r3, [r5, #0]
10005e10:	bd38      	pop	{r3, r4, r5, pc}
10005e12:	46c0      	nop			; (mov r8, r8)
10005e14:	200007ac 	.word	0x200007ac

10005e18 <findslot>:
10005e18:	4b0a      	ldr	r3, [pc, #40]	; (10005e44 <findslot+0x2c>)
10005e1a:	b510      	push	{r4, lr}
10005e1c:	1c04      	adds	r4, r0, #0
10005e1e:	6818      	ldr	r0, [r3, #0]
10005e20:	2800      	cmp	r0, #0
10005e22:	d004      	beq.n	10005e2e <findslot+0x16>
10005e24:	6983      	ldr	r3, [r0, #24]
10005e26:	2b00      	cmp	r3, #0
10005e28:	d101      	bne.n	10005e2e <findslot+0x16>
10005e2a:	f7ff facb 	bl	100053c4 <__sinit>
10005e2e:	2000      	movs	r0, #0
10005e30:	2c13      	cmp	r4, #19
10005e32:	d805      	bhi.n	10005e40 <findslot+0x28>
10005e34:	4b04      	ldr	r3, [pc, #16]	; (10005e48 <findslot+0x30>)
10005e36:	00e4      	lsls	r4, r4, #3
10005e38:	58e2      	ldr	r2, [r4, r3]
10005e3a:	3201      	adds	r2, #1
10005e3c:	d000      	beq.n	10005e40 <findslot+0x28>
10005e3e:	1918      	adds	r0, r3, r4
10005e40:	bd10      	pop	{r4, pc}
10005e42:	46c0      	nop			; (mov r8, r8)
10005e44:	20000680 	.word	0x20000680
10005e48:	200006c8 	.word	0x200006c8

10005e4c <error>:
10005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005e4e:	1c05      	adds	r5, r0, #0
10005e50:	f7ff f842 	bl	10004ed8 <__errno>
10005e54:	2700      	movs	r7, #0
10005e56:	1c06      	adds	r6, r0, #0
10005e58:	2413      	movs	r4, #19
10005e5a:	1c20      	adds	r0, r4, #0
10005e5c:	1c39      	adds	r1, r7, #0
10005e5e:	beab      	bkpt	0x00ab
10005e60:	1c04      	adds	r4, r0, #0
10005e62:	1c28      	adds	r0, r5, #0
10005e64:	6034      	str	r4, [r6, #0]
10005e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10005e68 <checkerror>:
10005e68:	b508      	push	{r3, lr}
10005e6a:	1c43      	adds	r3, r0, #1
10005e6c:	d101      	bne.n	10005e72 <checkerror+0xa>
10005e6e:	f7ff ffed 	bl	10005e4c <error>
10005e72:	bd08      	pop	{r3, pc}

10005e74 <initialise_monitor_handles>:
10005e74:	b5f0      	push	{r4, r5, r6, r7, lr}
10005e76:	4b20      	ldr	r3, [pc, #128]	; (10005ef8 <initialise_monitor_handles+0x84>)
10005e78:	b085      	sub	sp, #20
10005e7a:	9301      	str	r3, [sp, #4]
10005e7c:	2303      	movs	r3, #3
10005e7e:	ac01      	add	r4, sp, #4
10005e80:	60a3      	str	r3, [r4, #8]
10005e82:	2300      	movs	r3, #0
10005e84:	2501      	movs	r5, #1
10005e86:	6063      	str	r3, [r4, #4]
10005e88:	1c28      	adds	r0, r5, #0
10005e8a:	1c21      	adds	r1, r4, #0
10005e8c:	beab      	bkpt	0x00ab
10005e8e:	1c06      	adds	r6, r0, #0
10005e90:	4b19      	ldr	r3, [pc, #100]	; (10005ef8 <initialise_monitor_handles+0x84>)
10005e92:	4f1a      	ldr	r7, [pc, #104]	; (10005efc <initialise_monitor_handles+0x88>)
10005e94:	9301      	str	r3, [sp, #4]
10005e96:	2303      	movs	r3, #3
10005e98:	60a3      	str	r3, [r4, #8]
10005e9a:	195b      	adds	r3, r3, r5
10005e9c:	603e      	str	r6, [r7, #0]
10005e9e:	6063      	str	r3, [r4, #4]
10005ea0:	1c28      	adds	r0, r5, #0
10005ea2:	1c21      	adds	r1, r4, #0
10005ea4:	beab      	bkpt	0x00ab
10005ea6:	1c06      	adds	r6, r0, #0
10005ea8:	1c33      	adds	r3, r6, #0
10005eaa:	4e15      	ldr	r6, [pc, #84]	; (10005f00 <initialise_monitor_handles+0x8c>)
10005eac:	6033      	str	r3, [r6, #0]
10005eae:	4b12      	ldr	r3, [pc, #72]	; (10005ef8 <initialise_monitor_handles+0x84>)
10005eb0:	9301      	str	r3, [sp, #4]
10005eb2:	2303      	movs	r3, #3
10005eb4:	60a3      	str	r3, [r4, #8]
10005eb6:	3305      	adds	r3, #5
10005eb8:	6063      	str	r3, [r4, #4]
10005eba:	1c28      	adds	r0, r5, #0
10005ebc:	1c21      	adds	r1, r4, #0
10005ebe:	beab      	bkpt	0x00ab
10005ec0:	1c04      	adds	r4, r0, #0
10005ec2:	4a10      	ldr	r2, [pc, #64]	; (10005f04 <initialise_monitor_handles+0x90>)
10005ec4:	1c39      	adds	r1, r7, #0
10005ec6:	6014      	str	r4, [r2, #0]
10005ec8:	1c63      	adds	r3, r4, #1
10005eca:	d101      	bne.n	10005ed0 <initialise_monitor_handles+0x5c>
10005ecc:	6833      	ldr	r3, [r6, #0]
10005ece:	6013      	str	r3, [r2, #0]
10005ed0:	2000      	movs	r0, #0
10005ed2:	2401      	movs	r4, #1
10005ed4:	4b0c      	ldr	r3, [pc, #48]	; (10005f08 <initialise_monitor_handles+0x94>)
10005ed6:	4264      	negs	r4, r4
10005ed8:	50c4      	str	r4, [r0, r3]
10005eda:	3008      	adds	r0, #8
10005edc:	28a0      	cmp	r0, #160	; 0xa0
10005ede:	d1f8      	bne.n	10005ed2 <initialise_monitor_handles+0x5e>
10005ee0:	6809      	ldr	r1, [r1, #0]
10005ee2:	6830      	ldr	r0, [r6, #0]
10005ee4:	6019      	str	r1, [r3, #0]
10005ee6:	2100      	movs	r1, #0
10005ee8:	6812      	ldr	r2, [r2, #0]
10005eea:	6059      	str	r1, [r3, #4]
10005eec:	6098      	str	r0, [r3, #8]
10005eee:	60d9      	str	r1, [r3, #12]
10005ef0:	611a      	str	r2, [r3, #16]
10005ef2:	6159      	str	r1, [r3, #20]
10005ef4:	b005      	add	sp, #20
10005ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005ef8:	1000650f 	.word	0x1000650f
10005efc:	200006c0 	.word	0x200006c0
10005f00:	200006bc 	.word	0x200006bc
10005f04:	200006c4 	.word	0x200006c4
10005f08:	200006c8 	.word	0x200006c8

10005f0c <_swiread>:
10005f0c:	b530      	push	{r4, r5, lr}
10005f0e:	b085      	sub	sp, #20
10005f10:	ad01      	add	r5, sp, #4
10005f12:	9001      	str	r0, [sp, #4]
10005f14:	9102      	str	r1, [sp, #8]
10005f16:	9203      	str	r2, [sp, #12]
10005f18:	2406      	movs	r4, #6
10005f1a:	1c20      	adds	r0, r4, #0
10005f1c:	1c29      	adds	r1, r5, #0
10005f1e:	beab      	bkpt	0x00ab
10005f20:	1c04      	adds	r4, r0, #0
10005f22:	1c20      	adds	r0, r4, #0
10005f24:	f7ff ffa0 	bl	10005e68 <checkerror>
10005f28:	b005      	add	sp, #20
10005f2a:	bd30      	pop	{r4, r5, pc}

10005f2c <_read>:
10005f2c:	b570      	push	{r4, r5, r6, lr}
10005f2e:	1c0e      	adds	r6, r1, #0
10005f30:	1c15      	adds	r5, r2, #0
10005f32:	f7ff ff71 	bl	10005e18 <findslot>
10005f36:	1e04      	subs	r4, r0, #0
10005f38:	d105      	bne.n	10005f46 <_read+0x1a>
10005f3a:	f7fe ffcd 	bl	10004ed8 <__errno>
10005f3e:	2309      	movs	r3, #9
10005f40:	6003      	str	r3, [r0, #0]
10005f42:	3b0a      	subs	r3, #10
10005f44:	e00b      	b.n	10005f5e <_read+0x32>
10005f46:	6800      	ldr	r0, [r0, #0]
10005f48:	1c31      	adds	r1, r6, #0
10005f4a:	1c2a      	adds	r2, r5, #0
10005f4c:	f7ff ffde 	bl	10005f0c <_swiread>
10005f50:	1c03      	adds	r3, r0, #0
10005f52:	1c42      	adds	r2, r0, #1
10005f54:	d003      	beq.n	10005f5e <_read+0x32>
10005f56:	6862      	ldr	r2, [r4, #4]
10005f58:	1a2b      	subs	r3, r5, r0
10005f5a:	18d2      	adds	r2, r2, r3
10005f5c:	6062      	str	r2, [r4, #4]
10005f5e:	1c18      	adds	r0, r3, #0
10005f60:	bd70      	pop	{r4, r5, r6, pc}

10005f62 <_swilseek>:
10005f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005f64:	1c0c      	adds	r4, r1, #0
10005f66:	1c16      	adds	r6, r2, #0
10005f68:	f7ff ff56 	bl	10005e18 <findslot>
10005f6c:	1e05      	subs	r5, r0, #0
10005f6e:	d103      	bne.n	10005f78 <_swilseek+0x16>
10005f70:	f7fe ffb2 	bl	10004ed8 <__errno>
10005f74:	2309      	movs	r3, #9
10005f76:	e004      	b.n	10005f82 <_swilseek+0x20>
10005f78:	2e02      	cmp	r6, #2
10005f7a:	d906      	bls.n	10005f8a <_swilseek+0x28>
10005f7c:	f7fe ffac 	bl	10004ed8 <__errno>
10005f80:	2316      	movs	r3, #22
10005f82:	6003      	str	r3, [r0, #0]
10005f84:	2001      	movs	r0, #1
10005f86:	4240      	negs	r0, r0
10005f88:	e025      	b.n	10005fd6 <_swilseek+0x74>
10005f8a:	2e01      	cmp	r6, #1
10005f8c:	d103      	bne.n	10005f96 <_swilseek+0x34>
10005f8e:	6843      	ldr	r3, [r0, #4]
10005f90:	18e4      	adds	r4, r4, r3
10005f92:	d510      	bpl.n	10005fb6 <_swilseek+0x54>
10005f94:	e7f2      	b.n	10005f7c <_swilseek+0x1a>
10005f96:	2e02      	cmp	r6, #2
10005f98:	d10d      	bne.n	10005fb6 <_swilseek+0x54>
10005f9a:	6803      	ldr	r3, [r0, #0]
10005f9c:	360a      	adds	r6, #10
10005f9e:	9300      	str	r3, [sp, #0]
10005fa0:	466f      	mov	r7, sp
10005fa2:	1c30      	adds	r0, r6, #0
10005fa4:	1c39      	adds	r1, r7, #0
10005fa6:	beab      	bkpt	0x00ab
10005fa8:	1c06      	adds	r6, r0, #0
10005faa:	1c30      	adds	r0, r6, #0
10005fac:	f7ff ff5c 	bl	10005e68 <checkerror>
10005fb0:	1824      	adds	r4, r4, r0
10005fb2:	1c43      	adds	r3, r0, #1
10005fb4:	d0e6      	beq.n	10005f84 <_swilseek+0x22>
10005fb6:	682b      	ldr	r3, [r5, #0]
10005fb8:	466f      	mov	r7, sp
10005fba:	9300      	str	r3, [sp, #0]
10005fbc:	9401      	str	r4, [sp, #4]
10005fbe:	260a      	movs	r6, #10
10005fc0:	1c30      	adds	r0, r6, #0
10005fc2:	1c39      	adds	r1, r7, #0
10005fc4:	beab      	bkpt	0x00ab
10005fc6:	1c06      	adds	r6, r0, #0
10005fc8:	1c30      	adds	r0, r6, #0
10005fca:	f7ff ff4d 	bl	10005e68 <checkerror>
10005fce:	2800      	cmp	r0, #0
10005fd0:	dbd8      	blt.n	10005f84 <_swilseek+0x22>
10005fd2:	1c20      	adds	r0, r4, #0
10005fd4:	606c      	str	r4, [r5, #4]
10005fd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10005fd8 <_lseek>:
10005fd8:	b508      	push	{r3, lr}
10005fda:	f7ff ffc2 	bl	10005f62 <_swilseek>
10005fde:	bd08      	pop	{r3, pc}

10005fe0 <_swiwrite>:
10005fe0:	b530      	push	{r4, r5, lr}
10005fe2:	b085      	sub	sp, #20
10005fe4:	ad01      	add	r5, sp, #4
10005fe6:	9001      	str	r0, [sp, #4]
10005fe8:	9102      	str	r1, [sp, #8]
10005fea:	9203      	str	r2, [sp, #12]
10005fec:	2405      	movs	r4, #5
10005fee:	1c20      	adds	r0, r4, #0
10005ff0:	1c29      	adds	r1, r5, #0
10005ff2:	beab      	bkpt	0x00ab
10005ff4:	1c04      	adds	r4, r0, #0
10005ff6:	1c20      	adds	r0, r4, #0
10005ff8:	f7ff ff36 	bl	10005e68 <checkerror>
10005ffc:	b005      	add	sp, #20
10005ffe:	bd30      	pop	{r4, r5, pc}

10006000 <_write>:
10006000:	b570      	push	{r4, r5, r6, lr}
10006002:	1c0e      	adds	r6, r1, #0
10006004:	1c15      	adds	r5, r2, #0
10006006:	f7ff ff07 	bl	10005e18 <findslot>
1000600a:	1e04      	subs	r4, r0, #0
1000600c:	d104      	bne.n	10006018 <_write+0x18>
1000600e:	f7fe ff63 	bl	10004ed8 <__errno>
10006012:	2309      	movs	r3, #9
10006014:	6003      	str	r3, [r0, #0]
10006016:	e010      	b.n	1000603a <_write+0x3a>
10006018:	6800      	ldr	r0, [r0, #0]
1000601a:	1c31      	adds	r1, r6, #0
1000601c:	1c2a      	adds	r2, r5, #0
1000601e:	f7ff ffdf 	bl	10005fe0 <_swiwrite>
10006022:	1e03      	subs	r3, r0, #0
10006024:	db09      	blt.n	1000603a <_write+0x3a>
10006026:	6862      	ldr	r2, [r4, #4]
10006028:	1a28      	subs	r0, r5, r0
1000602a:	1812      	adds	r2, r2, r0
1000602c:	6062      	str	r2, [r4, #4]
1000602e:	429d      	cmp	r5, r3
10006030:	d105      	bne.n	1000603e <_write+0x3e>
10006032:	2000      	movs	r0, #0
10006034:	f7ff ff0a 	bl	10005e4c <error>
10006038:	e001      	b.n	1000603e <_write+0x3e>
1000603a:	2001      	movs	r0, #1
1000603c:	4240      	negs	r0, r0
1000603e:	bd70      	pop	{r4, r5, r6, pc}

10006040 <_swiclose>:
10006040:	b537      	push	{r0, r1, r2, r4, r5, lr}
10006042:	2402      	movs	r4, #2
10006044:	9001      	str	r0, [sp, #4]
10006046:	ad01      	add	r5, sp, #4
10006048:	1c20      	adds	r0, r4, #0
1000604a:	1c29      	adds	r1, r5, #0
1000604c:	beab      	bkpt	0x00ab
1000604e:	1c04      	adds	r4, r0, #0
10006050:	1c20      	adds	r0, r4, #0
10006052:	f7ff ff09 	bl	10005e68 <checkerror>
10006056:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

10006058 <_close>:
10006058:	b538      	push	{r3, r4, r5, lr}
1000605a:	1c05      	adds	r5, r0, #0
1000605c:	f7ff fedc 	bl	10005e18 <findslot>
10006060:	1e04      	subs	r4, r0, #0
10006062:	d106      	bne.n	10006072 <_close+0x1a>
10006064:	f7fe ff38 	bl	10004ed8 <__errno>
10006068:	2309      	movs	r3, #9
1000606a:	6003      	str	r3, [r0, #0]
1000606c:	2001      	movs	r0, #1
1000606e:	4240      	negs	r0, r0
10006070:	e014      	b.n	1000609c <_close+0x44>
10006072:	3d01      	subs	r5, #1
10006074:	2d01      	cmp	r5, #1
10006076:	d809      	bhi.n	1000608c <_close+0x34>
10006078:	4b09      	ldr	r3, [pc, #36]	; (100060a0 <_close+0x48>)
1000607a:	689a      	ldr	r2, [r3, #8]
1000607c:	691b      	ldr	r3, [r3, #16]
1000607e:	429a      	cmp	r2, r3
10006080:	d104      	bne.n	1000608c <_close+0x34>
10006082:	2301      	movs	r3, #1
10006084:	425b      	negs	r3, r3
10006086:	6003      	str	r3, [r0, #0]
10006088:	2000      	movs	r0, #0
1000608a:	e007      	b.n	1000609c <_close+0x44>
1000608c:	6820      	ldr	r0, [r4, #0]
1000608e:	f7ff ffd7 	bl	10006040 <_swiclose>
10006092:	2800      	cmp	r0, #0
10006094:	d102      	bne.n	1000609c <_close+0x44>
10006096:	2301      	movs	r3, #1
10006098:	425b      	negs	r3, r3
1000609a:	6023      	str	r3, [r4, #0]
1000609c:	bd38      	pop	{r3, r4, r5, pc}
1000609e:	46c0      	nop			; (mov r8, r8)
100060a0:	200006c8 	.word	0x200006c8

100060a4 <_swistat>:
100060a4:	b570      	push	{r4, r5, r6, lr}
100060a6:	1c0c      	adds	r4, r1, #0
100060a8:	f7ff feb6 	bl	10005e18 <findslot>
100060ac:	1e06      	subs	r6, r0, #0
100060ae:	d105      	bne.n	100060bc <_swistat+0x18>
100060b0:	f7fe ff12 	bl	10004ed8 <__errno>
100060b4:	2309      	movs	r3, #9
100060b6:	6003      	str	r3, [r0, #0]
100060b8:	3b0a      	subs	r3, #10
100060ba:	e014      	b.n	100060e6 <_swistat+0x42>
100060bc:	2380      	movs	r3, #128	; 0x80
100060be:	6862      	ldr	r2, [r4, #4]
100060c0:	019b      	lsls	r3, r3, #6
100060c2:	4313      	orrs	r3, r2
100060c4:	6063      	str	r3, [r4, #4]
100060c6:	2380      	movs	r3, #128	; 0x80
100060c8:	00db      	lsls	r3, r3, #3
100060ca:	62e3      	str	r3, [r4, #44]	; 0x2c
100060cc:	250c      	movs	r5, #12
100060ce:	1c28      	adds	r0, r5, #0
100060d0:	1c31      	adds	r1, r6, #0
100060d2:	beab      	bkpt	0x00ab
100060d4:	1c05      	adds	r5, r0, #0
100060d6:	1c28      	adds	r0, r5, #0
100060d8:	f7ff fec6 	bl	10005e68 <checkerror>
100060dc:	1c03      	adds	r3, r0, #0
100060de:	1c42      	adds	r2, r0, #1
100060e0:	d001      	beq.n	100060e6 <_swistat+0x42>
100060e2:	2300      	movs	r3, #0
100060e4:	6120      	str	r0, [r4, #16]
100060e6:	1c18      	adds	r0, r3, #0
100060e8:	bd70      	pop	{r4, r5, r6, pc}

100060ea <_fstat>:
100060ea:	b538      	push	{r3, r4, r5, lr}
100060ec:	1c05      	adds	r5, r0, #0
100060ee:	1c0c      	adds	r4, r1, #0
100060f0:	223c      	movs	r2, #60	; 0x3c
100060f2:	1c08      	adds	r0, r1, #0
100060f4:	2100      	movs	r1, #0
100060f6:	f7ff fa4f 	bl	10005598 <memset>
100060fa:	1c28      	adds	r0, r5, #0
100060fc:	1c21      	adds	r1, r4, #0
100060fe:	f7ff ffd1 	bl	100060a4 <_swistat>
10006102:	bd38      	pop	{r3, r4, r5, pc}

10006104 <_isatty>:
10006104:	b570      	push	{r4, r5, r6, lr}
10006106:	f7ff fe87 	bl	10005e18 <findslot>
1000610a:	2509      	movs	r5, #9
1000610c:	1e04      	subs	r4, r0, #0
1000610e:	d103      	bne.n	10006118 <_isatty+0x14>
10006110:	f7fe fee2 	bl	10004ed8 <__errno>
10006114:	6005      	str	r5, [r0, #0]
10006116:	e010      	b.n	1000613a <_isatty+0x36>
10006118:	1c28      	adds	r0, r5, #0
1000611a:	1c21      	adds	r1, r4, #0
1000611c:	beab      	bkpt	0x00ab
1000611e:	1c04      	adds	r4, r0, #0
10006120:	2001      	movs	r0, #1
10006122:	4284      	cmp	r4, r0
10006124:	d00a      	beq.n	1000613c <_isatty+0x38>
10006126:	f7fe fed7 	bl	10004ed8 <__errno>
1000612a:	2400      	movs	r4, #0
1000612c:	1c06      	adds	r6, r0, #0
1000612e:	2513      	movs	r5, #19
10006130:	1c28      	adds	r0, r5, #0
10006132:	1c21      	adds	r1, r4, #0
10006134:	beab      	bkpt	0x00ab
10006136:	1c05      	adds	r5, r0, #0
10006138:	6035      	str	r5, [r6, #0]
1000613a:	1c20      	adds	r0, r4, #0
1000613c:	bd70      	pop	{r4, r5, r6, pc}
	...

10006140 <SPI_MASTER_0_MOSI>:
10006140:	0300 4004 0000 0000                         ...@....

10006148 <SPI_MASTER_0_MISO>:
10006148:	0000 4004 0000 0000                         ...@....

10006150 <SPI_MASTER_0_SCLKOUT>:
10006150:	0000 4004 0001 0000                         ...@....

10006158 <SPI_MASTER_0_SCLKOUT_Config>:
10006158:	00a0 0000 0001 0000 0000 0000 0000 0000     ................

10006168 <SPI_MASTER_0_SS_0>:
10006168:	0400 4004 0001 0000                         ...@....

10006170 <SPI_MASTER_0_SS_0_Config>:
10006170:	009c 0000 0001 0000 0000 0000 0000 0004     ................

10006180 <SPI_MASTER_0_Config>:
10006180:	0560 2000 2e29 1000 6140 1000 0550 2000     `.. )...@a..P.. 
10006190:	6148 1000 0690 2000 0000 0000 0000 0000     Ha..... ........
	...
100061a8:	6150 1000 6158 1000 6168 1000 0000 0000     Pa..Xa..ha......
	...
100061d0:	6170 1000 0000 0000 0000 0000 0000 0000     pa..............
	...
100061f4:	4ec5 1000 0000 0000 0600 0000 0000 0000     .N..............
10006204:	0000 0100 0101 0000                         ........

1000620c <SPI_MASTER_1_MOSI>:
1000620c:	0100 4004 0005 0000                         ...@....

10006214 <SPI_MASTER_1_MISO>:
10006214:	0100 4004 0004 0000                         ...@....

1000621c <SPI_MASTER_1_SCLKOUT>:
1000621c:	0000 4004 0007 0000                         ...@....

10006224 <SPI_MASTER_1_SCLKOUT_Config>:
10006224:	0098 0000 0001 0000 0000 0000 0000 0000     ................

10006234 <SPI_MASTER_1_SS_0>:
10006234:	0100 4004 0006 0000                         ...@....

1000623c <SPI_MASTER_1_SS_0_Config>:
1000623c:	0098 0000 0001 0000 0000 0000 0000 0004     ................

1000624c <SPI_MASTER_1_Config>:
1000624c:	05ac 2000 2fc1 1000 620c 1000 059c 2000     ... ./...b..... 
1000625c:	6214 1000 06a0 2000 0000 0000 0000 0000     .b..... ........
	...
10006274:	621c 1000 6224 1000 6234 1000 0000 0000     .b..$b..4b......
	...
1000629c:	623c 1000 0000 0000 0000 0000 0000 0000     <b..............
	...
100062c8:	0404 0000 0000 4000 0000 0100 0401 0002     .......@........

100062d8 <I2C_MASTER_0_sda_pin_config>:
100062d8:	009c 0000 0001 0000                         ........

100062e0 <I2C_MASTER_0_scl_pin_config>:
100062e0:	0098 0000 0001 0000                         ........

100062e8 <I2C_MASTER_0_channel_config>:
100062e8:	86a0 0001 0000 0000                         ........

100062f0 <I2C_MASTER_0_config>:
100062f0:	62e8 1000 4859 1000 4831 1000 480d 1000     .b..YH..1H...H..
10006300:	4eb5 1000 4ebd 1000 4e35 1000 4e69 1000     .N...N..5N..iN..
10006310:	4e7d 1000 0000 0303 0c0e 0000               }N..........

1000631c <SPI_CE>:
1000631c:	0000 4004 0080 0000 0000 0001 0002 0000     ...@............
1000632c:	0000 0001 0000 0330 0000 0001 0000 0000     ......0.........
1000633c:	0a0a 7453 7261 6974 676e 4920 4332 5320     ..Starting I2C S
1000634c:	6163 6e6e 7265 2e2e 2e2e 0020 6f44 656e     canner.... .Done
1000635c:	0020 0000 0a0a 6f43 6d6d 6e75 6369 7461      .....Communicat
1000636c:	6f69 206e 6554 7473 2e20 2e2e 202e 0000     ion Test .... ..
1000637c:	4d42 3245 3038 6320 6e6f 656e 7463 6465     BME280 connected
1000638c:	0000 0000 4144 4556 4120 5050 2073 6e69     ....DAVE APPs in
1000639c:	7469 6169 696c 617a 6974 6e6f 6620 6961     itialization fai
100063ac:	656c 0064 4144 4556 4120 5050 2073 6e69     led.DAVE APPs in
100063bc:	7469 6169 696c 617a 6974 6e6f 7020 7361     itialization pas
100063cc:	6573 0064 6554 7473 4320 6d6f 756d 696e     sed.Test Communi
100063dc:	6163 6974 6e6f 7220 7465 7275 656e 2064     cation returned 
100063ec:	6425 0a20 0000 0000 6e49 7469 7220 7465     %d .....Init ret
100063fc:	7275 656e 2064 6425 0a20 0000 4f4e 4120     urned %d ...NO A
1000640c:	4b43 202c 6843 6365 206b 6f43 6d6d 6e75     CK, Check Commun
1000641c:	6369 7461 6f69 206e 726f 7320 616c 6576     ication or slave
1000642c:	6120 6464 6572 7373 202e 4128 6f62 7472      address. (Abort
1000643c:	6e69 2967 0000 0000 4108 4252 6c20 736f     ing).....ARB los
1000644c:	0074 0000 3249 2043 7265 6f72 2072 6564     t...I2C error de
1000645c:	6574 7463 0000 0000 5053 2049 6574 7473     tect....SPI test
1000646c:	6520 7272 726f 0000 0043 0000                error..C...

10006478 <_global_impure_ptr>:
10006478:	0620 2000                                    .. 

1000647c <__sf_fake_stdin>:
	...

1000649c <__sf_fake_stdout>:
	...

100064bc <__sf_fake_stderr>:
	...
100064dc:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
100064ec:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
100064fc:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
1000650c:	6665 3a00 7474 0000                         ef.:tt..

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	10002fad 	.word	0x10002fad
	Insert_InterruptVeener IRQ10	
200000f8:	10002f99 	.word	0x10002f99
	Insert_InterruptVeener IRQ11	
200000fc:	1000316d 	.word	0x1000316d
	Insert_InterruptVeener IRQ12	
20000100:	100049d5 	.word	0x100049d5
	Insert_InterruptVeener IRQ13	
20000104:	10003159 	.word	0x10003159
	Insert_InterruptVeener IRQ14	
20000108:	100049c1 	.word	0x100049c1
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
