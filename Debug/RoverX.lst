
RoverX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004470  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  10005470  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         000000d0  20000550  100055b4  00008550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000000f8  20000620  000004d0  00008620  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00000cf8  00000000  00000000  00008620  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00012f09  00000000  00000000  00009318  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a80  00000000  00000000  0001c221  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000060ed  00000000  00000000  0001eca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002c24  00000000  00000000  00024d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00007ce5  00000000  00000000  000279b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000480e  00000000  00000000  0002f699  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b78  00000000  00000000  00033ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000004b4  00000000  00000000  00034a20  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10005470 	.word	0x10005470
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	100055b4 	.word	0x100055b4
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	20000620 	.word	0x20000620
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10005684 	.word	0x10005684
	ldr	r2, =__ram_code_start
10001084:	20000620 	.word	0x20000620
	ldr	r3, =__ram_code_end
10001088:	20000620 	.word	0x20000620
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20000620 	.word	0x20000620
	ldr	r2, =__bss_end
10001090:	20000714 	.word	0x20000714
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	100051fd 	.word	0x100051fd
    blx  r0
#endif

    ldr  r0, =main
10001098:	10004941 	.word	0x10004941

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f003 face 	bl	10004644 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f003 fb1a 	bl	100046e0 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f000 fdd8 	bl	10001cbc <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f000 fdc5 	bl	10001cbc <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	20000620 	.word	0x20000620
10001168:	20000624 	.word	0x20000624
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001188:	b590      	push	{r4, r7, lr}
1000118a:	b085      	sub	sp, #20
1000118c:	af00      	add	r7, sp, #0
1000118e:	60f8      	str	r0, [r7, #12]
10001190:	607a      	str	r2, [r7, #4]
10001192:	230b      	movs	r3, #11
10001194:	18fb      	adds	r3, r7, r3
10001196:	1c0a      	adds	r2, r1, #0
10001198:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000119a:	230b      	movs	r3, #11
1000119c:	18fb      	adds	r3, r7, r3
1000119e:	781b      	ldrb	r3, [r3, #0]
100011a0:	089b      	lsrs	r3, r3, #2
100011a2:	b2db      	uxtb	r3, r3
100011a4:	1c18      	adds	r0, r3, #0
100011a6:	230b      	movs	r3, #11
100011a8:	18fb      	adds	r3, r7, r3
100011aa:	781b      	ldrb	r3, [r3, #0]
100011ac:	089b      	lsrs	r3, r3, #2
100011ae:	b2db      	uxtb	r3, r3
100011b0:	1c1a      	adds	r2, r3, #0
100011b2:	68fb      	ldr	r3, [r7, #12]
100011b4:	3204      	adds	r2, #4
100011b6:	0092      	lsls	r2, r2, #2
100011b8:	58d3      	ldr	r3, [r2, r3]
100011ba:	220b      	movs	r2, #11
100011bc:	18ba      	adds	r2, r7, r2
100011be:	7812      	ldrb	r2, [r2, #0]
100011c0:	2103      	movs	r1, #3
100011c2:	400a      	ands	r2, r1
100011c4:	00d2      	lsls	r2, r2, #3
100011c6:	1c11      	adds	r1, r2, #0
100011c8:	22fc      	movs	r2, #252	; 0xfc
100011ca:	408a      	lsls	r2, r1
100011cc:	43d2      	mvns	r2, r2
100011ce:	401a      	ands	r2, r3
100011d0:	1c11      	adds	r1, r2, #0
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	1d02      	adds	r2, r0, #4
100011d6:	0092      	lsls	r2, r2, #2
100011d8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011de:	220b      	movs	r2, #11
100011e0:	18ba      	adds	r2, r7, r2
100011e2:	7812      	ldrb	r2, [r2, #0]
100011e4:	0052      	lsls	r2, r2, #1
100011e6:	1c11      	adds	r1, r2, #0
100011e8:	2203      	movs	r2, #3
100011ea:	408a      	lsls	r2, r1
100011ec:	43d2      	mvns	r2, r2
100011ee:	401a      	ands	r2, r3
100011f0:	68fb      	ldr	r3, [r7, #12]
100011f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011f4:	230b      	movs	r3, #11
100011f6:	18fb      	adds	r3, r7, r3
100011f8:	781b      	ldrb	r3, [r3, #0]
100011fa:	08db      	lsrs	r3, r3, #3
100011fc:	b2db      	uxtb	r3, r3
100011fe:	1c18      	adds	r0, r3, #0
10001200:	230b      	movs	r3, #11
10001202:	18fb      	adds	r3, r7, r3
10001204:	781b      	ldrb	r3, [r3, #0]
10001206:	08db      	lsrs	r3, r3, #3
10001208:	b2db      	uxtb	r3, r3
1000120a:	1c1a      	adds	r2, r3, #0
1000120c:	68fb      	ldr	r3, [r7, #12]
1000120e:	3210      	adds	r2, #16
10001210:	0092      	lsls	r2, r2, #2
10001212:	58d3      	ldr	r3, [r2, r3]
10001214:	220b      	movs	r2, #11
10001216:	18ba      	adds	r2, r7, r2
10001218:	7812      	ldrb	r2, [r2, #0]
1000121a:	2107      	movs	r1, #7
1000121c:	400a      	ands	r2, r1
1000121e:	0092      	lsls	r2, r2, #2
10001220:	1c11      	adds	r1, r2, #0
10001222:	2204      	movs	r2, #4
10001224:	408a      	lsls	r2, r1
10001226:	43d2      	mvns	r2, r2
10001228:	401a      	ands	r2, r3
1000122a:	1c11      	adds	r1, r2, #0
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c02      	adds	r2, r0, #0
10001230:	3210      	adds	r2, #16
10001232:	0092      	lsls	r2, r2, #2
10001234:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	08db      	lsrs	r3, r3, #3
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	08db      	lsrs	r3, r3, #3
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3210      	adds	r2, #16
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	785b      	ldrb	r3, [r3, #1]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2107      	movs	r1, #7
10001264:	400b      	ands	r3, r1
10001266:	009b      	lsls	r3, r3, #2
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1c02      	adds	r2, r0, #0
10001274:	3210      	adds	r2, #16
10001276:	0092      	lsls	r2, r2, #2
10001278:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	4a20      	ldr	r2, [pc, #128]	; (10001300 <XMC_GPIO_Init+0x178>)
1000127e:	4293      	cmp	r3, r2
10001280:	d10b      	bne.n	1000129a <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001282:	68fb      	ldr	r3, [r7, #12]
10001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001286:	220b      	movs	r2, #11
10001288:	18ba      	adds	r2, r7, r2
1000128a:	7812      	ldrb	r2, [r2, #0]
1000128c:	2101      	movs	r1, #1
1000128e:	4091      	lsls	r1, r2
10001290:	1c0a      	adds	r2, r1, #0
10001292:	43d2      	mvns	r2, r2
10001294:	401a      	ands	r2, r3
10001296:	68fb      	ldr	r3, [r7, #12]
10001298:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	781b      	ldrb	r3, [r3, #0]
1000129e:	b2db      	uxtb	r3, r3
100012a0:	b25b      	sxtb	r3, r3
100012a2:	2b00      	cmp	r3, #0
100012a4:	da07      	bge.n	100012b6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012a6:	687b      	ldr	r3, [r7, #4]
100012a8:	685a      	ldr	r2, [r3, #4]
100012aa:	230b      	movs	r3, #11
100012ac:	18fb      	adds	r3, r7, r3
100012ae:	781b      	ldrb	r3, [r3, #0]
100012b0:	409a      	lsls	r2, r3
100012b2:	68fb      	ldr	r3, [r7, #12]
100012b4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012b6:	230b      	movs	r3, #11
100012b8:	18fb      	adds	r3, r7, r3
100012ba:	781b      	ldrb	r3, [r3, #0]
100012bc:	089b      	lsrs	r3, r3, #2
100012be:	b2db      	uxtb	r3, r3
100012c0:	1c18      	adds	r0, r3, #0
100012c2:	230b      	movs	r3, #11
100012c4:	18fb      	adds	r3, r7, r3
100012c6:	781b      	ldrb	r3, [r3, #0]
100012c8:	089b      	lsrs	r3, r3, #2
100012ca:	b2db      	uxtb	r3, r3
100012cc:	1c1a      	adds	r2, r3, #0
100012ce:	68fb      	ldr	r3, [r7, #12]
100012d0:	3204      	adds	r2, #4
100012d2:	0092      	lsls	r2, r2, #2
100012d4:	58d2      	ldr	r2, [r2, r3]
100012d6:	687b      	ldr	r3, [r7, #4]
100012d8:	781b      	ldrb	r3, [r3, #0]
100012da:	1c1c      	adds	r4, r3, #0
100012dc:	230b      	movs	r3, #11
100012de:	18fb      	adds	r3, r7, r3
100012e0:	781b      	ldrb	r3, [r3, #0]
100012e2:	2103      	movs	r1, #3
100012e4:	400b      	ands	r3, r1
100012e6:	00db      	lsls	r3, r3, #3
100012e8:	409c      	lsls	r4, r3
100012ea:	1c23      	adds	r3, r4, #0
100012ec:	431a      	orrs	r2, r3
100012ee:	1c11      	adds	r1, r2, #0
100012f0:	68fb      	ldr	r3, [r7, #12]
100012f2:	1d02      	adds	r2, r0, #4
100012f4:	0092      	lsls	r2, r2, #2
100012f6:	50d1      	str	r1, [r2, r3]
}
100012f8:	46bd      	mov	sp, r7
100012fa:	b005      	add	sp, #20
100012fc:	bd90      	pop	{r4, r7, pc}
100012fe:	46c0      	nop			; (mov r8, r8)
10001300:	40040200 	.word	0x40040200

10001304 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001304:	b580      	push	{r7, lr}
10001306:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001308:	4b02      	ldr	r3, [pc, #8]	; (10001314 <XMC_SCU_LockProtectedBits+0x10>)
1000130a:	22c3      	movs	r2, #195	; 0xc3
1000130c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)
10001314:	40010000 	.word	0x40010000

10001318 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001318:	b580      	push	{r7, lr}
1000131a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000131c:	4b05      	ldr	r3, [pc, #20]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000131e:	22c0      	movs	r2, #192	; 0xc0
10001320:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	46c0      	nop			; (mov r8, r8)
10001324:	4b03      	ldr	r3, [pc, #12]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001328:	2204      	movs	r2, #4
1000132a:	4013      	ands	r3, r2
1000132c:	d1fa      	bne.n	10001324 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
1000132e:	46bd      	mov	sp, r7
10001330:	bd80      	pop	{r7, pc}
10001332:	46c0      	nop			; (mov r8, r8)
10001334:	40010000 	.word	0x40010000

10001338 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001338:	b580      	push	{r7, lr}
1000133a:	b086      	sub	sp, #24
1000133c:	af00      	add	r7, sp, #0
1000133e:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001340:	f7ff ffea 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001344:	687b      	ldr	r3, [r7, #4]
10001346:	799b      	ldrb	r3, [r3, #6]
10001348:	2b30      	cmp	r3, #48	; 0x30
1000134a:	d053      	beq.n	100013f4 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
1000134c:	f7ff ff14 	bl	10001178 <OSCHP_GetFrequency>
10001350:	1e02      	subs	r2, r0, #0
10001352:	4b49      	ldr	r3, [pc, #292]	; (10001478 <XMC_SCU_CLOCK_Init+0x140>)
10001354:	429a      	cmp	r2, r3
10001356:	d909      	bls.n	1000136c <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001358:	4a48      	ldr	r2, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135a:	4948      	ldr	r1, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135c:	2390      	movs	r3, #144	; 0x90
1000135e:	5acb      	ldrh	r3, [r1, r3]
10001360:	b29b      	uxth	r3, r3
10001362:	2140      	movs	r1, #64	; 0x40
10001364:	430b      	orrs	r3, r1
10001366:	b299      	uxth	r1, r3
10001368:	2390      	movs	r3, #144	; 0x90
1000136a:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000136c:	4a43      	ldr	r2, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000136e:	4943      	ldr	r1, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
10001370:	2390      	movs	r3, #144	; 0x90
10001372:	5acb      	ldrh	r3, [r1, r3]
10001374:	b29b      	uxth	r3, r3
10001376:	b29b      	uxth	r3, r3
10001378:	1c19      	adds	r1, r3, #0
1000137a:	2332      	movs	r3, #50	; 0x32
1000137c:	4399      	bics	r1, r3
1000137e:	1c0b      	adds	r3, r1, #0
10001380:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001382:	687b      	ldr	r3, [r7, #4]
10001384:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001386:	b29b      	uxth	r3, r3
10001388:	430b      	orrs	r3, r1
1000138a:	b29b      	uxth	r3, r3
1000138c:	b299      	uxth	r1, r3
1000138e:	2390      	movs	r3, #144	; 0x90
10001390:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10001392:	4b3b      	ldr	r3, [pc, #236]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
10001394:	2202      	movs	r2, #2
10001396:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001398:	4b3a      	ldr	r3, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139a:	4a3a      	ldr	r2, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139c:	6952      	ldr	r2, [r2, #20]
1000139e:	493a      	ldr	r1, [pc, #232]	; (10001488 <XMC_SCU_CLOCK_Init+0x150>)
100013a0:	400a      	ands	r2, r1
100013a2:	615a      	str	r2, [r3, #20]
100013a4:	4b39      	ldr	r3, [pc, #228]	; (1000148c <XMC_SCU_CLOCK_Init+0x154>)
100013a6:	617b      	str	r3, [r7, #20]
100013a8:	e000      	b.n	100013ac <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013aa:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013ac:	697b      	ldr	r3, [r7, #20]
100013ae:	3b01      	subs	r3, #1
100013b0:	617b      	str	r3, [r7, #20]
100013b2:	697b      	ldr	r3, [r7, #20]
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1f8      	bne.n	100013aa <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
100013b8:	4b32      	ldr	r3, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ba:	4a32      	ldr	r2, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013bc:	6952      	ldr	r2, [r2, #20]
100013be:	21c0      	movs	r1, #192	; 0xc0
100013c0:	0489      	lsls	r1, r1, #18
100013c2:	430a      	orrs	r2, r1
100013c4:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
100013c6:	46c0      	nop			; (mov r8, r8)
100013c8:	4b2e      	ldr	r3, [pc, #184]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ca:	695a      	ldr	r2, [r3, #20]
100013cc:	2380      	movs	r3, #128	; 0x80
100013ce:	045b      	lsls	r3, r3, #17
100013d0:	4013      	ands	r3, r2
100013d2:	d1f9      	bne.n	100013c8 <XMC_SCU_CLOCK_Init+0x90>
100013d4:	4b2e      	ldr	r3, [pc, #184]	; (10001490 <XMC_SCU_CLOCK_Init+0x158>)
100013d6:	613b      	str	r3, [r7, #16]
100013d8:	e000      	b.n	100013dc <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013da:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013dc:	693b      	ldr	r3, [r7, #16]
100013de:	3b01      	subs	r3, #1
100013e0:	613b      	str	r3, [r7, #16]
100013e2:	693b      	ldr	r3, [r7, #16]
100013e4:	2b00      	cmp	r3, #0
100013e6:	d1f8      	bne.n	100013da <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100013e8:	4b25      	ldr	r3, [pc, #148]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
100013ea:	6a1b      	ldr	r3, [r3, #32]
100013ec:	2202      	movs	r2, #2
100013ee:	4013      	ands	r3, r2
100013f0:	d1cf      	bne.n	10001392 <XMC_SCU_CLOCK_Init+0x5a>
100013f2:	e009      	b.n	10001408 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100013f4:	4a21      	ldr	r2, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f6:	4921      	ldr	r1, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f8:	2390      	movs	r3, #144	; 0x90
100013fa:	5acb      	ldrh	r3, [r1, r3]
100013fc:	b29b      	uxth	r3, r3
100013fe:	2130      	movs	r1, #48	; 0x30
10001400:	430b      	orrs	r3, r1
10001402:	b299      	uxth	r1, r3
10001404:	2390      	movs	r3, #144	; 0x90
10001406:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
10001408:	4a1c      	ldr	r2, [pc, #112]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000140a:	687b      	ldr	r3, [r7, #4]
1000140c:	79db      	ldrb	r3, [r3, #7]
1000140e:	b299      	uxth	r1, r3
10001410:	238c      	movs	r3, #140	; 0x8c
10001412:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10001414:	687b      	ldr	r3, [r7, #4]
10001416:	79db      	ldrb	r3, [r3, #7]
10001418:	2b00      	cmp	r3, #0
1000141a:	d109      	bne.n	10001430 <XMC_SCU_CLOCK_Init+0xf8>
1000141c:	4b1d      	ldr	r3, [pc, #116]	; (10001494 <XMC_SCU_CLOCK_Init+0x15c>)
1000141e:	60fb      	str	r3, [r7, #12]
10001420:	e000      	b.n	10001424 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001422:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001424:	68fb      	ldr	r3, [r7, #12]
10001426:	3b01      	subs	r3, #1
10001428:	60fb      	str	r3, [r7, #12]
1000142a:	68fb      	ldr	r3, [r7, #12]
1000142c:	2b00      	cmp	r3, #0
1000142e:	d1f8      	bne.n	10001422 <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001430:	4b14      	ldr	r3, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001432:	4a14      	ldr	r2, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001434:	69d2      	ldr	r2, [r2, #28]
10001436:	4918      	ldr	r1, [pc, #96]	; (10001498 <XMC_SCU_CLOCK_Init+0x160>)
10001438:	400a      	ands	r2, r1
                    config->dclk_src;
1000143a:	6879      	ldr	r1, [r7, #4]
1000143c:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000143e:	430a      	orrs	r2, r1
10001440:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001442:	4a10      	ldr	r2, [pc, #64]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001444:	4b0f      	ldr	r3, [pc, #60]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001446:	681b      	ldr	r3, [r3, #0]
10001448:	4914      	ldr	r1, [pc, #80]	; (1000149c <XMC_SCU_CLOCK_Init+0x164>)
1000144a:	4019      	ands	r1, r3
                   config->rtc_src |
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001450:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001452:	687b      	ldr	r3, [r7, #4]
10001454:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001456:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001458:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000145a:	f7ff ff53 	bl	10001304 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	789b      	ldrb	r3, [r3, #2]
10001462:	1c1a      	adds	r2, r3, #0
10001464:	687b      	ldr	r3, [r7, #4]
10001466:	881b      	ldrh	r3, [r3, #0]
10001468:	1c10      	adds	r0, r2, #0
1000146a:	1c19      	adds	r1, r3, #0
1000146c:	f000 f844 	bl	100014f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001470:	46bd      	mov	sp, r7
10001472:	b006      	add	sp, #24
10001474:	bd80      	pop	{r7, pc}
10001476:	46c0      	nop			; (mov r8, r8)
10001478:	01312d00 	.word	0x01312d00
1000147c:	40011000 	.word	0x40011000
10001480:	40010038 	.word	0x40010038
10001484:	40010300 	.word	0x40010300
10001488:	fdffffff 	.word	0xfdffffff
1000148c:	0000021a 	.word	0x0000021a
10001490:	00000a7d 	.word	0x00000a7d
10001494:	00632ea0 	.word	0x00632ea0
10001498:	fffffdff 	.word	0xfffffdff
1000149c:	fff0ffff 	.word	0xfff0ffff

100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014a0:	b580      	push	{r7, lr}
100014a2:	b082      	sub	sp, #8
100014a4:	af00      	add	r7, sp, #0
100014a6:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
100014a8:	f7ff ff36 	bl	10001318 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100014ac:	4b08      	ldr	r3, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014ae:	4a08      	ldr	r2, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014b0:	6911      	ldr	r1, [r2, #16]
100014b2:	687a      	ldr	r2, [r7, #4]
100014b4:	430a      	orrs	r2, r1
100014b6:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014b8:	46c0      	nop			; (mov r8, r8)
100014ba:	4b05      	ldr	r3, [pc, #20]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014bc:	681a      	ldr	r2, [r3, #0]
100014be:	2380      	movs	r3, #128	; 0x80
100014c0:	05db      	lsls	r3, r3, #23
100014c2:	4013      	ands	r3, r2
100014c4:	d1f9      	bne.n	100014ba <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100014c6:	f7ff ff1d 	bl	10001304 <XMC_SCU_LockProtectedBits>
}
100014ca:	46bd      	mov	sp, r7
100014cc:	b002      	add	sp, #8
100014ce:	bd80      	pop	{r7, pc}
100014d0:	40010300 	.word	0x40010300

100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014d4:	b580      	push	{r7, lr}
100014d6:	b082      	sub	sp, #8
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
100014dc:	4b05      	ldr	r3, [pc, #20]	; (100014f4 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x20>)
100014de:	689b      	ldr	r3, [r3, #8]
100014e0:	687a      	ldr	r2, [r7, #4]
100014e2:	4013      	ands	r3, r2
100014e4:	1e5a      	subs	r2, r3, #1
100014e6:	4193      	sbcs	r3, r2
100014e8:	b2db      	uxtb	r3, r3
}
100014ea:	1c18      	adds	r0, r3, #0
100014ec:	46bd      	mov	sp, r7
100014ee:	b002      	add	sp, #8
100014f0:	bd80      	pop	{r7, pc}
100014f2:	46c0      	nop			; (mov r8, r8)
100014f4:	40010300 	.word	0x40010300

100014f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
100014f8:	b580      	push	{r7, lr}
100014fa:	b084      	sub	sp, #16
100014fc:	af00      	add	r7, sp, #0
100014fe:	6078      	str	r0, [r7, #4]
10001500:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10001502:	f7ff ff09 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001506:	4b27      	ldr	r3, [pc, #156]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001508:	681a      	ldr	r2, [r3, #0]
1000150a:	23ff      	movs	r3, #255	; 0xff
1000150c:	021b      	lsls	r3, r3, #8
1000150e:	4013      	ands	r3, r2
10001510:	0a1b      	lsrs	r3, r3, #8
10001512:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001514:	4b23      	ldr	r3, [pc, #140]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001516:	4a23      	ldr	r2, [pc, #140]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001518:	69d2      	ldr	r2, [r2, #28]
1000151a:	2103      	movs	r1, #3
1000151c:	438a      	bics	r2, r1
1000151e:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
10001520:	683a      	ldr	r2, [r7, #0]
10001522:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001524:	430a      	orrs	r2, r1
10001526:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001528:	4b1e      	ldr	r3, [pc, #120]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000152a:	4a1e      	ldr	r2, [pc, #120]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000152c:	6812      	ldr	r2, [r2, #0]
1000152e:	491e      	ldr	r1, [pc, #120]	; (100015a8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
10001530:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001532:	683a      	ldr	r2, [r7, #0]
10001534:	20ff      	movs	r0, #255	; 0xff
10001536:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001538:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
1000153a:	491c      	ldr	r1, [pc, #112]	; (100015ac <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000153c:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000153e:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001540:	46c0      	nop			; (mov r8, r8)
10001542:	4b18      	ldr	r3, [pc, #96]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001544:	681a      	ldr	r2, [r3, #0]
10001546:	2380      	movs	r3, #128	; 0x80
10001548:	05db      	lsls	r3, r3, #23
1000154a:	4013      	ands	r3, r2
1000154c:	d1f9      	bne.n	10001542 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
1000154e:	68fa      	ldr	r2, [r7, #12]
10001550:	687b      	ldr	r3, [r7, #4]
10001552:	429a      	cmp	r2, r3
10001554:	d806      	bhi.n	10001564 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001556:	68fa      	ldr	r2, [r7, #12]
10001558:	687b      	ldr	r3, [r7, #4]
1000155a:	1c10      	adds	r0, r2, #0
1000155c:	1c19      	adds	r1, r3, #0
1000155e:	f000 f853 	bl	10001608 <XMC_SCU_CLOCK_lFrequencyDownScaling>
10001562:	e005      	b.n	10001570 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001564:	68fa      	ldr	r2, [r7, #12]
10001566:	687b      	ldr	r3, [r7, #4]
10001568:	1c10      	adds	r0, r2, #0
1000156a:	1c19      	adds	r1, r3, #0
1000156c:	f000 f822 	bl	100015b4 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001570:	4b0c      	ldr	r3, [pc, #48]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001572:	4a0c      	ldr	r2, [pc, #48]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001574:	6812      	ldr	r2, [r2, #0]
10001576:	490e      	ldr	r1, [pc, #56]	; (100015b0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001578:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000157a:	687a      	ldr	r2, [r7, #4]
1000157c:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000157e:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001580:	490a      	ldr	r1, [pc, #40]	; (100015ac <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001582:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001584:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001586:	46c0      	nop			; (mov r8, r8)
10001588:	4b06      	ldr	r3, [pc, #24]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000158a:	681a      	ldr	r2, [r3, #0]
1000158c:	2380      	movs	r3, #128	; 0x80
1000158e:	05db      	lsls	r3, r3, #23
10001590:	4013      	ands	r3, r2
10001592:	d1f9      	bne.n	10001588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
10001594:	f7ff feb6 	bl	10001304 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001598:	f7ff fd8a 	bl	100010b0 <SystemCoreClockUpdate>

}
1000159c:	46bd      	mov	sp, r7
1000159e:	b004      	add	sp, #16
100015a0:	bd80      	pop	{r7, pc}
100015a2:	46c0      	nop			; (mov r8, r8)
100015a4:	40010300 	.word	0x40010300
100015a8:	c00fff00 	.word	0xc00fff00
100015ac:	3ff00000 	.word	0x3ff00000
100015b0:	c00f00ff 	.word	0xc00f00ff

100015b4 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015b4:	b580      	push	{r7, lr}
100015b6:	b082      	sub	sp, #8
100015b8:	af00      	add	r7, sp, #0
100015ba:	6078      	str	r0, [r7, #4]
100015bc:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100015be:	e014      	b.n	100015ea <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100015c0:	687b      	ldr	r3, [r7, #4]
100015c2:	089b      	lsrs	r3, r3, #2
100015c4:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015c6:	4b0d      	ldr	r3, [pc, #52]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015c8:	4a0c      	ldr	r2, [pc, #48]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015ca:	6812      	ldr	r2, [r2, #0]
100015cc:	490c      	ldr	r1, [pc, #48]	; (10001600 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100015ce:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015d0:	687a      	ldr	r2, [r7, #4]
100015d2:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015d4:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015d6:	490b      	ldr	r1, [pc, #44]	; (10001604 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
100015d8:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015da:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015dc:	46c0      	nop			; (mov r8, r8)
100015de:	4b07      	ldr	r3, [pc, #28]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015e0:	681a      	ldr	r2, [r3, #0]
100015e2:	2380      	movs	r3, #128	; 0x80
100015e4:	05db      	lsls	r3, r3, #23
100015e6:	4013      	ands	r3, r2
100015e8:	d1f9      	bne.n	100015de <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100015ea:	683b      	ldr	r3, [r7, #0]
100015ec:	009a      	lsls	r2, r3, #2
100015ee:	687b      	ldr	r3, [r7, #4]
100015f0:	429a      	cmp	r2, r3
100015f2:	d3e5      	bcc.n	100015c0 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100015f4:	46bd      	mov	sp, r7
100015f6:	b002      	add	sp, #8
100015f8:	bd80      	pop	{r7, pc}
100015fa:	46c0      	nop			; (mov r8, r8)
100015fc:	40010300 	.word	0x40010300
10001600:	c00f00ff 	.word	0xc00f00ff
10001604:	3ff00000 	.word	0x3ff00000

10001608 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001608:	b580      	push	{r7, lr}
1000160a:	b082      	sub	sp, #8
1000160c:	af00      	add	r7, sp, #0
1000160e:	6078      	str	r0, [r7, #4]
10001610:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
10001612:	e019      	b.n	10001648 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
10001614:	687b      	ldr	r3, [r7, #4]
10001616:	2b00      	cmp	r3, #0
10001618:	d101      	bne.n	1000161e <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
1000161a:	2301      	movs	r3, #1
1000161c:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000161e:	687b      	ldr	r3, [r7, #4]
10001620:	009b      	lsls	r3, r3, #2
10001622:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001624:	4b0c      	ldr	r3, [pc, #48]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001626:	4a0c      	ldr	r2, [pc, #48]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001628:	6812      	ldr	r2, [r2, #0]
1000162a:	490c      	ldr	r1, [pc, #48]	; (1000165c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
1000162c:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000162e:	687a      	ldr	r2, [r7, #4]
10001630:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001632:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001634:	490a      	ldr	r1, [pc, #40]	; (10001660 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001636:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001638:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000163a:	46c0      	nop			; (mov r8, r8)
1000163c:	4b06      	ldr	r3, [pc, #24]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000163e:	681a      	ldr	r2, [r3, #0]
10001640:	2380      	movs	r3, #128	; 0x80
10001642:	05db      	lsls	r3, r3, #23
10001644:	4013      	ands	r3, r2
10001646:	d1f9      	bne.n	1000163c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001648:	687b      	ldr	r3, [r7, #4]
1000164a:	009a      	lsls	r2, r3, #2
1000164c:	683b      	ldr	r3, [r7, #0]
1000164e:	429a      	cmp	r2, r3
10001650:	d3e0      	bcc.n	10001614 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
10001652:	46bd      	mov	sp, r7
10001654:	b002      	add	sp, #8
10001656:	bd80      	pop	{r7, pc}
10001658:	40010300 	.word	0x40010300
1000165c:	c00f00ff 	.word	0xc00f00ff
10001660:	3ff00000 	.word	0x3ff00000

10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10001664:	b580      	push	{r7, lr}
10001666:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001668:	4b02      	ldr	r3, [pc, #8]	; (10001674 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
1000166a:	681b      	ldr	r3, [r3, #0]
}
1000166c:	1c18      	adds	r0, r3, #0
1000166e:	46bd      	mov	sp, r7
10001670:	bd80      	pop	{r7, pc}
10001672:	46c0      	nop			; (mov r8, r8)
10001674:	20003ffc 	.word	0x20003ffc

10001678 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10001678:	b580      	push	{r7, lr}
1000167a:	b082      	sub	sp, #8
1000167c:	af00      	add	r7, sp, #0
1000167e:	1c02      	adds	r2, r0, #0
10001680:	1dfb      	adds	r3, r7, #7
10001682:	701a      	strb	r2, [r3, #0]
10001684:	1d3b      	adds	r3, r7, #4
10001686:	1c0a      	adds	r2, r1, #0
10001688:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
1000168a:	1d3b      	adds	r3, r7, #4
1000168c:	1d3a      	adds	r2, r7, #4
1000168e:	8812      	ldrh	r2, [r2, #0]
10001690:	2103      	movs	r1, #3
10001692:	400a      	ands	r2, r1
10001694:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001696:	1dfb      	adds	r3, r7, #7
10001698:	781b      	ldrb	r3, [r3, #0]
1000169a:	2b0f      	cmp	r3, #15
1000169c:	d813      	bhi.n	100016c6 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000169e:	4b18      	ldr	r3, [pc, #96]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016a0:	4a17      	ldr	r2, [pc, #92]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
100016a4:	1df9      	adds	r1, r7, #7
100016a6:	7809      	ldrb	r1, [r1, #0]
100016a8:	0049      	lsls	r1, r1, #1
100016aa:	1c08      	adds	r0, r1, #0
100016ac:	2103      	movs	r1, #3
100016ae:	4081      	lsls	r1, r0
100016b0:	43c9      	mvns	r1, r1
100016b2:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100016b4:	1d39      	adds	r1, r7, #4
100016b6:	8809      	ldrh	r1, [r1, #0]
100016b8:	1df8      	adds	r0, r7, #7
100016ba:	7800      	ldrb	r0, [r0, #0]
100016bc:	0040      	lsls	r0, r0, #1
100016be:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016c0:	430a      	orrs	r2, r1
100016c2:	66da      	str	r2, [r3, #108]	; 0x6c
100016c4:	e018      	b.n	100016f8 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100016c6:	1dfb      	adds	r3, r7, #7
100016c8:	1dfa      	adds	r2, r7, #7
100016ca:	7812      	ldrb	r2, [r2, #0]
100016cc:	210f      	movs	r1, #15
100016ce:	400a      	ands	r2, r1
100016d0:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016d2:	4b0b      	ldr	r3, [pc, #44]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016d4:	4a0a      	ldr	r2, [pc, #40]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
100016d8:	1df9      	adds	r1, r7, #7
100016da:	7809      	ldrb	r1, [r1, #0]
100016dc:	0049      	lsls	r1, r1, #1
100016de:	1c08      	adds	r0, r1, #0
100016e0:	2103      	movs	r1, #3
100016e2:	4081      	lsls	r1, r0
100016e4:	43c9      	mvns	r1, r1
100016e6:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100016e8:	1d39      	adds	r1, r7, #4
100016ea:	8809      	ldrh	r1, [r1, #0]
100016ec:	1df8      	adds	r0, r7, #7
100016ee:	7800      	ldrb	r0, [r0, #0]
100016f0:	0040      	lsls	r0, r0, #1
100016f2:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016f4:	430a      	orrs	r2, r1
100016f6:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100016f8:	46bd      	mov	sp, r7
100016fa:	b002      	add	sp, #8
100016fc:	bd80      	pop	{r7, pc}
100016fe:	46c0      	nop			; (mov r8, r8)
10001700:	40010000 	.word	0x40010000

10001704 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
10001704:	b590      	push	{r4, r7, lr}
10001706:	b083      	sub	sp, #12
10001708:	af00      	add	r7, sp, #0
1000170a:	6078      	str	r0, [r7, #4]
1000170c:	1c08      	adds	r0, r1, #0
1000170e:	1c11      	adds	r1, r2, #0
10001710:	1cfb      	adds	r3, r7, #3
10001712:	1c02      	adds	r2, r0, #0
10001714:	701a      	strb	r2, [r3, #0]
10001716:	1cbb      	adds	r3, r7, #2
10001718:	1c0a      	adds	r2, r1, #0
1000171a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
1000171c:	1cfb      	adds	r3, r7, #3
1000171e:	781b      	ldrb	r3, [r3, #0]
10001720:	089b      	lsrs	r3, r3, #2
10001722:	b2db      	uxtb	r3, r3
10001724:	1c18      	adds	r0, r3, #0
10001726:	1cfb      	adds	r3, r7, #3
10001728:	781b      	ldrb	r3, [r3, #0]
1000172a:	089b      	lsrs	r3, r3, #2
1000172c:	b2db      	uxtb	r3, r3
1000172e:	1c1a      	adds	r2, r3, #0
10001730:	687b      	ldr	r3, [r7, #4]
10001732:	3204      	adds	r2, #4
10001734:	0092      	lsls	r2, r2, #2
10001736:	58d3      	ldr	r3, [r2, r3]
10001738:	1cfa      	adds	r2, r7, #3
1000173a:	7812      	ldrb	r2, [r2, #0]
1000173c:	2103      	movs	r1, #3
1000173e:	400a      	ands	r2, r1
10001740:	00d2      	lsls	r2, r2, #3
10001742:	1c11      	adds	r1, r2, #0
10001744:	22fc      	movs	r2, #252	; 0xfc
10001746:	408a      	lsls	r2, r1
10001748:	43d2      	mvns	r2, r2
1000174a:	401a      	ands	r2, r3
1000174c:	1c11      	adds	r1, r2, #0
1000174e:	687b      	ldr	r3, [r7, #4]
10001750:	1d02      	adds	r2, r0, #4
10001752:	0092      	lsls	r2, r2, #2
10001754:	50d1      	str	r1, [r2, r3]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
10001756:	1cfb      	adds	r3, r7, #3
10001758:	781b      	ldrb	r3, [r3, #0]
1000175a:	089b      	lsrs	r3, r3, #2
1000175c:	b2db      	uxtb	r3, r3
1000175e:	1c1c      	adds	r4, r3, #0
10001760:	1cfb      	adds	r3, r7, #3
10001762:	781b      	ldrb	r3, [r3, #0]
10001764:	089b      	lsrs	r3, r3, #2
10001766:	b2db      	uxtb	r3, r3
10001768:	1c1a      	adds	r2, r3, #0
1000176a:	687b      	ldr	r3, [r7, #4]
1000176c:	3204      	adds	r2, #4
1000176e:	0092      	lsls	r2, r2, #2
10001770:	58d2      	ldr	r2, [r2, r3]
10001772:	1cbb      	adds	r3, r7, #2
10001774:	781b      	ldrb	r3, [r3, #0]
10001776:	1cf9      	adds	r1, r7, #3
10001778:	7809      	ldrb	r1, [r1, #0]
1000177a:	2003      	movs	r0, #3
1000177c:	4001      	ands	r1, r0
1000177e:	00c9      	lsls	r1, r1, #3
10001780:	408b      	lsls	r3, r1
10001782:	431a      	orrs	r2, r3
10001784:	1c11      	adds	r1, r2, #0
10001786:	687b      	ldr	r3, [r7, #4]
10001788:	1d22      	adds	r2, r4, #4
1000178a:	0092      	lsls	r2, r2, #2
1000178c:	50d1      	str	r1, [r2, r3]
}
1000178e:	46bd      	mov	sp, r7
10001790:	b003      	add	sp, #12
10001792:	bd90      	pop	{r4, r7, pc}

10001794 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001794:	b580      	push	{r7, lr}
10001796:	b082      	sub	sp, #8
10001798:	af00      	add	r7, sp, #0
1000179a:	6078      	str	r0, [r7, #4]
1000179c:	1c08      	adds	r0, r1, #0
1000179e:	1c11      	adds	r1, r2, #0
100017a0:	1cfb      	adds	r3, r7, #3
100017a2:	1c02      	adds	r2, r0, #0
100017a4:	701a      	strb	r2, [r3, #0]
100017a6:	1cbb      	adds	r3, r7, #2
100017a8:	1c0a      	adds	r2, r1, #0
100017aa:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100017ac:	687b      	ldr	r3, [r7, #4]
100017ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100017b0:	1cfa      	adds	r2, r7, #3
100017b2:	7812      	ldrb	r2, [r2, #0]
100017b4:	0052      	lsls	r2, r2, #1
100017b6:	1c11      	adds	r1, r2, #0
100017b8:	2203      	movs	r2, #3
100017ba:	408a      	lsls	r2, r1
100017bc:	43d2      	mvns	r2, r2
100017be:	401a      	ands	r2, r3
100017c0:	687b      	ldr	r3, [r7, #4]
100017c2:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100017c4:	687b      	ldr	r3, [r7, #4]
100017c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100017c8:	1cbb      	adds	r3, r7, #2
100017ca:	781b      	ldrb	r3, [r3, #0]
100017cc:	1cf9      	adds	r1, r7, #3
100017ce:	7809      	ldrb	r1, [r1, #0]
100017d0:	0049      	lsls	r1, r1, #1
100017d2:	408b      	lsls	r3, r1
100017d4:	431a      	orrs	r2, r3
100017d6:	687b      	ldr	r3, [r7, #4]
100017d8:	675a      	str	r2, [r3, #116]	; 0x74
}
100017da:	46bd      	mov	sp, r7
100017dc:	b002      	add	sp, #8
100017de:	bd80      	pop	{r7, pc}

100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100017e0:	b580      	push	{r7, lr}
100017e2:	b082      	sub	sp, #8
100017e4:	af00      	add	r7, sp, #0
100017e6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100017e8:	687b      	ldr	r3, [r7, #4]
100017ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100017ec:	b2db      	uxtb	r3, r3
100017ee:	227f      	movs	r2, #127	; 0x7f
100017f0:	4393      	bics	r3, r2
100017f2:	b2db      	uxtb	r3, r3
}
100017f4:	1c18      	adds	r0, r3, #0
100017f6:	46bd      	mov	sp, r7
100017f8:	b002      	add	sp, #8
100017fa:	bd80      	pop	{r7, pc}

100017fc <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
100017fc:	b580      	push	{r7, lr}
100017fe:	b082      	sub	sp, #8
10001800:	af00      	add	r7, sp, #0
10001802:	6078      	str	r0, [r7, #4]
10001804:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10001806:	687b      	ldr	r3, [r7, #4]
10001808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000180a:	683b      	ldr	r3, [r7, #0]
1000180c:	431a      	orrs	r2, r3
1000180e:	687b      	ldr	r3, [r7, #4]
10001810:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001812:	46bd      	mov	sp, r7
10001814:	b002      	add	sp, #8
10001816:	bd80      	pop	{r7, pc}

10001818 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
10001818:	b580      	push	{r7, lr}
1000181a:	b084      	sub	sp, #16
1000181c:	af00      	add	r7, sp, #0
1000181e:	60f8      	str	r0, [r7, #12]
10001820:	60b9      	str	r1, [r7, #8]
10001822:	1dfb      	adds	r3, r7, #7
10001824:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_Enable(channel);
10001826:	68fb      	ldr	r3, [r7, #12]
10001828:	1c18      	adds	r0, r3, #0
1000182a:	f000 fb55 	bl	10001ed8 <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
1000182e:	68fb      	ldr	r3, [r7, #12]
10001830:	4a12      	ldr	r2, [pc, #72]	; (1000187c <XMC_I2C_CH_InitEx+0x64>)
10001832:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
10001834:	68bb      	ldr	r3, [r7, #8]
10001836:	88db      	ldrh	r3, [r3, #6]
10001838:	68fa      	ldr	r2, [r7, #12]
1000183a:	1c10      	adds	r0, r2, #0
1000183c:	1c19      	adds	r1, r3, #0
1000183e:	f000 f81f 	bl	10001880 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
10001842:	1dfb      	adds	r3, r7, #7
10001844:	781b      	ldrb	r3, [r3, #0]
10001846:	2b00      	cmp	r3, #0
10001848:	d009      	beq.n	1000185e <XMC_I2C_CH_InitEx+0x46>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
1000184a:	68bb      	ldr	r3, [r7, #8]
1000184c:	681a      	ldr	r2, [r3, #0]
1000184e:	68bb      	ldr	r3, [r7, #8]
10001850:	791b      	ldrb	r3, [r3, #4]
10001852:	68f9      	ldr	r1, [r7, #12]
10001854:	1c08      	adds	r0, r1, #0
10001856:	1c11      	adds	r1, r2, #0
10001858:	1c1a      	adds	r2, r3, #0
1000185a:	f000 f843 	bl	100018e4 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
1000185e:	68fb      	ldr	r3, [r7, #12]
10001860:	22a0      	movs	r2, #160	; 0xa0
10001862:	00d2      	lsls	r2, r2, #3
10001864:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
10001866:	68fb      	ldr	r3, [r7, #12]
10001868:	2201      	movs	r2, #1
1000186a:	4252      	negs	r2, r2
1000186c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
1000186e:	68fb      	ldr	r3, [r7, #12]
10001870:	2200      	movs	r2, #0
10001872:	641a      	str	r2, [r3, #64]	; 0x40
}
10001874:	46bd      	mov	sp, r7
10001876:	b004      	add	sp, #16
10001878:	bd80      	pop	{r7, pc}
1000187a:	46c0      	nop			; (mov r8, r8)
1000187c:	073f0303 	.word	0x073f0303

10001880 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
10001880:	b580      	push	{r7, lr}
10001882:	b082      	sub	sp, #8
10001884:	af00      	add	r7, sp, #0
10001886:	6078      	str	r0, [r7, #4]
10001888:	1c0a      	adds	r2, r1, #0
1000188a:	1cbb      	adds	r3, r7, #2
1000188c:	801a      	strh	r2, [r3, #0]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
1000188e:	1cbb      	adds	r3, r7, #2
10001890:	881a      	ldrh	r2, [r3, #0]
10001892:	23f8      	movs	r3, #248	; 0xf8
10001894:	01db      	lsls	r3, r3, #7
10001896:	401a      	ands	r2, r3
10001898:	23f0      	movs	r3, #240	; 0xf0
1000189a:	01db      	lsls	r3, r3, #7
1000189c:	429a      	cmp	r2, r3
1000189e:	d113      	bne.n	100018c8 <XMC_I2C_CH_SetSlaveAddress+0x48>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
100018a0:	687b      	ldr	r3, [r7, #4]
100018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018a4:	0c1b      	lsrs	r3, r3, #16
100018a6:	041a      	lsls	r2, r3, #16
100018a8:	1cbb      	adds	r3, r7, #2
100018aa:	881b      	ldrh	r3, [r3, #0]
100018ac:	21ff      	movs	r1, #255	; 0xff
100018ae:	400b      	ands	r3, r1
100018b0:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
100018b2:	1cbb      	adds	r3, r7, #2
100018b4:	881b      	ldrh	r3, [r3, #0]
100018b6:	005b      	lsls	r3, r3, #1
100018b8:	1c19      	adds	r1, r3, #0
100018ba:	23fe      	movs	r3, #254	; 0xfe
100018bc:	021b      	lsls	r3, r3, #8
100018be:	400b      	ands	r3, r1
100018c0:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
100018c2:	687b      	ldr	r3, [r7, #4]
100018c4:	63da      	str	r2, [r3, #60]	; 0x3c
100018c6:	e009      	b.n	100018dc <XMC_I2C_CH_SetSlaveAddress+0x5c>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
100018c8:	687b      	ldr	r3, [r7, #4]
100018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018cc:	0c1b      	lsrs	r3, r3, #16
100018ce:	041a      	lsls	r2, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
100018d0:	1cbb      	adds	r3, r7, #2
100018d2:	881b      	ldrh	r3, [r3, #0]
100018d4:	021b      	lsls	r3, r3, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
100018d6:	431a      	orrs	r2, r3
100018d8:	687b      	ldr	r3, [r7, #4]
100018da:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
100018dc:	46bd      	mov	sp, r7
100018de:	b002      	add	sp, #8
100018e0:	bd80      	pop	{r7, pc}
100018e2:	46c0      	nop			; (mov r8, r8)

100018e4 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
100018e4:	b590      	push	{r4, r7, lr}
100018e6:	b087      	sub	sp, #28
100018e8:	af00      	add	r7, sp, #0
100018ea:	60f8      	str	r0, [r7, #12]
100018ec:	60b9      	str	r1, [r7, #8]
100018ee:	1dfb      	adds	r3, r7, #7
100018f0:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
100018f2:	68bb      	ldr	r3, [r7, #8]
100018f4:	4a2b      	ldr	r2, [pc, #172]	; (100019a4 <XMC_I2C_CH_SetBaudrateEx+0xc0>)
100018f6:	4293      	cmp	r3, r2
100018f8:	d821      	bhi.n	1000193e <XMC_I2C_CH_SetBaudrateEx+0x5a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
100018fa:	68fb      	ldr	r3, [r7, #12]
100018fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018fe:	4a2a      	ldr	r2, [pc, #168]	; (100019a8 <XMC_I2C_CH_SetBaudrateEx+0xc4>)
10001900:	401a      	ands	r2, r3
10001902:	68fb      	ldr	r3, [r7, #12]
10001904:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
10001906:	1dfb      	adds	r3, r7, #7
10001908:	781b      	ldrb	r3, [r3, #0]
1000190a:	2b00      	cmp	r3, #0
1000190c:	d00b      	beq.n	10001926 <XMC_I2C_CH_SetBaudrateEx+0x42>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
1000190e:	68bb      	ldr	r3, [r7, #8]
10001910:	2217      	movs	r2, #23
10001912:	18bc      	adds	r4, r7, r2
10001914:	68fa      	ldr	r2, [r7, #12]
10001916:	1c10      	adds	r0, r2, #0
10001918:	1c19      	adds	r1, r3, #0
1000191a:	220a      	movs	r2, #10
1000191c:	f000 fb92 	bl	10002044 <XMC_USIC_CH_SetBaudrateEx>
10001920:	1c03      	adds	r3, r0, #0
10001922:	7023      	strb	r3, [r4, #0]
10001924:	e036      	b.n	10001994 <XMC_I2C_CH_SetBaudrateEx+0xb0>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
10001926:	2317      	movs	r3, #23
10001928:	18fc      	adds	r4, r7, r3
1000192a:	68fa      	ldr	r2, [r7, #12]
1000192c:	68bb      	ldr	r3, [r7, #8]
1000192e:	1c10      	adds	r0, r2, #0
10001930:	1c19      	adds	r1, r3, #0
10001932:	220a      	movs	r2, #10
10001934:	f000 fb0c 	bl	10001f50 <XMC_USIC_CH_SetBaudrate>
10001938:	1c03      	adds	r3, r0, #0
1000193a:	7023      	strb	r3, [r4, #0]
1000193c:	e02a      	b.n	10001994 <XMC_I2C_CH_SetBaudrateEx+0xb0>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000193e:	68bb      	ldr	r3, [r7, #8]
10001940:	4a1a      	ldr	r2, [pc, #104]	; (100019ac <XMC_I2C_CH_SetBaudrateEx+0xc8>)
10001942:	4293      	cmp	r3, r2
10001944:	d822      	bhi.n	1000198c <XMC_I2C_CH_SetBaudrateEx+0xa8>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
10001946:	68fb      	ldr	r3, [r7, #12]
10001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000194a:	2280      	movs	r2, #128	; 0x80
1000194c:	0292      	lsls	r2, r2, #10
1000194e:	431a      	orrs	r2, r3
10001950:	68fb      	ldr	r3, [r7, #12]
10001952:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
10001954:	1dfb      	adds	r3, r7, #7
10001956:	781b      	ldrb	r3, [r3, #0]
10001958:	2b00      	cmp	r3, #0
1000195a:	d00b      	beq.n	10001974 <XMC_I2C_CH_SetBaudrateEx+0x90>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
1000195c:	68bb      	ldr	r3, [r7, #8]
1000195e:	2217      	movs	r2, #23
10001960:	18bc      	adds	r4, r7, r2
10001962:	68fa      	ldr	r2, [r7, #12]
10001964:	1c10      	adds	r0, r2, #0
10001966:	1c19      	adds	r1, r3, #0
10001968:	2219      	movs	r2, #25
1000196a:	f000 fb6b 	bl	10002044 <XMC_USIC_CH_SetBaudrateEx>
1000196e:	1c03      	adds	r3, r0, #0
10001970:	7023      	strb	r3, [r4, #0]
10001972:	e00f      	b.n	10001994 <XMC_I2C_CH_SetBaudrateEx+0xb0>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
10001974:	2317      	movs	r3, #23
10001976:	18fc      	adds	r4, r7, r3
10001978:	68fa      	ldr	r2, [r7, #12]
1000197a:	68bb      	ldr	r3, [r7, #8]
1000197c:	1c10      	adds	r0, r2, #0
1000197e:	1c19      	adds	r1, r3, #0
10001980:	2219      	movs	r2, #25
10001982:	f000 fae5 	bl	10001f50 <XMC_USIC_CH_SetBaudrate>
10001986:	1c03      	adds	r3, r0, #0
10001988:	7023      	strb	r3, [r4, #0]
1000198a:	e003      	b.n	10001994 <XMC_I2C_CH_SetBaudrateEx+0xb0>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
1000198c:	2317      	movs	r3, #23
1000198e:	18fb      	adds	r3, r7, r3
10001990:	2201      	movs	r2, #1
10001992:	701a      	strb	r2, [r3, #0]
  }

  return (XMC_I2C_CH_STATUS_t)status;
10001994:	2317      	movs	r3, #23
10001996:	18fb      	adds	r3, r7, r3
10001998:	781b      	ldrb	r3, [r3, #0]
}
1000199a:	1c18      	adds	r0, r3, #0
1000199c:	46bd      	mov	sp, r7
1000199e:	b007      	add	sp, #28
100019a0:	bd90      	pop	{r4, r7, pc}
100019a2:	46c0      	nop			; (mov r8, r8)
100019a4:	000186a0 	.word	0x000186a0
100019a8:	fffdffff 	.word	0xfffdffff
100019ac:	00061a80 	.word	0x00061a80

100019b0 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
100019b0:	b580      	push	{r7, lr}
100019b2:	b084      	sub	sp, #16
100019b4:	af00      	add	r7, sp, #0
100019b6:	6078      	str	r0, [r7, #4]
100019b8:	1c08      	adds	r0, r1, #0
100019ba:	1c11      	adds	r1, r2, #0
100019bc:	1cbb      	adds	r3, r7, #2
100019be:	1c02      	adds	r2, r0, #0
100019c0:	801a      	strh	r2, [r3, #0]
100019c2:	1c7b      	adds	r3, r7, #1
100019c4:	1c0a      	adds	r2, r1, #0
100019c6:	701a      	strb	r2, [r3, #0]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
100019c8:	1cbb      	adds	r3, r7, #2
100019ca:	881b      	ldrh	r3, [r3, #0]
100019cc:	2280      	movs	r2, #128	; 0x80
100019ce:	00d2      	lsls	r2, r2, #3
100019d0:	4313      	orrs	r3, r2
100019d2:	b29b      	uxth	r3, r3
100019d4:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
100019d6:	1c7b      	adds	r3, r7, #1
100019d8:	781b      	ldrb	r3, [r3, #0]
100019da:	2b01      	cmp	r3, #1
100019dc:	d103      	bne.n	100019e6 <XMC_I2C_CH_MasterStart+0x36>
  {
    temp |= 0x1U;
100019de:	68fb      	ldr	r3, [r7, #12]
100019e0:	2201      	movs	r2, #1
100019e2:	4313      	orrs	r3, r2
100019e4:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
100019e6:	687a      	ldr	r2, [r7, #4]
100019e8:	2384      	movs	r3, #132	; 0x84
100019ea:	005b      	lsls	r3, r3, #1
100019ec:	58d2      	ldr	r2, [r2, r3]
100019ee:	23e0      	movs	r3, #224	; 0xe0
100019f0:	04db      	lsls	r3, r3, #19
100019f2:	4013      	ands	r3, r2
100019f4:	d113      	bne.n	10001a1e <XMC_I2C_CH_MasterStart+0x6e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100019f6:	46c0      	nop			; (mov r8, r8)
100019f8:	687b      	ldr	r3, [r7, #4]
100019fa:	1c18      	adds	r0, r3, #0
100019fc:	f7ff fef0 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001a00:	1e03      	subs	r3, r0, #0
10001a02:	2b80      	cmp	r3, #128	; 0x80
10001a04:	d0f8      	beq.n	100019f8 <XMC_I2C_CH_MasterStart+0x48>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001a06:	687a      	ldr	r2, [r7, #4]
10001a08:	2380      	movs	r3, #128	; 0x80
10001a0a:	019b      	lsls	r3, r3, #6
10001a0c:	1c10      	adds	r0, r2, #0
10001a0e:	1c19      	adds	r1, r3, #0
10001a10:	f7ff fef4 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
10001a14:	687b      	ldr	r3, [r7, #4]
10001a16:	2180      	movs	r1, #128	; 0x80
10001a18:	68fa      	ldr	r2, [r7, #12]
10001a1a:	505a      	str	r2, [r3, r1]
10001a1c:	e004      	b.n	10001a28 <XMC_I2C_CH_MasterStart+0x78>
  }
  else
  {
    channel->IN[0U] = temp;
10001a1e:	687a      	ldr	r2, [r7, #4]
10001a20:	23c0      	movs	r3, #192	; 0xc0
10001a22:	005b      	lsls	r3, r3, #1
10001a24:	68f9      	ldr	r1, [r7, #12]
10001a26:	50d1      	str	r1, [r2, r3]
  }
}
10001a28:	46bd      	mov	sp, r7
10001a2a:	b004      	add	sp, #16
10001a2c:	bd80      	pop	{r7, pc}
10001a2e:	46c0      	nop			; (mov r8, r8)

10001a30 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
10001a30:	b580      	push	{r7, lr}
10001a32:	b084      	sub	sp, #16
10001a34:	af00      	add	r7, sp, #0
10001a36:	6078      	str	r0, [r7, #4]
10001a38:	1c08      	adds	r0, r1, #0
10001a3a:	1c11      	adds	r1, r2, #0
10001a3c:	1cbb      	adds	r3, r7, #2
10001a3e:	1c02      	adds	r2, r0, #0
10001a40:	801a      	strh	r2, [r3, #0]
10001a42:	1c7b      	adds	r3, r7, #1
10001a44:	1c0a      	adds	r2, r1, #0
10001a46:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
10001a48:	1cbb      	adds	r3, r7, #2
10001a4a:	881b      	ldrh	r3, [r3, #0]
10001a4c:	22a0      	movs	r2, #160	; 0xa0
10001a4e:	00d2      	lsls	r2, r2, #3
10001a50:	4313      	orrs	r3, r2
10001a52:	b29b      	uxth	r3, r3
10001a54:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
10001a56:	1c7b      	adds	r3, r7, #1
10001a58:	781b      	ldrb	r3, [r3, #0]
10001a5a:	2b01      	cmp	r3, #1
10001a5c:	d103      	bne.n	10001a66 <XMC_I2C_CH_MasterRepeatedStart+0x36>
  {
    tmp |= 0x1U;
10001a5e:	68fb      	ldr	r3, [r7, #12]
10001a60:	2201      	movs	r2, #1
10001a62:	4313      	orrs	r3, r2
10001a64:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001a66:	687a      	ldr	r2, [r7, #4]
10001a68:	2384      	movs	r3, #132	; 0x84
10001a6a:	005b      	lsls	r3, r3, #1
10001a6c:	58d2      	ldr	r2, [r2, r3]
10001a6e:	23e0      	movs	r3, #224	; 0xe0
10001a70:	04db      	lsls	r3, r3, #19
10001a72:	4013      	ands	r3, r2
10001a74:	d113      	bne.n	10001a9e <XMC_I2C_CH_MasterRepeatedStart+0x6e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001a76:	46c0      	nop			; (mov r8, r8)
10001a78:	687b      	ldr	r3, [r7, #4]
10001a7a:	1c18      	adds	r0, r3, #0
10001a7c:	f7ff feb0 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001a80:	1e03      	subs	r3, r0, #0
10001a82:	2b80      	cmp	r3, #128	; 0x80
10001a84:	d0f8      	beq.n	10001a78 <XMC_I2C_CH_MasterRepeatedStart+0x48>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001a86:	687a      	ldr	r2, [r7, #4]
10001a88:	2380      	movs	r3, #128	; 0x80
10001a8a:	019b      	lsls	r3, r3, #6
10001a8c:	1c10      	adds	r0, r2, #0
10001a8e:	1c19      	adds	r1, r3, #0
10001a90:	f7ff feb4 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
10001a94:	687b      	ldr	r3, [r7, #4]
10001a96:	2180      	movs	r1, #128	; 0x80
10001a98:	68fa      	ldr	r2, [r7, #12]
10001a9a:	505a      	str	r2, [r3, r1]
10001a9c:	e004      	b.n	10001aa8 <XMC_I2C_CH_MasterRepeatedStart+0x78>
  }
  else
  {
    channel->IN[0U] = tmp;
10001a9e:	687a      	ldr	r2, [r7, #4]
10001aa0:	23c0      	movs	r3, #192	; 0xc0
10001aa2:	005b      	lsls	r3, r3, #1
10001aa4:	68f9      	ldr	r1, [r7, #12]
10001aa6:	50d1      	str	r1, [r2, r3]
  }
}
10001aa8:	46bd      	mov	sp, r7
10001aaa:	b004      	add	sp, #16
10001aac:	bd80      	pop	{r7, pc}
10001aae:	46c0      	nop			; (mov r8, r8)

10001ab0 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
10001ab0:	b580      	push	{r7, lr}
10001ab2:	b082      	sub	sp, #8
10001ab4:	af00      	add	r7, sp, #0
10001ab6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001ab8:	687a      	ldr	r2, [r7, #4]
10001aba:	2384      	movs	r3, #132	; 0x84
10001abc:	005b      	lsls	r3, r3, #1
10001abe:	58d2      	ldr	r2, [r2, r3]
10001ac0:	23e0      	movs	r3, #224	; 0xe0
10001ac2:	04db      	lsls	r3, r3, #19
10001ac4:	4013      	ands	r3, r2
10001ac6:	d114      	bne.n	10001af2 <XMC_I2C_CH_MasterStop+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001ac8:	46c0      	nop			; (mov r8, r8)
10001aca:	687b      	ldr	r3, [r7, #4]
10001acc:	1c18      	adds	r0, r3, #0
10001ace:	f7ff fe87 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001ad2:	1e03      	subs	r3, r0, #0
10001ad4:	2b80      	cmp	r3, #128	; 0x80
10001ad6:	d0f8      	beq.n	10001aca <XMC_I2C_CH_MasterStop+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001ad8:	687a      	ldr	r2, [r7, #4]
10001ada:	2380      	movs	r3, #128	; 0x80
10001adc:	019b      	lsls	r3, r3, #6
10001ade:	1c10      	adds	r0, r2, #0
10001ae0:	1c19      	adds	r1, r3, #0
10001ae2:	f7ff fe8b 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
10001ae6:	687b      	ldr	r3, [r7, #4]
10001ae8:	2180      	movs	r1, #128	; 0x80
10001aea:	22c0      	movs	r2, #192	; 0xc0
10001aec:	00d2      	lsls	r2, r2, #3
10001aee:	505a      	str	r2, [r3, r1]
10001af0:	e005      	b.n	10001afe <XMC_I2C_CH_MasterStop+0x4e>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
10001af2:	687a      	ldr	r2, [r7, #4]
10001af4:	23c0      	movs	r3, #192	; 0xc0
10001af6:	005b      	lsls	r3, r3, #1
10001af8:	21c0      	movs	r1, #192	; 0xc0
10001afa:	00c9      	lsls	r1, r1, #3
10001afc:	50d1      	str	r1, [r2, r3]
  }
}
10001afe:	46bd      	mov	sp, r7
10001b00:	b002      	add	sp, #8
10001b02:	bd80      	pop	{r7, pc}

10001b04 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
10001b04:	b580      	push	{r7, lr}
10001b06:	b082      	sub	sp, #8
10001b08:	af00      	add	r7, sp, #0
10001b0a:	6078      	str	r0, [r7, #4]
10001b0c:	1c0a      	adds	r2, r1, #0
10001b0e:	1cfb      	adds	r3, r7, #3
10001b10:	701a      	strb	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001b12:	687a      	ldr	r2, [r7, #4]
10001b14:	2384      	movs	r3, #132	; 0x84
10001b16:	005b      	lsls	r3, r3, #1
10001b18:	58d2      	ldr	r2, [r2, r3]
10001b1a:	23e0      	movs	r3, #224	; 0xe0
10001b1c:	04db      	lsls	r3, r3, #19
10001b1e:	4013      	ands	r3, r2
10001b20:	d114      	bne.n	10001b4c <XMC_I2C_CH_MasterTransmit+0x48>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001b22:	46c0      	nop			; (mov r8, r8)
10001b24:	687b      	ldr	r3, [r7, #4]
10001b26:	1c18      	adds	r0, r3, #0
10001b28:	f7ff fe5a 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001b2c:	1e03      	subs	r3, r0, #0
10001b2e:	2b80      	cmp	r3, #128	; 0x80
10001b30:	d0f8      	beq.n	10001b24 <XMC_I2C_CH_MasterTransmit+0x20>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001b32:	687a      	ldr	r2, [r7, #4]
10001b34:	2380      	movs	r3, #128	; 0x80
10001b36:	019b      	lsls	r3, r3, #6
10001b38:	1c10      	adds	r0, r2, #0
10001b3a:	1c19      	adds	r1, r3, #0
10001b3c:	f7ff fe5e 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10001b40:	1cfb      	adds	r3, r7, #3
10001b42:	781a      	ldrb	r2, [r3, #0]
10001b44:	687b      	ldr	r3, [r7, #4]
10001b46:	2180      	movs	r1, #128	; 0x80
10001b48:	505a      	str	r2, [r3, r1]
10001b4a:	e005      	b.n	10001b58 <XMC_I2C_CH_MasterTransmit+0x54>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10001b4c:	1cfb      	adds	r3, r7, #3
10001b4e:	7819      	ldrb	r1, [r3, #0]
10001b50:	687a      	ldr	r2, [r7, #4]
10001b52:	23c0      	movs	r3, #192	; 0xc0
10001b54:	005b      	lsls	r3, r3, #1
10001b56:	50d1      	str	r1, [r2, r3]
  }
}
10001b58:	46bd      	mov	sp, r7
10001b5a:	b002      	add	sp, #8
10001b5c:	bd80      	pop	{r7, pc}
10001b5e:	46c0      	nop			; (mov r8, r8)

10001b60 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
10001b60:	b580      	push	{r7, lr}
10001b62:	b082      	sub	sp, #8
10001b64:	af00      	add	r7, sp, #0
10001b66:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001b68:	687a      	ldr	r2, [r7, #4]
10001b6a:	2384      	movs	r3, #132	; 0x84
10001b6c:	005b      	lsls	r3, r3, #1
10001b6e:	58d2      	ldr	r2, [r2, r3]
10001b70:	23e0      	movs	r3, #224	; 0xe0
10001b72:	04db      	lsls	r3, r3, #19
10001b74:	4013      	ands	r3, r2
10001b76:	d114      	bne.n	10001ba2 <XMC_I2C_CH_MasterReceiveAck+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001b78:	46c0      	nop			; (mov r8, r8)
10001b7a:	687b      	ldr	r3, [r7, #4]
10001b7c:	1c18      	adds	r0, r3, #0
10001b7e:	f7ff fe2f 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001b82:	1e03      	subs	r3, r0, #0
10001b84:	2b80      	cmp	r3, #128	; 0x80
10001b86:	d0f8      	beq.n	10001b7a <XMC_I2C_CH_MasterReceiveAck+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001b88:	687a      	ldr	r2, [r7, #4]
10001b8a:	2380      	movs	r3, #128	; 0x80
10001b8c:	019b      	lsls	r3, r3, #6
10001b8e:	1c10      	adds	r0, r2, #0
10001b90:	1c19      	adds	r1, r3, #0
10001b92:	f7ff fe33 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10001b96:	687b      	ldr	r3, [r7, #4]
10001b98:	2180      	movs	r1, #128	; 0x80
10001b9a:	2280      	movs	r2, #128	; 0x80
10001b9c:	0092      	lsls	r2, r2, #2
10001b9e:	505a      	str	r2, [r3, r1]
10001ba0:	e005      	b.n	10001bae <XMC_I2C_CH_MasterReceiveAck+0x4e>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10001ba2:	687a      	ldr	r2, [r7, #4]
10001ba4:	23c0      	movs	r3, #192	; 0xc0
10001ba6:	005b      	lsls	r3, r3, #1
10001ba8:	2180      	movs	r1, #128	; 0x80
10001baa:	0089      	lsls	r1, r1, #2
10001bac:	50d1      	str	r1, [r2, r3]
  }
}
10001bae:	46bd      	mov	sp, r7
10001bb0:	b002      	add	sp, #8
10001bb2:	bd80      	pop	{r7, pc}

10001bb4 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
10001bb4:	b580      	push	{r7, lr}
10001bb6:	b082      	sub	sp, #8
10001bb8:	af00      	add	r7, sp, #0
10001bba:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001bbc:	687a      	ldr	r2, [r7, #4]
10001bbe:	2384      	movs	r3, #132	; 0x84
10001bc0:	005b      	lsls	r3, r3, #1
10001bc2:	58d2      	ldr	r2, [r2, r3]
10001bc4:	23e0      	movs	r3, #224	; 0xe0
10001bc6:	04db      	lsls	r3, r3, #19
10001bc8:	4013      	ands	r3, r2
10001bca:	d114      	bne.n	10001bf6 <XMC_I2C_CH_MasterReceiveNack+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001bcc:	46c0      	nop			; (mov r8, r8)
10001bce:	687b      	ldr	r3, [r7, #4]
10001bd0:	1c18      	adds	r0, r3, #0
10001bd2:	f7ff fe05 	bl	100017e0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001bd6:	1e03      	subs	r3, r0, #0
10001bd8:	2b80      	cmp	r3, #128	; 0x80
10001bda:	d0f8      	beq.n	10001bce <XMC_I2C_CH_MasterReceiveNack+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001bdc:	687a      	ldr	r2, [r7, #4]
10001bde:	2380      	movs	r3, #128	; 0x80
10001be0:	019b      	lsls	r3, r3, #6
10001be2:	1c10      	adds	r0, r2, #0
10001be4:	1c19      	adds	r1, r3, #0
10001be6:	f7ff fe09 	bl	100017fc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
10001bea:	687b      	ldr	r3, [r7, #4]
10001bec:	2180      	movs	r1, #128	; 0x80
10001bee:	22c0      	movs	r2, #192	; 0xc0
10001bf0:	0092      	lsls	r2, r2, #2
10001bf2:	505a      	str	r2, [r3, r1]
10001bf4:	e005      	b.n	10001c02 <XMC_I2C_CH_MasterReceiveNack+0x4e>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
10001bf6:	687a      	ldr	r2, [r7, #4]
10001bf8:	23c0      	movs	r3, #192	; 0xc0
10001bfa:	005b      	lsls	r3, r3, #1
10001bfc:	21c0      	movs	r1, #192	; 0xc0
10001bfe:	0089      	lsls	r1, r1, #2
10001c00:	50d1      	str	r1, [r2, r3]
  }
}
10001c02:	46bd      	mov	sp, r7
10001c04:	b002      	add	sp, #8
10001c06:	bd80      	pop	{r7, pc}

10001c08 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
10001c08:	b580      	push	{r7, lr}
10001c0a:	b084      	sub	sp, #16
10001c0c:	af00      	add	r7, sp, #0
10001c0e:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10001c10:	687a      	ldr	r2, [r7, #4]
10001c12:	2386      	movs	r3, #134	; 0x86
10001c14:	005b      	lsls	r3, r3, #1
10001c16:	58d2      	ldr	r2, [r2, r3]
10001c18:	23e0      	movs	r3, #224	; 0xe0
10001c1a:	04db      	lsls	r3, r3, #19
10001c1c:	4013      	ands	r3, r2
10001c1e:	d105      	bne.n	10001c2c <XMC_I2C_CH_GetReceivedData+0x24>
  {
    retval = (uint8_t)channel->RBUF;
10001c20:	687b      	ldr	r3, [r7, #4]
10001c22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10001c24:	230f      	movs	r3, #15
10001c26:	18fb      	adds	r3, r7, r3
10001c28:	701a      	strb	r2, [r3, #0]
10001c2a:	e006      	b.n	10001c3a <XMC_I2C_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
10001c2c:	687a      	ldr	r2, [r7, #4]
10001c2e:	238e      	movs	r3, #142	; 0x8e
10001c30:	005b      	lsls	r3, r3, #1
10001c32:	58d2      	ldr	r2, [r2, r3]
10001c34:	230f      	movs	r3, #15
10001c36:	18fb      	adds	r3, r7, r3
10001c38:	701a      	strb	r2, [r3, #0]
  }

  return retval;
10001c3a:	230f      	movs	r3, #15
10001c3c:	18fb      	adds	r3, r7, r3
10001c3e:	781b      	ldrb	r3, [r3, #0]
}
10001c40:	1c18      	adds	r0, r3, #0
10001c42:	46bd      	mov	sp, r7
10001c44:	b004      	add	sp, #16
10001c46:	bd80      	pop	{r7, pc}

10001c48 <XMC_I2C_CH_EnableEvent>:
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10001c48:	b580      	push	{r7, lr}
10001c4a:	b082      	sub	sp, #8
10001c4c:	af00      	add	r7, sp, #0
10001c4e:	6078      	str	r0, [r7, #4]
10001c50:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event & 0x1fc00U);
10001c52:	687b      	ldr	r3, [r7, #4]
10001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10001c56:	6839      	ldr	r1, [r7, #0]
10001c58:	23fe      	movs	r3, #254	; 0xfe
10001c5a:	025b      	lsls	r3, r3, #9
10001c5c:	400b      	ands	r3, r1
10001c5e:	431a      	orrs	r2, r3
10001c60:	687b      	ldr	r3, [r7, #4]
10001c62:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
10001c64:	687b      	ldr	r3, [r7, #4]
10001c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10001c68:	683b      	ldr	r3, [r7, #0]
10001c6a:	4904      	ldr	r1, [pc, #16]	; (10001c7c <XMC_I2C_CH_EnableEvent+0x34>)
10001c6c:	400b      	ands	r3, r1
10001c6e:	431a      	orrs	r2, r3
10001c70:	687b      	ldr	r3, [r7, #4]
10001c72:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001c74:	46bd      	mov	sp, r7
10001c76:	b002      	add	sp, #8
10001c78:	bd80      	pop	{r7, pc}
10001c7a:	46c0      	nop			; (mov r8, r8)
10001c7c:	41fc0000 	.word	0x41fc0000

10001c80 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10001c80:	b580      	push	{r7, lr}
10001c82:	b082      	sub	sp, #8
10001c84:	af00      	add	r7, sp, #0
10001c86:	6078      	str	r0, [r7, #4]
10001c88:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
10001c8a:	687b      	ldr	r3, [r7, #4]
10001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001c8e:	6839      	ldr	r1, [r7, #0]
10001c90:	22fe      	movs	r2, #254	; 0xfe
10001c92:	0252      	lsls	r2, r2, #9
10001c94:	400a      	ands	r2, r1
10001c96:	43d2      	mvns	r2, r2
10001c98:	401a      	ands	r2, r3
10001c9a:	687b      	ldr	r3, [r7, #4]
10001c9c:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
10001c9e:	687b      	ldr	r3, [r7, #4]
10001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001ca2:	683a      	ldr	r2, [r7, #0]
10001ca4:	4904      	ldr	r1, [pc, #16]	; (10001cb8 <XMC_I2C_CH_DisableEvent+0x38>)
10001ca6:	400a      	ands	r2, r1
10001ca8:	43d2      	mvns	r2, r2
10001caa:	401a      	ands	r2, r3
10001cac:	687b      	ldr	r3, [r7, #4]
10001cae:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001cb0:	46bd      	mov	sp, r7
10001cb2:	b002      	add	sp, #8
10001cb4:	bd80      	pop	{r7, pc}
10001cb6:	46c0      	nop			; (mov r8, r8)
10001cb8:	41fc0000 	.word	0x41fc0000

10001cbc <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10001cbc:	b580      	push	{r7, lr}
10001cbe:	b088      	sub	sp, #32
10001cc0:	af00      	add	r7, sp, #0
10001cc2:	6078      	str	r0, [r7, #4]
10001cc4:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10001cc6:	f3ef 8310 	mrs	r3, PRIMASK
10001cca:	617b      	str	r3, [r7, #20]
  return(result);
10001ccc:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001cce:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001cd0:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001cd2:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001cd4:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10001cd6:	4b0c      	ldr	r3, [pc, #48]	; (10001d08 <__aeabi_uidiv+0x4c>)
10001cd8:	2204      	movs	r2, #4
10001cda:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001cdc:	4b0a      	ldr	r3, [pc, #40]	; (10001d08 <__aeabi_uidiv+0x4c>)
10001cde:	687a      	ldr	r2, [r7, #4]
10001ce0:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10001ce2:	4b09      	ldr	r3, [pc, #36]	; (10001d08 <__aeabi_uidiv+0x4c>)
10001ce4:	683a      	ldr	r2, [r7, #0]
10001ce6:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10001ce8:	4b07      	ldr	r3, [pc, #28]	; (10001d08 <__aeabi_uidiv+0x4c>)
10001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001cec:	61bb      	str	r3, [r7, #24]
10001cee:	69fb      	ldr	r3, [r7, #28]
10001cf0:	60fb      	str	r3, [r7, #12]
10001cf2:	68fb      	ldr	r3, [r7, #12]
10001cf4:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001cf6:	68bb      	ldr	r3, [r7, #8]
10001cf8:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10001cfc:	69bb      	ldr	r3, [r7, #24]
}
10001cfe:	1c18      	adds	r0, r3, #0
10001d00:	46bd      	mov	sp, r7
10001d02:	b008      	add	sp, #32
10001d04:	bd80      	pop	{r7, pc}
10001d06:	46c0      	nop			; (mov r8, r8)
10001d08:	40030000 	.word	0x40030000

10001d0c <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
10001d0c:	b580      	push	{r7, lr}
10001d0e:	b088      	sub	sp, #32
10001d10:	af00      	add	r7, sp, #0
10001d12:	6078      	str	r0, [r7, #4]
10001d14:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10001d16:	f3ef 8310 	mrs	r3, PRIMASK
10001d1a:	617b      	str	r3, [r7, #20]
  return(result);
10001d1c:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001d1e:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001d20:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001d22:	693b      	ldr	r3, [r7, #16]
/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001d24:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
10001d26:	4b0c      	ldr	r3, [pc, #48]	; (10001d58 <__aeabi_idiv+0x4c>)
10001d28:	2200      	movs	r2, #0
10001d2a:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001d2c:	4b0a      	ldr	r3, [pc, #40]	; (10001d58 <__aeabi_idiv+0x4c>)
10001d2e:	687a      	ldr	r2, [r7, #4]
10001d30:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10001d32:	4b09      	ldr	r3, [pc, #36]	; (10001d58 <__aeabi_idiv+0x4c>)
10001d34:	683a      	ldr	r2, [r7, #0]
10001d36:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10001d38:	4b07      	ldr	r3, [pc, #28]	; (10001d58 <__aeabi_idiv+0x4c>)
10001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001d3c:	61bb      	str	r3, [r7, #24]
10001d3e:	69fb      	ldr	r3, [r7, #28]
10001d40:	60fb      	str	r3, [r7, #12]
10001d42:	68fb      	ldr	r3, [r7, #12]
10001d44:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001d46:	68bb      	ldr	r3, [r7, #8]
10001d48:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10001d4c:	69bb      	ldr	r3, [r7, #24]
}
10001d4e:	1c18      	adds	r0, r3, #0
10001d50:	46bd      	mov	sp, r7
10001d52:	b008      	add	sp, #32
10001d54:	bd80      	pop	{r7, pc}
10001d56:	46c0      	nop			; (mov r8, r8)
10001d58:	40030000 	.word	0x40030000

10001d5c <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10001d5c:	b580      	push	{r7, lr}
10001d5e:	b082      	sub	sp, #8
10001d60:	af00      	add	r7, sp, #0
10001d62:	6078      	str	r0, [r7, #4]
10001d64:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10001d66:	687b      	ldr	r3, [r7, #4]
10001d68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10001d6a:	683b      	ldr	r3, [r7, #0]
10001d6c:	431a      	orrs	r2, r3
10001d6e:	687b      	ldr	r3, [r7, #4]
10001d70:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001d72:	46bd      	mov	sp, r7
10001d74:	b002      	add	sp, #8
10001d76:	bd80      	pop	{r7, pc}

10001d78 <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
10001d78:	b580      	push	{r7, lr}
10001d7a:	b084      	sub	sp, #16
10001d7c:	af00      	add	r7, sp, #0
10001d7e:	60f8      	str	r0, [r7, #12]
10001d80:	60b9      	str	r1, [r7, #8]
10001d82:	1dfb      	adds	r3, r7, #7
10001d84:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_Enable(channel);
10001d86:	68fb      	ldr	r3, [r7, #12]
10001d88:	1c18      	adds	r0, r3, #0
10001d8a:	f000 f8a5 	bl	10001ed8 <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
10001d8e:	68bb      	ldr	r3, [r7, #8]
10001d90:	795b      	ldrb	r3, [r3, #5]
10001d92:	2b00      	cmp	r3, #0
10001d94:	d119      	bne.n	10001dca <XMC_SPI_CH_InitEx+0x52>
10001d96:	1dfb      	adds	r3, r7, #7
10001d98:	781b      	ldrb	r3, [r3, #0]
10001d9a:	2b00      	cmp	r3, #0
10001d9c:	d015      	beq.n	10001dca <XMC_SPI_CH_InitEx+0x52>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
10001d9e:	68bb      	ldr	r3, [r7, #8]
10001da0:	791b      	ldrb	r3, [r3, #4]
10001da2:	2b00      	cmp	r3, #0
10001da4:	d009      	beq.n	10001dba <XMC_SPI_CH_InitEx+0x42>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
10001da6:	68bb      	ldr	r3, [r7, #8]
10001da8:	681b      	ldr	r3, [r3, #0]
10001daa:	1c1a      	adds	r2, r3, #0
10001dac:	68fb      	ldr	r3, [r7, #12]
10001dae:	1c18      	adds	r0, r3, #0
10001db0:	1c11      	adds	r1, r2, #0
10001db2:	2202      	movs	r2, #2
10001db4:	f000 f946 	bl	10002044 <XMC_USIC_CH_SetBaudrateEx>
10001db8:	e007      	b.n	10001dca <XMC_SPI_CH_InitEx+0x52>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
10001dba:	68bb      	ldr	r3, [r7, #8]
10001dbc:	681b      	ldr	r3, [r3, #0]
10001dbe:	68fa      	ldr	r2, [r7, #12]
10001dc0:	1c10      	adds	r0, r2, #0
10001dc2:	1c19      	adds	r1, r3, #0
10001dc4:	2202      	movs	r2, #2
10001dc6:	f000 f8c3 	bl	10001f50 <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
10001dca:	68fb      	ldr	r3, [r7, #12]
10001dcc:	4a0e      	ldr	r2, [pc, #56]	; (10001e08 <XMC_SPI_CH_InitEx+0x90>)
10001dce:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
10001dd0:	68fb      	ldr	r3, [r7, #12]
10001dd2:	22a2      	movs	r2, #162	; 0xa2
10001dd4:	00d2      	lsls	r2, r2, #3
10001dd6:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
10001dd8:	68bb      	ldr	r3, [r7, #8]
10001dda:	795b      	ldrb	r3, [r3, #5]
10001ddc:	2b00      	cmp	r3, #0
10001dde:	d107      	bne.n	10001df0 <XMC_SPI_CH_InitEx+0x78>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
10001de0:	68bb      	ldr	r3, [r7, #8]
10001de2:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
10001de4:	220b      	movs	r2, #11
10001de6:	4313      	orrs	r3, r2
10001de8:	b2db      	uxtb	r3, r3
10001dea:	1c1a      	adds	r2, r3, #0
10001dec:	68fb      	ldr	r3, [r7, #12]
10001dee:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
10001df0:	68fb      	ldr	r3, [r7, #12]
10001df2:	2201      	movs	r2, #1
10001df4:	4252      	negs	r2, r2
10001df6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10001df8:	68bb      	ldr	r3, [r7, #8]
10001dfa:	891b      	ldrh	r3, [r3, #8]
10001dfc:	1c1a      	adds	r2, r3, #0
10001dfe:	68fb      	ldr	r3, [r7, #12]
10001e00:	641a      	str	r2, [r3, #64]	; 0x40
}
10001e02:	46bd      	mov	sp, r7
10001e04:	b004      	add	sp, #16
10001e06:	bd80      	pop	{r7, pc}
10001e08:	073f0102 	.word	0x073f0102

10001e0c <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
10001e0c:	b580      	push	{r7, lr}
10001e0e:	b082      	sub	sp, #8
10001e10:	af00      	add	r7, sp, #0
10001e12:	6078      	str	r0, [r7, #4]
10001e14:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
10001e16:	687b      	ldr	r3, [r7, #4]
10001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001e1a:	4a06      	ldr	r2, [pc, #24]	; (10001e34 <XMC_SPI_CH_EnableSlaveSelect+0x28>)
10001e1c:	401a      	ands	r2, r3
10001e1e:	687b      	ldr	r3, [r7, #4]
10001e20:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
10001e22:	687b      	ldr	r3, [r7, #4]
10001e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10001e26:	683b      	ldr	r3, [r7, #0]
10001e28:	431a      	orrs	r2, r3
10001e2a:	687b      	ldr	r3, [r7, #4]
10001e2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001e2e:	46bd      	mov	sp, r7
10001e30:	b002      	add	sp, #8
10001e32:	bd80      	pop	{r7, pc}
10001e34:	ff00ffff 	.word	0xff00ffff

10001e38 <XMC_SPI_CH_DisableSlaveSelect>:

/* Disable the slave signals by clearing (SELO) bits in PCR register. */
void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
{
10001e38:	b580      	push	{r7, lr}
10001e3a:	b082      	sub	sp, #8
10001e3c:	af00      	add	r7, sp, #0
10001e3e:	6078      	str	r0, [r7, #4]
  XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
10001e40:	687b      	ldr	r3, [r7, #4]
10001e42:	1c18      	adds	r0, r3, #0
10001e44:	2101      	movs	r1, #1
10001e46:	f7ff ff89 	bl	10001d5c <XMC_SPI_CH_ClearStatusFlag>

  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
10001e4a:	687b      	ldr	r3, [r7, #4]
10001e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001e4e:	4a03      	ldr	r2, [pc, #12]	; (10001e5c <XMC_SPI_CH_DisableSlaveSelect+0x24>)
10001e50:	401a      	ands	r2, r3
10001e52:	687b      	ldr	r3, [r7, #4]
10001e54:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001e56:	46bd      	mov	sp, r7
10001e58:	b002      	add	sp, #8
10001e5a:	bd80      	pop	{r7, pc}
10001e5c:	ff00ffff 	.word	0xff00ffff

10001e60 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
10001e60:	b580      	push	{r7, lr}
10001e62:	b084      	sub	sp, #16
10001e64:	af00      	add	r7, sp, #0
10001e66:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10001e68:	687a      	ldr	r2, [r7, #4]
10001e6a:	2386      	movs	r3, #134	; 0x86
10001e6c:	005b      	lsls	r3, r3, #1
10001e6e:	58d2      	ldr	r2, [r2, r3]
10001e70:	23e0      	movs	r3, #224	; 0xe0
10001e72:	04db      	lsls	r3, r3, #19
10001e74:	4013      	ands	r3, r2
10001e76:	d105      	bne.n	10001e84 <XMC_SPI_CH_GetReceivedData+0x24>
  {
    retval = (uint16_t)channel->RBUF;
10001e78:	687b      	ldr	r3, [r7, #4]
10001e7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10001e7c:	230e      	movs	r3, #14
10001e7e:	18fb      	adds	r3, r7, r3
10001e80:	801a      	strh	r2, [r3, #0]
10001e82:	e006      	b.n	10001e92 <XMC_SPI_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
10001e84:	687a      	ldr	r2, [r7, #4]
10001e86:	238e      	movs	r3, #142	; 0x8e
10001e88:	005b      	lsls	r3, r3, #1
10001e8a:	58d2      	ldr	r2, [r2, r3]
10001e8c:	230e      	movs	r3, #14
10001e8e:	18fb      	adds	r3, r7, r3
10001e90:	801a      	strh	r2, [r3, #0]
  }

  return retval;
10001e92:	230e      	movs	r3, #14
10001e94:	18fb      	adds	r3, r7, r3
10001e96:	881b      	ldrh	r3, [r3, #0]
}
10001e98:	1c18      	adds	r0, r3, #0
10001e9a:	46bd      	mov	sp, r7
10001e9c:	b004      	add	sp, #16
10001e9e:	bd80      	pop	{r7, pc}

10001ea0 <XMC_SPI_CH_DisableEvent>:
  channel->CCR |= (event & 0x1fc00U);
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
}

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10001ea0:	b580      	push	{r7, lr}
10001ea2:	b082      	sub	sp, #8
10001ea4:	af00      	add	r7, sp, #0
10001ea6:	6078      	str	r0, [r7, #4]
10001ea8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
10001eaa:	687b      	ldr	r3, [r7, #4]
10001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001eae:	6839      	ldr	r1, [r7, #0]
10001eb0:	22fe      	movs	r2, #254	; 0xfe
10001eb2:	0252      	lsls	r2, r2, #9
10001eb4:	400a      	ands	r2, r1
10001eb6:	43d2      	mvns	r2, r2
10001eb8:	401a      	ands	r2, r3
10001eba:	687b      	ldr	r3, [r7, #4]
10001ebc:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
10001ebe:	687b      	ldr	r3, [r7, #4]
10001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001ec2:	683a      	ldr	r2, [r7, #0]
10001ec4:	0352      	lsls	r2, r2, #13
10001ec6:	0412      	lsls	r2, r2, #16
10001ec8:	0c12      	lsrs	r2, r2, #16
10001eca:	43d2      	mvns	r2, r2
10001ecc:	401a      	ands	r2, r3
10001ece:	687b      	ldr	r3, [r7, #4]
10001ed0:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001ed2:	46bd      	mov	sp, r7
10001ed4:	b002      	add	sp, #8
10001ed6:	bd80      	pop	{r7, pc}

10001ed8 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10001ed8:	b580      	push	{r7, lr}
10001eda:	b082      	sub	sp, #8
10001edc:	af00      	add	r7, sp, #0
10001ede:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10001ee0:	687a      	ldr	r2, [r7, #4]
10001ee2:	2390      	movs	r3, #144	; 0x90
10001ee4:	05db      	lsls	r3, r3, #23
10001ee6:	429a      	cmp	r2, r3
10001ee8:	d003      	beq.n	10001ef2 <XMC_USIC_CH_Enable+0x1a>
10001eea:	687b      	ldr	r3, [r7, #4]
10001eec:	4a13      	ldr	r2, [pc, #76]	; (10001f3c <XMC_USIC_CH_Enable+0x64>)
10001eee:	4293      	cmp	r3, r2
10001ef0:	d104      	bne.n	10001efc <XMC_USIC_CH_Enable+0x24>
  {
    XMC_USIC_Enable(XMC_USIC0);
10001ef2:	4b13      	ldr	r3, [pc, #76]	; (10001f40 <XMC_USIC_CH_Enable+0x68>)
10001ef4:	1c18      	adds	r0, r3, #0
10001ef6:	f000 fa0f 	bl	10002318 <XMC_USIC_Enable>
10001efa:	e00b      	b.n	10001f14 <XMC_USIC_CH_Enable+0x3c>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
10001efc:	687b      	ldr	r3, [r7, #4]
10001efe:	4a11      	ldr	r2, [pc, #68]	; (10001f44 <XMC_USIC_CH_Enable+0x6c>)
10001f00:	4293      	cmp	r3, r2
10001f02:	d003      	beq.n	10001f0c <XMC_USIC_CH_Enable+0x34>
10001f04:	687b      	ldr	r3, [r7, #4]
10001f06:	4a10      	ldr	r2, [pc, #64]	; (10001f48 <XMC_USIC_CH_Enable+0x70>)
10001f08:	4293      	cmp	r3, r2
10001f0a:	d103      	bne.n	10001f14 <XMC_USIC_CH_Enable+0x3c>
  {
    XMC_USIC_Enable(XMC_USIC1);
10001f0c:	4b0f      	ldr	r3, [pc, #60]	; (10001f4c <XMC_USIC_CH_Enable+0x74>)
10001f0e:	1c18      	adds	r0, r3, #0
10001f10:	f000 fa02 	bl	10002318 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10001f14:	687b      	ldr	r3, [r7, #4]
10001f16:	2203      	movs	r2, #3
10001f18:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10001f1a:	46c0      	nop			; (mov r8, r8)
10001f1c:	687b      	ldr	r3, [r7, #4]
10001f1e:	68db      	ldr	r3, [r3, #12]
10001f20:	2201      	movs	r2, #1
10001f22:	4013      	ands	r3, r2
10001f24:	d0fa      	beq.n	10001f1c <XMC_USIC_CH_Enable+0x44>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10001f26:	687b      	ldr	r3, [r7, #4]
10001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001f2a:	220f      	movs	r2, #15
10001f2c:	4393      	bics	r3, r2
10001f2e:	1c1a      	adds	r2, r3, #0
10001f30:	687b      	ldr	r3, [r7, #4]
10001f32:	641a      	str	r2, [r3, #64]	; 0x40
}
10001f34:	46bd      	mov	sp, r7
10001f36:	b002      	add	sp, #8
10001f38:	bd80      	pop	{r7, pc}
10001f3a:	46c0      	nop			; (mov r8, r8)
10001f3c:	48000200 	.word	0x48000200
10001f40:	48000008 	.word	0x48000008
10001f44:	48004000 	.word	0x48004000
10001f48:	48004200 	.word	0x48004200
10001f4c:	48004008 	.word	0x48004008

10001f50 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10001f50:	b580      	push	{r7, lr}
10001f52:	b08e      	sub	sp, #56	; 0x38
10001f54:	af00      	add	r7, sp, #0
10001f56:	60f8      	str	r0, [r7, #12]
10001f58:	60b9      	str	r1, [r7, #8]
10001f5a:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10001f5c:	68bb      	ldr	r3, [r7, #8]
10001f5e:	2b63      	cmp	r3, #99	; 0x63
10001f60:	d960      	bls.n	10002024 <XMC_USIC_CH_SetBaudrate+0xd4>
10001f62:	687b      	ldr	r3, [r7, #4]
10001f64:	2b00      	cmp	r3, #0
10001f66:	d05d      	beq.n	10002024 <XMC_USIC_CH_SetBaudrate+0xd4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10001f68:	f7ff fb7c 	bl	10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001f6c:	1c03      	adds	r3, r0, #0
10001f6e:	1c18      	adds	r0, r3, #0
10001f70:	2164      	movs	r1, #100	; 0x64
10001f72:	f7ff fea3 	bl	10001cbc <__aeabi_uidiv>
10001f76:	1c03      	adds	r3, r0, #0
10001f78:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
10001f7a:	68bb      	ldr	r3, [r7, #8]
10001f7c:	1c18      	adds	r0, r3, #0
10001f7e:	2164      	movs	r1, #100	; 0x64
10001f80:	f7ff fe9c 	bl	10001cbc <__aeabi_uidiv>
10001f84:	1c03      	adds	r3, r0, #0
10001f86:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
10001f88:	2380      	movs	r3, #128	; 0x80
10001f8a:	00db      	lsls	r3, r3, #3
10001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
10001f8e:	2301      	movs	r3, #1
10001f90:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
10001f92:	4b2a      	ldr	r3, [pc, #168]	; (1000203c <XMC_USIC_CH_SetBaudrate+0xec>)
10001f94:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
10001f96:	2380      	movs	r3, #128	; 0x80
10001f98:	00db      	lsls	r3, r3, #3
10001f9a:	633b      	str	r3, [r7, #48]	; 0x30
10001f9c:	e025      	b.n	10001fea <XMC_USIC_CH_SetBaudrate+0x9a>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
10001f9e:	6a3b      	ldr	r3, [r7, #32]
10001fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10001fa2:	435a      	muls	r2, r3
10001fa4:	1c11      	adds	r1, r2, #0
10001fa6:	68bb      	ldr	r3, [r7, #8]
10001fa8:	687a      	ldr	r2, [r7, #4]
10001faa:	4353      	muls	r3, r2
10001fac:	1c08      	adds	r0, r1, #0
10001fae:	1c19      	adds	r1, r3, #0
10001fb0:	f7ff fe84 	bl	10001cbc <__aeabi_uidiv>
10001fb4:	1c03      	adds	r3, r0, #0
10001fb6:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
10001fb8:	69fb      	ldr	r3, [r7, #28]
10001fba:	0a9b      	lsrs	r3, r3, #10
10001fbc:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
10001fbe:	69fb      	ldr	r3, [r7, #28]
10001fc0:	059b      	lsls	r3, r3, #22
10001fc2:	0d9b      	lsrs	r3, r3, #22
10001fc4:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
10001fc6:	69ba      	ldr	r2, [r7, #24]
10001fc8:	2380      	movs	r3, #128	; 0x80
10001fca:	00db      	lsls	r3, r3, #3
10001fcc:	429a      	cmp	r2, r3
10001fce:	d809      	bhi.n	10001fe4 <XMC_USIC_CH_SetBaudrate+0x94>
10001fd0:	697a      	ldr	r2, [r7, #20]
10001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001fd4:	429a      	cmp	r2, r3
10001fd6:	d205      	bcs.n	10001fe4 <XMC_USIC_CH_SetBaudrate+0x94>
      {
        pdiv_frac_min = pdiv_frac;
10001fd8:	697b      	ldr	r3, [r7, #20]
10001fda:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10001fdc:	69bb      	ldr	r3, [r7, #24]
10001fde:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
10001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
10001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001fe6:	3b01      	subs	r3, #1
10001fe8:	633b      	str	r3, [r7, #48]	; 0x30
10001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001fec:	2b00      	cmp	r3, #0
10001fee:	d1d6      	bne.n	10001f9e <XMC_USIC_CH_SetBaudrate+0x4e>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
10001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001ff2:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10001ff4:	2280      	movs	r2, #128	; 0x80
10001ff6:	0212      	lsls	r2, r2, #8
10001ff8:	431a      	orrs	r2, r3
10001ffa:	68fb      	ldr	r3, [r7, #12]
10001ffc:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10001ffe:	68fb      	ldr	r3, [r7, #12]
10002000:	695b      	ldr	r3, [r3, #20]
10002002:	4a0f      	ldr	r2, [pc, #60]	; (10002040 <XMC_USIC_CH_SetBaudrate+0xf0>)
10002004:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002006:	687b      	ldr	r3, [r7, #4]
10002008:	3b01      	subs	r3, #1
1000200a:	029b      	lsls	r3, r3, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
1000200c:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
1000200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002010:	3b01      	subs	r3, #1
10002012:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002014:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002016:	68fb      	ldr	r3, [r7, #12]
10002018:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
1000201a:	2337      	movs	r3, #55	; 0x37
1000201c:	18fb      	adds	r3, r7, r3
1000201e:	2200      	movs	r2, #0
10002020:	701a      	strb	r2, [r3, #0]
10002022:	e003      	b.n	1000202c <XMC_USIC_CH_SetBaudrate+0xdc>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10002024:	2337      	movs	r3, #55	; 0x37
10002026:	18fb      	adds	r3, r7, r3
10002028:	2201      	movs	r2, #1
1000202a:	701a      	strb	r2, [r3, #0]
  }

  return status;
1000202c:	2337      	movs	r3, #55	; 0x37
1000202e:	18fb      	adds	r3, r7, r3
10002030:	781b      	ldrb	r3, [r3, #0]
}
10002032:	1c18      	adds	r0, r3, #0
10002034:	46bd      	mov	sp, r7
10002036:	b00e      	add	sp, #56	; 0x38
10002038:	bd80      	pop	{r7, pc}
1000203a:	46c0      	nop			; (mov r8, r8)
1000203c:	000003ff 	.word	0x000003ff
10002040:	fc0080ef 	.word	0xfc0080ef

10002044 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
10002044:	b580      	push	{r7, lr}
10002046:	b08c      	sub	sp, #48	; 0x30
10002048:	af00      	add	r7, sp, #0
1000204a:	60f8      	str	r0, [r7, #12]
1000204c:	60b9      	str	r1, [r7, #8]
1000204e:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10002050:	f7ff fb08 	bl	10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10002054:	1c03      	adds	r3, r0, #0
10002056:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
10002058:	68bb      	ldr	r3, [r7, #8]
1000205a:	687a      	ldr	r2, [r7, #4]
1000205c:	4353      	muls	r3, r2
1000205e:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
10002060:	2301      	movs	r3, #1
10002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
10002064:	6a3a      	ldr	r2, [r7, #32]
10002066:	69fb      	ldr	r3, [r7, #28]
10002068:	429a      	cmp	r2, r3
1000206a:	dd62      	ble.n	10002132 <XMC_USIC_CH_SetBaudrateEx+0xee>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
1000206c:	6a38      	ldr	r0, [r7, #32]
1000206e:	69f9      	ldr	r1, [r7, #28]
10002070:	f7ff fe4c 	bl	10001d0c <__aeabi_idiv>
10002074:	1c03      	adds	r3, r0, #0
10002076:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
10002078:	e00f      	b.n	1000209a <XMC_USIC_CH_SetBaudrateEx+0x56>
    {
      pdiv++;
1000207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000207c:	3301      	adds	r3, #1
1000207e:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
10002080:	68bb      	ldr	r3, [r7, #8]
10002082:	687a      	ldr	r2, [r7, #4]
10002084:	4353      	muls	r3, r2
10002086:	1c1a      	adds	r2, r3, #0
10002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000208a:	4353      	muls	r3, r2
1000208c:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
1000208e:	6a38      	ldr	r0, [r7, #32]
10002090:	69f9      	ldr	r1, [r7, #28]
10002092:	f7ff fe3b 	bl	10001d0c <__aeabi_idiv>
10002096:	1c03      	adds	r3, r0, #0
10002098:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
1000209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000209c:	4a2a      	ldr	r2, [pc, #168]	; (10002148 <XMC_USIC_CH_SetBaudrateEx+0x104>)
1000209e:	4293      	cmp	r3, r2
100020a0:	d8eb      	bhi.n	1000207a <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
100020a2:	6a39      	ldr	r1, [r7, #32]
100020a4:	687b      	ldr	r3, [r7, #4]
100020a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
100020a8:	4353      	muls	r3, r2
100020aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100020ac:	4353      	muls	r3, r2
100020ae:	1c08      	adds	r0, r1, #0
100020b0:	1c19      	adds	r1, r3, #0
100020b2:	f7ff fe03 	bl	10001cbc <__aeabi_uidiv>
100020b6:	1c03      	adds	r3, r0, #0
100020b8:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
100020ba:	6a39      	ldr	r1, [r7, #32]
100020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
100020be:	3301      	adds	r3, #1
100020c0:	687a      	ldr	r2, [r7, #4]
100020c2:	4353      	muls	r3, r2
100020c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100020c6:	4353      	muls	r3, r2
100020c8:	1c08      	adds	r0, r1, #0
100020ca:	1c19      	adds	r1, r3, #0
100020cc:	f7ff fdf6 	bl	10001cbc <__aeabi_uidiv>
100020d0:	1c03      	adds	r3, r0, #0
100020d2:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
100020d4:	68ba      	ldr	r2, [r7, #8]
100020d6:	697b      	ldr	r3, [r7, #20]
100020d8:	1ad3      	subs	r3, r2, r3
100020da:	17d9      	asrs	r1, r3, #31
100020dc:	185a      	adds	r2, r3, r1
100020de:	404a      	eors	r2, r1
100020e0:	68b9      	ldr	r1, [r7, #8]
100020e2:	69bb      	ldr	r3, [r7, #24]
100020e4:	1acb      	subs	r3, r1, r3
100020e6:	17d9      	asrs	r1, r3, #31
100020e8:	185b      	adds	r3, r3, r1
100020ea:	404b      	eors	r3, r1
100020ec:	429a      	cmp	r2, r3
100020ee:	da02      	bge.n	100020f6 <XMC_USIC_CH_SetBaudrateEx+0xb2>
    {
      divider_step += 1;
100020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
100020f2:	3301      	adds	r3, #1
100020f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
100020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
100020f8:	2280      	movs	r2, #128	; 0x80
100020fa:	00d2      	lsls	r2, r2, #3
100020fc:	1ad3      	subs	r3, r2, r3
100020fe:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
10002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002102:	2280      	movs	r2, #128	; 0x80
10002104:	01d2      	lsls	r2, r2, #7
10002106:	431a      	orrs	r2, r3
10002108:	68fb      	ldr	r3, [r7, #12]
1000210a:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000210c:	68fb      	ldr	r3, [r7, #12]
1000210e:	695b      	ldr	r3, [r3, #20]
10002110:	4a0e      	ldr	r2, [pc, #56]	; (1000214c <XMC_USIC_CH_SetBaudrateEx+0x108>)
10002112:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002114:	687b      	ldr	r3, [r7, #4]
10002116:	3b01      	subs	r3, #1
10002118:	029b      	lsls	r3, r3, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
1000211a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
1000211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000211e:	3b01      	subs	r3, #1
10002120:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002122:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002124:	68fb      	ldr	r3, [r7, #12]
10002126:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
10002128:	2327      	movs	r3, #39	; 0x27
1000212a:	18fb      	adds	r3, r7, r3
1000212c:	2200      	movs	r2, #0
1000212e:	701a      	strb	r2, [r3, #0]
10002130:	e003      	b.n	1000213a <XMC_USIC_CH_SetBaudrateEx+0xf6>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10002132:	2327      	movs	r3, #39	; 0x27
10002134:	18fb      	adds	r3, r7, r3
10002136:	2201      	movs	r2, #1
10002138:	701a      	strb	r2, [r3, #0]
  }

  return status;
1000213a:	2327      	movs	r3, #39	; 0x27
1000213c:	18fb      	adds	r3, r7, r3
1000213e:	781b      	ldrb	r3, [r3, #0]
}
10002140:	1c18      	adds	r0, r3, #0
10002142:	46bd      	mov	sp, r7
10002144:	b00c      	add	sp, #48	; 0x30
10002146:	bd80      	pop	{r7, pc}
10002148:	000003fe 	.word	0x000003fe
1000214c:	fc0080ef 	.word	0xfc0080ef

10002150 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10002150:	b580      	push	{r7, lr}
10002152:	b084      	sub	sp, #16
10002154:	af00      	add	r7, sp, #0
10002156:	60f8      	str	r0, [r7, #12]
10002158:	60b9      	str	r1, [r7, #8]
1000215a:	603b      	str	r3, [r7, #0]
1000215c:	1dfb      	adds	r3, r7, #7
1000215e:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10002160:	68fa      	ldr	r2, [r7, #12]
10002162:	2384      	movs	r3, #132	; 0x84
10002164:	005b      	lsls	r3, r3, #1
10002166:	58d3      	ldr	r3, [r2, r3]
10002168:	4a0e      	ldr	r2, [pc, #56]	; (100021a4 <XMC_USIC_CH_TXFIFO_Configure+0x54>)
1000216a:	4013      	ands	r3, r2
1000216c:	1c19      	adds	r1, r3, #0
1000216e:	68fa      	ldr	r2, [r7, #12]
10002170:	2384      	movs	r3, #132	; 0x84
10002172:	005b      	lsls	r3, r3, #1
10002174:	50d1      	str	r1, [r2, r3]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10002176:	68fa      	ldr	r2, [r7, #12]
10002178:	2384      	movs	r3, #132	; 0x84
1000217a:	005b      	lsls	r3, r3, #1
1000217c:	58d3      	ldr	r3, [r2, r3]
1000217e:	4a0a      	ldr	r2, [pc, #40]	; (100021a8 <XMC_USIC_CH_TXFIFO_Configure+0x58>)
10002180:	401a      	ands	r2, r3
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
10002182:	683b      	ldr	r3, [r7, #0]
10002184:	0219      	lsls	r1, r3, #8
10002186:	68bb      	ldr	r3, [r7, #8]
10002188:	4319      	orrs	r1, r3
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
1000218a:	1dfb      	adds	r3, r7, #7
1000218c:	781b      	ldrb	r3, [r3, #0]
1000218e:	061b      	lsls	r3, r3, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
10002190:	430b      	orrs	r3, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
10002192:	431a      	orrs	r2, r3
10002194:	1c11      	adds	r1, r2, #0
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10002196:	68fa      	ldr	r2, [r7, #12]
10002198:	2384      	movs	r3, #132	; 0x84
1000219a:	005b      	lsls	r3, r3, #1
1000219c:	50d1      	str	r1, [r2, r3]
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
1000219e:	46bd      	mov	sp, r7
100021a0:	b004      	add	sp, #16
100021a2:	bd80      	pop	{r7, pc}
100021a4:	f8ffffff 	.word	0xf8ffffff
100021a8:	f8ffc0c0 	.word	0xf8ffc0c0

100021ac <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
100021ac:	b580      	push	{r7, lr}
100021ae:	b084      	sub	sp, #16
100021b0:	af00      	add	r7, sp, #0
100021b2:	60f8      	str	r0, [r7, #12]
100021b4:	60b9      	str	r1, [r7, #8]
100021b6:	603b      	str	r3, [r7, #0]
100021b8:	1dfb      	adds	r3, r7, #7
100021ba:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
100021bc:	68fa      	ldr	r2, [r7, #12]
100021be:	2386      	movs	r3, #134	; 0x86
100021c0:	005b      	lsls	r3, r3, #1
100021c2:	58d3      	ldr	r3, [r2, r3]
100021c4:	4a10      	ldr	r2, [pc, #64]	; (10002208 <XMC_USIC_CH_RXFIFO_Configure+0x5c>)
100021c6:	4013      	ands	r3, r2
100021c8:	1c19      	adds	r1, r3, #0
100021ca:	68fa      	ldr	r2, [r7, #12]
100021cc:	2386      	movs	r3, #134	; 0x86
100021ce:	005b      	lsls	r3, r3, #1
100021d0:	50d1      	str	r1, [r2, r3]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
100021d2:	68fa      	ldr	r2, [r7, #12]
100021d4:	2386      	movs	r3, #134	; 0x86
100021d6:	005b      	lsls	r3, r3, #1
100021d8:	58d3      	ldr	r3, [r2, r3]
100021da:	4a0c      	ldr	r2, [pc, #48]	; (1000220c <XMC_USIC_CH_RXFIFO_Configure+0x60>)
100021dc:	401a      	ands	r2, r3
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
100021de:	683b      	ldr	r3, [r7, #0]
100021e0:	0219      	lsls	r1, r3, #8
100021e2:	68bb      	ldr	r3, [r7, #8]
100021e4:	4319      	orrs	r1, r3
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
100021e6:	1dfb      	adds	r3, r7, #7
100021e8:	781b      	ldrb	r3, [r3, #0]
100021ea:	061b      	lsls	r3, r3, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
100021ec:	430b      	orrs	r3, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
100021ee:	4313      	orrs	r3, r2
100021f0:	2280      	movs	r2, #128	; 0x80
100021f2:	0552      	lsls	r2, r2, #21
100021f4:	431a      	orrs	r2, r3
100021f6:	1c11      	adds	r1, r2, #0
100021f8:	68fa      	ldr	r2, [r7, #12]
100021fa:	2386      	movs	r3, #134	; 0x86
100021fc:	005b      	lsls	r3, r3, #1
100021fe:	50d1      	str	r1, [r2, r3]
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10002200:	46bd      	mov	sp, r7
10002202:	b004      	add	sp, #16
10002204:	bd80      	pop	{r7, pc}
10002206:	46c0      	nop			; (mov r8, r8)
10002208:	f8ffffff 	.word	0xf8ffffff
1000220c:	efffc0c0 	.word	0xefffc0c0

10002210 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
10002210:	b580      	push	{r7, lr}
10002212:	b084      	sub	sp, #16
10002214:	af00      	add	r7, sp, #0
10002216:	60f8      	str	r0, [r7, #12]
10002218:	607a      	str	r2, [r7, #4]
1000221a:	230b      	movs	r3, #11
1000221c:	18fb      	adds	r3, r7, r3
1000221e:	1c0a      	adds	r2, r1, #0
10002220:	701a      	strb	r2, [r3, #0]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002222:	68fa      	ldr	r2, [r7, #12]
10002224:	2386      	movs	r3, #134	; 0x86
10002226:	005b      	lsls	r3, r3, #1
10002228:	58d3      	ldr	r3, [r2, r3]
1000222a:	4a06      	ldr	r2, [pc, #24]	; (10002244 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x34>)
1000222c:	401a      	ands	r2, r3
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
1000222e:	687b      	ldr	r3, [r7, #4]
10002230:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002232:	431a      	orrs	r2, r3
10002234:	1c11      	adds	r1, r2, #0
10002236:	68fa      	ldr	r2, [r7, #12]
10002238:	2386      	movs	r3, #134	; 0x86
1000223a:	005b      	lsls	r3, r3, #1
1000223c:	50d1      	str	r1, [r2, r3]
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
1000223e:	46bd      	mov	sp, r7
10002240:	b004      	add	sp, #16
10002242:	bd80      	pop	{r7, pc}
10002244:	ffffc0ff 	.word	0xffffc0ff

10002248 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
10002248:	b580      	push	{r7, lr}
1000224a:	b084      	sub	sp, #16
1000224c:	af00      	add	r7, sp, #0
1000224e:	60f8      	str	r0, [r7, #12]
10002250:	607a      	str	r2, [r7, #4]
10002252:	230b      	movs	r3, #11
10002254:	18fb      	adds	r3, r7, r3
10002256:	1c0a      	adds	r2, r1, #0
10002258:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000225a:	68fb      	ldr	r3, [r7, #12]
1000225c:	699b      	ldr	r3, [r3, #24]
1000225e:	220b      	movs	r2, #11
10002260:	18ba      	adds	r2, r7, r2
10002262:	7812      	ldrb	r2, [r2, #0]
10002264:	2107      	movs	r1, #7
10002266:	4091      	lsls	r1, r2
10002268:	1c0a      	adds	r2, r1, #0
1000226a:	43d2      	mvns	r2, r2
1000226c:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
1000226e:	230b      	movs	r3, #11
10002270:	18fb      	adds	r3, r7, r3
10002272:	781b      	ldrb	r3, [r3, #0]
10002274:	6879      	ldr	r1, [r7, #4]
10002276:	4099      	lsls	r1, r3
10002278:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000227a:	431a      	orrs	r2, r3
1000227c:	68fb      	ldr	r3, [r7, #12]
1000227e:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
10002280:	46bd      	mov	sp, r7
10002282:	b004      	add	sp, #16
10002284:	bd80      	pop	{r7, pc}
10002286:	46c0      	nop			; (mov r8, r8)

10002288 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
10002288:	b580      	push	{r7, lr}
1000228a:	b084      	sub	sp, #16
1000228c:	af00      	add	r7, sp, #0
1000228e:	60f8      	str	r0, [r7, #12]
10002290:	607a      	str	r2, [r7, #4]
10002292:	230b      	movs	r3, #11
10002294:	18fb      	adds	r3, r7, r3
10002296:	1c0a      	adds	r2, r1, #0
10002298:	701a      	strb	r2, [r3, #0]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000229a:	68fa      	ldr	r2, [r7, #12]
1000229c:	2384      	movs	r3, #132	; 0x84
1000229e:	005b      	lsls	r3, r3, #1
100022a0:	58d3      	ldr	r3, [r2, r3]
100022a2:	220b      	movs	r2, #11
100022a4:	18ba      	adds	r2, r7, r2
100022a6:	7812      	ldrb	r2, [r2, #0]
100022a8:	2107      	movs	r1, #7
100022aa:	4091      	lsls	r1, r2
100022ac:	1c0a      	adds	r2, r1, #0
100022ae:	43d2      	mvns	r2, r2
100022b0:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
100022b2:	230b      	movs	r3, #11
100022b4:	18fb      	adds	r3, r7, r3
100022b6:	781b      	ldrb	r3, [r3, #0]
100022b8:	6879      	ldr	r1, [r7, #4]
100022ba:	4099      	lsls	r1, r3
100022bc:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100022be:	431a      	orrs	r2, r3
100022c0:	1c11      	adds	r1, r2, #0
100022c2:	68fa      	ldr	r2, [r7, #12]
100022c4:	2384      	movs	r3, #132	; 0x84
100022c6:	005b      	lsls	r3, r3, #1
100022c8:	50d1      	str	r1, [r2, r3]
                              (service_request << (uint32_t)interrupt_node));
}
100022ca:	46bd      	mov	sp, r7
100022cc:	b004      	add	sp, #16
100022ce:	bd80      	pop	{r7, pc}

100022d0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
100022d0:	b580      	push	{r7, lr}
100022d2:	b084      	sub	sp, #16
100022d4:	af00      	add	r7, sp, #0
100022d6:	60f8      	str	r0, [r7, #12]
100022d8:	607a      	str	r2, [r7, #4]
100022da:	230b      	movs	r3, #11
100022dc:	18fb      	adds	r3, r7, r3
100022de:	1c0a      	adds	r2, r1, #0
100022e0:	701a      	strb	r2, [r3, #0]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100022e2:	68fa      	ldr	r2, [r7, #12]
100022e4:	2386      	movs	r3, #134	; 0x86
100022e6:	005b      	lsls	r3, r3, #1
100022e8:	58d3      	ldr	r3, [r2, r3]
100022ea:	220b      	movs	r2, #11
100022ec:	18ba      	adds	r2, r7, r2
100022ee:	7812      	ldrb	r2, [r2, #0]
100022f0:	2107      	movs	r1, #7
100022f2:	4091      	lsls	r1, r2
100022f4:	1c0a      	adds	r2, r1, #0
100022f6:	43d2      	mvns	r2, r2
100022f8:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
100022fa:	230b      	movs	r3, #11
100022fc:	18fb      	adds	r3, r7, r3
100022fe:	781b      	ldrb	r3, [r3, #0]
10002300:	6879      	ldr	r1, [r7, #4]
10002302:	4099      	lsls	r1, r3
10002304:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10002306:	431a      	orrs	r2, r3
10002308:	1c11      	adds	r1, r2, #0
1000230a:	68fa      	ldr	r2, [r7, #12]
1000230c:	2386      	movs	r3, #134	; 0x86
1000230e:	005b      	lsls	r3, r3, #1
10002310:	50d1      	str	r1, [r2, r3]
                              (service_request << (uint32_t)interrupt_node));
}
10002312:	46bd      	mov	sp, r7
10002314:	b004      	add	sp, #16
10002316:	bd80      	pop	{r7, pc}

10002318 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
10002318:	b580      	push	{r7, lr}
1000231a:	b082      	sub	sp, #8
1000231c:	af00      	add	r7, sp, #0
1000231e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
10002320:	687b      	ldr	r3, [r7, #4]
10002322:	4a10      	ldr	r2, [pc, #64]	; (10002364 <XMC_USIC_Enable+0x4c>)
10002324:	4293      	cmp	r3, r2
10002326:	d109      	bne.n	1000233c <XMC_USIC_Enable+0x24>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10002328:	2008      	movs	r0, #8
1000232a:	f7ff f8b9 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
1000232e:	46c0      	nop			; (mov r8, r8)
10002330:	2008      	movs	r0, #8
10002332:	f7ff f8cf 	bl	100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
10002336:	1e03      	subs	r3, r0, #0
10002338:	d1fa      	bne.n	10002330 <XMC_USIC_Enable+0x18>
1000233a:	e010      	b.n	1000235e <XMC_USIC_Enable+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
1000233c:	687b      	ldr	r3, [r7, #4]
1000233e:	4a0a      	ldr	r2, [pc, #40]	; (10002368 <XMC_USIC_Enable+0x50>)
10002340:	4293      	cmp	r3, r2
10002342:	d10c      	bne.n	1000235e <XMC_USIC_Enable+0x46>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
10002344:	2380      	movs	r3, #128	; 0x80
10002346:	02db      	lsls	r3, r3, #11
10002348:	1c18      	adds	r0, r3, #0
1000234a:	f7ff f8a9 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
1000234e:	46c0      	nop			; (mov r8, r8)
10002350:	2380      	movs	r3, #128	; 0x80
10002352:	02db      	lsls	r3, r3, #11
10002354:	1c18      	adds	r0, r3, #0
10002356:	f7ff f8bd 	bl	100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
1000235a:	1e03      	subs	r3, r0, #0
1000235c:	d1f8      	bne.n	10002350 <XMC_USIC_Enable+0x38>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
1000235e:	46bd      	mov	sp, r7
10002360:	b002      	add	sp, #8
10002362:	bd80      	pop	{r7, pc}
10002364:	48000008 	.word	0x48000008
10002368:	48004008 	.word	0x48004008

1000236c <_init>:
  }
}

/* Init */
void _init(void)
{}
1000236c:	b580      	push	{r7, lr}
1000236e:	af00      	add	r7, sp, #0
10002370:	46bd      	mov	sp, r7
10002372:	bd80      	pop	{r7, pc}

10002374 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t transmit_control_information)
{
10002374:	b580      	push	{r7, lr}
10002376:	b084      	sub	sp, #16
10002378:	af00      	add	r7, sp, #0
1000237a:	60f8      	str	r0, [r7, #12]
1000237c:	607a      	str	r2, [r7, #4]
1000237e:	230a      	movs	r3, #10
10002380:	18fb      	adds	r3, r7, r3
10002382:	1c0a      	adds	r2, r1, #0
10002384:	801a      	strh	r2, [r3, #0]
  channel->TBUF[transmit_control_information] = data;
10002386:	230a      	movs	r3, #10
10002388:	18fb      	adds	r3, r7, r3
1000238a:	8819      	ldrh	r1, [r3, #0]
1000238c:	68fb      	ldr	r3, [r7, #12]
1000238e:	687a      	ldr	r2, [r7, #4]
10002390:	3220      	adds	r2, #32
10002392:	0092      	lsls	r2, r2, #2
10002394:	50d1      	str	r1, [r2, r3]
}
10002396:	46bd      	mov	sp, r7
10002398:	b004      	add	sp, #16
1000239a:	bd80      	pop	{r7, pc}

1000239c <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
1000239c:	b580      	push	{r7, lr}
1000239e:	b082      	sub	sp, #8
100023a0:	af00      	add	r7, sp, #0
100023a2:	6078      	str	r0, [r7, #4]
100023a4:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
100023a6:	687b      	ldr	r3, [r7, #4]
100023a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
100023aa:	683b      	ldr	r3, [r7, #0]
100023ac:	431a      	orrs	r2, r3
100023ae:	687b      	ldr	r3, [r7, #4]
100023b0:	641a      	str	r2, [r3, #64]	; 0x40
}
100023b2:	46bd      	mov	sp, r7
100023b4:	b002      	add	sp, #8
100023b6:	bd80      	pop	{r7, pc}

100023b8 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100023b8:	b580      	push	{r7, lr}
100023ba:	b082      	sub	sp, #8
100023bc:	af00      	add	r7, sp, #0
100023be:	6078      	str	r0, [r7, #4]
100023c0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
100023c2:	687b      	ldr	r3, [r7, #4]
100023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100023c6:	683a      	ldr	r2, [r7, #0]
100023c8:	43d2      	mvns	r2, r2
100023ca:	401a      	ands	r2, r3
100023cc:	687b      	ldr	r3, [r7, #4]
100023ce:	641a      	str	r2, [r3, #64]	; 0x40
}
100023d0:	46bd      	mov	sp, r7
100023d2:	b002      	add	sp, #8
100023d4:	bd80      	pop	{r7, pc}
100023d6:	46c0      	nop			; (mov r8, r8)

100023d8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100023d8:	b580      	push	{r7, lr}
100023da:	b082      	sub	sp, #8
100023dc:	af00      	add	r7, sp, #0
100023de:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100023e0:	687b      	ldr	r3, [r7, #4]
100023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100023e4:	b2db      	uxtb	r3, r3
100023e6:	227f      	movs	r2, #127	; 0x7f
100023e8:	4393      	bics	r3, r2
100023ea:	b2db      	uxtb	r3, r3
}
100023ec:	1c18      	adds	r0, r3, #0
100023ee:	46bd      	mov	sp, r7
100023f0:	b002      	add	sp, #8
100023f2:	bd80      	pop	{r7, pc}

100023f4 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
100023f4:	b580      	push	{r7, lr}
100023f6:	b082      	sub	sp, #8
100023f8:	af00      	add	r7, sp, #0
100023fa:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
100023fc:	687b      	ldr	r3, [r7, #4]
100023fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10002400:	23c0      	movs	r3, #192	; 0xc0
10002402:	01db      	lsls	r3, r3, #7
10002404:	4013      	ands	r3, r2
}
10002406:	1c18      	adds	r0, r3, #0
10002408:	46bd      	mov	sp, r7
1000240a:	b002      	add	sp, #8
1000240c:	bd80      	pop	{r7, pc}
1000240e:	46c0      	nop			; (mov r8, r8)

10002410 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
10002410:	b580      	push	{r7, lr}
10002412:	b082      	sub	sp, #8
10002414:	af00      	add	r7, sp, #0
10002416:	6078      	str	r0, [r7, #4]
10002418:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1000241a:	683b      	ldr	r3, [r7, #0]
1000241c:	2280      	movs	r2, #128	; 0x80
1000241e:	0252      	lsls	r2, r2, #9
10002420:	409a      	lsls	r2, r3
10002422:	687b      	ldr	r3, [r7, #4]
10002424:	669a      	str	r2, [r3, #104]	; 0x68
}
10002426:	46bd      	mov	sp, r7
10002428:	b002      	add	sp, #8
1000242a:	bd80      	pop	{r7, pc}

1000242c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
1000242c:	b580      	push	{r7, lr}
1000242e:	b082      	sub	sp, #8
10002430:	af00      	add	r7, sp, #0
10002432:	6078      	str	r0, [r7, #4]
10002434:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
10002436:	687a      	ldr	r2, [r7, #4]
10002438:	2384      	movs	r3, #132	; 0x84
1000243a:	005b      	lsls	r3, r3, #1
1000243c:	58d2      	ldr	r2, [r2, r3]
1000243e:	683b      	ldr	r3, [r7, #0]
10002440:	431a      	orrs	r2, r3
10002442:	1c11      	adds	r1, r2, #0
10002444:	687a      	ldr	r2, [r7, #4]
10002446:	2384      	movs	r3, #132	; 0x84
10002448:	005b      	lsls	r3, r3, #1
1000244a:	50d1      	str	r1, [r2, r3]
}
1000244c:	46bd      	mov	sp, r7
1000244e:	b002      	add	sp, #8
10002450:	bd80      	pop	{r7, pc}
10002452:	46c0      	nop			; (mov r8, r8)

10002454 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002454:	b580      	push	{r7, lr}
10002456:	b082      	sub	sp, #8
10002458:	af00      	add	r7, sp, #0
1000245a:	6078      	str	r0, [r7, #4]
1000245c:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
1000245e:	687a      	ldr	r2, [r7, #4]
10002460:	2384      	movs	r3, #132	; 0x84
10002462:	005b      	lsls	r3, r3, #1
10002464:	58d3      	ldr	r3, [r2, r3]
10002466:	683a      	ldr	r2, [r7, #0]
10002468:	43d2      	mvns	r2, r2
1000246a:	401a      	ands	r2, r3
1000246c:	1c11      	adds	r1, r2, #0
1000246e:	687a      	ldr	r2, [r7, #4]
10002470:	2384      	movs	r3, #132	; 0x84
10002472:	005b      	lsls	r3, r3, #1
10002474:	50d1      	str	r1, [r2, r3]
}
10002476:	46bd      	mov	sp, r7
10002478:	b002      	add	sp, #8
1000247a:	bd80      	pop	{r7, pc}

1000247c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t frame_length)
{
1000247c:	b580      	push	{r7, lr}
1000247e:	b084      	sub	sp, #16
10002480:	af00      	add	r7, sp, #0
10002482:	60f8      	str	r0, [r7, #12]
10002484:	607a      	str	r2, [r7, #4]
10002486:	230a      	movs	r3, #10
10002488:	18fb      	adds	r3, r7, r3
1000248a:	1c0a      	adds	r2, r1, #0
1000248c:	801a      	strh	r2, [r3, #0]
  channel->IN[frame_length] = data;
1000248e:	230a      	movs	r3, #10
10002490:	18fb      	adds	r3, r7, r3
10002492:	8819      	ldrh	r1, [r3, #0]
10002494:	68fb      	ldr	r3, [r7, #12]
10002496:	687a      	ldr	r2, [r7, #4]
10002498:	3260      	adds	r2, #96	; 0x60
1000249a:	0092      	lsls	r2, r2, #2
1000249c:	50d1      	str	r1, [r2, r3]
}
1000249e:	46bd      	mov	sp, r7
100024a0:	b004      	add	sp, #16
100024a2:	bd80      	pop	{r7, pc}

100024a4 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
100024a4:	b580      	push	{r7, lr}
100024a6:	b082      	sub	sp, #8
100024a8:	af00      	add	r7, sp, #0
100024aa:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
100024ac:	687a      	ldr	r2, [r7, #4]
100024ae:	238c      	movs	r3, #140	; 0x8c
100024b0:	005b      	lsls	r3, r3, #1
100024b2:	2180      	movs	r1, #128	; 0x80
100024b4:	0209      	lsls	r1, r1, #8
100024b6:	50d1      	str	r1, [r2, r3]
}
100024b8:	46bd      	mov	sp, r7
100024ba:	b002      	add	sp, #8
100024bc:	bd80      	pop	{r7, pc}
100024be:	46c0      	nop			; (mov r8, r8)

100024c0 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
100024c0:	b580      	push	{r7, lr}
100024c2:	b082      	sub	sp, #8
100024c4:	af00      	add	r7, sp, #0
100024c6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
100024c8:	687a      	ldr	r2, [r7, #4]
100024ca:	238a      	movs	r3, #138	; 0x8a
100024cc:	005b      	lsls	r3, r3, #1
100024ce:	58d2      	ldr	r2, [r2, r3]
100024d0:	2380      	movs	r3, #128	; 0x80
100024d2:	015b      	lsls	r3, r3, #5
100024d4:	4013      	ands	r3, r2
100024d6:	1e5a      	subs	r2, r3, #1
100024d8:	4193      	sbcs	r3, r2
100024da:	b2db      	uxtb	r3, r3
}
100024dc:	1c18      	adds	r0, r3, #0
100024de:	46bd      	mov	sp, r7
100024e0:	b002      	add	sp, #8
100024e2:	bd80      	pop	{r7, pc}

100024e4 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
100024e4:	b580      	push	{r7, lr}
100024e6:	b082      	sub	sp, #8
100024e8:	af00      	add	r7, sp, #0
100024ea:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
100024ec:	687a      	ldr	r2, [r7, #4]
100024ee:	238a      	movs	r3, #138	; 0x8a
100024f0:	005b      	lsls	r3, r3, #1
100024f2:	58d2      	ldr	r2, [r2, r3]
100024f4:	2380      	movs	r3, #128	; 0x80
100024f6:	011b      	lsls	r3, r3, #4
100024f8:	4013      	ands	r3, r2
100024fa:	1e5a      	subs	r2, r3, #1
100024fc:	4193      	sbcs	r3, r2
100024fe:	b2db      	uxtb	r3, r3
}
10002500:	1c18      	adds	r0, r3, #0
10002502:	46bd      	mov	sp, r7
10002504:	b002      	add	sp, #8
10002506:	bd80      	pop	{r7, pc}

10002508 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002508:	b580      	push	{r7, lr}
1000250a:	b082      	sub	sp, #8
1000250c:	af00      	add	r7, sp, #0
1000250e:	6078      	str	r0, [r7, #4]
10002510:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
10002512:	687a      	ldr	r2, [r7, #4]
10002514:	2386      	movs	r3, #134	; 0x86
10002516:	005b      	lsls	r3, r3, #1
10002518:	58d2      	ldr	r2, [r2, r3]
1000251a:	683b      	ldr	r3, [r7, #0]
1000251c:	431a      	orrs	r2, r3
1000251e:	1c11      	adds	r1, r2, #0
10002520:	687a      	ldr	r2, [r7, #4]
10002522:	2386      	movs	r3, #134	; 0x86
10002524:	005b      	lsls	r3, r3, #1
10002526:	50d1      	str	r1, [r2, r3]
}
10002528:	46bd      	mov	sp, r7
1000252a:	b002      	add	sp, #8
1000252c:	bd80      	pop	{r7, pc}
1000252e:	46c0      	nop			; (mov r8, r8)

10002530 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002530:	b580      	push	{r7, lr}
10002532:	b082      	sub	sp, #8
10002534:	af00      	add	r7, sp, #0
10002536:	6078      	str	r0, [r7, #4]
10002538:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
1000253a:	687a      	ldr	r2, [r7, #4]
1000253c:	2386      	movs	r3, #134	; 0x86
1000253e:	005b      	lsls	r3, r3, #1
10002540:	58d3      	ldr	r3, [r2, r3]
10002542:	683a      	ldr	r2, [r7, #0]
10002544:	43d2      	mvns	r2, r2
10002546:	401a      	ands	r2, r3
10002548:	1c11      	adds	r1, r2, #0
1000254a:	687a      	ldr	r2, [r7, #4]
1000254c:	2386      	movs	r3, #134	; 0x86
1000254e:	005b      	lsls	r3, r3, #1
10002550:	50d1      	str	r1, [r2, r3]
}
10002552:	46bd      	mov	sp, r7
10002554:	b002      	add	sp, #8
10002556:	bd80      	pop	{r7, pc}

10002558 <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10002558:	b580      	push	{r7, lr}
1000255a:	b082      	sub	sp, #8
1000255c:	af00      	add	r7, sp, #0
1000255e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
10002560:	687a      	ldr	r2, [r7, #4]
10002562:	238c      	movs	r3, #140	; 0x8c
10002564:	005b      	lsls	r3, r3, #1
10002566:	2180      	movs	r1, #128	; 0x80
10002568:	01c9      	lsls	r1, r1, #7
1000256a:	50d1      	str	r1, [r2, r3]
}
1000256c:	46bd      	mov	sp, r7
1000256e:	b002      	add	sp, #8
10002570:	bd80      	pop	{r7, pc}
10002572:	46c0      	nop			; (mov r8, r8)

10002574 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10002574:	b580      	push	{r7, lr}
10002576:	b082      	sub	sp, #8
10002578:	af00      	add	r7, sp, #0
1000257a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1000257c:	687a      	ldr	r2, [r7, #4]
1000257e:	238a      	movs	r3, #138	; 0x8a
10002580:	005b      	lsls	r3, r3, #1
10002582:	58d3      	ldr	r3, [r2, r3]
10002584:	2208      	movs	r2, #8
10002586:	4013      	ands	r3, r2
10002588:	1e5a      	subs	r2, r3, #1
1000258a:	4193      	sbcs	r3, r2
1000258c:	b2db      	uxtb	r3, r3
}
1000258e:	1c18      	adds	r0, r3, #0
10002590:	46bd      	mov	sp, r7
10002592:	b002      	add	sp, #8
10002594:	bd80      	pop	{r7, pc}
10002596:	46c0      	nop			; (mov r8, r8)

10002598 <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
10002598:	b580      	push	{r7, lr}
1000259a:	b082      	sub	sp, #8
1000259c:	af00      	add	r7, sp, #0
1000259e:	6078      	str	r0, [r7, #4]
100025a0:	1c0a      	adds	r2, r1, #0
100025a2:	1cfb      	adds	r3, r7, #3
100025a4:	701a      	strb	r2, [r3, #0]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
100025a6:	687b      	ldr	r3, [r7, #4]
100025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100025aa:	22c0      	movs	r2, #192	; 0xc0
100025ac:	4393      	bics	r3, r2
100025ae:	1c1a      	adds	r2, r3, #0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
100025b0:	1cfb      	adds	r3, r7, #3
100025b2:	781b      	ldrb	r3, [r3, #0]
100025b4:	019b      	lsls	r3, r3, #6
100025b6:	21ff      	movs	r1, #255	; 0xff
100025b8:	400b      	ands	r3, r1
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
100025ba:	431a      	orrs	r2, r3
100025bc:	687b      	ldr	r3, [r7, #4]
100025be:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
100025c0:	46bd      	mov	sp, r7
100025c2:	b002      	add	sp, #8
100025c4:	bd80      	pop	{r7, pc}
100025c6:	46c0      	nop			; (mov r8, r8)

100025c8 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
100025c8:	b590      	push	{r4, r7, lr}
100025ca:	b085      	sub	sp, #20
100025cc:	af00      	add	r7, sp, #0
100025ce:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
100025d0:	687b      	ldr	r3, [r7, #4]
100025d2:	685b      	ldr	r3, [r3, #4]
100025d4:	685b      	ldr	r3, [r3, #4]
100025d6:	220f      	movs	r2, #15
100025d8:	18bc      	adds	r4, r7, r2
100025da:	4798      	blx	r3
100025dc:	1c03      	adds	r3, r0, #0
100025de:	7023      	strb	r3, [r4, #0]

  return status;
100025e0:	230f      	movs	r3, #15
100025e2:	18fb      	adds	r3, r7, r3
100025e4:	781b      	ldrb	r3, [r3, #0]
}
100025e6:	1c18      	adds	r0, r3, #0
100025e8:	46bd      	mov	sp, r7
100025ea:	b005      	add	sp, #20
100025ec:	bd90      	pop	{r4, r7, pc}
100025ee:	46c0      	nop			; (mov r8, r8)

100025f0 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
100025f0:	b590      	push	{r4, r7, lr}
100025f2:	b087      	sub	sp, #28
100025f4:	af00      	add	r7, sp, #0
100025f6:	60f8      	str	r0, [r7, #12]
100025f8:	60b9      	str	r1, [r7, #8]
100025fa:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
100025fc:	2317      	movs	r3, #23
100025fe:	18fb      	adds	r3, r7, r3
10002600:	2201      	movs	r2, #1
10002602:	701a      	strb	r2, [r3, #0]

#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
10002604:	68fb      	ldr	r3, [r7, #12]
10002606:	685b      	ldr	r3, [r3, #4]
10002608:	2284      	movs	r2, #132	; 0x84
1000260a:	5c9b      	ldrb	r3, [r3, r2]
1000260c:	2b00      	cmp	r3, #0
1000260e:	d10b      	bne.n	10002628 <SPI_MASTER_Transmit+0x38>
  {
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
10002610:	2317      	movs	r3, #23
10002612:	18fc      	adds	r4, r7, r3
10002614:	68f9      	ldr	r1, [r7, #12]
10002616:	68ba      	ldr	r2, [r7, #8]
10002618:	687b      	ldr	r3, [r7, #4]
1000261a:	1c08      	adds	r0, r1, #0
1000261c:	1c11      	adds	r1, r2, #0
1000261e:	1c1a      	adds	r2, r3, #0
10002620:	f000 f80a 	bl	10002638 <SPI_MASTER_StartTransmitIRQ>
10002624:	1c03      	adds	r3, r0, #0
10002626:	7023      	strb	r3, [r4, #0]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
10002628:	2317      	movs	r3, #23
1000262a:	18fb      	adds	r3, r7, r3
1000262c:	781b      	ldrb	r3, [r3, #0]
}
1000262e:	1c18      	adds	r0, r3, #0
10002630:	46bd      	mov	sp, r7
10002632:	b007      	add	sp, #28
10002634:	bd90      	pop	{r4, r7, pc}
10002636:	46c0      	nop			; (mov r8, r8)

10002638 <SPI_MASTER_StartTransmitIRQ>:
#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
/*
 * Transmit the number of data words specified.
 */
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
10002638:	b580      	push	{r7, lr}
1000263a:	b088      	sub	sp, #32
1000263c:	af00      	add	r7, sp, #0
1000263e:	60f8      	str	r0, [r7, #12]
10002640:	60b9      	str	r1, [r7, #8]
10002642:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
10002644:	2301      	movs	r3, #1
10002646:	61bb      	str	r3, [r7, #24]
                                                           Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_StartTransmitIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
10002648:	231f      	movs	r3, #31
1000264a:	18fb      	adds	r3, r7, r3
1000264c:	2204      	movs	r2, #4
1000264e:	701a      	strb	r2, [r3, #0]
  runtime_handle = handle->runtime;
10002650:	68fb      	ldr	r3, [r7, #12]
10002652:	689b      	ldr	r3, [r3, #8]
10002654:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
10002656:	68fb      	ldr	r3, [r7, #12]
10002658:	685b      	ldr	r3, [r3, #4]
1000265a:	2284      	movs	r2, #132	; 0x84
1000265c:	5c9b      	ldrb	r3, [r3, r2]
1000265e:	2b00      	cmp	r3, #0
10002660:	d164      	bne.n	1000272c <SPI_MASTER_StartTransmitIRQ+0xf4>
  {
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
10002662:	68bb      	ldr	r3, [r7, #8]
10002664:	2b00      	cmp	r3, #0
10002666:	d05d      	beq.n	10002724 <SPI_MASTER_StartTransmitIRQ+0xec>
10002668:	687b      	ldr	r3, [r7, #4]
1000266a:	2b00      	cmp	r3, #0
1000266c:	d05a      	beq.n	10002724 <SPI_MASTER_StartTransmitIRQ+0xec>
    {
      status = SPI_MASTER_STATUS_BUSY;
1000266e:	231f      	movs	r3, #31
10002670:	18fb      	adds	r3, r7, r3
10002672:	2202      	movs	r2, #2
10002674:	701a      	strb	r2, [r3, #0]
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
10002676:	697b      	ldr	r3, [r7, #20]
10002678:	2220      	movs	r2, #32
1000267a:	5c9b      	ldrb	r3, [r3, r2]
1000267c:	b2db      	uxtb	r3, r3
1000267e:	2201      	movs	r2, #1
10002680:	4053      	eors	r3, r2
10002682:	b2db      	uxtb	r3, r3
10002684:	2b00      	cmp	r3, #0
10002686:	d04c      	beq.n	10002722 <SPI_MASTER_StartTransmitIRQ+0xea>
      {
        if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
10002688:	68fb      	ldr	r3, [r7, #12]
1000268a:	689b      	ldr	r3, [r3, #8]
1000268c:	681b      	ldr	r3, [r3, #0]
1000268e:	2b08      	cmp	r3, #8
10002690:	d901      	bls.n	10002696 <SPI_MASTER_StartTransmitIRQ+0x5e>
        {
          bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
10002692:	2302      	movs	r3, #2
10002694:	61bb      	str	r3, [r7, #24]
        }

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
10002696:	697b      	ldr	r3, [r7, #20]
10002698:	68ba      	ldr	r2, [r7, #8]
1000269a:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
1000269c:	69bb      	ldr	r3, [r7, #24]
1000269e:	3b01      	subs	r3, #1
100026a0:	1c1a      	adds	r2, r3, #0
100026a2:	687b      	ldr	r3, [r7, #4]
100026a4:	4093      	lsls	r3, r2
100026a6:	1c1a      	adds	r2, r3, #0
100026a8:	697b      	ldr	r3, [r7, #20]
100026aa:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
100026ac:	697b      	ldr	r3, [r7, #20]
100026ae:	2200      	movs	r2, #0
100026b0:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
100026b2:	697b      	ldr	r3, [r7, #20]
100026b4:	2220      	movs	r2, #32
100026b6:	2101      	movs	r1, #1
100026b8:	5499      	strb	r1, [r3, r2]

        /* Enable the transmit buffer event */
        if ((uint32_t)handle->config->tx_fifo_size > 0U)
100026ba:	68fb      	ldr	r3, [r7, #12]
100026bc:	685b      	ldr	r3, [r3, #4]
100026be:	227c      	movs	r2, #124	; 0x7c
100026c0:	5c9b      	ldrb	r3, [r3, r2]
100026c2:	2b00      	cmp	r3, #0
100026c4:	d00d      	beq.n	100026e2 <SPI_MASTER_StartTransmitIRQ+0xaa>
        {
          /* Flush the Transmit FIFO */
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
100026c6:	68fb      	ldr	r3, [r7, #12]
100026c8:	681b      	ldr	r3, [r3, #0]
100026ca:	1c18      	adds	r0, r3, #0
100026cc:	f7ff feea 	bl	100024a4 <XMC_USIC_CH_TXFIFO_Flush>
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
100026d0:	68fb      	ldr	r3, [r7, #12]
100026d2:	681a      	ldr	r2, [r3, #0]
100026d4:	2380      	movs	r3, #128	; 0x80
100026d6:	05db      	lsls	r3, r3, #23
100026d8:	1c10      	adds	r0, r2, #0
100026da:	1c19      	adds	r1, r3, #0
100026dc:	f7ff fea6 	bl	1000242c <XMC_USIC_CH_TXFIFO_EnableEvent>
100026e0:	e007      	b.n	100026f2 <SPI_MASTER_StartTransmitIRQ+0xba>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
100026e2:	68fb      	ldr	r3, [r7, #12]
100026e4:	681a      	ldr	r2, [r3, #0]
100026e6:	2380      	movs	r3, #128	; 0x80
100026e8:	019b      	lsls	r3, r3, #6
100026ea:	1c10      	adds	r0, r2, #0
100026ec:	1c19      	adds	r1, r3, #0
100026ee:	f7ff fe55 	bl	1000239c <XMC_USIC_CH_EnableEvent>
        }
        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
100026f2:	68fb      	ldr	r3, [r7, #12]
100026f4:	681a      	ldr	r2, [r3, #0]
100026f6:	697b      	ldr	r3, [r7, #20]
100026f8:	7f1b      	ldrb	r3, [r3, #28]
100026fa:	b2db      	uxtb	r3, r3
100026fc:	1c10      	adds	r0, r2, #0
100026fe:	1c19      	adds	r1, r3, #0
10002700:	f7ff ff4a 	bl	10002598 <XMC_SPI_CH_SetTransmitMode>
        status = SPI_MASTER_STATUS_SUCCESS;
10002704:	231f      	movs	r3, #31
10002706:	18fb      	adds	r3, r7, r3
10002708:	2200      	movs	r2, #0
1000270a:	701a      	strb	r2, [r3, #0]

        /* Trigger the transmit buffer interrupt */
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
1000270c:	68fb      	ldr	r3, [r7, #12]
1000270e:	6819      	ldr	r1, [r3, #0]
10002710:	68fb      	ldr	r3, [r7, #12]
10002712:	685b      	ldr	r3, [r3, #4]
10002714:	2289      	movs	r2, #137	; 0x89
10002716:	5c9b      	ldrb	r3, [r3, r2]
10002718:	1c08      	adds	r0, r1, #0
1000271a:	1c19      	adds	r1, r3, #0
1000271c:	f7ff fe78 	bl	10002410 <XMC_USIC_CH_TriggerServiceRequest>
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      status = SPI_MASTER_STATUS_BUSY;
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
10002720:	e004      	b.n	1000272c <SPI_MASTER_StartTransmitIRQ+0xf4>
10002722:	e003      	b.n	1000272c <SPI_MASTER_StartTransmitIRQ+0xf4>
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
10002724:	231f      	movs	r3, #31
10002726:	18fb      	adds	r3, r7, r3
10002728:	2203      	movs	r2, #3
1000272a:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
1000272c:	231f      	movs	r3, #31
1000272e:	18fb      	adds	r3, r7, r3
10002730:	781b      	ldrb	r3, [r3, #0]
}
10002732:	1c18      	adds	r0, r3, #0
10002734:	46bd      	mov	sp, r7
10002736:	b008      	add	sp, #32
10002738:	bd80      	pop	{r7, pc}
1000273a:	46c0      	nop			; (mov r8, r8)

1000273c <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
1000273c:	b590      	push	{r4, r7, lr}
1000273e:	b087      	sub	sp, #28
10002740:	af00      	add	r7, sp, #0
10002742:	60f8      	str	r0, [r7, #12]
10002744:	60b9      	str	r1, [r7, #8]
10002746:	607a      	str	r2, [r7, #4]
10002748:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
1000274a:	2317      	movs	r3, #23
1000274c:	18fb      	adds	r3, r7, r3
1000274e:	2202      	movs	r2, #2
10002750:	701a      	strb	r2, [r3, #0]
  runtime_handle = handle->runtime;
10002752:	68fb      	ldr	r3, [r7, #12]
10002754:	689b      	ldr	r3, [r3, #8]
10002756:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
10002758:	693b      	ldr	r3, [r7, #16]
1000275a:	7f1b      	ldrb	r3, [r3, #28]
1000275c:	b2db      	uxtb	r3, r3
1000275e:	2b00      	cmp	r3, #0
10002760:	d145      	bne.n	100027ee <SPI_MASTER_Transfer+0xb2>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
10002762:	68bb      	ldr	r3, [r7, #8]
10002764:	2b00      	cmp	r3, #0
10002766:	d03c      	beq.n	100027e2 <SPI_MASTER_Transfer+0xa6>
10002768:	687b      	ldr	r3, [r7, #4]
1000276a:	2b00      	cmp	r3, #0
1000276c:	d039      	beq.n	100027e2 <SPI_MASTER_Transfer+0xa6>
1000276e:	683b      	ldr	r3, [r7, #0]
10002770:	2b00      	cmp	r3, #0
10002772:	d036      	beq.n	100027e2 <SPI_MASTER_Transfer+0xa6>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
10002774:	693b      	ldr	r3, [r7, #16]
10002776:	7fdb      	ldrb	r3, [r3, #31]
10002778:	b2db      	uxtb	r3, r3
1000277a:	2201      	movs	r2, #1
1000277c:	4053      	eors	r3, r2
1000277e:	b2db      	uxtb	r3, r3
10002780:	2b00      	cmp	r3, #0
10002782:	d02d      	beq.n	100027e0 <SPI_MASTER_Transfer+0xa4>
10002784:	693b      	ldr	r3, [r7, #16]
10002786:	2220      	movs	r2, #32
10002788:	5c9b      	ldrb	r3, [r3, r2]
1000278a:	b2db      	uxtb	r3, r3
1000278c:	2201      	movs	r2, #1
1000278e:	4053      	eors	r3, r2
10002790:	b2db      	uxtb	r3, r3
10002792:	2b00      	cmp	r3, #0
10002794:	d024      	beq.n	100027e0 <SPI_MASTER_Transfer+0xa4>
      {
        runtime_handle->rx_busy = true;
10002796:	693b      	ldr	r3, [r7, #16]
10002798:	2201      	movs	r2, #1
1000279a:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
1000279c:	693b      	ldr	r3, [r7, #16]
1000279e:	687a      	ldr	r2, [r7, #4]
100027a0:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
100027a2:	693b      	ldr	r3, [r7, #16]
100027a4:	68ba      	ldr	r2, [r7, #8]
100027a6:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
100027a8:	693b      	ldr	r3, [r7, #16]
100027aa:	683a      	ldr	r2, [r7, #0]
100027ac:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
100027ae:	693b      	ldr	r3, [r7, #16]
100027b0:	2221      	movs	r2, #33	; 0x21
100027b2:	2100      	movs	r1, #0
100027b4:	5499      	strb	r1, [r3, r2]
        runtime_handle->rx_data_dummy = false;
100027b6:	693b      	ldr	r3, [r7, #16]
100027b8:	2222      	movs	r2, #34	; 0x22
100027ba:	2100      	movs	r1, #0
100027bc:	5499      	strb	r1, [r3, r2]

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
100027be:	68fb      	ldr	r3, [r7, #12]
100027c0:	685b      	ldr	r3, [r3, #4]
100027c2:	2285      	movs	r2, #133	; 0x85
100027c4:	5c9b      	ldrb	r3, [r3, r2]
100027c6:	2b00      	cmp	r3, #0
100027c8:	d10a      	bne.n	100027e0 <SPI_MASTER_Transfer+0xa4>
        {
          status = SPI_MASTER_lReceiveIRQ(handle, count);
100027ca:	2317      	movs	r3, #23
100027cc:	18fc      	adds	r4, r7, r3
100027ce:	68fa      	ldr	r2, [r7, #12]
100027d0:	683b      	ldr	r3, [r7, #0]
100027d2:	1c10      	adds	r0, r2, #0
100027d4:	1c19      	adds	r1, r3, #0
100027d6:	f000 f90d 	bl	100029f4 <SPI_MASTER_lReceiveIRQ>
100027da:	1c03      	adds	r3, r0, #0
100027dc:	7023      	strb	r3, [r4, #0]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
100027de:	e005      	b.n	100027ec <SPI_MASTER_Transfer+0xb0>
100027e0:	e004      	b.n	100027ec <SPI_MASTER_Transfer+0xb0>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
100027e2:	2317      	movs	r3, #23
100027e4:	18fb      	adds	r3, r7, r3
100027e6:	2203      	movs	r2, #3
100027e8:	701a      	strb	r2, [r3, #0]
100027ea:	e004      	b.n	100027f6 <SPI_MASTER_Transfer+0xba>
100027ec:	e003      	b.n	100027f6 <SPI_MASTER_Transfer+0xba>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
100027ee:	2317      	movs	r3, #23
100027f0:	18fb      	adds	r3, r7, r3
100027f2:	2201      	movs	r2, #1
100027f4:	701a      	strb	r2, [r3, #0]
  }

  return status;
100027f6:	2317      	movs	r3, #23
100027f8:	18fb      	adds	r3, r7, r3
100027fa:	781b      	ldrb	r3, [r3, #0]
}
100027fc:	1c18      	adds	r0, r3, #0
100027fe:	46bd      	mov	sp, r7
10002800:	b007      	add	sp, #28
10002802:	bd90      	pop	{r4, r7, pc}

10002804 <SPI_MASTER_lTransmitHandler>:
 * Transmit interrupt handler for the APP.
 * This is a common interrupt handling function called for different instances of the APP.
 *
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
10002804:	b590      	push	{r4, r7, lr}
10002806:	b087      	sub	sp, #28
10002808:	af00      	add	r7, sp, #0
1000280a:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
1000280c:	2301      	movs	r3, #1
1000280e:	613b      	str	r3, [r7, #16]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
10002810:	687b      	ldr	r3, [r7, #4]
10002812:	689b      	ldr	r3, [r3, #8]
10002814:	60fb      	str	r3, [r7, #12]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
10002816:	687b      	ldr	r3, [r7, #4]
10002818:	689b      	ldr	r3, [r3, #8]
1000281a:	681b      	ldr	r3, [r3, #0]
1000281c:	2b08      	cmp	r3, #8
1000281e:	d901      	bls.n	10002824 <SPI_MASTER_lTransmitHandler+0x20>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
10002820:	2302      	movs	r3, #2
10002822:	613b      	str	r3, [r7, #16]
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
10002824:	68fb      	ldr	r3, [r7, #12]
10002826:	689a      	ldr	r2, [r3, #8]
10002828:	68fb      	ldr	r3, [r7, #12]
1000282a:	685b      	ldr	r3, [r3, #4]
1000282c:	429a      	cmp	r2, r3
1000282e:	d300      	bcc.n	10002832 <SPI_MASTER_lTransmitHandler+0x2e>
10002830:	e09b      	b.n	1000296a <SPI_MASTER_lTransmitHandler+0x166>
  {
    data = 0U;
10002832:	2316      	movs	r3, #22
10002834:	18fb      	adds	r3, r7, r3
10002836:	2200      	movs	r2, #0
10002838:	801a      	strh	r2, [r3, #0]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
1000283a:	687b      	ldr	r3, [r7, #4]
1000283c:	685b      	ldr	r3, [r3, #4]
1000283e:	227c      	movs	r2, #124	; 0x7c
10002840:	5c9b      	ldrb	r3, [r3, r2]
10002842:	2b00      	cmp	r3, #0
10002844:	d053      	beq.n	100028ee <SPI_MASTER_lTransmitHandler+0xea>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10002846:	e045      	b.n	100028d4 <SPI_MASTER_lTransmitHandler+0xd0>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
10002848:	68fb      	ldr	r3, [r7, #12]
1000284a:	689a      	ldr	r2, [r3, #8]
1000284c:	68fb      	ldr	r3, [r7, #12]
1000284e:	685b      	ldr	r3, [r3, #4]
10002850:	429a      	cmp	r2, r3
10002852:	d23d      	bcs.n	100028d0 <SPI_MASTER_lTransmitHandler+0xcc>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
10002854:	68fb      	ldr	r3, [r7, #12]
10002856:	2221      	movs	r2, #33	; 0x21
10002858:	5c9b      	ldrb	r3, [r3, r2]
1000285a:	b2db      	uxtb	r3, r3
1000285c:	2b00      	cmp	r3, #0
1000285e:	d00c      	beq.n	1000287a <SPI_MASTER_lTransmitHandler+0x76>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
10002860:	687b      	ldr	r3, [r7, #4]
10002862:	681a      	ldr	r2, [r3, #0]
10002864:	68fb      	ldr	r3, [r7, #12]
10002866:	7f1b      	ldrb	r3, [r3, #28]
10002868:	b2db      	uxtb	r3, r3
1000286a:	1c1c      	adds	r4, r3, #0
1000286c:	4b60      	ldr	r3, [pc, #384]	; (100029f0 <SPI_MASTER_lTransmitHandler+0x1ec>)
1000286e:	1c10      	adds	r0, r2, #0
10002870:	1c19      	adds	r1, r3, #0
10002872:	1c22      	adds	r2, r4, #0
10002874:	f7ff fe02 	bl	1000247c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
10002878:	e023      	b.n	100028c2 <SPI_MASTER_lTransmitHandler+0xbe>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1000287a:	693b      	ldr	r3, [r7, #16]
1000287c:	2b02      	cmp	r3, #2
1000287e:	d109      	bne.n	10002894 <SPI_MASTER_lTransmitHandler+0x90>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
10002880:	68fb      	ldr	r3, [r7, #12]
10002882:	699a      	ldr	r2, [r3, #24]
10002884:	68fb      	ldr	r3, [r7, #12]
10002886:	689b      	ldr	r3, [r3, #8]
10002888:	18d2      	adds	r2, r2, r3
1000288a:	2316      	movs	r3, #22
1000288c:	18fb      	adds	r3, r7, r3
1000288e:	8812      	ldrh	r2, [r2, #0]
10002890:	801a      	strh	r2, [r3, #0]
10002892:	e008      	b.n	100028a6 <SPI_MASTER_lTransmitHandler+0xa2>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
10002894:	68fb      	ldr	r3, [r7, #12]
10002896:	699a      	ldr	r2, [r3, #24]
10002898:	68fb      	ldr	r3, [r7, #12]
1000289a:	689b      	ldr	r3, [r3, #8]
1000289c:	18d3      	adds	r3, r2, r3
1000289e:	781a      	ldrb	r2, [r3, #0]
100028a0:	2316      	movs	r3, #22
100028a2:	18fb      	adds	r3, r7, r3
100028a4:	801a      	strh	r2, [r3, #0]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
100028a6:	687b      	ldr	r3, [r7, #4]
100028a8:	681a      	ldr	r2, [r3, #0]
100028aa:	68fb      	ldr	r3, [r7, #12]
100028ac:	7f1b      	ldrb	r3, [r3, #28]
100028ae:	b2db      	uxtb	r3, r3
100028b0:	1c1c      	adds	r4, r3, #0
100028b2:	2316      	movs	r3, #22
100028b4:	18fb      	adds	r3, r7, r3
100028b6:	881b      	ldrh	r3, [r3, #0]
100028b8:	1c10      	adds	r0, r2, #0
100028ba:	1c19      	adds	r1, r3, #0
100028bc:	1c22      	adds	r2, r4, #0
100028be:	f7ff fddd 	bl	1000247c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
100028c2:	68fb      	ldr	r3, [r7, #12]
100028c4:	689a      	ldr	r2, [r3, #8]
100028c6:	693b      	ldr	r3, [r7, #16]
100028c8:	18d2      	adds	r2, r2, r3
100028ca:	68fb      	ldr	r3, [r7, #12]
100028cc:	609a      	str	r2, [r3, #8]
100028ce:	e001      	b.n	100028d4 <SPI_MASTER_lTransmitHandler+0xd0>
        }
        else
        {
          break;
100028d0:	46c0      	nop			; (mov r8, r8)
100028d2:	e089      	b.n	100029e8 <SPI_MASTER_lTransmitHandler+0x1e4>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
100028d4:	687b      	ldr	r3, [r7, #4]
100028d6:	681b      	ldr	r3, [r3, #0]
100028d8:	1c18      	adds	r0, r3, #0
100028da:	f7ff fdf1 	bl	100024c0 <XMC_USIC_CH_TXFIFO_IsFull>
100028de:	1c03      	adds	r3, r0, #0
100028e0:	1c1a      	adds	r2, r3, #0
100028e2:	2301      	movs	r3, #1
100028e4:	4053      	eors	r3, r2
100028e6:	b2db      	uxtb	r3, r3
100028e8:	2b00      	cmp	r3, #0
100028ea:	d1ad      	bne.n	10002848 <SPI_MASTER_lTransmitHandler+0x44>
100028ec:	e07c      	b.n	100029e8 <SPI_MASTER_lTransmitHandler+0x1e4>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
100028ee:	68fb      	ldr	r3, [r7, #12]
100028f0:	2221      	movs	r2, #33	; 0x21
100028f2:	5c9b      	ldrb	r3, [r3, r2]
100028f4:	b2db      	uxtb	r3, r3
100028f6:	2b00      	cmp	r3, #0
100028f8:	d00c      	beq.n	10002914 <SPI_MASTER_lTransmitHandler+0x110>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
100028fa:	687b      	ldr	r3, [r7, #4]
100028fc:	681a      	ldr	r2, [r3, #0]
100028fe:	68fb      	ldr	r3, [r7, #12]
10002900:	7f1b      	ldrb	r3, [r3, #28]
10002902:	b2db      	uxtb	r3, r3
10002904:	1c1c      	adds	r4, r3, #0
10002906:	4b3a      	ldr	r3, [pc, #232]	; (100029f0 <SPI_MASTER_lTransmitHandler+0x1ec>)
10002908:	1c10      	adds	r0, r2, #0
1000290a:	1c19      	adds	r1, r3, #0
1000290c:	1c22      	adds	r2, r4, #0
1000290e:	f7ff fd31 	bl	10002374 <XMC_USIC_CH_WriteToTBUFTCI>
10002912:	e023      	b.n	1000295c <SPI_MASTER_lTransmitHandler+0x158>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
10002914:	693b      	ldr	r3, [r7, #16]
10002916:	2b02      	cmp	r3, #2
10002918:	d109      	bne.n	1000292e <SPI_MASTER_lTransmitHandler+0x12a>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
1000291a:	68fb      	ldr	r3, [r7, #12]
1000291c:	699a      	ldr	r2, [r3, #24]
1000291e:	68fb      	ldr	r3, [r7, #12]
10002920:	689b      	ldr	r3, [r3, #8]
10002922:	18d2      	adds	r2, r2, r3
10002924:	2316      	movs	r3, #22
10002926:	18fb      	adds	r3, r7, r3
10002928:	8812      	ldrh	r2, [r2, #0]
1000292a:	801a      	strh	r2, [r3, #0]
1000292c:	e008      	b.n	10002940 <SPI_MASTER_lTransmitHandler+0x13c>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
1000292e:	68fb      	ldr	r3, [r7, #12]
10002930:	699a      	ldr	r2, [r3, #24]
10002932:	68fb      	ldr	r3, [r7, #12]
10002934:	689b      	ldr	r3, [r3, #8]
10002936:	18d3      	adds	r3, r2, r3
10002938:	781a      	ldrb	r2, [r3, #0]
1000293a:	2316      	movs	r3, #22
1000293c:	18fb      	adds	r3, r7, r3
1000293e:	801a      	strh	r2, [r3, #0]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
10002940:	687b      	ldr	r3, [r7, #4]
10002942:	681a      	ldr	r2, [r3, #0]
10002944:	68fb      	ldr	r3, [r7, #12]
10002946:	7f1b      	ldrb	r3, [r3, #28]
10002948:	b2db      	uxtb	r3, r3
1000294a:	1c1c      	adds	r4, r3, #0
1000294c:	2316      	movs	r3, #22
1000294e:	18fb      	adds	r3, r7, r3
10002950:	881b      	ldrh	r3, [r3, #0]
10002952:	1c10      	adds	r0, r2, #0
10002954:	1c19      	adds	r1, r3, #0
10002956:	1c22      	adds	r2, r4, #0
10002958:	f7ff fd0c 	bl	10002374 <XMC_USIC_CH_WriteToTBUFTCI>
      }
      (runtime_handle->tx_data_index)+= bytes_per_word;
1000295c:	68fb      	ldr	r3, [r7, #12]
1000295e:	689a      	ldr	r2, [r3, #8]
10002960:	693b      	ldr	r3, [r7, #16]
10002962:	18d2      	adds	r2, r2, r3
10002964:	68fb      	ldr	r3, [r7, #12]
10002966:	609a      	str	r2, [r3, #8]
10002968:	e03e      	b.n	100029e8 <SPI_MASTER_lTransmitHandler+0x1e4>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
1000296a:	687b      	ldr	r3, [r7, #4]
1000296c:	681b      	ldr	r3, [r3, #0]
1000296e:	1c18      	adds	r0, r3, #0
10002970:	f7ff fdb8 	bl	100024e4 <XMC_USIC_CH_TXFIFO_IsEmpty>
10002974:	1e03      	subs	r3, r0, #0
10002976:	d037      	beq.n	100029e8 <SPI_MASTER_lTransmitHandler+0x1e4>
    {
      /* Clear the flag */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
10002978:	687b      	ldr	r3, [r7, #4]
1000297a:	685b      	ldr	r3, [r3, #4]
1000297c:	227c      	movs	r2, #124	; 0x7c
1000297e:	5c9b      	ldrb	r3, [r3, r2]
10002980:	2b00      	cmp	r3, #0
10002982:	d008      	beq.n	10002996 <SPI_MASTER_lTransmitHandler+0x192>
      {
        /* Clear the transmit FIFO event */
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10002984:	687b      	ldr	r3, [r7, #4]
10002986:	681a      	ldr	r2, [r3, #0]
10002988:	2380      	movs	r3, #128	; 0x80
1000298a:	05db      	lsls	r3, r3, #23
1000298c:	1c10      	adds	r0, r2, #0
1000298e:	1c19      	adds	r1, r3, #0
10002990:	f7ff fd60 	bl	10002454 <XMC_USIC_CH_TXFIFO_DisableEvent>
10002994:	e007      	b.n	100029a6 <SPI_MASTER_lTransmitHandler+0x1a2>
      }
      else
      {
        /* Clear the standard transmit event */
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
10002996:	687b      	ldr	r3, [r7, #4]
10002998:	681a      	ldr	r2, [r3, #0]
1000299a:	2380      	movs	r3, #128	; 0x80
1000299c:	019b      	lsls	r3, r3, #6
1000299e:	1c10      	adds	r0, r2, #0
100029a0:	1c19      	adds	r1, r3, #0
100029a2:	f7ff fd09 	bl	100023b8 <XMC_USIC_CH_DisableEvent>
      }

      /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100029a6:	46c0      	nop			; (mov r8, r8)
100029a8:	687b      	ldr	r3, [r7, #4]
100029aa:	681b      	ldr	r3, [r3, #0]
100029ac:	1c18      	adds	r0, r3, #0
100029ae:	f7ff fd13 	bl	100023d8 <XMC_USIC_CH_GetTransmitBufferStatus>
100029b2:	1e03      	subs	r3, r0, #0
100029b4:	2b80      	cmp	r3, #128	; 0x80
100029b6:	d0f7      	beq.n	100029a8 <SPI_MASTER_lTransmitHandler+0x1a4>
      {

      }

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
100029b8:	68fb      	ldr	r3, [r7, #12]
100029ba:	2220      	movs	r2, #32
100029bc:	2100      	movs	r1, #0
100029be:	5499      	strb	r1, [r3, r2]
      runtime_handle->tx_data = NULL;
100029c0:	68fb      	ldr	r3, [r7, #12]
100029c2:	2200      	movs	r2, #0
100029c4:	619a      	str	r2, [r3, #24]

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
100029c6:	687b      	ldr	r3, [r7, #4]
100029c8:	685b      	ldr	r3, [r3, #4]
100029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100029cc:	2b00      	cmp	r3, #0
100029ce:	d00b      	beq.n	100029e8 <SPI_MASTER_lTransmitHandler+0x1e4>
100029d0:	68fb      	ldr	r3, [r7, #12]
100029d2:	7fdb      	ldrb	r3, [r3, #31]
100029d4:	b2db      	uxtb	r3, r3
100029d6:	2201      	movs	r2, #1
100029d8:	4053      	eors	r3, r2
100029da:	b2db      	uxtb	r3, r3
100029dc:	2b00      	cmp	r3, #0
100029de:	d003      	beq.n	100029e8 <SPI_MASTER_lTransmitHandler+0x1e4>
      {
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
100029e0:	687b      	ldr	r3, [r7, #4]
100029e2:	685b      	ldr	r3, [r3, #4]
100029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100029e6:	4798      	blx	r3
      }
    }
  }
}
100029e8:	46bd      	mov	sp, r7
100029ea:	b007      	add	sp, #28
100029ec:	bd90      	pop	{r4, r7, pc}
100029ee:	46c0      	nop			; (mov r8, r8)
100029f0:	0000ffff 	.word	0x0000ffff

100029f4 <SPI_MASTER_lReceiveIRQ>:
#endif

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lReceiveIRQ(const SPI_MASTER_t *const handle, uint32_t count)
{
100029f4:	b590      	push	{r4, r7, lr}
100029f6:	b087      	sub	sp, #28
100029f8:	af00      	add	r7, sp, #0
100029fa:	6078      	str	r0, [r7, #4]
100029fc:	6039      	str	r1, [r7, #0]

  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
100029fe:	2301      	movs	r3, #1
10002a00:	617b      	str	r3, [r7, #20]
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
10002a02:	687b      	ldr	r3, [r7, #4]
10002a04:	689b      	ldr	r3, [r3, #8]
10002a06:	613b      	str	r3, [r7, #16]
  runtime_handle->rx_data_index = 0U;
10002a08:	693b      	ldr	r3, [r7, #16]
10002a0a:	2200      	movs	r2, #0
10002a0c:	611a      	str	r2, [r3, #16]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
10002a0e:	687b      	ldr	r3, [r7, #4]
10002a10:	689b      	ldr	r3, [r3, #8]
10002a12:	681b      	ldr	r3, [r3, #0]
10002a14:	2b08      	cmp	r3, #8
10002a16:	d901      	bls.n	10002a1c <SPI_MASTER_lReceiveIRQ+0x28>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
10002a18:	2302      	movs	r3, #2
10002a1a:	617b      	str	r3, [r7, #20]
  }

  /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received */
  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
10002a1c:	697b      	ldr	r3, [r7, #20]
10002a1e:	3b01      	subs	r3, #1
10002a20:	1c1a      	adds	r2, r3, #0
10002a22:	683b      	ldr	r3, [r7, #0]
10002a24:	4093      	lsls	r3, r2
10002a26:	1c1a      	adds	r2, r3, #0
10002a28:	693b      	ldr	r3, [r7, #16]
10002a2a:	60da      	str	r2, [r3, #12]

  /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
10002a2c:	687b      	ldr	r3, [r7, #4]
10002a2e:	685b      	ldr	r3, [r3, #4]
10002a30:	227d      	movs	r2, #125	; 0x7d
10002a32:	5c9b      	ldrb	r3, [r3, r2]
10002a34:	2b00      	cmp	r3, #0
10002a36:	d019      	beq.n	10002a6c <SPI_MASTER_lReceiveIRQ+0x78>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
10002a38:	687b      	ldr	r3, [r7, #4]
10002a3a:	681b      	ldr	r3, [r3, #0]
10002a3c:	1c18      	adds	r0, r3, #0
10002a3e:	f7ff fd8b 	bl	10002558 <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
10002a42:	687b      	ldr	r3, [r7, #4]
10002a44:	681b      	ldr	r3, [r3, #0]
10002a46:	1c18      	adds	r0, r3, #0
10002a48:	f000 f9ba 	bl	10002dc0 <SPI_MASTER_lStdRBUFFlush>

    /* Configure the FIFO trigger limit based on the required data size */
    SPI_MASTER_lReconfigureRxFIFO(handle, runtime_handle->rx_data_count);
10002a4c:	693b      	ldr	r3, [r7, #16]
10002a4e:	68db      	ldr	r3, [r3, #12]
10002a50:	687a      	ldr	r2, [r7, #4]
10002a52:	1c10      	adds	r0, r2, #0
10002a54:	1c19      	adds	r1, r3, #0
10002a56:	f000 f97b 	bl	10002d50 <SPI_MASTER_lReconfigureRxFIFO>

    /* Enable the receive FIFO events */
    XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
10002a5a:	687b      	ldr	r3, [r7, #4]
10002a5c:	681a      	ldr	r2, [r3, #0]
10002a5e:	23c0      	movs	r3, #192	; 0xc0
10002a60:	05db      	lsls	r3, r3, #23
10002a62:	1c10      	adds	r0, r2, #0
10002a64:	1c19      	adds	r1, r3, #0
10002a66:	f7ff fd4f 	bl	10002508 <XMC_USIC_CH_RXFIFO_EnableEvent>
10002a6a:	e00c      	b.n	10002a86 <SPI_MASTER_lReceiveIRQ+0x92>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
10002a6c:	687b      	ldr	r3, [r7, #4]
10002a6e:	681b      	ldr	r3, [r3, #0]
10002a70:	1c18      	adds	r0, r3, #0
10002a72:	f000 f9a5 	bl	10002dc0 <SPI_MASTER_lStdRBUFFlush>

    /* Enable the standard receive events */
    XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
10002a76:	687b      	ldr	r3, [r7, #4]
10002a78:	681a      	ldr	r2, [r3, #0]
10002a7a:	23c0      	movs	r3, #192	; 0xc0
10002a7c:	021b      	lsls	r3, r3, #8
10002a7e:	1c10      	adds	r0, r2, #0
10002a80:	1c19      	adds	r1, r3, #0
10002a82:	f7ff fc8b 	bl	1000239c <XMC_USIC_CH_EnableEvent>
  }
  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
10002a86:	693b      	ldr	r3, [r7, #16]
10002a88:	699a      	ldr	r2, [r3, #24]
10002a8a:	693b      	ldr	r3, [r7, #16]
10002a8c:	685b      	ldr	r3, [r3, #4]
10002a8e:	210f      	movs	r1, #15
10002a90:	187c      	adds	r4, r7, r1
10002a92:	6879      	ldr	r1, [r7, #4]
10002a94:	1c08      	adds	r0, r1, #0
10002a96:	1c11      	adds	r1, r2, #0
10002a98:	1c1a      	adds	r2, r3, #0
10002a9a:	f7ff fda9 	bl	100025f0 <SPI_MASTER_Transmit>
10002a9e:	1c03      	adds	r3, r0, #0
10002aa0:	7023      	strb	r3, [r4, #0]

  return status;
10002aa2:	230f      	movs	r3, #15
10002aa4:	18fb      	adds	r3, r7, r3
10002aa6:	781b      	ldrb	r3, [r3, #0]
}
10002aa8:	1c18      	adds	r0, r3, #0
10002aaa:	46bd      	mov	sp, r7
10002aac:	b007      	add	sp, #28
10002aae:	bd90      	pop	{r4, r7, pc}

10002ab0 <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
10002ab0:	b590      	push	{r4, r7, lr}
10002ab2:	b087      	sub	sp, #28
10002ab4:	af00      	add	r7, sp, #0
10002ab6:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
10002ab8:	2301      	movs	r3, #1
10002aba:	617b      	str	r3, [r7, #20]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
10002abc:	687b      	ldr	r3, [r7, #4]
10002abe:	689b      	ldr	r3, [r3, #8]
10002ac0:	613b      	str	r3, [r7, #16]

  data = 0U;
10002ac2:	230e      	movs	r3, #14
10002ac4:	18fb      	adds	r3, r7, r3
10002ac6:	2200      	movs	r2, #0
10002ac8:	801a      	strh	r2, [r3, #0]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
10002aca:	687b      	ldr	r3, [r7, #4]
10002acc:	689b      	ldr	r3, [r3, #8]
10002ace:	681b      	ldr	r3, [r3, #0]
10002ad0:	2b08      	cmp	r3, #8
10002ad2:	d901      	bls.n	10002ad8 <SPI_MASTER_lReceiveHandler+0x28>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
10002ad4:	2302      	movs	r3, #2
10002ad6:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
10002ad8:	687b      	ldr	r3, [r7, #4]
10002ada:	685b      	ldr	r3, [r3, #4]
10002adc:	227d      	movs	r2, #125	; 0x7d
10002ade:	5c9b      	ldrb	r3, [r3, r2]
10002ae0:	2b00      	cmp	r3, #0
10002ae2:	d020      	beq.n	10002b26 <SPI_MASTER_lReceiveHandler+0x76>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
10002ae4:	687a      	ldr	r2, [r7, #4]
10002ae6:	697b      	ldr	r3, [r7, #20]
10002ae8:	1c10      	adds	r0, r2, #0
10002aea:	1c19      	adds	r1, r3, #0
10002aec:	f000 f8c4 	bl	10002c78 <SPI_MASTER_lFIFORead>
    /* Reconfigure the RXFIFO trigger limit based on pending receive bytes */
    if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= (1UL << (handle->config->rx_fifo_size - 1)))
10002af0:	693b      	ldr	r3, [r7, #16]
10002af2:	68da      	ldr	r2, [r3, #12]
10002af4:	693b      	ldr	r3, [r7, #16]
10002af6:	691b      	ldr	r3, [r3, #16]
10002af8:	1ad2      	subs	r2, r2, r3
10002afa:	687b      	ldr	r3, [r7, #4]
10002afc:	685b      	ldr	r3, [r3, #4]
10002afe:	217d      	movs	r1, #125	; 0x7d
10002b00:	5c5b      	ldrb	r3, [r3, r1]
10002b02:	3b01      	subs	r3, #1
10002b04:	2101      	movs	r1, #1
10002b06:	4099      	lsls	r1, r3
10002b08:	1c0b      	adds	r3, r1, #0
10002b0a:	429a      	cmp	r2, r3
10002b0c:	d900      	bls.n	10002b10 <SPI_MASTER_lReceiveHandler+0x60>
10002b0e:	e0b0      	b.n	10002c72 <SPI_MASTER_lReceiveHandler+0x1c2>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
10002b10:	693b      	ldr	r3, [r7, #16]
10002b12:	68da      	ldr	r2, [r3, #12]
10002b14:	693b      	ldr	r3, [r7, #16]
10002b16:	691b      	ldr	r3, [r3, #16]
10002b18:	1ad3      	subs	r3, r2, r3
10002b1a:	687a      	ldr	r2, [r7, #4]
10002b1c:	1c10      	adds	r0, r2, #0
10002b1e:	1c19      	adds	r1, r3, #0
10002b20:	f000 f916 	bl	10002d50 <SPI_MASTER_lReconfigureRxFIFO>
10002b24:	e0a5      	b.n	10002c72 <SPI_MASTER_lReceiveHandler+0x1c2>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
10002b26:	687b      	ldr	r3, [r7, #4]
10002b28:	681b      	ldr	r3, [r3, #0]
10002b2a:	1c18      	adds	r0, r3, #0
10002b2c:	f7ff fc62 	bl	100023f4 <XMC_USIC_CH_GetReceiveBufferStatus>
10002b30:	1c02      	adds	r2, r0, #0
10002b32:	2380      	movs	r3, #128	; 0x80
10002b34:	019b      	lsls	r3, r3, #6
10002b36:	4013      	ands	r3, r2
10002b38:	d02e      	beq.n	10002b98 <SPI_MASTER_lReceiveHandler+0xe8>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
10002b3a:	693b      	ldr	r3, [r7, #16]
10002b3c:	691a      	ldr	r2, [r3, #16]
10002b3e:	693b      	ldr	r3, [r7, #16]
10002b40:	68db      	ldr	r3, [r3, #12]
10002b42:	429a      	cmp	r2, r3
10002b44:	d228      	bcs.n	10002b98 <SPI_MASTER_lReceiveHandler+0xe8>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
10002b46:	687b      	ldr	r3, [r7, #4]
10002b48:	681b      	ldr	r3, [r3, #0]
10002b4a:	220e      	movs	r2, #14
10002b4c:	18bc      	adds	r4, r7, r2
10002b4e:	1c18      	adds	r0, r3, #0
10002b50:	f7ff f986 	bl	10001e60 <XMC_SPI_CH_GetReceivedData>
10002b54:	1c03      	adds	r3, r0, #0
10002b56:	8023      	strh	r3, [r4, #0]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
10002b58:	693b      	ldr	r3, [r7, #16]
10002b5a:	695a      	ldr	r2, [r3, #20]
10002b5c:	693b      	ldr	r3, [r7, #16]
10002b5e:	691b      	ldr	r3, [r3, #16]
10002b60:	18d3      	adds	r3, r2, r3
10002b62:	220e      	movs	r2, #14
10002b64:	18ba      	adds	r2, r7, r2
10002b66:	8812      	ldrh	r2, [r2, #0]
10002b68:	b2d2      	uxtb	r2, r2
10002b6a:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
10002b6c:	697b      	ldr	r3, [r7, #20]
10002b6e:	2b02      	cmp	r3, #2
10002b70:	d10c      	bne.n	10002b8c <SPI_MASTER_lReceiveHandler+0xdc>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
10002b72:	693b      	ldr	r3, [r7, #16]
10002b74:	695a      	ldr	r2, [r3, #20]
10002b76:	693b      	ldr	r3, [r7, #16]
10002b78:	691b      	ldr	r3, [r3, #16]
10002b7a:	3301      	adds	r3, #1
10002b7c:	18d3      	adds	r3, r2, r3
10002b7e:	220e      	movs	r2, #14
10002b80:	18ba      	adds	r2, r7, r2
10002b82:	8812      	ldrh	r2, [r2, #0]
10002b84:	0a12      	lsrs	r2, r2, #8
10002b86:	b292      	uxth	r2, r2
10002b88:	b2d2      	uxtb	r2, r2
10002b8a:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
10002b8c:	693b      	ldr	r3, [r7, #16]
10002b8e:	691a      	ldr	r2, [r3, #16]
10002b90:	697b      	ldr	r3, [r7, #20]
10002b92:	18d2      	adds	r2, r2, r3
10002b94:	693b      	ldr	r3, [r7, #16]
10002b96:	611a      	str	r2, [r3, #16]
      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
10002b98:	687b      	ldr	r3, [r7, #4]
10002b9a:	681b      	ldr	r3, [r3, #0]
10002b9c:	1c18      	adds	r0, r3, #0
10002b9e:	f7ff fc29 	bl	100023f4 <XMC_USIC_CH_GetReceiveBufferStatus>
10002ba2:	1c02      	adds	r2, r0, #0
10002ba4:	2380      	movs	r3, #128	; 0x80
10002ba6:	01db      	lsls	r3, r3, #7
10002ba8:	4013      	ands	r3, r2
10002baa:	d02e      	beq.n	10002c0a <SPI_MASTER_lReceiveHandler+0x15a>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
10002bac:	693b      	ldr	r3, [r7, #16]
10002bae:	691a      	ldr	r2, [r3, #16]
10002bb0:	693b      	ldr	r3, [r7, #16]
10002bb2:	68db      	ldr	r3, [r3, #12]
10002bb4:	429a      	cmp	r2, r3
10002bb6:	d228      	bcs.n	10002c0a <SPI_MASTER_lReceiveHandler+0x15a>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
10002bb8:	687b      	ldr	r3, [r7, #4]
10002bba:	681b      	ldr	r3, [r3, #0]
10002bbc:	220e      	movs	r2, #14
10002bbe:	18bc      	adds	r4, r7, r2
10002bc0:	1c18      	adds	r0, r3, #0
10002bc2:	f7ff f94d 	bl	10001e60 <XMC_SPI_CH_GetReceivedData>
10002bc6:	1c03      	adds	r3, r0, #0
10002bc8:	8023      	strh	r3, [r4, #0]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
10002bca:	693b      	ldr	r3, [r7, #16]
10002bcc:	695a      	ldr	r2, [r3, #20]
10002bce:	693b      	ldr	r3, [r7, #16]
10002bd0:	691b      	ldr	r3, [r3, #16]
10002bd2:	18d3      	adds	r3, r2, r3
10002bd4:	220e      	movs	r2, #14
10002bd6:	18ba      	adds	r2, r7, r2
10002bd8:	8812      	ldrh	r2, [r2, #0]
10002bda:	b2d2      	uxtb	r2, r2
10002bdc:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
10002bde:	697b      	ldr	r3, [r7, #20]
10002be0:	2b02      	cmp	r3, #2
10002be2:	d10c      	bne.n	10002bfe <SPI_MASTER_lReceiveHandler+0x14e>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
10002be4:	693b      	ldr	r3, [r7, #16]
10002be6:	695a      	ldr	r2, [r3, #20]
10002be8:	693b      	ldr	r3, [r7, #16]
10002bea:	691b      	ldr	r3, [r3, #16]
10002bec:	3301      	adds	r3, #1
10002bee:	18d3      	adds	r3, r2, r3
10002bf0:	220e      	movs	r2, #14
10002bf2:	18ba      	adds	r2, r7, r2
10002bf4:	8812      	ldrh	r2, [r2, #0]
10002bf6:	0a12      	lsrs	r2, r2, #8
10002bf8:	b292      	uxth	r2, r2
10002bfa:	b2d2      	uxtb	r2, r2
10002bfc:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
10002bfe:	693b      	ldr	r3, [r7, #16]
10002c00:	691a      	ldr	r2, [r3, #16]
10002c02:	697b      	ldr	r3, [r7, #20]
10002c04:	18d2      	adds	r2, r2, r3
10002c06:	693b      	ldr	r3, [r7, #16]
10002c08:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
10002c0a:	693b      	ldr	r3, [r7, #16]
10002c0c:	691a      	ldr	r2, [r3, #16]
10002c0e:	693b      	ldr	r3, [r7, #16]
10002c10:	68db      	ldr	r3, [r3, #12]
10002c12:	429a      	cmp	r2, r3
10002c14:	d12d      	bne.n	10002c72 <SPI_MASTER_lReceiveHandler+0x1c2>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      if ((uint32_t)handle->config->rx_fifo_size > 0U)
10002c16:	687b      	ldr	r3, [r7, #4]
10002c18:	685b      	ldr	r3, [r3, #4]
10002c1a:	227d      	movs	r2, #125	; 0x7d
10002c1c:	5c9b      	ldrb	r3, [r3, r2]
10002c1e:	2b00      	cmp	r3, #0
10002c20:	d008      	beq.n	10002c34 <SPI_MASTER_lReceiveHandler+0x184>
      {
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
10002c22:	687b      	ldr	r3, [r7, #4]
10002c24:	681a      	ldr	r2, [r3, #0]
10002c26:	23c0      	movs	r3, #192	; 0xc0
10002c28:	05db      	lsls	r3, r3, #23
10002c2a:	1c10      	adds	r0, r2, #0
10002c2c:	1c19      	adds	r1, r3, #0
10002c2e:	f7ff fc7f 	bl	10002530 <XMC_USIC_CH_RXFIFO_DisableEvent>
10002c32:	e007      	b.n	10002c44 <SPI_MASTER_lReceiveHandler+0x194>
      }
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
10002c34:	687b      	ldr	r3, [r7, #4]
10002c36:	681a      	ldr	r2, [r3, #0]
10002c38:	23c0      	movs	r3, #192	; 0xc0
10002c3a:	021b      	lsls	r3, r3, #8
10002c3c:	1c10      	adds	r0, r2, #0
10002c3e:	1c19      	adds	r1, r3, #0
10002c40:	f7ff f92e 	bl	10001ea0 <XMC_SPI_CH_DisableEvent>
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
10002c44:	693b      	ldr	r3, [r7, #16]
10002c46:	2200      	movs	r2, #0
10002c48:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
10002c4a:	693b      	ldr	r3, [r7, #16]
10002c4c:	2221      	movs	r2, #33	; 0x21
10002c4e:	2100      	movs	r1, #0
10002c50:	5499      	strb	r1, [r3, r2]
      runtime_handle->rx_data_dummy = true;
10002c52:	693b      	ldr	r3, [r7, #16]
10002c54:	2222      	movs	r2, #34	; 0x22
10002c56:	2101      	movs	r1, #1
10002c58:	5499      	strb	r1, [r3, r2]
      runtime_handle->rx_data = NULL;
10002c5a:	693b      	ldr	r3, [r7, #16]
10002c5c:	2200      	movs	r2, #0
10002c5e:	615a      	str	r2, [r3, #20]

      if (handle->config->rx_cbhandler != NULL)
10002c60:	687b      	ldr	r3, [r7, #4]
10002c62:	685b      	ldr	r3, [r3, #4]
10002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002c66:	2b00      	cmp	r3, #0
10002c68:	d003      	beq.n	10002c72 <SPI_MASTER_lReceiveHandler+0x1c2>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
10002c6a:	687b      	ldr	r3, [r7, #4]
10002c6c:	685b      	ldr	r3, [r3, #4]
10002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002c70:	4798      	blx	r3
      }
    }
  }
}
10002c72:	46bd      	mov	sp, r7
10002c74:	b007      	add	sp, #28
10002c76:	bd90      	pop	{r4, r7, pc}

10002c78 <SPI_MASTER_lFIFORead>:

/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word)
{
10002c78:	b590      	push	{r4, r7, lr}
10002c7a:	b085      	sub	sp, #20
10002c7c:	af00      	add	r7, sp, #0
10002c7e:	6078      	str	r0, [r7, #4]
10002c80:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
10002c82:	687b      	ldr	r3, [r7, #4]
10002c84:	689b      	ldr	r3, [r3, #8]
10002c86:	60fb      	str	r3, [r7, #12]
  data = 0U;
10002c88:	230a      	movs	r3, #10
10002c8a:	18fb      	adds	r3, r7, r3
10002c8c:	2200      	movs	r2, #0
10002c8e:	801a      	strh	r2, [r3, #0]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
10002c90:	e04e      	b.n	10002d30 <SPI_MASTER_lFIFORead+0xb8>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
10002c92:	68fb      	ldr	r3, [r7, #12]
10002c94:	691a      	ldr	r2, [r3, #16]
10002c96:	68fb      	ldr	r3, [r7, #12]
10002c98:	68db      	ldr	r3, [r3, #12]
10002c9a:	429a      	cmp	r2, r3
10002c9c:	d228      	bcs.n	10002cf0 <SPI_MASTER_lFIFORead+0x78>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
10002c9e:	687b      	ldr	r3, [r7, #4]
10002ca0:	681b      	ldr	r3, [r3, #0]
10002ca2:	220a      	movs	r2, #10
10002ca4:	18bc      	adds	r4, r7, r2
10002ca6:	1c18      	adds	r0, r3, #0
10002ca8:	f7ff f8da 	bl	10001e60 <XMC_SPI_CH_GetReceivedData>
10002cac:	1c03      	adds	r3, r0, #0
10002cae:	8023      	strh	r3, [r4, #0]
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
10002cb0:	68fb      	ldr	r3, [r7, #12]
10002cb2:	695a      	ldr	r2, [r3, #20]
10002cb4:	68fb      	ldr	r3, [r7, #12]
10002cb6:	691b      	ldr	r3, [r3, #16]
10002cb8:	18d3      	adds	r3, r2, r3
10002cba:	220a      	movs	r2, #10
10002cbc:	18ba      	adds	r2, r7, r2
10002cbe:	8812      	ldrh	r2, [r2, #0]
10002cc0:	b2d2      	uxtb	r2, r2
10002cc2:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
10002cc4:	683b      	ldr	r3, [r7, #0]
10002cc6:	2b02      	cmp	r3, #2
10002cc8:	d10c      	bne.n	10002ce4 <SPI_MASTER_lFIFORead+0x6c>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
10002cca:	68fb      	ldr	r3, [r7, #12]
10002ccc:	695a      	ldr	r2, [r3, #20]
10002cce:	68fb      	ldr	r3, [r7, #12]
10002cd0:	691b      	ldr	r3, [r3, #16]
10002cd2:	3301      	adds	r3, #1
10002cd4:	18d3      	adds	r3, r2, r3
10002cd6:	220a      	movs	r2, #10
10002cd8:	18ba      	adds	r2, r7, r2
10002cda:	8812      	ldrh	r2, [r2, #0]
10002cdc:	0a12      	lsrs	r2, r2, #8
10002cde:	b292      	uxth	r2, r2
10002ce0:	b2d2      	uxtb	r2, r2
10002ce2:	701a      	strb	r2, [r3, #0]
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
10002ce4:	68fb      	ldr	r3, [r7, #12]
10002ce6:	691a      	ldr	r2, [r3, #16]
10002ce8:	683b      	ldr	r3, [r7, #0]
10002cea:	18d2      	adds	r2, r2, r3
10002cec:	68fb      	ldr	r3, [r7, #12]
10002cee:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
10002cf0:	68fb      	ldr	r3, [r7, #12]
10002cf2:	691a      	ldr	r2, [r3, #16]
10002cf4:	68fb      	ldr	r3, [r7, #12]
10002cf6:	68db      	ldr	r3, [r3, #12]
10002cf8:	429a      	cmp	r2, r3
10002cfa:	d119      	bne.n	10002d30 <SPI_MASTER_lFIFORead+0xb8>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
10002cfc:	68fb      	ldr	r3, [r7, #12]
10002cfe:	2200      	movs	r2, #0
10002d00:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
10002d02:	68fb      	ldr	r3, [r7, #12]
10002d04:	2221      	movs	r2, #33	; 0x21
10002d06:	2100      	movs	r1, #0
10002d08:	5499      	strb	r1, [r3, r2]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
10002d0a:	687b      	ldr	r3, [r7, #4]
10002d0c:	681a      	ldr	r2, [r3, #0]
10002d0e:	23c0      	movs	r3, #192	; 0xc0
10002d10:	05db      	lsls	r3, r3, #23
10002d12:	1c10      	adds	r0, r2, #0
10002d14:	1c19      	adds	r1, r3, #0
10002d16:	f7ff fc0b 	bl	10002530 <XMC_USIC_CH_RXFIFO_DisableEvent>
      if (handle->config->rx_cbhandler != NULL)
10002d1a:	687b      	ldr	r3, [r7, #4]
10002d1c:	685b      	ldr	r3, [r3, #4]
10002d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002d20:	2b00      	cmp	r3, #0
10002d22:	d004      	beq.n	10002d2e <SPI_MASTER_lFIFORead+0xb6>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
10002d24:	687b      	ldr	r3, [r7, #4]
10002d26:	685b      	ldr	r3, [r3, #4]
10002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002d2a:	4798      	blx	r3
      }
      break;
10002d2c:	e00c      	b.n	10002d48 <SPI_MASTER_lFIFORead+0xd0>
10002d2e:	e00b      	b.n	10002d48 <SPI_MASTER_lFIFORead+0xd0>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
10002d30:	687b      	ldr	r3, [r7, #4]
10002d32:	681b      	ldr	r3, [r3, #0]
10002d34:	1c18      	adds	r0, r3, #0
10002d36:	f7ff fc1d 	bl	10002574 <XMC_USIC_CH_RXFIFO_IsEmpty>
10002d3a:	1c03      	adds	r3, r0, #0
10002d3c:	1c1a      	adds	r2, r3, #0
10002d3e:	2301      	movs	r3, #1
10002d40:	4053      	eors	r3, r2
10002d42:	b2db      	uxtb	r3, r3
10002d44:	2b00      	cmp	r3, #0
10002d46:	d1a4      	bne.n	10002c92 <SPI_MASTER_lFIFORead+0x1a>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
10002d48:	46bd      	mov	sp, r7
10002d4a:	b005      	add	sp, #20
10002d4c:	bd90      	pop	{r4, r7, pc}
10002d4e:	46c0      	nop			; (mov r8, r8)

10002d50 <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
10002d50:	b580      	push	{r7, lr}
10002d52:	b084      	sub	sp, #16
10002d54:	af00      	add	r7, sp, #0
10002d56:	6078      	str	r0, [r7, #4]
10002d58:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
10002d5a:	687b      	ldr	r3, [r7, #4]
10002d5c:	685b      	ldr	r3, [r3, #4]
10002d5e:	227d      	movs	r2, #125	; 0x7d
10002d60:	5c9b      	ldrb	r3, [r3, r2]
10002d62:	2b00      	cmp	r3, #0
10002d64:	d029      	beq.n	10002dba <SPI_MASTER_lReconfigureRxFIFO+0x6a>
10002d66:	683b      	ldr	r3, [r7, #0]
10002d68:	2b00      	cmp	r3, #0
10002d6a:	d026      	beq.n	10002dba <SPI_MASTER_lReconfigureRxFIFO+0x6a>
  {
	fifo_size = 1UL << (handle->config->rx_fifo_size - 1);
10002d6c:	687b      	ldr	r3, [r7, #4]
10002d6e:	685b      	ldr	r3, [r3, #4]
10002d70:	227d      	movs	r2, #125	; 0x7d
10002d72:	5c9b      	ldrb	r3, [r3, r2]
10002d74:	3b01      	subs	r3, #1
10002d76:	2201      	movs	r2, #1
10002d78:	409a      	lsls	r2, r3
10002d7a:	1c13      	adds	r3, r2, #0
10002d7c:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
10002d7e:	687b      	ldr	r3, [r7, #4]
10002d80:	689b      	ldr	r3, [r3, #8]
10002d82:	681b      	ldr	r3, [r3, #0]
10002d84:	2b08      	cmp	r3, #8
10002d86:	d902      	bls.n	10002d8e <SPI_MASTER_lReconfigureRxFIFO+0x3e>
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
10002d88:	683b      	ldr	r3, [r7, #0]
10002d8a:	085b      	lsrs	r3, r3, #1
10002d8c:	603b      	str	r3, [r7, #0]
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size <= fifo_size)
10002d8e:	683a      	ldr	r2, [r7, #0]
10002d90:	68bb      	ldr	r3, [r7, #8]
10002d92:	429a      	cmp	r2, r3
10002d94:	d803      	bhi.n	10002d9e <SPI_MASTER_lReconfigureRxFIFO+0x4e>
	{
	  ret_limit_val = data_size - 1U;
10002d96:	683b      	ldr	r3, [r7, #0]
10002d98:	3b01      	subs	r3, #1
10002d9a:	60fb      	str	r3, [r7, #12]
10002d9c:	e001      	b.n	10002da2 <SPI_MASTER_lReconfigureRxFIFO+0x52>
	}
	else
	{
	  ret_limit_val = fifo_size;
10002d9e:	68bb      	ldr	r3, [r7, #8]
10002da0:	60fb      	str	r3, [r7, #12]
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
10002da2:	687b      	ldr	r3, [r7, #4]
10002da4:	6819      	ldr	r1, [r3, #0]
10002da6:	687b      	ldr	r3, [r7, #4]
10002da8:	685b      	ldr	r3, [r3, #4]
10002daa:	227d      	movs	r2, #125	; 0x7d
10002dac:	5c9a      	ldrb	r2, [r3, r2]
10002dae:	68fb      	ldr	r3, [r7, #12]
10002db0:	1c08      	adds	r0, r1, #0
10002db2:	1c11      	adds	r1, r2, #0
10002db4:	1c1a      	adds	r2, r3, #0
10002db6:	f7ff fa2b 	bl	10002210 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
10002dba:	46bd      	mov	sp, r7
10002dbc:	b004      	add	sp, #16
10002dbe:	bd80      	pop	{r7, pc}

10002dc0 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
10002dc0:	b580      	push	{r7, lr}
10002dc2:	b082      	sub	sp, #8
10002dc4:	af00      	add	r7, sp, #0
10002dc6:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
10002dc8:	687b      	ldr	r3, [r7, #4]
10002dca:	1c18      	adds	r0, r3, #0
10002dcc:	f7ff f848 	bl	10001e60 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
10002dd0:	687b      	ldr	r3, [r7, #4]
10002dd2:	1c18      	adds	r0, r3, #0
10002dd4:	f7ff f844 	bl	10001e60 <XMC_SPI_CH_GetReceivedData>
}
10002dd8:	46bd      	mov	sp, r7
10002dda:	b002      	add	sp, #8
10002ddc:	bd80      	pop	{r7, pc}
10002dde:	46c0      	nop			; (mov r8, r8)

10002de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002de0:	b580      	push	{r7, lr}
10002de2:	b082      	sub	sp, #8
10002de4:	af00      	add	r7, sp, #0
10002de6:	1c02      	adds	r2, r0, #0
10002de8:	1dfb      	adds	r3, r7, #7
10002dea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002dec:	1dfb      	adds	r3, r7, #7
10002dee:	781b      	ldrb	r3, [r3, #0]
10002df0:	2b7f      	cmp	r3, #127	; 0x7f
10002df2:	d809      	bhi.n	10002e08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002df4:	4b06      	ldr	r3, [pc, #24]	; (10002e10 <__NVIC_EnableIRQ+0x30>)
10002df6:	1dfa      	adds	r2, r7, #7
10002df8:	7812      	ldrb	r2, [r2, #0]
10002dfa:	1c11      	adds	r1, r2, #0
10002dfc:	221f      	movs	r2, #31
10002dfe:	400a      	ands	r2, r1
10002e00:	2101      	movs	r1, #1
10002e02:	4091      	lsls	r1, r2
10002e04:	1c0a      	adds	r2, r1, #0
10002e06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002e08:	46bd      	mov	sp, r7
10002e0a:	b002      	add	sp, #8
10002e0c:	bd80      	pop	{r7, pc}
10002e0e:	46c0      	nop			; (mov r8, r8)
10002e10:	e000e100 	.word	0xe000e100

10002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002e14:	b5b0      	push	{r4, r5, r7, lr}
10002e16:	b082      	sub	sp, #8
10002e18:	af00      	add	r7, sp, #0
10002e1a:	1c02      	adds	r2, r0, #0
10002e1c:	6039      	str	r1, [r7, #0]
10002e1e:	1dfb      	adds	r3, r7, #7
10002e20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002e22:	1dfb      	adds	r3, r7, #7
10002e24:	781b      	ldrb	r3, [r3, #0]
10002e26:	2b7f      	cmp	r3, #127	; 0x7f
10002e28:	d827      	bhi.n	10002e7a <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e2a:	4c2d      	ldr	r4, [pc, #180]	; (10002ee0 <__NVIC_SetPriority+0xcc>)
10002e2c:	1dfb      	adds	r3, r7, #7
10002e2e:	781b      	ldrb	r3, [r3, #0]
10002e30:	b25b      	sxtb	r3, r3
10002e32:	089b      	lsrs	r3, r3, #2
10002e34:	492a      	ldr	r1, [pc, #168]	; (10002ee0 <__NVIC_SetPriority+0xcc>)
10002e36:	1dfa      	adds	r2, r7, #7
10002e38:	7812      	ldrb	r2, [r2, #0]
10002e3a:	b252      	sxtb	r2, r2
10002e3c:	0892      	lsrs	r2, r2, #2
10002e3e:	32c0      	adds	r2, #192	; 0xc0
10002e40:	0092      	lsls	r2, r2, #2
10002e42:	5852      	ldr	r2, [r2, r1]
10002e44:	1df9      	adds	r1, r7, #7
10002e46:	7809      	ldrb	r1, [r1, #0]
10002e48:	1c08      	adds	r0, r1, #0
10002e4a:	2103      	movs	r1, #3
10002e4c:	4001      	ands	r1, r0
10002e4e:	00c9      	lsls	r1, r1, #3
10002e50:	1c08      	adds	r0, r1, #0
10002e52:	21ff      	movs	r1, #255	; 0xff
10002e54:	4081      	lsls	r1, r0
10002e56:	43c9      	mvns	r1, r1
10002e58:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002e5a:	683a      	ldr	r2, [r7, #0]
10002e5c:	0192      	lsls	r2, r2, #6
10002e5e:	20ff      	movs	r0, #255	; 0xff
10002e60:	4002      	ands	r2, r0
10002e62:	1df8      	adds	r0, r7, #7
10002e64:	7800      	ldrb	r0, [r0, #0]
10002e66:	1c05      	adds	r5, r0, #0
10002e68:	2003      	movs	r0, #3
10002e6a:	4028      	ands	r0, r5
10002e6c:	00c0      	lsls	r0, r0, #3
10002e6e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e70:	430a      	orrs	r2, r1
10002e72:	33c0      	adds	r3, #192	; 0xc0
10002e74:	009b      	lsls	r3, r3, #2
10002e76:	511a      	str	r2, [r3, r4]
10002e78:	e02e      	b.n	10002ed8 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e7a:	4c1a      	ldr	r4, [pc, #104]	; (10002ee4 <__NVIC_SetPriority+0xd0>)
10002e7c:	1dfb      	adds	r3, r7, #7
10002e7e:	781b      	ldrb	r3, [r3, #0]
10002e80:	1c1a      	adds	r2, r3, #0
10002e82:	230f      	movs	r3, #15
10002e84:	4013      	ands	r3, r2
10002e86:	3b08      	subs	r3, #8
10002e88:	0899      	lsrs	r1, r3, #2
10002e8a:	4a16      	ldr	r2, [pc, #88]	; (10002ee4 <__NVIC_SetPriority+0xd0>)
10002e8c:	1dfb      	adds	r3, r7, #7
10002e8e:	781b      	ldrb	r3, [r3, #0]
10002e90:	1c18      	adds	r0, r3, #0
10002e92:	230f      	movs	r3, #15
10002e94:	4003      	ands	r3, r0
10002e96:	3b08      	subs	r3, #8
10002e98:	089b      	lsrs	r3, r3, #2
10002e9a:	3306      	adds	r3, #6
10002e9c:	009b      	lsls	r3, r3, #2
10002e9e:	18d3      	adds	r3, r2, r3
10002ea0:	685b      	ldr	r3, [r3, #4]
10002ea2:	1dfa      	adds	r2, r7, #7
10002ea4:	7812      	ldrb	r2, [r2, #0]
10002ea6:	1c10      	adds	r0, r2, #0
10002ea8:	2203      	movs	r2, #3
10002eaa:	4002      	ands	r2, r0
10002eac:	00d2      	lsls	r2, r2, #3
10002eae:	1c10      	adds	r0, r2, #0
10002eb0:	22ff      	movs	r2, #255	; 0xff
10002eb2:	4082      	lsls	r2, r0
10002eb4:	43d2      	mvns	r2, r2
10002eb6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002eb8:	683b      	ldr	r3, [r7, #0]
10002eba:	019b      	lsls	r3, r3, #6
10002ebc:	20ff      	movs	r0, #255	; 0xff
10002ebe:	4003      	ands	r3, r0
10002ec0:	1df8      	adds	r0, r7, #7
10002ec2:	7800      	ldrb	r0, [r0, #0]
10002ec4:	1c05      	adds	r5, r0, #0
10002ec6:	2003      	movs	r0, #3
10002ec8:	4028      	ands	r0, r5
10002eca:	00c0      	lsls	r0, r0, #3
10002ecc:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002ece:	431a      	orrs	r2, r3
10002ed0:	1d8b      	adds	r3, r1, #6
10002ed2:	009b      	lsls	r3, r3, #2
10002ed4:	18e3      	adds	r3, r4, r3
10002ed6:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002ed8:	46bd      	mov	sp, r7
10002eda:	b002      	add	sp, #8
10002edc:	bdb0      	pop	{r4, r5, r7, pc}
10002ede:	46c0      	nop			; (mov r8, r8)
10002ee0:	e000e100 	.word	0xe000e100
10002ee4:	e000ed00 	.word	0xe000ed00

10002ee8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10002ee8:	b580      	push	{r7, lr}
10002eea:	b082      	sub	sp, #8
10002eec:	af00      	add	r7, sp, #0
10002eee:	6078      	str	r0, [r7, #4]
10002ef0:	1c08      	adds	r0, r1, #0
10002ef2:	1c11      	adds	r1, r2, #0
10002ef4:	1cfb      	adds	r3, r7, #3
10002ef6:	1c02      	adds	r2, r0, #0
10002ef8:	701a      	strb	r2, [r3, #0]
10002efa:	1cbb      	adds	r3, r7, #2
10002efc:	1c0a      	adds	r2, r1, #0
10002efe:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10002f00:	1cfb      	adds	r3, r7, #3
10002f02:	7818      	ldrb	r0, [r3, #0]
10002f04:	1cfb      	adds	r3, r7, #3
10002f06:	781b      	ldrb	r3, [r3, #0]
10002f08:	687a      	ldr	r2, [r7, #4]
10002f0a:	3306      	adds	r3, #6
10002f0c:	009b      	lsls	r3, r3, #2
10002f0e:	18d3      	adds	r3, r2, r3
10002f10:	685b      	ldr	r3, [r3, #4]
10002f12:	2207      	movs	r2, #7
10002f14:	4393      	bics	r3, r2
10002f16:	1c1a      	adds	r2, r3, #0
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10002f18:	1cbb      	adds	r3, r7, #2
10002f1a:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10002f1c:	431a      	orrs	r2, r3
10002f1e:	6879      	ldr	r1, [r7, #4]
10002f20:	1d83      	adds	r3, r0, #6
10002f22:	009b      	lsls	r3, r3, #2
10002f24:	18cb      	adds	r3, r1, r3
10002f26:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10002f28:	46bd      	mov	sp, r7
10002f2a:	b002      	add	sp, #8
10002f2c:	bd80      	pop	{r7, pc}
10002f2e:	46c0      	nop			; (mov r8, r8)

10002f30 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
10002f30:	b580      	push	{r7, lr}
10002f32:	b082      	sub	sp, #8
10002f34:	af00      	add	r7, sp, #0
10002f36:	6078      	str	r0, [r7, #4]
10002f38:	1c0a      	adds	r2, r1, #0
10002f3a:	1cfb      	adds	r3, r7, #3
10002f3c:	701a      	strb	r2, [r3, #0]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
10002f3e:	687b      	ldr	r3, [r7, #4]
10002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002f42:	4a06      	ldr	r2, [pc, #24]	; (10002f5c <XMC_USIC_CH_SetWordLength+0x2c>)
10002f44:	401a      	ands	r2, r3
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
10002f46:	1cfb      	adds	r3, r7, #3
10002f48:	781b      	ldrb	r3, [r3, #0]
10002f4a:	3b01      	subs	r3, #1
10002f4c:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
10002f4e:	431a      	orrs	r2, r3
10002f50:	687b      	ldr	r3, [r7, #4]
10002f52:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
10002f54:	46bd      	mov	sp, r7
10002f56:	b002      	add	sp, #8
10002f58:	bd80      	pop	{r7, pc}
10002f5a:	46c0      	nop			; (mov r8, r8)
10002f5c:	f0ffffff 	.word	0xf0ffffff

10002f60 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
10002f60:	b580      	push	{r7, lr}
10002f62:	b082      	sub	sp, #8
10002f64:	af00      	add	r7, sp, #0
10002f66:	6078      	str	r0, [r7, #4]
10002f68:	1c0a      	adds	r2, r1, #0
10002f6a:	1cfb      	adds	r3, r7, #3
10002f6c:	701a      	strb	r2, [r3, #0]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
10002f6e:	687b      	ldr	r3, [r7, #4]
10002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002f72:	4a06      	ldr	r2, [pc, #24]	; (10002f8c <XMC_USIC_CH_SetFrameLength+0x2c>)
10002f74:	401a      	ands	r2, r3
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
10002f76:	1cfb      	adds	r3, r7, #3
10002f78:	781b      	ldrb	r3, [r3, #0]
10002f7a:	3b01      	subs	r3, #1
10002f7c:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
10002f7e:	431a      	orrs	r2, r3
10002f80:	687b      	ldr	r3, [r7, #4]
10002f82:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
10002f84:	46bd      	mov	sp, r7
10002f86:	b002      	add	sp, #8
10002f88:	bd80      	pop	{r7, pc}
10002f8a:	46c0      	nop			; (mov r8, r8)
10002f8c:	ffc0ffff 	.word	0xffc0ffff

10002f90 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
10002f90:	b580      	push	{r7, lr}
10002f92:	b084      	sub	sp, #16
10002f94:	af00      	add	r7, sp, #0
10002f96:	60f8      	str	r0, [r7, #12]
10002f98:	60b9      	str	r1, [r7, #8]
10002f9a:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
10002f9c:	68fb      	ldr	r3, [r7, #12]
10002f9e:	695b      	ldr	r3, [r3, #20]
10002fa0:	4a05      	ldr	r2, [pc, #20]	; (10002fb8 <XMC_USIC_CH_ConfigureShiftClockOutput+0x28>)
10002fa2:	401a      	ands	r2, r3
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
10002fa4:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
10002fa6:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
10002fa8:	687b      	ldr	r3, [r7, #4]
10002faa:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
10002fac:	68fb      	ldr	r3, [r7, #12]
10002fae:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
10002fb0:	46bd      	mov	sp, r7
10002fb2:	b004      	add	sp, #16
10002fb4:	bd80      	pop	{r7, pc}
10002fb6:	46c0      	nop			; (mov r8, r8)
10002fb8:	2fffffff 	.word	0x2fffffff

10002fbc <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
10002fbc:	b580      	push	{r7, lr}
10002fbe:	b082      	sub	sp, #8
10002fc0:	af00      	add	r7, sp, #0
10002fc2:	6078      	str	r0, [r7, #4]
10002fc4:	1c0a      	adds	r2, r1, #0
10002fc6:	1cfb      	adds	r3, r7, #3
10002fc8:	701a      	strb	r2, [r3, #0]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
10002fca:	687b      	ldr	r3, [r7, #4]
10002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002fce:	220f      	movs	r2, #15
10002fd0:	4393      	bics	r3, r2
10002fd2:	1c1a      	adds	r2, r3, #0
10002fd4:	1cfb      	adds	r3, r7, #3
10002fd6:	781b      	ldrb	r3, [r3, #0]
10002fd8:	431a      	orrs	r2, r3
10002fda:	687b      	ldr	r3, [r7, #4]
10002fdc:	641a      	str	r2, [r3, #64]	; 0x40
}
10002fde:	46bd      	mov	sp, r7
10002fe0:	b002      	add	sp, #8
10002fe2:	bd80      	pop	{r7, pc}

10002fe4 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
10002fe4:	b580      	push	{r7, lr}
10002fe6:	b082      	sub	sp, #8
10002fe8:	af00      	add	r7, sp, #0
10002fea:	6078      	str	r0, [r7, #4]
10002fec:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
10002fee:	687a      	ldr	r2, [r7, #4]
10002ff0:	683b      	ldr	r3, [r7, #0]
10002ff2:	1c10      	adds	r0, r2, #0
10002ff4:	1c19      	adds	r1, r3, #0
10002ff6:	2201      	movs	r2, #1
10002ff8:	f7fe febe 	bl	10001d78 <XMC_SPI_CH_InitEx>
}
10002ffc:	46bd      	mov	sp, r7
10002ffe:	b002      	add	sp, #8
10003000:	bd80      	pop	{r7, pc}
10003002:	46c0      	nop			; (mov r8, r8)

10003004 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
10003004:	b580      	push	{r7, lr}
10003006:	b082      	sub	sp, #8
10003008:	af00      	add	r7, sp, #0
1000300a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
1000300c:	687b      	ldr	r3, [r7, #4]
1000300e:	1c18      	adds	r0, r3, #0
10003010:	2101      	movs	r1, #1
10003012:	f7ff ffd3 	bl	10002fbc <XMC_USIC_CH_SetMode>
}
10003016:	46bd      	mov	sp, r7
10003018:	b002      	add	sp, #8
1000301a:	bd80      	pop	{r7, pc}

1000301c <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
1000301c:	b580      	push	{r7, lr}
1000301e:	b082      	sub	sp, #8
10003020:	af00      	add	r7, sp, #0
10003022:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
10003024:	687b      	ldr	r3, [r7, #4]
10003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003028:	2201      	movs	r2, #1
1000302a:	431a      	orrs	r2, r3
1000302c:	687b      	ldr	r3, [r7, #4]
1000302e:	635a      	str	r2, [r3, #52]	; 0x34
}
10003030:	46bd      	mov	sp, r7
10003032:	b002      	add	sp, #8
10003034:	bd80      	pop	{r7, pc}
10003036:	46c0      	nop			; (mov r8, r8)

10003038 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
10003038:	b580      	push	{r7, lr}
1000303a:	b082      	sub	sp, #8
1000303c:	af00      	add	r7, sp, #0
1000303e:	6078      	str	r0, [r7, #4]
10003040:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10003042:	687b      	ldr	r3, [r7, #4]
10003044:	695b      	ldr	r3, [r3, #20]
10003046:	4a07      	ldr	r2, [pc, #28]	; (10003064 <XMC_SPI_CH_SetSlaveSelectDelay+0x2c>)
10003048:	401a      	ands	r2, r3
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
1000304a:	683b      	ldr	r3, [r7, #0]
1000304c:	3b01      	subs	r3, #1
1000304e:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
10003050:	4313      	orrs	r3, r2
10003052:	2280      	movs	r2, #128	; 0x80
10003054:	0052      	lsls	r2, r2, #1
10003056:	431a      	orrs	r2, r3
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10003058:	687b      	ldr	r3, [r7, #4]
1000305a:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
1000305c:	46bd      	mov	sp, r7
1000305e:	b002      	add	sp, #8
10003060:	bd80      	pop	{r7, pc}
10003062:	46c0      	nop			; (mov r8, r8)
10003064:	ffff80ff 	.word	0xffff80ff

10003068 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
10003068:	b580      	push	{r7, lr}
1000306a:	b084      	sub	sp, #16
1000306c:	af00      	add	r7, sp, #0
1000306e:	60f8      	str	r0, [r7, #12]
10003070:	60b9      	str	r1, [r7, #8]
10003072:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
10003074:	68f9      	ldr	r1, [r7, #12]
10003076:	68ba      	ldr	r2, [r7, #8]
10003078:	687b      	ldr	r3, [r7, #4]
1000307a:	1c08      	adds	r0, r1, #0
1000307c:	1c11      	adds	r1, r2, #0
1000307e:	1c1a      	adds	r2, r3, #0
10003080:	f7ff ff86 	bl	10002f90 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
10003084:	46bd      	mov	sp, r7
10003086:	b004      	add	sp, #16
10003088:	bd80      	pop	{r7, pc}
1000308a:	46c0      	nop			; (mov r8, r8)

1000308c <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
1000308c:	b580      	push	{r7, lr}
1000308e:	b082      	sub	sp, #8
10003090:	af00      	add	r7, sp, #0
10003092:	6078      	str	r0, [r7, #4]
10003094:	1c0a      	adds	r2, r1, #0
10003096:	1cfb      	adds	r3, r7, #3
10003098:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetWordLength(channel, word_length);
1000309a:	687a      	ldr	r2, [r7, #4]
1000309c:	1cfb      	adds	r3, r7, #3
1000309e:	781b      	ldrb	r3, [r3, #0]
100030a0:	1c10      	adds	r0, r2, #0
100030a2:	1c19      	adds	r1, r3, #0
100030a4:	f7ff ff44 	bl	10002f30 <XMC_USIC_CH_SetWordLength>
}
100030a8:	46bd      	mov	sp, r7
100030aa:	b002      	add	sp, #8
100030ac:	bd80      	pop	{r7, pc}
100030ae:	46c0      	nop			; (mov r8, r8)

100030b0 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
100030b0:	b580      	push	{r7, lr}
100030b2:	b082      	sub	sp, #8
100030b4:	af00      	add	r7, sp, #0
100030b6:	6078      	str	r0, [r7, #4]
100030b8:	1c0a      	adds	r2, r1, #0
100030ba:	1cfb      	adds	r3, r7, #3
100030bc:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
100030be:	687a      	ldr	r2, [r7, #4]
100030c0:	1cfb      	adds	r3, r7, #3
100030c2:	781b      	ldrb	r3, [r3, #0]
100030c4:	1c10      	adds	r0, r2, #0
100030c6:	1c19      	adds	r1, r3, #0
100030c8:	f7ff ff4a 	bl	10002f60 <XMC_USIC_CH_SetFrameLength>
}
100030cc:	46bd      	mov	sp, r7
100030ce:	b002      	add	sp, #8
100030d0:	bd80      	pop	{r7, pc}
100030d2:	46c0      	nop			; (mov r8, r8)

100030d4 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
100030d4:	b580      	push	{r7, lr}
100030d6:	b082      	sub	sp, #8
100030d8:	af00      	add	r7, sp, #0
100030da:	6078      	str	r0, [r7, #4]
100030dc:	1c08      	adds	r0, r1, #0
100030de:	1c11      	adds	r1, r2, #0
100030e0:	1cfb      	adds	r3, r7, #3
100030e2:	1c02      	adds	r2, r0, #0
100030e4:	701a      	strb	r2, [r3, #0]
100030e6:	1cbb      	adds	r3, r7, #2
100030e8:	1c0a      	adds	r2, r1, #0
100030ea:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
100030ec:	1cfb      	adds	r3, r7, #3
100030ee:	7818      	ldrb	r0, [r3, #0]
100030f0:	1cfb      	adds	r3, r7, #3
100030f2:	781b      	ldrb	r3, [r3, #0]
100030f4:	687a      	ldr	r2, [r7, #4]
100030f6:	3306      	adds	r3, #6
100030f8:	009b      	lsls	r3, r3, #2
100030fa:	18d3      	adds	r3, r2, r3
100030fc:	685b      	ldr	r3, [r3, #4]
100030fe:	2250      	movs	r2, #80	; 0x50
10003100:	4393      	bics	r3, r2
10003102:	2210      	movs	r2, #16
10003104:	431a      	orrs	r2, r3
10003106:	6879      	ldr	r1, [r7, #4]
10003108:	1d83      	adds	r3, r0, #6
1000310a:	009b      	lsls	r3, r3, #2
1000310c:	18cb      	adds	r3, r1, r3
1000310e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
10003110:	6879      	ldr	r1, [r7, #4]
10003112:	1cfb      	adds	r3, r7, #3
10003114:	781a      	ldrb	r2, [r3, #0]
10003116:	1cbb      	adds	r3, r7, #2
10003118:	781b      	ldrb	r3, [r3, #0]
1000311a:	1c08      	adds	r0, r1, #0
1000311c:	1c11      	adds	r1, r2, #0
1000311e:	1c1a      	adds	r2, r3, #0
10003120:	f7ff fee2 	bl	10002ee8 <XMC_USIC_CH_SetInputSource>
}
10003124:	46bd      	mov	sp, r7
10003126:	b002      	add	sp, #8
10003128:	bd80      	pop	{r7, pc}
1000312a:	46c0      	nop			; (mov r8, r8)

1000312c <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
1000312c:	b580      	push	{r7, lr}
1000312e:	b082      	sub	sp, #8
10003130:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
10003132:	1dfb      	adds	r3, r7, #7
10003134:	2200      	movs	r2, #0
10003136:	701a      	strb	r2, [r3, #0]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI1_CH1, &SPI_MASTER_0_Channel_Config);
10003138:	4a4d      	ldr	r2, [pc, #308]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
1000313a:	4b4e      	ldr	r3, [pc, #312]	; (10003274 <SPI_MASTER_0_lInit+0x148>)
1000313c:	1c10      	adds	r0, r2, #0
1000313e:	1c19      	adds	r1, r3, #0
10003140:	f7ff ff50 	bl	10002fe4 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI1_CH1);
10003144:	4b4a      	ldr	r3, [pc, #296]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
10003146:	1c18      	adds	r0, r3, #0
10003148:	f7ff ff68 	bl	1000301c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI1_CH1, (uint8_t)8);
1000314c:	4b48      	ldr	r3, [pc, #288]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
1000314e:	1c18      	adds	r0, r3, #0
10003150:	2108      	movs	r1, #8
10003152:	f7ff ff9b 	bl	1000308c <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH1, (uint8_t)64);
10003156:	4b46      	ldr	r3, [pc, #280]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
10003158:	1c18      	adds	r0, r3, #0
1000315a:	2140      	movs	r1, #64	; 0x40
1000315c:	f7ff ffa8 	bl	100030b0 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH1,
10003160:	4b43      	ldr	r3, [pc, #268]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
10003162:	1c18      	adds	r0, r3, #0
10003164:	2100      	movs	r1, #0
10003166:	2200      	movs	r2, #0
10003168:	f7ff ff7e 	bl	10003068 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH1, 1U);
1000316c:	4b40      	ldr	r3, [pc, #256]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
1000316e:	1c18      	adds	r0, r3, #0
10003170:	2101      	movs	r1, #1
10003172:	f7ff ff61 	bl	10003038 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)0, &SPI_MASTER_0_MISO_Config.port_config);
10003176:	4a40      	ldr	r2, [pc, #256]	; (10003278 <SPI_MASTER_0_lInit+0x14c>)
10003178:	4b40      	ldr	r3, [pc, #256]	; (1000327c <SPI_MASTER_0_lInit+0x150>)
1000317a:	1c10      	adds	r0, r2, #0
1000317c:	2100      	movs	r1, #0
1000317e:	1c1a      	adds	r2, r3, #0
10003180:	f7fe f802 	bl	10001188 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_A);
10003184:	4b3a      	ldr	r3, [pc, #232]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
10003186:	1c18      	adds	r0, r3, #0
10003188:	2100      	movs	r1, #0
1000318a:	2200      	movs	r2, #0
1000318c:	f7ff ffa2 	bl	100030d4 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN1, (uint8_t)SPI_MASTER_INPUT_A);
10003190:	4b37      	ldr	r3, [pc, #220]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
10003192:	1c18      	adds	r0, r3, #0
10003194:	2103      	movs	r1, #3
10003196:	2200      	movs	r2, #0
10003198:	f7ff ff9c 	bl	100030d4 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN2, (uint8_t)SPI_MASTER_INPUT_A);
1000319c:	4b34      	ldr	r3, [pc, #208]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
1000319e:	1c18      	adds	r0, r3, #0
100031a0:	2104      	movs	r1, #4
100031a2:	2200      	movs	r2, #0
100031a4:	f7ff ff96 	bl	100030d4 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN3, (uint8_t)SPI_MASTER_INPUT_A);
100031a8:	4b31      	ldr	r3, [pc, #196]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
100031aa:	1c18      	adds	r0, r3, #0
100031ac:	2105      	movs	r1, #5
100031ae:	2200      	movs	r2, #0
100031b0:	f7ff ff90 	bl	100030d4 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI1_CH1);
100031b4:	4b2e      	ldr	r3, [pc, #184]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
100031b6:	1c18      	adds	r0, r3, #0
100031b8:	f7ff ff24 	bl	10003004 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)0, &SPI_MASTER_0_MOSI_Config.port_config);
100031bc:	4a30      	ldr	r2, [pc, #192]	; (10003280 <SPI_MASTER_0_lInit+0x154>)
100031be:	4b31      	ldr	r3, [pc, #196]	; (10003284 <SPI_MASTER_0_lInit+0x158>)
100031c0:	1c10      	adds	r0, r2, #0
100031c2:	2100      	movs	r1, #0
100031c4:	1c1a      	adds	r2, r3, #0
100031c6:	f7fd ffdf 	bl	10001188 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, &SPI_MASTER_0_SCLKOUT_Config.port_config);
100031ca:	4a2b      	ldr	r2, [pc, #172]	; (10003278 <SPI_MASTER_0_lInit+0x14c>)
100031cc:	4b2e      	ldr	r3, [pc, #184]	; (10003288 <SPI_MASTER_0_lInit+0x15c>)
100031ce:	1c10      	adds	r0, r2, #0
100031d0:	2101      	movs	r1, #1
100031d2:	1c1a      	adds	r2, r3, #0
100031d4:	f7fd ffd8 	bl	10001188 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT4_BASE, (uint8_t)1, &SPI_MASTER_0_SS_0_Config.port_config);
100031d8:	4a2c      	ldr	r2, [pc, #176]	; (1000328c <SPI_MASTER_0_lInit+0x160>)
100031da:	4b2d      	ldr	r3, [pc, #180]	; (10003290 <SPI_MASTER_0_lInit+0x164>)
100031dc:	1c10      	adds	r0, r2, #0
100031de:	2101      	movs	r1, #1
100031e0:	1c1a      	adds	r2, r3, #0
100031e2:	f7fd ffd1 	bl	10001188 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH1, XMC_SPI_CH_SLAVE_SELECT_2);
100031e6:	4a22      	ldr	r2, [pc, #136]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
100031e8:	2380      	movs	r3, #128	; 0x80
100031ea:	02db      	lsls	r3, r3, #11
100031ec:	1c10      	adds	r0, r2, #0
100031ee:	1c19      	adds	r1, r3, #0
100031f0:	f7fe fe0c 	bl	10001e0c <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH1,
100031f4:	4b1e      	ldr	r3, [pc, #120]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
100031f6:	1c18      	adds	r0, r3, #0
100031f8:	2104      	movs	r1, #4
100031fa:	2201      	movs	r2, #1
100031fc:	f7ff f824 	bl	10002248 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH1,
10003200:	4b1b      	ldr	r3, [pc, #108]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
10003202:	1c18      	adds	r0, r3, #0
10003204:	2110      	movs	r1, #16
10003206:	2201      	movs	r2, #1
10003208:	f7ff f81e 	bl	10002248 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
            
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI1_CH1,
1000320c:	4b18      	ldr	r3, [pc, #96]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
1000320e:	1c18      	adds	r0, r3, #0
10003210:	2100      	movs	r1, #0
10003212:	2206      	movs	r2, #6
10003214:	2300      	movs	r3, #0
10003216:	f7fe ffc9 	bl	100021ac <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_64WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
1000321a:	4b15      	ldr	r3, [pc, #84]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
1000321c:	1c18      	adds	r0, r3, #0
1000321e:	2110      	movs	r1, #16
10003220:	2200      	movs	r2, #0
10003222:	f7ff f855 	bl	100022d0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
10003226:	4b12      	ldr	r3, [pc, #72]	; (10003270 <SPI_MASTER_0_lInit+0x144>)
10003228:	1c18      	adds	r0, r3, #0
1000322a:	2113      	movs	r1, #19
1000322c:	2200      	movs	r2, #0
1000322e:	f7ff f84f 	bl	100022d0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)10, 3U);
10003232:	200a      	movs	r0, #10
10003234:	2103      	movs	r1, #3
10003236:	f7ff fded 	bl	10002e14 <__NVIC_SetPriority>
    
  XMC_SCU_SetInterruptControl(10, XMC_SCU_IRQCTRL_USIC1_SR1_IRQ10);
1000323a:	4b16      	ldr	r3, [pc, #88]	; (10003294 <SPI_MASTER_0_lInit+0x168>)
1000323c:	200a      	movs	r0, #10
1000323e:	1c19      	adds	r1, r3, #0
10003240:	f7fe fa1a 	bl	10001678 <XMC_SCU_SetInterruptControl>
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)10);
10003244:	200a      	movs	r0, #10
10003246:	f7ff fdcb 	bl	10002de0 <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)9, 2U);
1000324a:	2009      	movs	r0, #9
1000324c:	2102      	movs	r1, #2
1000324e:	f7ff fde1 	bl	10002e14 <__NVIC_SetPriority>
    
  XMC_SCU_SetInterruptControl(9,   XMC_SCU_IRQCTRL_USIC1_SR0_IRQ9);
10003252:	4b11      	ldr	r3, [pc, #68]	; (10003298 <SPI_MASTER_0_lInit+0x16c>)
10003254:	2009      	movs	r0, #9
10003256:	1c19      	adds	r1, r3, #0
10003258:	f7fe fa0e 	bl	10001678 <XMC_SCU_SetInterruptControl>
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)9);
1000325c:	2009      	movs	r0, #9
1000325e:	f7ff fdbf 	bl	10002de0 <__NVIC_EnableIRQ>
    
  return status;
10003262:	1dfb      	adds	r3, r7, #7
10003264:	781b      	ldrb	r3, [r3, #0]
}
10003266:	1c18      	adds	r0, r3, #0
10003268:	46bd      	mov	sp, r7
1000326a:	b002      	add	sp, #8
1000326c:	bd80      	pop	{r7, pc}
1000326e:	46c0      	nop			; (mov r8, r8)
10003270:	48004200 	.word	0x48004200
10003274:	20000560 	.word	0x20000560
10003278:	40040000 	.word	0x40040000
1000327c:	20000628 	.word	0x20000628
10003280:	40040300 	.word	0x40040300
10003284:	20000550 	.word	0x20000550
10003288:	10005260 	.word	0x10005260
1000328c:	40040400 	.word	0x40040400
10003290:	10005278 	.word	0x10005278
10003294:	00000a01 	.word	0x00000a01
10003298:	00000901 	.word	0x00000901

1000329c <IRQ10_Handler>:
/*Transmit ISR*/
void SPI_MASTER_0_tx_handler()
{
1000329c:	b580      	push	{r7, lr}
1000329e:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_0);
100032a0:	4b02      	ldr	r3, [pc, #8]	; (100032ac <IRQ10_Handler+0x10>)
100032a2:	1c18      	adds	r0, r3, #0
100032a4:	f7ff faae 	bl	10002804 <SPI_MASTER_lTransmitHandler>
}
100032a8:	46bd      	mov	sp, r7
100032aa:	bd80      	pop	{r7, pc}
100032ac:	20000590 	.word	0x20000590

100032b0 <IRQ9_Handler>:

/*Receive ISR*/
void SPI_MASTER_0_rx_handler()
{
100032b0:	b580      	push	{r7, lr}
100032b2:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_0);
100032b4:	4b02      	ldr	r3, [pc, #8]	; (100032c0 <IRQ9_Handler+0x10>)
100032b6:	1c18      	adds	r0, r3, #0
100032b8:	f7ff fbfa 	bl	10002ab0 <SPI_MASTER_lReceiveHandler>
}
100032bc:	46bd      	mov	sp, r7
100032be:	bd80      	pop	{r7, pc}
100032c0:	20000590 	.word	0x20000590

100032c4 <SPI_MASTER_1_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_1_lInit(void)
{
100032c4:	b580      	push	{r7, lr}
100032c6:	b082      	sub	sp, #8
100032c8:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
100032ca:	1dfb      	adds	r3, r7, #7
100032cc:	2200      	movs	r2, #0
100032ce:	701a      	strb	r2, [r3, #0]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_MASTER_1_Channel_Config);
100032d0:	2390      	movs	r3, #144	; 0x90
100032d2:	05da      	lsls	r2, r3, #23
100032d4:	4b5a      	ldr	r3, [pc, #360]	; (10003440 <SPI_MASTER_1_lInit+0x17c>)
100032d6:	1c10      	adds	r0, r2, #0
100032d8:	1c19      	adds	r1, r3, #0
100032da:	f7ff fe83 	bl	10002fe4 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
100032de:	2390      	movs	r3, #144	; 0x90
100032e0:	05db      	lsls	r3, r3, #23
100032e2:	1c18      	adds	r0, r3, #0
100032e4:	f7ff fe9a 	bl	1000301c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
100032e8:	2390      	movs	r3, #144	; 0x90
100032ea:	05db      	lsls	r3, r3, #23
100032ec:	1c18      	adds	r0, r3, #0
100032ee:	2108      	movs	r1, #8
100032f0:	f7ff fecc 	bl	1000308c <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)64);
100032f4:	2390      	movs	r3, #144	; 0x90
100032f6:	05db      	lsls	r3, r3, #23
100032f8:	1c18      	adds	r0, r3, #0
100032fa:	2140      	movs	r1, #64	; 0x40
100032fc:	f7ff fed8 	bl	100030b0 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
10003300:	2390      	movs	r3, #144	; 0x90
10003302:	05da      	lsls	r2, r3, #23
10003304:	2380      	movs	r3, #128	; 0x80
10003306:	05db      	lsls	r3, r3, #23
10003308:	1c10      	adds	r0, r2, #0
1000330a:	1c19      	adds	r1, r3, #0
1000330c:	2200      	movs	r2, #0
1000330e:	f7ff feab 	bl	10003068 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 1U);
10003312:	2390      	movs	r3, #144	; 0x90
10003314:	05db      	lsls	r3, r3, #23
10003316:	1c18      	adds	r0, r3, #0
10003318:	2101      	movs	r1, #1
1000331a:	f7ff fe8d 	bl	10003038 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_MASTER_1_MISO_Config.port_config);
1000331e:	4a49      	ldr	r2, [pc, #292]	; (10003444 <SPI_MASTER_1_lInit+0x180>)
10003320:	4b49      	ldr	r3, [pc, #292]	; (10003448 <SPI_MASTER_1_lInit+0x184>)
10003322:	1c10      	adds	r0, r2, #0
10003324:	2104      	movs	r1, #4
10003326:	1c1a      	adds	r2, r3, #0
10003328:	f7fd ff2e 	bl	10001188 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_G);
1000332c:	2390      	movs	r3, #144	; 0x90
1000332e:	05db      	lsls	r3, r3, #23
10003330:	1c18      	adds	r0, r3, #0
10003332:	2100      	movs	r1, #0
10003334:	2206      	movs	r2, #6
10003336:	f7ff fecd 	bl	100030d4 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN1, (uint8_t)SPI_MASTER_INPUT_F);
1000333a:	2390      	movs	r3, #144	; 0x90
1000333c:	05db      	lsls	r3, r3, #23
1000333e:	1c18      	adds	r0, r3, #0
10003340:	2103      	movs	r1, #3
10003342:	2205      	movs	r2, #5
10003344:	f7ff fec6 	bl	100030d4 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN2, (uint8_t)SPI_MASTER_INPUT_A);
10003348:	2390      	movs	r3, #144	; 0x90
1000334a:	05db      	lsls	r3, r3, #23
1000334c:	1c18      	adds	r0, r3, #0
1000334e:	2104      	movs	r1, #4
10003350:	2200      	movs	r2, #0
10003352:	f7ff febf 	bl	100030d4 <XMC_SPI_CH_SetInputSource>
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN3, (uint8_t)SPI_MASTER_INPUT_E);
10003356:	2390      	movs	r3, #144	; 0x90
10003358:	05db      	lsls	r3, r3, #23
1000335a:	1c18      	adds	r0, r3, #0
1000335c:	2105      	movs	r1, #5
1000335e:	2204      	movs	r2, #4
10003360:	f7ff feb8 	bl	100030d4 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
10003364:	2390      	movs	r3, #144	; 0x90
10003366:	05db      	lsls	r3, r3, #23
10003368:	1c18      	adds	r0, r3, #0
1000336a:	f7ff fe4b 	bl	10003004 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &SPI_MASTER_1_MOSI_Config.port_config);
1000336e:	4a35      	ldr	r2, [pc, #212]	; (10003444 <SPI_MASTER_1_lInit+0x180>)
10003370:	4b36      	ldr	r3, [pc, #216]	; (1000344c <SPI_MASTER_1_lInit+0x188>)
10003372:	1c10      	adds	r0, r2, #0
10003374:	2105      	movs	r1, #5
10003376:	1c1a      	adds	r2, r3, #0
10003378:	f7fd ff06 	bl	10001188 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)7, &SPI_MASTER_1_SCLKOUT_Config.port_config);
1000337c:	4a34      	ldr	r2, [pc, #208]	; (10003450 <SPI_MASTER_1_lInit+0x18c>)
1000337e:	4b35      	ldr	r3, [pc, #212]	; (10003454 <SPI_MASTER_1_lInit+0x190>)
10003380:	1c10      	adds	r0, r2, #0
10003382:	2107      	movs	r1, #7
10003384:	1c1a      	adds	r2, r3, #0
10003386:	f7fd feff 	bl	10001188 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)6, &SPI_MASTER_1_SS_0_Config.port_config);
1000338a:	4a2e      	ldr	r2, [pc, #184]	; (10003444 <SPI_MASTER_1_lInit+0x180>)
1000338c:	4b32      	ldr	r3, [pc, #200]	; (10003458 <SPI_MASTER_1_lInit+0x194>)
1000338e:	1c10      	adds	r0, r2, #0
10003390:	2106      	movs	r1, #6
10003392:	1c1a      	adds	r2, r3, #0
10003394:	f7fd fef8 	bl	10001188 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_2);
10003398:	2390      	movs	r3, #144	; 0x90
1000339a:	05da      	lsls	r2, r3, #23
1000339c:	2380      	movs	r3, #128	; 0x80
1000339e:	02db      	lsls	r3, r3, #11
100033a0:	1c10      	adds	r0, r2, #0
100033a2:	1c19      	adds	r1, r3, #0
100033a4:	f7fe fd32 	bl	10001e0c <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
100033a8:	2390      	movs	r3, #144	; 0x90
100033aa:	05db      	lsls	r3, r3, #23
100033ac:	1c18      	adds	r0, r3, #0
100033ae:	2110      	movs	r1, #16
100033b0:	2200      	movs	r2, #0
100033b2:	f7fe ff49 	bl	10002248 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH0,
100033b6:	2390      	movs	r3, #144	; 0x90
100033b8:	05db      	lsls	r3, r3, #23
100033ba:	1c18      	adds	r0, r3, #0
100033bc:	2130      	movs	r1, #48	; 0x30
100033be:	2204      	movs	r2, #4
100033c0:	2301      	movs	r3, #1
100033c2:	f7fe fec5 	bl	10002150 <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI0_CH0,
100033c6:	2390      	movs	r3, #144	; 0x90
100033c8:	05db      	lsls	r3, r3, #23
100033ca:	1c18      	adds	r0, r3, #0
100033cc:	2110      	movs	r1, #16
100033ce:	2204      	movs	r2, #4
100033d0:	f7fe ff5a 	bl	10002288 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_4);
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI0_CH0,
100033d4:	2390      	movs	r3, #144	; 0x90
100033d6:	05db      	lsls	r3, r3, #23
100033d8:	1c18      	adds	r0, r3, #0
100033da:	2120      	movs	r1, #32
100033dc:	2204      	movs	r2, #4
100033de:	2300      	movs	r3, #0
100033e0:	f7fe fee4 	bl	100021ac <XMC_USIC_CH_RXFIFO_Configure>
                               32U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI0_CH0,
100033e4:	2390      	movs	r3, #144	; 0x90
100033e6:	05db      	lsls	r3, r3, #23
100033e8:	1c18      	adds	r0, r3, #0
100033ea:	2110      	movs	r1, #16
100033ec:	2202      	movs	r2, #2
100033ee:	f7fe ff6f 	bl	100022d0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI0_CH0,
100033f2:	2390      	movs	r3, #144	; 0x90
100033f4:	05db      	lsls	r3, r3, #23
100033f6:	1c18      	adds	r0, r3, #0
100033f8:	2113      	movs	r1, #19
100033fa:	2202      	movs	r2, #2
100033fc:	f7fe ff68 	bl	100022d0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)13, 3U);
10003400:	200d      	movs	r0, #13
10003402:	2103      	movs	r1, #3
10003404:	f7ff fd06 	bl	10002e14 <__NVIC_SetPriority>
    
  XMC_SCU_SetInterruptControl(13,   XMC_SCU_IRQCTRL_USIC0_SR4_IRQ13);
10003408:	23d0      	movs	r3, #208	; 0xd0
1000340a:	011b      	lsls	r3, r3, #4
1000340c:	200d      	movs	r0, #13
1000340e:	1c19      	adds	r1, r3, #0
10003410:	f7fe f932 	bl	10001678 <XMC_SCU_SetInterruptControl>
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)13);
10003414:	200d      	movs	r0, #13
10003416:	f7ff fce3 	bl	10002de0 <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)11, 2U);
1000341a:	200b      	movs	r0, #11
1000341c:	2102      	movs	r1, #2
1000341e:	f7ff fcf9 	bl	10002e14 <__NVIC_SetPriority>
    
  XMC_SCU_SetInterruptControl(11,   XMC_SCU_IRQCTRL_USIC0_SR2_IRQ11);
10003422:	23b0      	movs	r3, #176	; 0xb0
10003424:	011b      	lsls	r3, r3, #4
10003426:	200b      	movs	r0, #11
10003428:	1c19      	adds	r1, r3, #0
1000342a:	f7fe f925 	bl	10001678 <XMC_SCU_SetInterruptControl>
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)11);
1000342e:	200b      	movs	r0, #11
10003430:	f7ff fcd6 	bl	10002de0 <__NVIC_EnableIRQ>
    
  return status;
10003434:	1dfb      	adds	r3, r7, #7
10003436:	781b      	ldrb	r3, [r3, #0]
}
10003438:	1c18      	adds	r0, r3, #0
1000343a:	46bd      	mov	sp, r7
1000343c:	b002      	add	sp, #8
1000343e:	bd80      	pop	{r7, pc}
10003440:	200005ac 	.word	0x200005ac
10003444:	40040100 	.word	0x40040100
10003448:	20000638 	.word	0x20000638
1000344c:	2000059c 	.word	0x2000059c
10003450:	40040000 	.word	0x40040000
10003454:	1000532c 	.word	0x1000532c
10003458:	10005344 	.word	0x10005344

1000345c <IRQ13_Handler>:
/*Transmit ISR*/
void SPI_MASTER_1_tx_handler()
{
1000345c:	b580      	push	{r7, lr}
1000345e:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_1);
10003460:	4b02      	ldr	r3, [pc, #8]	; (1000346c <IRQ13_Handler+0x10>)
10003462:	1c18      	adds	r0, r3, #0
10003464:	f7ff f9ce 	bl	10002804 <SPI_MASTER_lTransmitHandler>
}
10003468:	46bd      	mov	sp, r7
1000346a:	bd80      	pop	{r7, pc}
1000346c:	200005dc 	.word	0x200005dc

10003470 <IRQ11_Handler>:

/*Receive ISR*/
void SPI_MASTER_1_rx_handler()
{
10003470:	b580      	push	{r7, lr}
10003472:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_1);
10003474:	4b02      	ldr	r3, [pc, #8]	; (10003480 <IRQ11_Handler+0x10>)
10003476:	1c18      	adds	r0, r3, #0
10003478:	f7ff fb1a 	bl	10002ab0 <SPI_MASTER_lReceiveHandler>
}
1000347c:	46bd      	mov	sp, r7
1000347e:	bd80      	pop	{r7, pc}
10003480:	200005dc 	.word	0x200005dc

10003484 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10003484:	b580      	push	{r7, lr}
10003486:	b082      	sub	sp, #8
10003488:	af00      	add	r7, sp, #0
1000348a:	1c02      	adds	r2, r0, #0
1000348c:	1dfb      	adds	r3, r7, #7
1000348e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003490:	1dfb      	adds	r3, r7, #7
10003492:	781b      	ldrb	r3, [r3, #0]
10003494:	2b7f      	cmp	r3, #127	; 0x7f
10003496:	d80a      	bhi.n	100034ae <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10003498:	4906      	ldr	r1, [pc, #24]	; (100034b4 <__NVIC_ClearPendingIRQ+0x30>)
1000349a:	1dfb      	adds	r3, r7, #7
1000349c:	781b      	ldrb	r3, [r3, #0]
1000349e:	1c1a      	adds	r2, r3, #0
100034a0:	231f      	movs	r3, #31
100034a2:	4013      	ands	r3, r2
100034a4:	2201      	movs	r2, #1
100034a6:	409a      	lsls	r2, r3
100034a8:	23c0      	movs	r3, #192	; 0xc0
100034aa:	005b      	lsls	r3, r3, #1
100034ac:	50ca      	str	r2, [r1, r3]
  }
}
100034ae:	46bd      	mov	sp, r7
100034b0:	b002      	add	sp, #8
100034b2:	bd80      	pop	{r7, pc}
100034b4:	e000e100 	.word	0xe000e100

100034b8 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100034b8:	b580      	push	{r7, lr}
100034ba:	b082      	sub	sp, #8
100034bc:	af00      	add	r7, sp, #0
100034be:	6078      	str	r0, [r7, #4]
100034c0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
100034c2:	687b      	ldr	r3, [r7, #4]
100034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100034c6:	683a      	ldr	r2, [r7, #0]
100034c8:	43d2      	mvns	r2, r2
100034ca:	401a      	ands	r2, r3
100034cc:	687b      	ldr	r3, [r7, #4]
100034ce:	641a      	str	r2, [r3, #64]	; 0x40
}
100034d0:	46bd      	mov	sp, r7
100034d2:	b002      	add	sp, #8
100034d4:	bd80      	pop	{r7, pc}
100034d6:	46c0      	nop			; (mov r8, r8)

100034d8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100034d8:	b580      	push	{r7, lr}
100034da:	b082      	sub	sp, #8
100034dc:	af00      	add	r7, sp, #0
100034de:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100034e0:	687b      	ldr	r3, [r7, #4]
100034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100034e4:	b2db      	uxtb	r3, r3
100034e6:	227f      	movs	r2, #127	; 0x7f
100034e8:	4393      	bics	r3, r2
100034ea:	b2db      	uxtb	r3, r3
}
100034ec:	1c18      	adds	r0, r3, #0
100034ee:	46bd      	mov	sp, r7
100034f0:	b002      	add	sp, #8
100034f2:	bd80      	pop	{r7, pc}

100034f4 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
100034f4:	b580      	push	{r7, lr}
100034f6:	b082      	sub	sp, #8
100034f8:	af00      	add	r7, sp, #0
100034fa:	6078      	str	r0, [r7, #4]
100034fc:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
100034fe:	683b      	ldr	r3, [r7, #0]
10003500:	2280      	movs	r2, #128	; 0x80
10003502:	0252      	lsls	r2, r2, #9
10003504:	409a      	lsls	r2, r3
10003506:	687b      	ldr	r3, [r7, #4]
10003508:	669a      	str	r2, [r3, #104]	; 0x68
}
1000350a:	46bd      	mov	sp, r7
1000350c:	b002      	add	sp, #8
1000350e:	bd80      	pop	{r7, pc}

10003510 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003510:	b580      	push	{r7, lr}
10003512:	b082      	sub	sp, #8
10003514:	af00      	add	r7, sp, #0
10003516:	6078      	str	r0, [r7, #4]
10003518:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
1000351a:	687a      	ldr	r2, [r7, #4]
1000351c:	2384      	movs	r3, #132	; 0x84
1000351e:	005b      	lsls	r3, r3, #1
10003520:	58d2      	ldr	r2, [r2, r3]
10003522:	683b      	ldr	r3, [r7, #0]
10003524:	431a      	orrs	r2, r3
10003526:	1c11      	adds	r1, r2, #0
10003528:	687a      	ldr	r2, [r7, #4]
1000352a:	2384      	movs	r3, #132	; 0x84
1000352c:	005b      	lsls	r3, r3, #1
1000352e:	50d1      	str	r1, [r2, r3]
}
10003530:	46bd      	mov	sp, r7
10003532:	b002      	add	sp, #8
10003534:	bd80      	pop	{r7, pc}
10003536:	46c0      	nop			; (mov r8, r8)

10003538 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003538:	b580      	push	{r7, lr}
1000353a:	b082      	sub	sp, #8
1000353c:	af00      	add	r7, sp, #0
1000353e:	6078      	str	r0, [r7, #4]
10003540:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
10003542:	687a      	ldr	r2, [r7, #4]
10003544:	2384      	movs	r3, #132	; 0x84
10003546:	005b      	lsls	r3, r3, #1
10003548:	58d3      	ldr	r3, [r2, r3]
1000354a:	683a      	ldr	r2, [r7, #0]
1000354c:	43d2      	mvns	r2, r2
1000354e:	401a      	ands	r2, r3
10003550:	1c11      	adds	r1, r2, #0
10003552:	687a      	ldr	r2, [r7, #4]
10003554:	2384      	movs	r3, #132	; 0x84
10003556:	005b      	lsls	r3, r3, #1
10003558:	50d1      	str	r1, [r2, r3]
}
1000355a:	46bd      	mov	sp, r7
1000355c:	b002      	add	sp, #8
1000355e:	bd80      	pop	{r7, pc}

10003560 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10003560:	b580      	push	{r7, lr}
10003562:	b082      	sub	sp, #8
10003564:	af00      	add	r7, sp, #0
10003566:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10003568:	687a      	ldr	r2, [r7, #4]
1000356a:	238a      	movs	r3, #138	; 0x8a
1000356c:	005b      	lsls	r3, r3, #1
1000356e:	58d2      	ldr	r2, [r2, r3]
10003570:	2380      	movs	r3, #128	; 0x80
10003572:	015b      	lsls	r3, r3, #5
10003574:	4013      	ands	r3, r2
10003576:	1e5a      	subs	r2, r3, #1
10003578:	4193      	sbcs	r3, r2
1000357a:	b2db      	uxtb	r3, r3
}
1000357c:	1c18      	adds	r0, r3, #0
1000357e:	46bd      	mov	sp, r7
10003580:	b002      	add	sp, #8
10003582:	bd80      	pop	{r7, pc}

10003584 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10003584:	b580      	push	{r7, lr}
10003586:	b082      	sub	sp, #8
10003588:	af00      	add	r7, sp, #0
1000358a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1000358c:	687a      	ldr	r2, [r7, #4]
1000358e:	238a      	movs	r3, #138	; 0x8a
10003590:	005b      	lsls	r3, r3, #1
10003592:	58d2      	ldr	r2, [r2, r3]
10003594:	2380      	movs	r3, #128	; 0x80
10003596:	011b      	lsls	r3, r3, #4
10003598:	4013      	ands	r3, r2
1000359a:	1e5a      	subs	r2, r3, #1
1000359c:	4193      	sbcs	r3, r2
1000359e:	b2db      	uxtb	r3, r3
}
100035a0:	1c18      	adds	r0, r3, #0
100035a2:	46bd      	mov	sp, r7
100035a4:	b002      	add	sp, #8
100035a6:	bd80      	pop	{r7, pc}

100035a8 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100035a8:	b580      	push	{r7, lr}
100035aa:	b082      	sub	sp, #8
100035ac:	af00      	add	r7, sp, #0
100035ae:	6078      	str	r0, [r7, #4]
100035b0:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
100035b2:	687a      	ldr	r2, [r7, #4]
100035b4:	2386      	movs	r3, #134	; 0x86
100035b6:	005b      	lsls	r3, r3, #1
100035b8:	58d3      	ldr	r3, [r2, r3]
100035ba:	683a      	ldr	r2, [r7, #0]
100035bc:	43d2      	mvns	r2, r2
100035be:	401a      	ands	r2, r3
100035c0:	1c11      	adds	r1, r2, #0
100035c2:	687a      	ldr	r2, [r7, #4]
100035c4:	2386      	movs	r3, #134	; 0x86
100035c6:	005b      	lsls	r3, r3, #1
100035c8:	50d1      	str	r1, [r2, r3]
}
100035ca:	46bd      	mov	sp, r7
100035cc:	b002      	add	sp, #8
100035ce:	bd80      	pop	{r7, pc}

100035d0 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
100035d0:	b580      	push	{r7, lr}
100035d2:	b082      	sub	sp, #8
100035d4:	af00      	add	r7, sp, #0
100035d6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
100035d8:	687a      	ldr	r2, [r7, #4]
100035da:	238a      	movs	r3, #138	; 0x8a
100035dc:	005b      	lsls	r3, r3, #1
100035de:	58d3      	ldr	r3, [r2, r3]
100035e0:	2208      	movs	r2, #8
100035e2:	4013      	ands	r3, r2
100035e4:	1e5a      	subs	r2, r3, #1
100035e6:	4193      	sbcs	r3, r2
100035e8:	b2db      	uxtb	r3, r3
}
100035ea:	1c18      	adds	r0, r3, #0
100035ec:	46bd      	mov	sp, r7
100035ee:	b002      	add	sp, #8
100035f0:	bd80      	pop	{r7, pc}
100035f2:	46c0      	nop			; (mov r8, r8)

100035f4 <XMC_I2C_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const uint8_t service_request)
{
100035f4:	b580      	push	{r7, lr}
100035f6:	b082      	sub	sp, #8
100035f8:	af00      	add	r7, sp, #0
100035fa:	6078      	str	r0, [r7, #4]
100035fc:	1c0a      	adds	r2, r1, #0
100035fe:	1cfb      	adds	r3, r7, #3
10003600:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
10003602:	1cfb      	adds	r3, r7, #3
10003604:	781b      	ldrb	r3, [r3, #0]
10003606:	687a      	ldr	r2, [r7, #4]
10003608:	1c10      	adds	r0, r2, #0
1000360a:	2110      	movs	r1, #16
1000360c:	1c1a      	adds	r2, r3, #0
1000360e:	f7fe fe1b 	bl	10002248 <XMC_USIC_CH_SetInterruptNodePointer>
}
10003612:	46bd      	mov	sp, r7
10003614:	b002      	add	sp, #8
10003616:	bd80      	pop	{r7, pc}

10003618 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
10003618:	b580      	push	{r7, lr}
1000361a:	b082      	sub	sp, #8
1000361c:	af00      	add	r7, sp, #0
1000361e:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
10003620:	687b      	ldr	r3, [r7, #4]
10003622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
10003624:	1c18      	adds	r0, r3, #0
10003626:	46bd      	mov	sp, r7
10003628:	b002      	add	sp, #8
1000362a:	bd80      	pop	{r7, pc}

1000362c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
1000362c:	b580      	push	{r7, lr}
1000362e:	b082      	sub	sp, #8
10003630:	af00      	add	r7, sp, #0
10003632:	6078      	str	r0, [r7, #4]
10003634:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10003636:	687b      	ldr	r3, [r7, #4]
10003638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000363a:	683b      	ldr	r3, [r7, #0]
1000363c:	431a      	orrs	r2, r3
1000363e:	687b      	ldr	r3, [r7, #4]
10003640:	64da      	str	r2, [r3, #76]	; 0x4c
}
10003642:	46bd      	mov	sp, r7
10003644:	b002      	add	sp, #8
10003646:	bd80      	pop	{r7, pc}

10003648 <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
10003648:	b580      	push	{r7, lr}
1000364a:	b084      	sub	sp, #16
1000364c:	af00      	add	r7, sp, #0
1000364e:	60f8      	str	r0, [r7, #12]
10003650:	60b9      	str	r1, [r7, #8]
10003652:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
10003654:	68fb      	ldr	r3, [r7, #12]
10003656:	6819      	ldr	r1, [r3, #0]
10003658:	68bb      	ldr	r3, [r7, #8]
1000365a:	b2da      	uxtb	r2, r3
1000365c:	687b      	ldr	r3, [r7, #4]
1000365e:	1c08      	adds	r0, r1, #0
10003660:	1c11      	adds	r1, r2, #0
10003662:	1c1a      	adds	r2, r3, #0
10003664:	f7fe fdd4 	bl	10002210 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
10003668:	46bd      	mov	sp, r7
1000366a:	b004      	add	sp, #16
1000366c:	bd80      	pop	{r7, pc}
1000366e:	46c0      	nop			; (mov r8, r8)

10003670 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
10003670:	b580      	push	{r7, lr}
10003672:	b082      	sub	sp, #8
10003674:	af00      	add	r7, sp, #0
10003676:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
10003678:	687b      	ldr	r3, [r7, #4]
1000367a:	681b      	ldr	r3, [r3, #0]
1000367c:	1c18      	adds	r0, r3, #0
1000367e:	f7ff ff6f 	bl	10003560 <XMC_USIC_CH_TXFIFO_IsFull>
10003682:	1c03      	adds	r3, r0, #0
}
10003684:	1c18      	adds	r0, r3, #0
10003686:	46bd      	mov	sp, r7
10003688:	b002      	add	sp, #8
1000368a:	bd80      	pop	{r7, pc}

1000368c <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
1000368c:	b580      	push	{r7, lr}
1000368e:	b082      	sub	sp, #8
10003690:	af00      	add	r7, sp, #0
10003692:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
10003694:	687b      	ldr	r3, [r7, #4]
10003696:	681b      	ldr	r3, [r3, #0]
10003698:	1c18      	adds	r0, r3, #0
1000369a:	f7ff ff99 	bl	100035d0 <XMC_USIC_CH_RXFIFO_IsEmpty>
1000369e:	1c03      	adds	r3, r0, #0
}
100036a0:	1c18      	adds	r0, r3, #0
100036a2:	46bd      	mov	sp, r7
100036a4:	b002      	add	sp, #8
100036a6:	bd80      	pop	{r7, pc}

100036a8 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
100036a8:	b580      	push	{r7, lr}
100036aa:	b082      	sub	sp, #8
100036ac:	af00      	add	r7, sp, #0
100036ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
100036b0:	687b      	ldr	r3, [r7, #4]
100036b2:	681b      	ldr	r3, [r3, #0]
100036b4:	1c18      	adds	r0, r3, #0
100036b6:	f7fe faa7 	bl	10001c08 <XMC_I2C_CH_GetReceivedData>
100036ba:	1c03      	adds	r3, r0, #0
}
100036bc:	1c18      	adds	r0, r3, #0
100036be:	46bd      	mov	sp, r7
100036c0:	b002      	add	sp, #8
100036c2:	bd80      	pop	{r7, pc}

100036c4 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
100036c4:	b580      	push	{r7, lr}
100036c6:	b082      	sub	sp, #8
100036c8:	af00      	add	r7, sp, #0
100036ca:	6078      	str	r0, [r7, #4]
100036cc:	1c0a      	adds	r2, r1, #0
100036ce:	1cfb      	adds	r3, r7, #3
100036d0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
100036d2:	687b      	ldr	r3, [r7, #4]
100036d4:	681a      	ldr	r2, [r3, #0]
100036d6:	1cfb      	adds	r3, r7, #3
100036d8:	781b      	ldrb	r3, [r3, #0]
100036da:	1c10      	adds	r0, r2, #0
100036dc:	1c19      	adds	r1, r3, #0
100036de:	f7fe fa11 	bl	10001b04 <XMC_I2C_CH_MasterTransmit>
}
100036e2:	46bd      	mov	sp, r7
100036e4:	b002      	add	sp, #8
100036e6:	bd80      	pop	{r7, pc}

100036e8 <I2C_MASTER_EnableEvent>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
100036e8:	b580      	push	{r7, lr}
100036ea:	b082      	sub	sp, #8
100036ec:	af00      	add	r7, sp, #0
100036ee:	6078      	str	r0, [r7, #4]
100036f0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL));
  XMC_I2C_CH_EnableEvent(handle->channel, event);
100036f2:	687b      	ldr	r3, [r7, #4]
100036f4:	681a      	ldr	r2, [r3, #0]
100036f6:	683b      	ldr	r3, [r7, #0]
100036f8:	1c10      	adds	r0, r2, #0
100036fa:	1c19      	adds	r1, r3, #0
100036fc:	f7fe faa4 	bl	10001c48 <XMC_I2C_CH_EnableEvent>
}
10003700:	46bd      	mov	sp, r7
10003702:	b002      	add	sp, #8
10003704:	bd80      	pop	{r7, pc}
10003706:	46c0      	nop			; (mov r8, r8)

10003708 <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
10003708:	b580      	push	{r7, lr}
1000370a:	b082      	sub	sp, #8
1000370c:	af00      	add	r7, sp, #0
1000370e:	6078      	str	r0, [r7, #4]
10003710:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
  XMC_I2C_CH_DisableEvent(handle->channel, event);
10003712:	687b      	ldr	r3, [r7, #4]
10003714:	681a      	ldr	r2, [r3, #0]
10003716:	683b      	ldr	r3, [r7, #0]
10003718:	1c10      	adds	r0, r2, #0
1000371a:	1c19      	adds	r1, r3, #0
1000371c:	f7fe fab0 	bl	10001c80 <XMC_I2C_CH_DisableEvent>
}
10003720:	46bd      	mov	sp, r7
10003722:	b002      	add	sp, #8
10003724:	bd80      	pop	{r7, pc}
10003726:	46c0      	nop			; (mov r8, r8)

10003728 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
10003728:	b580      	push	{r7, lr}
1000372a:	b082      	sub	sp, #8
1000372c:	af00      	add	r7, sp, #0
1000372e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
10003730:	687b      	ldr	r3, [r7, #4]
10003732:	681b      	ldr	r3, [r3, #0]
10003734:	1c18      	adds	r0, r3, #0
10003736:	f7fe fa13 	bl	10001b60 <XMC_I2C_CH_MasterReceiveAck>
}
1000373a:	46bd      	mov	sp, r7
1000373c:	b002      	add	sp, #8
1000373e:	bd80      	pop	{r7, pc}

10003740 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
10003740:	b580      	push	{r7, lr}
10003742:	b082      	sub	sp, #8
10003744:	af00      	add	r7, sp, #0
10003746:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
10003748:	687b      	ldr	r3, [r7, #4]
1000374a:	681b      	ldr	r3, [r3, #0]
1000374c:	1c18      	adds	r0, r3, #0
1000374e:	f7fe fa31 	bl	10001bb4 <XMC_I2C_CH_MasterReceiveNack>
}
10003752:	46bd      	mov	sp, r7
10003754:	b002      	add	sp, #8
10003756:	bd80      	pop	{r7, pc}

10003758 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
10003758:	b580      	push	{r7, lr}
1000375a:	b082      	sub	sp, #8
1000375c:	af00      	add	r7, sp, #0
1000375e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
10003760:	687b      	ldr	r3, [r7, #4]
10003762:	681b      	ldr	r3, [r3, #0]
10003764:	1c18      	adds	r0, r3, #0
10003766:	2110      	movs	r1, #16
10003768:	f7ff ff60 	bl	1000362c <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
1000376c:	687b      	ldr	r3, [r7, #4]
1000376e:	681b      	ldr	r3, [r3, #0]
10003770:	1c18      	adds	r0, r3, #0
10003772:	f7fe f99d 	bl	10001ab0 <XMC_I2C_CH_MasterStop>
}
10003776:	46bd      	mov	sp, r7
10003778:	b002      	add	sp, #8
1000377a:	bd80      	pop	{r7, pc}

1000377c <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
1000377c:	b580      	push	{r7, lr}
1000377e:	b084      	sub	sp, #16
10003780:	af00      	add	r7, sp, #0
10003782:	60f8      	str	r0, [r7, #12]
10003784:	60b9      	str	r1, [r7, #8]
10003786:	1dfb      	adds	r3, r7, #7
10003788:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
1000378a:	68fb      	ldr	r3, [r7, #12]
1000378c:	681b      	ldr	r3, [r3, #0]
1000378e:	1c18      	adds	r0, r3, #0
10003790:	2104      	movs	r1, #4
10003792:	f7ff ff4b 	bl	1000362c <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
10003796:	68fb      	ldr	r3, [r7, #12]
10003798:	6819      	ldr	r1, [r3, #0]
1000379a:	68bb      	ldr	r3, [r7, #8]
1000379c:	b29a      	uxth	r2, r3
1000379e:	1dfb      	adds	r3, r7, #7
100037a0:	781b      	ldrb	r3, [r3, #0]
100037a2:	1c08      	adds	r0, r1, #0
100037a4:	1c11      	adds	r1, r2, #0
100037a6:	1c1a      	adds	r2, r3, #0
100037a8:	f7fe f902 	bl	100019b0 <XMC_I2C_CH_MasterStart>
}
100037ac:	46bd      	mov	sp, r7
100037ae:	b004      	add	sp, #16
100037b0:	bd80      	pop	{r7, pc}
100037b2:	46c0      	nop			; (mov r8, r8)

100037b4 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
100037b4:	b580      	push	{r7, lr}
100037b6:	b084      	sub	sp, #16
100037b8:	af00      	add	r7, sp, #0
100037ba:	60f8      	str	r0, [r7, #12]
100037bc:	60b9      	str	r1, [r7, #8]
100037be:	1dfb      	adds	r3, r7, #7
100037c0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
100037c2:	68fb      	ldr	r3, [r7, #12]
100037c4:	681b      	ldr	r3, [r3, #0]
100037c6:	1c18      	adds	r0, r3, #0
100037c8:	2108      	movs	r1, #8
100037ca:	f7ff ff2f 	bl	1000362c <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
100037ce:	68fb      	ldr	r3, [r7, #12]
100037d0:	6819      	ldr	r1, [r3, #0]
100037d2:	68bb      	ldr	r3, [r7, #8]
100037d4:	b29a      	uxth	r2, r3
100037d6:	1dfb      	adds	r3, r7, #7
100037d8:	781b      	ldrb	r3, [r3, #0]
100037da:	1c08      	adds	r0, r1, #0
100037dc:	1c11      	adds	r1, r2, #0
100037de:	1c1a      	adds	r2, r3, #0
100037e0:	f7fe f926 	bl	10001a30 <XMC_I2C_CH_MasterRepeatedStart>
}
100037e4:	46bd      	mov	sp, r7
100037e6:	b004      	add	sp, #16
100037e8:	bd80      	pop	{r7, pc}
100037ea:	46c0      	nop			; (mov r8, r8)

100037ec <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
100037ec:	b580      	push	{r7, lr}
100037ee:	b084      	sub	sp, #16
100037f0:	af00      	add	r7, sp, #0
100037f2:	6078      	str	r0, [r7, #4]
100037f4:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
100037f6:	687a      	ldr	r2, [r7, #4]
100037f8:	683b      	ldr	r3, [r7, #0]
100037fa:	429a      	cmp	r2, r3
100037fc:	d202      	bcs.n	10003804 <calculate_minfifosize+0x18>
  {
    result = a;
100037fe:	687b      	ldr	r3, [r7, #4]
10003800:	60fb      	str	r3, [r7, #12]
10003802:	e001      	b.n	10003808 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
10003804:	683b      	ldr	r3, [r7, #0]
10003806:	60fb      	str	r3, [r7, #12]
  }
  return (result);
10003808:	68fb      	ldr	r3, [r7, #12]
}
1000380a:	1c18      	adds	r0, r3, #0
1000380c:	46bd      	mov	sp, r7
1000380e:	b004      	add	sp, #16
10003810:	bd80      	pop	{r7, pc}
10003812:	46c0      	nop			; (mov r8, r8)

10003814 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
10003814:	b580      	push	{r7, lr}
10003816:	b084      	sub	sp, #16
10003818:	af00      	add	r7, sp, #0
1000381a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
1000381c:	687b      	ldr	r3, [r7, #4]
1000381e:	2b00      	cmp	r3, #0
10003820:	d008      	beq.n	10003834 <I2C_MASTER_Init+0x20>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
10003822:	687b      	ldr	r3, [r7, #4]
10003824:	685b      	ldr	r3, [r3, #4]
10003826:	685b      	ldr	r3, [r3, #4]
10003828:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
1000382a:	230f      	movs	r3, #15
1000382c:	18fb      	adds	r3, r7, r3
1000382e:	2200      	movs	r2, #0
10003830:	701a      	strb	r2, [r3, #0]
10003832:	e003      	b.n	1000383c <I2C_MASTER_Init+0x28>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
10003834:	230f      	movs	r3, #15
10003836:	18fb      	adds	r3, r7, r3
10003838:	2201      	movs	r2, #1
1000383a:	701a      	strb	r2, [r3, #0]
  }
  return (status);
1000383c:	230f      	movs	r3, #15
1000383e:	18fb      	adds	r3, r7, r3
10003840:	781b      	ldrb	r3, [r3, #0]
}
10003842:	1c18      	adds	r0, r3, #0
10003844:	46bd      	mov	sp, r7
10003846:	b004      	add	sp, #16
10003848:	bd80      	pop	{r7, pc}
1000384a:	46c0      	nop			; (mov r8, r8)

1000384c <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
1000384c:	b580      	push	{r7, lr}
1000384e:	b084      	sub	sp, #16
10003850:	af00      	add	r7, sp, #0
10003852:	6078      	str	r0, [r7, #4]
10003854:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
10003856:	687b      	ldr	r3, [r7, #4]
10003858:	681b      	ldr	r3, [r3, #0]
1000385a:	1c18      	adds	r0, r3, #0
1000385c:	f7ff fedc 	bl	10003618 <XMC_I2C_CH_GetStatusFlag>
10003860:	1c03      	adds	r3, r0, #0
10003862:	60fb      	str	r3, [r7, #12]

  return (status & flagtype);
10003864:	68fb      	ldr	r3, [r7, #12]
10003866:	683a      	ldr	r2, [r7, #0]
10003868:	4013      	ands	r3, r2
}
1000386a:	1c18      	adds	r0, r3, #0
1000386c:	46bd      	mov	sp, r7
1000386e:	b004      	add	sp, #16
10003870:	bd80      	pop	{r7, pc}
10003872:	46c0      	nop			; (mov r8, r8)

10003874 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
10003874:	b580      	push	{r7, lr}
10003876:	b082      	sub	sp, #8
10003878:	af00      	add	r7, sp, #0
1000387a:	6078      	str	r0, [r7, #4]
1000387c:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
1000387e:	687b      	ldr	r3, [r7, #4]
10003880:	681a      	ldr	r2, [r3, #0]
10003882:	683b      	ldr	r3, [r7, #0]
10003884:	1c10      	adds	r0, r2, #0
10003886:	1c19      	adds	r1, r3, #0
10003888:	f7ff fed0 	bl	1000362c <XMC_I2C_CH_ClearStatusFlag>
}
1000388c:	46bd      	mov	sp, r7
1000388e:	b002      	add	sp, #8
10003890:	bd80      	pop	{r7, pc}
10003892:	46c0      	nop			; (mov r8, r8)

10003894 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
10003894:	b5b0      	push	{r4, r5, r7, lr}
10003896:	b088      	sub	sp, #32
10003898:	af02      	add	r7, sp, #8
1000389a:	60f8      	str	r0, [r7, #12]
1000389c:	607a      	str	r2, [r7, #4]
1000389e:	603b      	str	r3, [r7, #0]
100038a0:	230b      	movs	r3, #11
100038a2:	18fb      	adds	r3, r7, r3
100038a4:	1c0a      	adds	r2, r1, #0
100038a6:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
100038a8:	2317      	movs	r3, #23
100038aa:	18fb      	adds	r3, r7, r3
100038ac:	2202      	movs	r2, #2
100038ae:	701a      	strb	r2, [r3, #0]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
100038b0:	68fb      	ldr	r3, [r7, #12]
100038b2:	685b      	ldr	r3, [r3, #4]
100038b4:	2224      	movs	r2, #36	; 0x24
100038b6:	5c9b      	ldrb	r3, [r3, r2]
100038b8:	2b00      	cmp	r3, #0
100038ba:	d112      	bne.n	100038e2 <I2C_MASTER_Transmit+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
100038bc:	2317      	movs	r3, #23
100038be:	18fc      	adds	r4, r7, r3
100038c0:	68f8      	ldr	r0, [r7, #12]
100038c2:	230b      	movs	r3, #11
100038c4:	18fb      	adds	r3, r7, r3
100038c6:	7819      	ldrb	r1, [r3, #0]
100038c8:	687a      	ldr	r2, [r7, #4]
100038ca:	683d      	ldr	r5, [r7, #0]
100038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
100038ce:	9300      	str	r3, [sp, #0]
100038d0:	232c      	movs	r3, #44	; 0x2c
100038d2:	18fb      	adds	r3, r7, r3
100038d4:	781b      	ldrb	r3, [r3, #0]
100038d6:	9301      	str	r3, [sp, #4]
100038d8:	1c2b      	adds	r3, r5, #0
100038da:	f000 f9bb 	bl	10003c54 <I2C_MASTER_StartTransmitIRQ>
100038de:	1c03      	adds	r3, r0, #0
100038e0:	7023      	strb	r3, [r4, #0]
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
100038e2:	2317      	movs	r3, #23
100038e4:	18fb      	adds	r3, r7, r3
100038e6:	781b      	ldrb	r3, [r3, #0]
} /* end of function */
100038e8:	1c18      	adds	r0, r3, #0
100038ea:	46bd      	mov	sp, r7
100038ec:	b006      	add	sp, #24
100038ee:	bdb0      	pop	{r4, r5, r7, pc}

100038f0 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
100038f0:	b580      	push	{r7, lr}
100038f2:	b084      	sub	sp, #16
100038f4:	af00      	add	r7, sp, #0
100038f6:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
100038f8:	687b      	ldr	r3, [r7, #4]
100038fa:	689b      	ldr	r3, [r3, #8]
100038fc:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
100038fe:	230f      	movs	r3, #15
10003900:	18fb      	adds	r3, r7, r3
10003902:	2200      	movs	r2, #0
10003904:	701a      	strb	r2, [r3, #0]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
10003906:	687a      	ldr	r2, [r7, #4]
10003908:	23b1      	movs	r3, #177	; 0xb1
1000390a:	005b      	lsls	r3, r3, #1
1000390c:	1c10      	adds	r0, r2, #0
1000390e:	1c19      	adds	r1, r3, #0
10003910:	f7ff ff9c 	bl	1000384c <I2C_MASTER_GetFlagStatus>
10003914:	1e03      	subs	r3, r0, #0
10003916:	d014      	beq.n	10003942 <I2C_MASTER_TransmitHandler+0x52>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003918:	687b      	ldr	r3, [r7, #4]
1000391a:	681a      	ldr	r2, [r3, #0]
1000391c:	2380      	movs	r3, #128	; 0x80
1000391e:	05db      	lsls	r3, r3, #23
10003920:	1c10      	adds	r0, r2, #0
10003922:	1c19      	adds	r1, r3, #0
10003924:	f7ff fe08 	bl	10003538 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
10003928:	687b      	ldr	r3, [r7, #4]
1000392a:	681a      	ldr	r2, [r3, #0]
1000392c:	2380      	movs	r3, #128	; 0x80
1000392e:	019b      	lsls	r3, r3, #6
10003930:	1c10      	adds	r0, r2, #0
10003932:	1c19      	adds	r1, r3, #0
10003934:	f7ff fdc0 	bl	100034b8 <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
10003938:	687b      	ldr	r3, [r7, #4]
1000393a:	1c18      	adds	r0, r3, #0
1000393c:	f000 fbaa 	bl	10004094 <I2C_MASTER_ProtocolHandler>
10003940:	e11f      	b.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
10003942:	68bb      	ldr	r3, [r7, #8]
10003944:	699b      	ldr	r3, [r3, #24]
10003946:	2b00      	cmp	r3, #0
10003948:	d000      	beq.n	1000394c <I2C_MASTER_TransmitHandler+0x5c>
1000394a:	e08c      	b.n	10003a66 <I2C_MASTER_TransmitHandler+0x176>
  {
    if (handle->config->txFIFO_size > 0)
1000394c:	687b      	ldr	r3, [r7, #4]
1000394e:	685b      	ldr	r3, [r3, #4]
10003950:	2226      	movs	r2, #38	; 0x26
10003952:	5c9b      	ldrb	r3, [r3, r2]
10003954:	2b00      	cmp	r3, #0
10003956:	d063      	beq.n	10003a20 <I2C_MASTER_TransmitHandler+0x130>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003958:	68bb      	ldr	r3, [r7, #8]
1000395a:	68da      	ldr	r2, [r3, #12]
1000395c:	68bb      	ldr	r3, [r7, #8]
1000395e:	689b      	ldr	r3, [r3, #8]
10003960:	429a      	cmp	r2, r3
10003962:	d234      	bcs.n	100039ce <I2C_MASTER_TransmitHandler+0xde>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
10003964:	687a      	ldr	r2, [r7, #4]
10003966:	2380      	movs	r3, #128	; 0x80
10003968:	05db      	lsls	r3, r3, #23
1000396a:	1c10      	adds	r0, r2, #0
1000396c:	1c19      	adds	r1, r3, #0
1000396e:	f7ff fecb 	bl	10003708 <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003972:	687b      	ldr	r3, [r7, #4]
10003974:	681a      	ldr	r2, [r3, #0]
10003976:	2380      	movs	r3, #128	; 0x80
10003978:	05db      	lsls	r3, r3, #23
1000397a:	1c10      	adds	r0, r2, #0
1000397c:	1c19      	adds	r1, r3, #0
1000397e:	f7ff fdc7 	bl	10003510 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003982:	e018      	b.n	100039b6 <I2C_MASTER_TransmitHandler+0xc6>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003984:	68bb      	ldr	r3, [r7, #8]
10003986:	68da      	ldr	r2, [r3, #12]
10003988:	68bb      	ldr	r3, [r7, #8]
1000398a:	689b      	ldr	r3, [r3, #8]
1000398c:	429a      	cmp	r2, r3
1000398e:	d210      	bcs.n	100039b2 <I2C_MASTER_TransmitHandler+0xc2>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10003990:	68bb      	ldr	r3, [r7, #8]
10003992:	681a      	ldr	r2, [r3, #0]
10003994:	68bb      	ldr	r3, [r7, #8]
10003996:	68db      	ldr	r3, [r3, #12]
10003998:	18d3      	adds	r3, r2, r3
1000399a:	781b      	ldrb	r3, [r3, #0]
1000399c:	687a      	ldr	r2, [r7, #4]
1000399e:	1c10      	adds	r0, r2, #0
100039a0:	1c19      	adds	r1, r3, #0
100039a2:	f7ff fe8f 	bl	100036c4 <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
100039a6:	68bb      	ldr	r3, [r7, #8]
100039a8:	68db      	ldr	r3, [r3, #12]
100039aa:	1c5a      	adds	r2, r3, #1
100039ac:	68bb      	ldr	r3, [r7, #8]
100039ae:	60da      	str	r2, [r3, #12]
100039b0:	e001      	b.n	100039b6 <I2C_MASTER_TransmitHandler+0xc6>
          }
          else
          {
            break;
100039b2:	46c0      	nop			; (mov r8, r8)
100039b4:	e0e5      	b.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
100039b6:	687b      	ldr	r3, [r7, #4]
100039b8:	1c18      	adds	r0, r3, #0
100039ba:	f7ff fe59 	bl	10003670 <I2C_MASTER_IsTXFIFOFull>
100039be:	1c03      	adds	r3, r0, #0
100039c0:	1c1a      	adds	r2, r3, #0
100039c2:	2301      	movs	r3, #1
100039c4:	4053      	eors	r3, r2
100039c6:	b2db      	uxtb	r3, r3
100039c8:	2b00      	cmp	r3, #0
100039ca:	d1db      	bne.n	10003984 <I2C_MASTER_TransmitHandler+0x94>
100039cc:	e0d9      	b.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
100039ce:	687b      	ldr	r3, [r7, #4]
100039d0:	681a      	ldr	r2, [r3, #0]
100039d2:	2380      	movs	r3, #128	; 0x80
100039d4:	05db      	lsls	r3, r3, #23
100039d6:	1c10      	adds	r0, r2, #0
100039d8:	1c19      	adds	r1, r3, #0
100039da:	f7ff fdad 	bl	10003538 <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
100039de:	687b      	ldr	r3, [r7, #4]
100039e0:	685b      	ldr	r3, [r3, #4]
100039e2:	2228      	movs	r2, #40	; 0x28
100039e4:	5c9b      	ldrb	r3, [r3, r2]
100039e6:	b25b      	sxtb	r3, r3
100039e8:	1c18      	adds	r0, r3, #0
100039ea:	f7ff fd4b 	bl	10003484 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
100039ee:	46c0      	nop			; (mov r8, r8)
100039f0:	687b      	ldr	r3, [r7, #4]
100039f2:	681b      	ldr	r3, [r3, #0]
100039f4:	1c18      	adds	r0, r3, #0
100039f6:	f7ff fdc5 	bl	10003584 <XMC_USIC_CH_TXFIFO_IsEmpty>
100039fa:	1c03      	adds	r3, r0, #0
100039fc:	1c1a      	adds	r2, r3, #0
100039fe:	2301      	movs	r3, #1
10003a00:	4053      	eors	r3, r2
10003a02:	b2db      	uxtb	r3, r3
10003a04:	2b00      	cmp	r3, #0
10003a06:	d1f3      	bne.n	100039f0 <I2C_MASTER_TransmitHandler+0x100>

          if (ptr_runtime->bus_acquired == true)
10003a08:	68bb      	ldr	r3, [r7, #8]
10003a0a:	2228      	movs	r2, #40	; 0x28
10003a0c:	5c9b      	ldrb	r3, [r3, r2]
10003a0e:	b2db      	uxtb	r3, r3
10003a10:	2b00      	cmp	r3, #0
10003a12:	d100      	bne.n	10003a16 <I2C_MASTER_TransmitHandler+0x126>
10003a14:	e0b5      	b.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
10003a16:	687b      	ldr	r3, [r7, #4]
10003a18:	1c18      	adds	r0, r3, #0
10003a1a:	f000 f8b5 	bl	10003b88 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
10003a1e:	e0b0      	b.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003a20:	68bb      	ldr	r3, [r7, #8]
10003a22:	68da      	ldr	r2, [r3, #12]
10003a24:	68bb      	ldr	r3, [r7, #8]
10003a26:	689b      	ldr	r3, [r3, #8]
10003a28:	429a      	cmp	r2, r3
10003a2a:	d210      	bcs.n	10003a4e <I2C_MASTER_TransmitHandler+0x15e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10003a2c:	68bb      	ldr	r3, [r7, #8]
10003a2e:	681a      	ldr	r2, [r3, #0]
10003a30:	68bb      	ldr	r3, [r7, #8]
10003a32:	68db      	ldr	r3, [r3, #12]
10003a34:	18d3      	adds	r3, r2, r3
10003a36:	781b      	ldrb	r3, [r3, #0]
10003a38:	687a      	ldr	r2, [r7, #4]
10003a3a:	1c10      	adds	r0, r2, #0
10003a3c:	1c19      	adds	r1, r3, #0
10003a3e:	f7ff fe41 	bl	100036c4 <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
10003a42:	68bb      	ldr	r3, [r7, #8]
10003a44:	68db      	ldr	r3, [r3, #12]
10003a46:	1c5a      	adds	r2, r3, #1
10003a48:	68bb      	ldr	r3, [r7, #8]
10003a4a:	60da      	str	r2, [r3, #12]
10003a4c:	e099      	b.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
10003a4e:	68bb      	ldr	r3, [r7, #8]
10003a50:	2228      	movs	r2, #40	; 0x28
10003a52:	5c9b      	ldrb	r3, [r3, r2]
10003a54:	b2db      	uxtb	r3, r3
10003a56:	2b00      	cmp	r3, #0
10003a58:	d100      	bne.n	10003a5c <I2C_MASTER_TransmitHandler+0x16c>
10003a5a:	e092      	b.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
10003a5c:	687b      	ldr	r3, [r7, #4]
10003a5e:	1c18      	adds	r0, r3, #0
10003a60:	f000 f892 	bl	10003b88 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
10003a64:	e08d      	b.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
10003a66:	687b      	ldr	r3, [r7, #4]
10003a68:	685b      	ldr	r3, [r3, #4]
10003a6a:	2226      	movs	r2, #38	; 0x26
10003a6c:	5c9b      	ldrb	r3, [r3, r2]
10003a6e:	2b00      	cmp	r3, #0
10003a70:	d05f      	beq.n	10003b32 <I2C_MASTER_TransmitHandler+0x242>
    {
      if ((handle->config->rxFIFO_size > 0))
10003a72:	687b      	ldr	r3, [r7, #4]
10003a74:	685b      	ldr	r3, [r3, #4]
10003a76:	2227      	movs	r2, #39	; 0x27
10003a78:	5c9b      	ldrb	r3, [r3, r2]
10003a7a:	2b00      	cmp	r3, #0
10003a7c:	d017      	beq.n	10003aae <I2C_MASTER_TransmitHandler+0x1be>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003a7e:	687b      	ldr	r3, [r7, #4]
10003a80:	685b      	ldr	r3, [r3, #4]
10003a82:	2226      	movs	r2, #38	; 0x26
10003a84:	5c9b      	ldrb	r3, [r3, r2]
10003a86:	1c1a      	adds	r2, r3, #0
10003a88:	2301      	movs	r3, #1
10003a8a:	4093      	lsls	r3, r2
10003a8c:	1c19      	adds	r1, r3, #0
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
10003a8e:	687b      	ldr	r3, [r7, #4]
10003a90:	685b      	ldr	r3, [r3, #4]
10003a92:	2227      	movs	r2, #39	; 0x27
10003a94:	5c9b      	ldrb	r3, [r3, r2]
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003a96:	1c1a      	adds	r2, r3, #0
10003a98:	2301      	movs	r3, #1
10003a9a:	4093      	lsls	r3, r2
10003a9c:	1c08      	adds	r0, r1, #0
10003a9e:	1c19      	adds	r1, r3, #0
10003aa0:	f7ff fea4 	bl	100037ec <calculate_minfifosize>
10003aa4:	1c02      	adds	r2, r0, #0
10003aa6:	230f      	movs	r3, #15
10003aa8:	18fb      	adds	r3, r7, r3
10003aaa:	701a      	strb	r2, [r3, #0]
10003aac:	e003      	b.n	10003ab6 <I2C_MASTER_TransmitHandler+0x1c6>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
10003aae:	230f      	movs	r3, #15
10003ab0:	18fb      	adds	r3, r7, r3
10003ab2:	2202      	movs	r2, #2
10003ab4:	701a      	strb	r2, [r3, #0]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003ab6:	687b      	ldr	r3, [r7, #4]
10003ab8:	681a      	ldr	r2, [r3, #0]
10003aba:	2380      	movs	r3, #128	; 0x80
10003abc:	05db      	lsls	r3, r3, #23
10003abe:	1c10      	adds	r0, r2, #0
10003ac0:	1c19      	adds	r1, r3, #0
10003ac2:	f7ff fd39 	bl	10003538 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003ac6:	e027      	b.n	10003b18 <I2C_MASTER_TransmitHandler+0x228>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003ac8:	68bb      	ldr	r3, [r7, #8]
10003aca:	68da      	ldr	r2, [r3, #12]
10003acc:	68bb      	ldr	r3, [r7, #8]
10003ace:	689b      	ldr	r3, [r3, #8]
10003ad0:	429a      	cmp	r2, r3
10003ad2:	d220      	bcs.n	10003b16 <I2C_MASTER_TransmitHandler+0x226>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003ad4:	68bb      	ldr	r3, [r7, #8]
10003ad6:	68db      	ldr	r3, [r3, #12]
10003ad8:	1c5a      	adds	r2, r3, #1
10003ada:	68bb      	ldr	r3, [r7, #8]
10003adc:	689b      	ldr	r3, [r3, #8]
10003ade:	429a      	cmp	r2, r3
10003ae0:	d108      	bne.n	10003af4 <I2C_MASTER_TransmitHandler+0x204>
10003ae2:	68bb      	ldr	r3, [r7, #8]
10003ae4:	6a1b      	ldr	r3, [r3, #32]
10003ae6:	2b01      	cmp	r3, #1
10003ae8:	d104      	bne.n	10003af4 <I2C_MASTER_TransmitHandler+0x204>
          {
            I2C_MASTER_ReceiveNACK(handle);
10003aea:	687b      	ldr	r3, [r7, #4]
10003aec:	1c18      	adds	r0, r3, #0
10003aee:	f7ff fe27 	bl	10003740 <I2C_MASTER_ReceiveNACK>
10003af2:	e003      	b.n	10003afc <I2C_MASTER_TransmitHandler+0x20c>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
10003af4:	687b      	ldr	r3, [r7, #4]
10003af6:	1c18      	adds	r0, r3, #0
10003af8:	f7ff fe16 	bl	10003728 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
10003afc:	68bb      	ldr	r3, [r7, #8]
10003afe:	68db      	ldr	r3, [r3, #12]
10003b00:	1c5a      	adds	r2, r3, #1
10003b02:	68bb      	ldr	r3, [r7, #8]
10003b04:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
10003b06:	68bb      	ldr	r3, [r7, #8]
10003b08:	68da      	ldr	r2, [r3, #12]
10003b0a:	230f      	movs	r3, #15
10003b0c:	18fb      	adds	r3, r7, r3
10003b0e:	781b      	ldrb	r3, [r3, #0]
10003b10:	429a      	cmp	r2, r3
10003b12:	d301      	bcc.n	10003b18 <I2C_MASTER_TransmitHandler+0x228>
          {
            break;
10003b14:	e00c      	b.n	10003b30 <I2C_MASTER_TransmitHandler+0x240>
          }
        }
        else
        {
          break;
10003b16:	e00b      	b.n	10003b30 <I2C_MASTER_TransmitHandler+0x240>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003b18:	687b      	ldr	r3, [r7, #4]
10003b1a:	1c18      	adds	r0, r3, #0
10003b1c:	f7ff fda8 	bl	10003670 <I2C_MASTER_IsTXFIFOFull>
10003b20:	1c03      	adds	r3, r0, #0
10003b22:	1c1a      	adds	r2, r3, #0
10003b24:	2301      	movs	r3, #1
10003b26:	4053      	eors	r3, r2
10003b28:	b2db      	uxtb	r3, r3
10003b2a:	2b00      	cmp	r3, #0
10003b2c:	d1cc      	bne.n	10003ac8 <I2C_MASTER_TransmitHandler+0x1d8>
10003b2e:	e019      	b.n	10003b64 <I2C_MASTER_TransmitHandler+0x274>
10003b30:	e018      	b.n	10003b64 <I2C_MASTER_TransmitHandler+0x274>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003b32:	68bb      	ldr	r3, [r7, #8]
10003b34:	68db      	ldr	r3, [r3, #12]
10003b36:	1c5a      	adds	r2, r3, #1
10003b38:	68bb      	ldr	r3, [r7, #8]
10003b3a:	689b      	ldr	r3, [r3, #8]
10003b3c:	429a      	cmp	r2, r3
10003b3e:	d108      	bne.n	10003b52 <I2C_MASTER_TransmitHandler+0x262>
10003b40:	68bb      	ldr	r3, [r7, #8]
10003b42:	6a1b      	ldr	r3, [r3, #32]
10003b44:	2b01      	cmp	r3, #1
10003b46:	d104      	bne.n	10003b52 <I2C_MASTER_TransmitHandler+0x262>
      {
        I2C_MASTER_ReceiveNACK(handle);
10003b48:	687b      	ldr	r3, [r7, #4]
10003b4a:	1c18      	adds	r0, r3, #0
10003b4c:	f7ff fdf8 	bl	10003740 <I2C_MASTER_ReceiveNACK>
10003b50:	e003      	b.n	10003b5a <I2C_MASTER_TransmitHandler+0x26a>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
10003b52:	687b      	ldr	r3, [r7, #4]
10003b54:	1c18      	adds	r0, r3, #0
10003b56:	f7ff fde7 	bl	10003728 <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
10003b5a:	68bb      	ldr	r3, [r7, #8]
10003b5c:	68db      	ldr	r3, [r3, #12]
10003b5e:	1c5a      	adds	r2, r3, #1
10003b60:	68bb      	ldr	r3, [r7, #8]
10003b62:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
10003b64:	687b      	ldr	r3, [r7, #4]
10003b66:	689b      	ldr	r3, [r3, #8]
10003b68:	68da      	ldr	r2, [r3, #12]
10003b6a:	687b      	ldr	r3, [r7, #4]
10003b6c:	689b      	ldr	r3, [r3, #8]
10003b6e:	689b      	ldr	r3, [r3, #8]
10003b70:	429a      	cmp	r2, r3
10003b72:	d106      	bne.n	10003b82 <I2C_MASTER_TransmitHandler+0x292>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
10003b74:	687a      	ldr	r2, [r7, #4]
10003b76:	2380      	movs	r3, #128	; 0x80
10003b78:	05db      	lsls	r3, r3, #23
10003b7a:	1c10      	adds	r0, r2, #0
10003b7c:	1c19      	adds	r1, r3, #0
10003b7e:	f7ff fdc3 	bl	10003708 <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
10003b82:	46bd      	mov	sp, r7
10003b84:	b004      	add	sp, #16
10003b86:	bd80      	pop	{r7, pc}

10003b88 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
10003b88:	b580      	push	{r7, lr}
10003b8a:	b084      	sub	sp, #16
10003b8c:	af00      	add	r7, sp, #0
10003b8e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
10003b90:	687b      	ldr	r3, [r7, #4]
10003b92:	689b      	ldr	r3, [r3, #8]
10003b94:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
10003b96:	687a      	ldr	r2, [r7, #4]
10003b98:	2380      	movs	r3, #128	; 0x80
10003b9a:	05db      	lsls	r3, r3, #23
10003b9c:	1c10      	adds	r0, r2, #0
10003b9e:	1c19      	adds	r1, r3, #0
10003ba0:	f7ff fdb2 	bl	10003708 <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
10003ba4:	68fb      	ldr	r3, [r7, #12]
10003ba6:	69db      	ldr	r3, [r3, #28]
10003ba8:	2b01      	cmp	r3, #1
10003baa:	d107      	bne.n	10003bbc <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x34>
  {
    ptr_runtime->bus_acquired = false;
10003bac:	68fb      	ldr	r3, [r7, #12]
10003bae:	2228      	movs	r2, #40	; 0x28
10003bb0:	2100      	movs	r1, #0
10003bb2:	5499      	strb	r1, [r3, r2]
    I2C_MASTER_SendStop(handle);
10003bb4:	687b      	ldr	r3, [r7, #4]
10003bb6:	1c18      	adds	r0, r3, #0
10003bb8:	f7ff fdce 	bl	10003758 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10003bbc:	46c0      	nop			; (mov r8, r8)
10003bbe:	687b      	ldr	r3, [r7, #4]
10003bc0:	681b      	ldr	r3, [r3, #0]
10003bc2:	1c18      	adds	r0, r3, #0
10003bc4:	f7ff fc88 	bl	100034d8 <XMC_USIC_CH_GetTransmitBufferStatus>
10003bc8:	1e03      	subs	r3, r0, #0
10003bca:	2b80      	cmp	r3, #128	; 0x80
10003bcc:	d0f7      	beq.n	10003bbe <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x36>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
10003bce:	68fb      	ldr	r3, [r7, #12]
10003bd0:	2226      	movs	r2, #38	; 0x26
10003bd2:	2100      	movs	r1, #0
10003bd4:	5499      	strb	r1, [r3, r2]

  if (handle->config->tx_cbhandler != NULL)
10003bd6:	687b      	ldr	r3, [r7, #4]
10003bd8:	685b      	ldr	r3, [r3, #4]
10003bda:	691b      	ldr	r3, [r3, #16]
10003bdc:	2b00      	cmp	r3, #0
10003bde:	d003      	beq.n	10003be8 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x60>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
10003be0:	687b      	ldr	r3, [r7, #4]
10003be2:	685b      	ldr	r3, [r3, #4]
10003be4:	691b      	ldr	r3, [r3, #16]
10003be6:	4798      	blx	r3
  }
}
10003be8:	46bd      	mov	sp, r7
10003bea:	b004      	add	sp, #16
10003bec:	bd80      	pop	{r7, pc}
10003bee:	46c0      	nop			; (mov r8, r8)

10003bf0 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
10003bf0:	b580      	push	{r7, lr}
10003bf2:	b084      	sub	sp, #16
10003bf4:	af00      	add	r7, sp, #0
10003bf6:	60f8      	str	r0, [r7, #12]
10003bf8:	60b9      	str	r1, [r7, #8]
10003bfa:	1dfb      	adds	r3, r7, #7
10003bfc:	701a      	strb	r2, [r3, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
10003bfe:	68fb      	ldr	r3, [r7, #12]
10003c00:	681b      	ldr	r3, [r3, #0]
10003c02:	1c18      	adds	r0, r3, #0
10003c04:	210c      	movs	r1, #12
10003c06:	f7ff fd11 	bl	1000362c <XMC_I2C_CH_ClearStatusFlag>

  if (handle->runtime->bus_acquired == true)
10003c0a:	68fb      	ldr	r3, [r7, #12]
10003c0c:	689b      	ldr	r3, [r3, #8]
10003c0e:	2228      	movs	r2, #40	; 0x28
10003c10:	5c9b      	ldrb	r3, [r3, r2]
10003c12:	b2db      	uxtb	r3, r3
10003c14:	2b00      	cmp	r3, #0
10003c16:	d00a      	beq.n	10003c2e <I2C_MASTER_lSendStart_Or_RepeatedStart+0x3e>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
10003c18:	68bb      	ldr	r3, [r7, #8]
10003c1a:	b29b      	uxth	r3, r3
10003c1c:	1c19      	adds	r1, r3, #0
10003c1e:	68fa      	ldr	r2, [r7, #12]
10003c20:	1dfb      	adds	r3, r7, #7
10003c22:	781b      	ldrb	r3, [r3, #0]
10003c24:	1c10      	adds	r0, r2, #0
10003c26:	1c1a      	adds	r2, r3, #0
10003c28:	f7ff fdc4 	bl	100037b4 <I2C_MASTER_SendRepeatedStart>
10003c2c:	e00e      	b.n	10003c4c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x5c>
  }
  else
  {
    handle->runtime->bus_acquired = true;
10003c2e:	68fb      	ldr	r3, [r7, #12]
10003c30:	689b      	ldr	r3, [r3, #8]
10003c32:	2228      	movs	r2, #40	; 0x28
10003c34:	2101      	movs	r1, #1
10003c36:	5499      	strb	r1, [r3, r2]
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
10003c38:	68bb      	ldr	r3, [r7, #8]
10003c3a:	b29b      	uxth	r3, r3
10003c3c:	1c19      	adds	r1, r3, #0
10003c3e:	68fa      	ldr	r2, [r7, #12]
10003c40:	1dfb      	adds	r3, r7, #7
10003c42:	781b      	ldrb	r3, [r3, #0]
10003c44:	1c10      	adds	r0, r2, #0
10003c46:	1c1a      	adds	r2, r3, #0
10003c48:	f7ff fd98 	bl	1000377c <I2C_MASTER_SendStart>
  }
}
10003c4c:	46bd      	mov	sp, r7
10003c4e:	b004      	add	sp, #16
10003c50:	bd80      	pop	{r7, pc}
10003c52:	46c0      	nop			; (mov r8, r8)

10003c54 <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
10003c54:	b580      	push	{r7, lr}
10003c56:	b088      	sub	sp, #32
10003c58:	af00      	add	r7, sp, #0
10003c5a:	60f8      	str	r0, [r7, #12]
10003c5c:	607a      	str	r2, [r7, #4]
10003c5e:	603b      	str	r3, [r7, #0]
10003c60:	230b      	movs	r3, #11
10003c62:	18fb      	adds	r3, r7, r3
10003c64:	1c0a      	adds	r2, r1, #0
10003c66:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
10003c68:	231f      	movs	r3, #31
10003c6a:	18fb      	adds	r3, r7, r3
10003c6c:	2202      	movs	r2, #2
10003c6e:	701a      	strb	r2, [r3, #0]
  ptr_runtime = handle->runtime;
10003c70:	68fb      	ldr	r3, [r7, #12]
10003c72:	689b      	ldr	r3, [r3, #8]
10003c74:	617b      	str	r3, [r7, #20]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
10003c76:	230b      	movs	r3, #11
10003c78:	18fb      	adds	r3, r7, r3
10003c7a:	781b      	ldrb	r3, [r3, #0]
10003c7c:	2201      	movs	r2, #1
10003c7e:	4053      	eors	r3, r2
10003c80:	b2db      	uxtb	r3, r3
10003c82:	2b00      	cmp	r3, #0
10003c84:	d009      	beq.n	10003c9a <I2C_MASTER_StartTransmitIRQ+0x46>
10003c86:	68fb      	ldr	r3, [r7, #12]
10003c88:	689b      	ldr	r3, [r3, #8]
10003c8a:	2228      	movs	r2, #40	; 0x28
10003c8c:	5c9b      	ldrb	r3, [r3, r2]
10003c8e:	b2db      	uxtb	r3, r3
10003c90:	2201      	movs	r2, #1
10003c92:	4053      	eors	r3, r2
10003c94:	b2db      	uxtb	r3, r3
10003c96:	2b00      	cmp	r3, #0
10003c98:	d105      	bne.n	10003ca6 <I2C_MASTER_StartTransmitIRQ+0x52>
10003c9a:	683b      	ldr	r3, [r7, #0]
10003c9c:	2b00      	cmp	r3, #0
10003c9e:	d002      	beq.n	10003ca6 <I2C_MASTER_StartTransmitIRQ+0x52>
10003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
10003ca2:	2b00      	cmp	r3, #0
10003ca4:	d104      	bne.n	10003cb0 <I2C_MASTER_StartTransmitIRQ+0x5c>
  {
    status = I2C_MASTER_STATUS_FAILURE;
10003ca6:	231f      	movs	r3, #31
10003ca8:	18fb      	adds	r3, r7, r3
10003caa:	2201      	movs	r2, #1
10003cac:	701a      	strb	r2, [r3, #0]
10003cae:	e065      	b.n	10003d7c <I2C_MASTER_StartTransmitIRQ+0x128>
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
10003cb0:	697b      	ldr	r3, [r7, #20]
10003cb2:	2200      	movs	r2, #0
10003cb4:	619a      	str	r2, [r3, #24]

    if (ptr_runtime->tx_busy == false)
10003cb6:	697b      	ldr	r3, [r7, #20]
10003cb8:	2226      	movs	r2, #38	; 0x26
10003cba:	5c9b      	ldrb	r3, [r3, r2]
10003cbc:	b2db      	uxtb	r3, r3
10003cbe:	2201      	movs	r2, #1
10003cc0:	4053      	eors	r3, r2
10003cc2:	b2db      	uxtb	r3, r3
10003cc4:	2b00      	cmp	r3, #0
10003cc6:	d059      	beq.n	10003d7c <I2C_MASTER_StartTransmitIRQ+0x128>
    {
      /*If there is no transmission in progress, obtain the address of data, size of data*/
      ptr_runtime->tx_data = data;
10003cc8:	697b      	ldr	r3, [r7, #20]
10003cca:	683a      	ldr	r2, [r7, #0]
10003ccc:	601a      	str	r2, [r3, #0]
      ptr_runtime->tx_data_count = size;
10003cce:	697b      	ldr	r3, [r7, #20]
10003cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
10003cd2:	609a      	str	r2, [r3, #8]

      /*Initialize to first index and set the busy flag*/
      ptr_runtime->tx_data_index = 0U;
10003cd4:	697b      	ldr	r3, [r7, #20]
10003cd6:	2200      	movs	r2, #0
10003cd8:	60da      	str	r2, [r3, #12]
      ptr_runtime->tx_busy = true;
10003cda:	697b      	ldr	r3, [r7, #20]
10003cdc:	2226      	movs	r2, #38	; 0x26
10003cde:	2101      	movs	r1, #1
10003ce0:	5499      	strb	r1, [r3, r2]
      ptr_runtime->send_stop = send_stop;
10003ce2:	232c      	movs	r3, #44	; 0x2c
10003ce4:	18fb      	adds	r3, r7, r3
10003ce6:	781a      	ldrb	r2, [r3, #0]
10003ce8:	697b      	ldr	r3, [r7, #20]
10003cea:	61da      	str	r2, [r3, #28]

      /* Enable ACK event */
      I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
10003cec:	68fa      	ldr	r2, [r7, #12]
10003cee:	2380      	movs	r3, #128	; 0x80
10003cf0:	05db      	lsls	r3, r3, #23
10003cf2:	1c10      	adds	r0, r2, #0
10003cf4:	1c19      	adds	r1, r3, #0
10003cf6:	f7ff fcf7 	bl	100036e8 <I2C_MASTER_EnableEvent>
      XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
10003cfa:	68fb      	ldr	r3, [r7, #12]
10003cfc:	6819      	ldr	r1, [r3, #0]
10003cfe:	697b      	ldr	r3, [r7, #20]
10003d00:	2224      	movs	r2, #36	; 0x24
10003d02:	5c9b      	ldrb	r3, [r3, r2]
10003d04:	1c08      	adds	r0, r1, #0
10003d06:	1c19      	adds	r1, r3, #0
10003d08:	f7ff fc74 	bl	100035f4 <XMC_I2C_CH_SetInterruptNodePointer>

      if (send_start == true)
10003d0c:	230b      	movs	r3, #11
10003d0e:	18fb      	adds	r3, r7, r3
10003d10:	781b      	ldrb	r3, [r3, #0]
10003d12:	2b00      	cmp	r3, #0
10003d14:	d025      	beq.n	10003d62 <I2C_MASTER_StartTransmitIRQ+0x10e>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
10003d16:	68fa      	ldr	r2, [r7, #12]
10003d18:	687b      	ldr	r3, [r7, #4]
10003d1a:	1c10      	adds	r0, r2, #0
10003d1c:	1c19      	adds	r1, r3, #0
10003d1e:	2200      	movs	r2, #0
10003d20:	f7ff ff66 	bl	10003bf0 <I2C_MASTER_lSendStart_Or_RepeatedStart>

        // Detect problems in multi master environments
        uint32_t retries = I2C_MASTER_START_TRANSMIT_RETRIES;
10003d24:	4b19      	ldr	r3, [pc, #100]	; (10003d8c <I2C_MASTER_StartTransmitIRQ+0x138>)
10003d26:	61bb      	str	r3, [r7, #24]
        while (((XMC_I2C_CH_GetStatusFlag(handle->channel) & (XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED)) == 0) && --retries);
10003d28:	46c0      	nop			; (mov r8, r8)
10003d2a:	68fb      	ldr	r3, [r7, #12]
10003d2c:	681b      	ldr	r3, [r3, #0]
10003d2e:	1c18      	adds	r0, r3, #0
10003d30:	f7ff fc72 	bl	10003618 <XMC_I2C_CH_GetStatusFlag>
10003d34:	1c02      	adds	r2, r0, #0
10003d36:	230c      	movs	r3, #12
10003d38:	4013      	ands	r3, r2
10003d3a:	d105      	bne.n	10003d48 <I2C_MASTER_StartTransmitIRQ+0xf4>
10003d3c:	69bb      	ldr	r3, [r7, #24]
10003d3e:	3b01      	subs	r3, #1
10003d40:	61bb      	str	r3, [r7, #24]
10003d42:	69bb      	ldr	r3, [r7, #24]
10003d44:	2b00      	cmp	r3, #0
10003d46:	d1f0      	bne.n	10003d2a <I2C_MASTER_StartTransmitIRQ+0xd6>
        if (retries == 0)
10003d48:	69bb      	ldr	r3, [r7, #24]
10003d4a:	2b00      	cmp	r3, #0
10003d4c:	d104      	bne.n	10003d58 <I2C_MASTER_StartTransmitIRQ+0x104>
        {
    	  status = I2C_MASTER_STATUS_BUS_ERROR;
10003d4e:	231f      	movs	r3, #31
10003d50:	18fb      	adds	r3, r7, r3
10003d52:	2204      	movs	r2, #4
10003d54:	701a      	strb	r2, [r3, #0]
10003d56:	e011      	b.n	10003d7c <I2C_MASTER_StartTransmitIRQ+0x128>
        }
        else
        {
          status = I2C_MASTER_STATUS_SUCCESS;
10003d58:	231f      	movs	r3, #31
10003d5a:	18fb      	adds	r3, r7, r3
10003d5c:	2200      	movs	r2, #0
10003d5e:	701a      	strb	r2, [r3, #0]
10003d60:	e00c      	b.n	10003d7c <I2C_MASTER_StartTransmitIRQ+0x128>
        }
      }
      else
      {
        /*Trigger the Ack interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
10003d62:	68fb      	ldr	r3, [r7, #12]
10003d64:	6819      	ldr	r1, [r3, #0]
10003d66:	697b      	ldr	r3, [r7, #20]
10003d68:	2224      	movs	r2, #36	; 0x24
10003d6a:	5c9b      	ldrb	r3, [r3, r2]
10003d6c:	1c08      	adds	r0, r1, #0
10003d6e:	1c19      	adds	r1, r3, #0
10003d70:	f7ff fbc0 	bl	100034f4 <XMC_USIC_CH_TriggerServiceRequest>
        status = I2C_MASTER_STATUS_SUCCESS;
10003d74:	231f      	movs	r3, #31
10003d76:	18fb      	adds	r3, r7, r3
10003d78:	2200      	movs	r2, #0
10003d7a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return (status);
10003d7c:	231f      	movs	r3, #31
10003d7e:	18fb      	adds	r3, r7, r3
10003d80:	781b      	ldrb	r3, [r3, #0]
}
10003d82:	1c18      	adds	r0, r3, #0
10003d84:	46bd      	mov	sp, r7
10003d86:	b008      	add	sp, #32
10003d88:	bd80      	pop	{r7, pc}
10003d8a:	46c0      	nop			; (mov r8, r8)
10003d8c:	00007fff 	.word	0x00007fff

10003d90 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
10003d90:	b590      	push	{r4, r7, lr}
10003d92:	b085      	sub	sp, #20
10003d94:	af00      	add	r7, sp, #0
10003d96:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
10003d98:	687b      	ldr	r3, [r7, #4]
10003d9a:	689b      	ldr	r3, [r3, #8]
10003d9c:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
10003d9e:	230f      	movs	r3, #15
10003da0:	18fb      	adds	r3, r7, r3
10003da2:	2200      	movs	r2, #0
10003da4:	701a      	strb	r2, [r3, #0]

  if (ptr_runtime->rx_busy == true)
10003da6:	68bb      	ldr	r3, [r7, #8]
10003da8:	2227      	movs	r2, #39	; 0x27
10003daa:	5c9b      	ldrb	r3, [r3, r2]
10003dac:	b2db      	uxtb	r3, r3
10003dae:	2b00      	cmp	r3, #0
10003db0:	d100      	bne.n	10003db4 <I2C_MASTER_ReceiveHandler+0x24>
10003db2:	e132      	b.n	1000401a <I2C_MASTER_ReceiveHandler+0x28a>
  {
    if (handle->config->rxFIFO_size > 0)
10003db4:	687b      	ldr	r3, [r7, #4]
10003db6:	685b      	ldr	r3, [r3, #4]
10003db8:	2227      	movs	r2, #39	; 0x27
10003dba:	5c9b      	ldrb	r3, [r3, r2]
10003dbc:	2b00      	cmp	r3, #0
10003dbe:	d100      	bne.n	10003dc2 <I2C_MASTER_ReceiveHandler+0x32>
10003dc0:	e0e3      	b.n	10003f8a <I2C_MASTER_ReceiveHandler+0x1fa>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
10003dc2:	e022      	b.n	10003e0a <I2C_MASTER_ReceiveHandler+0x7a>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
10003dc4:	68bb      	ldr	r3, [r7, #8]
10003dc6:	685a      	ldr	r2, [r3, #4]
10003dc8:	68bb      	ldr	r3, [r7, #8]
10003dca:	695b      	ldr	r3, [r3, #20]
10003dcc:	18d4      	adds	r4, r2, r3
10003dce:	687b      	ldr	r3, [r7, #4]
10003dd0:	1c18      	adds	r0, r3, #0
10003dd2:	f7ff fc69 	bl	100036a8 <I2C_MASTER_GetReceivedByte>
10003dd6:	1c03      	adds	r3, r0, #0
10003dd8:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
10003dda:	68bb      	ldr	r3, [r7, #8]
10003ddc:	695b      	ldr	r3, [r3, #20]
10003dde:	1c5a      	adds	r2, r3, #1
10003de0:	68bb      	ldr	r3, [r7, #8]
10003de2:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10003de4:	68bb      	ldr	r3, [r7, #8]
10003de6:	695a      	ldr	r2, [r3, #20]
10003de8:	68bb      	ldr	r3, [r7, #8]
10003dea:	691b      	ldr	r3, [r3, #16]
10003dec:	429a      	cmp	r2, r3
10003dee:	d10c      	bne.n	10003e0a <I2C_MASTER_ReceiveHandler+0x7a>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
10003df0:	68bb      	ldr	r3, [r7, #8]
10003df2:	2227      	movs	r2, #39	; 0x27
10003df4:	2100      	movs	r1, #0
10003df6:	5499      	strb	r1, [r3, r2]

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
10003df8:	687b      	ldr	r3, [r7, #4]
10003dfa:	681a      	ldr	r2, [r3, #0]
10003dfc:	23c0      	movs	r3, #192	; 0xc0
10003dfe:	05db      	lsls	r3, r3, #23
10003e00:	1c10      	adds	r0, r2, #0
10003e02:	1c19      	adds	r1, r3, #0
10003e04:	f7ff fbd0 	bl	100035a8 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
10003e08:	e00a      	b.n	10003e20 <I2C_MASTER_ReceiveHandler+0x90>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
10003e0a:	687b      	ldr	r3, [r7, #4]
10003e0c:	1c18      	adds	r0, r3, #0
10003e0e:	f7ff fc3d 	bl	1000368c <I2C_MASTER_IsRXFIFOEmpty>
10003e12:	1c03      	adds	r3, r0, #0
10003e14:	1c1a      	adds	r2, r3, #0
10003e16:	2301      	movs	r3, #1
10003e18:	4053      	eors	r3, r2
10003e1a:	b2db      	uxtb	r3, r3
10003e1c:	2b00      	cmp	r3, #0
10003e1e:	d1d1      	bne.n	10003dc4 <I2C_MASTER_ReceiveHandler+0x34>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10003e20:	68bb      	ldr	r3, [r7, #8]
10003e22:	695a      	ldr	r2, [r3, #20]
10003e24:	68bb      	ldr	r3, [r7, #8]
10003e26:	691b      	ldr	r3, [r3, #16]
10003e28:	429a      	cmp	r2, r3
10003e2a:	d300      	bcc.n	10003e2e <I2C_MASTER_ReceiveHandler+0x9e>
10003e2c:	e08c      	b.n	10003f48 <I2C_MASTER_ReceiveHandler+0x1b8>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
10003e2e:	68bb      	ldr	r3, [r7, #8]
10003e30:	691a      	ldr	r2, [r3, #16]
10003e32:	68bb      	ldr	r3, [r7, #8]
10003e34:	695b      	ldr	r3, [r3, #20]
10003e36:	1ad3      	subs	r3, r2, r3
10003e38:	687a      	ldr	r2, [r7, #4]
10003e3a:	1c10      	adds	r0, r2, #0
10003e3c:	1c19      	adds	r1, r3, #0
10003e3e:	f000 f971 	bl	10004124 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
10003e42:	687b      	ldr	r3, [r7, #4]
10003e44:	685b      	ldr	r3, [r3, #4]
10003e46:	2226      	movs	r2, #38	; 0x26
10003e48:	5c9b      	ldrb	r3, [r3, r2]
10003e4a:	2b00      	cmp	r3, #0
10003e4c:	d017      	beq.n	10003e7e <I2C_MASTER_ReceiveHandler+0xee>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003e4e:	687b      	ldr	r3, [r7, #4]
10003e50:	685b      	ldr	r3, [r3, #4]
10003e52:	2226      	movs	r2, #38	; 0x26
10003e54:	5c9b      	ldrb	r3, [r3, r2]
10003e56:	1c1a      	adds	r2, r3, #0
10003e58:	2301      	movs	r3, #1
10003e5a:	4093      	lsls	r3, r2
10003e5c:	1c19      	adds	r1, r3, #0
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
10003e5e:	687b      	ldr	r3, [r7, #4]
10003e60:	685b      	ldr	r3, [r3, #4]
10003e62:	2227      	movs	r2, #39	; 0x27
10003e64:	5c9b      	ldrb	r3, [r3, r2]
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003e66:	1c1a      	adds	r2, r3, #0
10003e68:	2301      	movs	r3, #1
10003e6a:	4093      	lsls	r3, r2
10003e6c:	1c08      	adds	r0, r1, #0
10003e6e:	1c19      	adds	r1, r3, #0
10003e70:	f7ff fcbc 	bl	100037ec <calculate_minfifosize>
10003e74:	1c02      	adds	r2, r0, #0
10003e76:	230e      	movs	r3, #14
10003e78:	18fb      	adds	r3, r7, r3
10003e7a:	701a      	strb	r2, [r3, #0]
10003e7c:	e003      	b.n	10003e86 <I2C_MASTER_ReceiveHandler+0xf6>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
10003e7e:	230e      	movs	r3, #14
10003e80:	18fb      	adds	r3, r7, r3
10003e82:	2202      	movs	r2, #2
10003e84:	701a      	strb	r2, [r3, #0]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
10003e86:	687b      	ldr	r3, [r7, #4]
10003e88:	685b      	ldr	r3, [r3, #4]
10003e8a:	2226      	movs	r2, #38	; 0x26
10003e8c:	5c9b      	ldrb	r3, [r3, r2]
10003e8e:	2b00      	cmp	r3, #0
10003e90:	d041      	beq.n	10003f16 <I2C_MASTER_ReceiveHandler+0x186>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003e92:	e033      	b.n	10003efc <I2C_MASTER_ReceiveHandler+0x16c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003e94:	68bb      	ldr	r3, [r7, #8]
10003e96:	68da      	ldr	r2, [r3, #12]
10003e98:	68bb      	ldr	r3, [r7, #8]
10003e9a:	689b      	ldr	r3, [r3, #8]
10003e9c:	429a      	cmp	r2, r3
10003e9e:	d22c      	bcs.n	10003efa <I2C_MASTER_ReceiveHandler+0x16a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003ea0:	68bb      	ldr	r3, [r7, #8]
10003ea2:	68db      	ldr	r3, [r3, #12]
10003ea4:	1c5a      	adds	r2, r3, #1
10003ea6:	68bb      	ldr	r3, [r7, #8]
10003ea8:	689b      	ldr	r3, [r3, #8]
10003eaa:	429a      	cmp	r2, r3
10003eac:	d108      	bne.n	10003ec0 <I2C_MASTER_ReceiveHandler+0x130>
10003eae:	68bb      	ldr	r3, [r7, #8]
10003eb0:	6a1b      	ldr	r3, [r3, #32]
10003eb2:	2b01      	cmp	r3, #1
10003eb4:	d104      	bne.n	10003ec0 <I2C_MASTER_ReceiveHandler+0x130>
              {
                I2C_MASTER_ReceiveNACK(handle);
10003eb6:	687b      	ldr	r3, [r7, #4]
10003eb8:	1c18      	adds	r0, r3, #0
10003eba:	f7ff fc41 	bl	10003740 <I2C_MASTER_ReceiveNACK>
10003ebe:	e003      	b.n	10003ec8 <I2C_MASTER_ReceiveHandler+0x138>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
10003ec0:	687b      	ldr	r3, [r7, #4]
10003ec2:	1c18      	adds	r0, r3, #0
10003ec4:	f7ff fc30 	bl	10003728 <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
10003ec8:	68bb      	ldr	r3, [r7, #8]
10003eca:	68db      	ldr	r3, [r3, #12]
10003ecc:	1c5a      	adds	r2, r3, #1
10003ece:	68bb      	ldr	r3, [r7, #8]
10003ed0:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
10003ed2:	230f      	movs	r3, #15
10003ed4:	18fb      	adds	r3, r7, r3
10003ed6:	220f      	movs	r2, #15
10003ed8:	18ba      	adds	r2, r7, r2
10003eda:	7812      	ldrb	r2, [r2, #0]
10003edc:	3201      	adds	r2, #1
10003ede:	701a      	strb	r2, [r3, #0]
10003ee0:	230f      	movs	r3, #15
10003ee2:	18fa      	adds	r2, r7, r3
10003ee4:	230e      	movs	r3, #14
10003ee6:	18fb      	adds	r3, r7, r3
10003ee8:	7812      	ldrb	r2, [r2, #0]
10003eea:	781b      	ldrb	r3, [r3, #0]
10003eec:	429a      	cmp	r2, r3
10003eee:	d305      	bcc.n	10003efc <I2C_MASTER_ReceiveHandler+0x16c>
              {
                fifo_lindex = 0U;
10003ef0:	230f      	movs	r3, #15
10003ef2:	18fb      	adds	r3, r7, r3
10003ef4:	2200      	movs	r2, #0
10003ef6:	701a      	strb	r2, [r3, #0]
                break;
10003ef8:	e00c      	b.n	10003f14 <I2C_MASTER_ReceiveHandler+0x184>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
10003efa:	e00b      	b.n	10003f14 <I2C_MASTER_ReceiveHandler+0x184>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003efc:	687b      	ldr	r3, [r7, #4]
10003efe:	1c18      	adds	r0, r3, #0
10003f00:	f7ff fbb6 	bl	10003670 <I2C_MASTER_IsTXFIFOFull>
10003f04:	1c03      	adds	r3, r0, #0
10003f06:	1c1a      	adds	r2, r3, #0
10003f08:	2301      	movs	r3, #1
10003f0a:	4053      	eors	r3, r2
10003f0c:	b2db      	uxtb	r3, r3
10003f0e:	2b00      	cmp	r3, #0
10003f10:	d1c0      	bne.n	10003e94 <I2C_MASTER_ReceiveHandler+0x104>
10003f12:	e019      	b.n	10003f48 <I2C_MASTER_ReceiveHandler+0x1b8>
10003f14:	e018      	b.n	10003f48 <I2C_MASTER_ReceiveHandler+0x1b8>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003f16:	68bb      	ldr	r3, [r7, #8]
10003f18:	68db      	ldr	r3, [r3, #12]
10003f1a:	1c5a      	adds	r2, r3, #1
10003f1c:	68bb      	ldr	r3, [r7, #8]
10003f1e:	689b      	ldr	r3, [r3, #8]
10003f20:	429a      	cmp	r2, r3
10003f22:	d108      	bne.n	10003f36 <I2C_MASTER_ReceiveHandler+0x1a6>
10003f24:	68bb      	ldr	r3, [r7, #8]
10003f26:	6a1b      	ldr	r3, [r3, #32]
10003f28:	2b01      	cmp	r3, #1
10003f2a:	d104      	bne.n	10003f36 <I2C_MASTER_ReceiveHandler+0x1a6>
         {
           I2C_MASTER_ReceiveNACK(handle);
10003f2c:	687b      	ldr	r3, [r7, #4]
10003f2e:	1c18      	adds	r0, r3, #0
10003f30:	f7ff fc06 	bl	10003740 <I2C_MASTER_ReceiveNACK>
10003f34:	e003      	b.n	10003f3e <I2C_MASTER_ReceiveHandler+0x1ae>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
10003f36:	687b      	ldr	r3, [r7, #4]
10003f38:	1c18      	adds	r0, r3, #0
10003f3a:	f7ff fbf5 	bl	10003728 <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
10003f3e:	68bb      	ldr	r3, [r7, #8]
10003f40:	68db      	ldr	r3, [r3, #12]
10003f42:	1c5a      	adds	r2, r3, #1
10003f44:	68bb      	ldr	r3, [r7, #8]
10003f46:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10003f48:	68bb      	ldr	r3, [r7, #8]
10003f4a:	695a      	ldr	r2, [r3, #20]
10003f4c:	68bb      	ldr	r3, [r7, #8]
10003f4e:	691b      	ldr	r3, [r3, #16]
10003f50:	429a      	cmp	r2, r3
10003f52:	d162      	bne.n	1000401a <I2C_MASTER_ReceiveHandler+0x28a>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
10003f54:	687b      	ldr	r3, [r7, #4]
10003f56:	681a      	ldr	r2, [r3, #0]
10003f58:	23c0      	movs	r3, #192	; 0xc0
10003f5a:	05db      	lsls	r3, r3, #23
10003f5c:	1c10      	adds	r0, r2, #0
10003f5e:	1c19      	adds	r1, r3, #0
10003f60:	f7ff fb22 	bl	100035a8 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
10003f64:	687b      	ldr	r3, [r7, #4]
10003f66:	681a      	ldr	r2, [r3, #0]
10003f68:	23c0      	movs	r3, #192	; 0xc0
10003f6a:	021b      	lsls	r3, r3, #8
10003f6c:	1c10      	adds	r0, r2, #0
10003f6e:	1c19      	adds	r1, r3, #0
10003f70:	f7ff faa2 	bl	100034b8 <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
10003f74:	68bb      	ldr	r3, [r7, #8]
10003f76:	2228      	movs	r2, #40	; 0x28
10003f78:	5c9b      	ldrb	r3, [r3, r2]
10003f7a:	b2db      	uxtb	r3, r3
10003f7c:	2b00      	cmp	r3, #0
10003f7e:	d04c      	beq.n	1000401a <I2C_MASTER_ReceiveHandler+0x28a>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
10003f80:	687b      	ldr	r3, [r7, #4]
10003f82:	1c18      	adds	r0, r3, #0
10003f84:	f000 f84c 	bl	10004020 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
10003f88:	e047      	b.n	1000401a <I2C_MASTER_ReceiveHandler+0x28a>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
10003f8a:	68bb      	ldr	r3, [r7, #8]
10003f8c:	685a      	ldr	r2, [r3, #4]
10003f8e:	68bb      	ldr	r3, [r7, #8]
10003f90:	695b      	ldr	r3, [r3, #20]
10003f92:	18d4      	adds	r4, r2, r3
10003f94:	687b      	ldr	r3, [r7, #4]
10003f96:	1c18      	adds	r0, r3, #0
10003f98:	f7ff fb86 	bl	100036a8 <I2C_MASTER_GetReceivedByte>
10003f9c:	1c03      	adds	r3, r0, #0
10003f9e:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
10003fa0:	68bb      	ldr	r3, [r7, #8]
10003fa2:	695b      	ldr	r3, [r3, #20]
10003fa4:	1c5a      	adds	r2, r3, #1
10003fa6:	68bb      	ldr	r3, [r7, #8]
10003fa8:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10003faa:	68bb      	ldr	r3, [r7, #8]
10003fac:	695a      	ldr	r2, [r3, #20]
10003fae:	68bb      	ldr	r3, [r7, #8]
10003fb0:	691b      	ldr	r3, [r3, #16]
10003fb2:	429a      	cmp	r2, r3
10003fb4:	d21f      	bcs.n	10003ff6 <I2C_MASTER_ReceiveHandler+0x266>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003fb6:	68bb      	ldr	r3, [r7, #8]
10003fb8:	68da      	ldr	r2, [r3, #12]
10003fba:	68bb      	ldr	r3, [r7, #8]
10003fbc:	689b      	ldr	r3, [r3, #8]
10003fbe:	429a      	cmp	r2, r3
10003fc0:	d22b      	bcs.n	1000401a <I2C_MASTER_ReceiveHandler+0x28a>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
10003fc2:	68bb      	ldr	r3, [r7, #8]
10003fc4:	68da      	ldr	r2, [r3, #12]
10003fc6:	68bb      	ldr	r3, [r7, #8]
10003fc8:	689b      	ldr	r3, [r3, #8]
10003fca:	3b01      	subs	r3, #1
10003fcc:	429a      	cmp	r2, r3
10003fce:	d108      	bne.n	10003fe2 <I2C_MASTER_ReceiveHandler+0x252>
10003fd0:	68bb      	ldr	r3, [r7, #8]
10003fd2:	6a1b      	ldr	r3, [r3, #32]
10003fd4:	2b01      	cmp	r3, #1
10003fd6:	d104      	bne.n	10003fe2 <I2C_MASTER_ReceiveHandler+0x252>
          {
            I2C_MASTER_ReceiveNACK(handle);
10003fd8:	687b      	ldr	r3, [r7, #4]
10003fda:	1c18      	adds	r0, r3, #0
10003fdc:	f7ff fbb0 	bl	10003740 <I2C_MASTER_ReceiveNACK>
10003fe0:	e003      	b.n	10003fea <I2C_MASTER_ReceiveHandler+0x25a>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
10003fe2:	687b      	ldr	r3, [r7, #4]
10003fe4:	1c18      	adds	r0, r3, #0
10003fe6:	f7ff fb9f 	bl	10003728 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
10003fea:	68bb      	ldr	r3, [r7, #8]
10003fec:	68db      	ldr	r3, [r3, #12]
10003fee:	1c5a      	adds	r2, r3, #1
10003ff0:	68bb      	ldr	r3, [r7, #8]
10003ff2:	60da      	str	r2, [r3, #12]
10003ff4:	e011      	b.n	1000401a <I2C_MASTER_ReceiveHandler+0x28a>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
10003ff6:	687b      	ldr	r3, [r7, #4]
10003ff8:	681a      	ldr	r2, [r3, #0]
10003ffa:	23c0      	movs	r3, #192	; 0xc0
10003ffc:	021b      	lsls	r3, r3, #8
10003ffe:	1c10      	adds	r0, r2, #0
10004000:	1c19      	adds	r1, r3, #0
10004002:	f7ff fa59 	bl	100034b8 <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
10004006:	68bb      	ldr	r3, [r7, #8]
10004008:	2228      	movs	r2, #40	; 0x28
1000400a:	5c9b      	ldrb	r3, [r3, r2]
1000400c:	b2db      	uxtb	r3, r3
1000400e:	2b00      	cmp	r3, #0
10004010:	d003      	beq.n	1000401a <I2C_MASTER_ReceiveHandler+0x28a>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
10004012:	687b      	ldr	r3, [r7, #4]
10004014:	1c18      	adds	r0, r3, #0
10004016:	f000 f803 	bl	10004020 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
1000401a:	46bd      	mov	sp, r7
1000401c:	b005      	add	sp, #20
1000401e:	bd90      	pop	{r4, r7, pc}

10004020 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
10004020:	b580      	push	{r7, lr}
10004022:	b084      	sub	sp, #16
10004024:	af00      	add	r7, sp, #0
10004026:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
10004028:	687b      	ldr	r3, [r7, #4]
1000402a:	689b      	ldr	r3, [r3, #8]
1000402c:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
1000402e:	68fb      	ldr	r3, [r7, #12]
10004030:	69db      	ldr	r3, [r3, #28]
10004032:	2b01      	cmp	r3, #1
10004034:	d110      	bne.n	10004058 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10004036:	46c0      	nop			; (mov r8, r8)
10004038:	687b      	ldr	r3, [r7, #4]
1000403a:	681b      	ldr	r3, [r3, #0]
1000403c:	1c18      	adds	r0, r3, #0
1000403e:	f7ff fa4b 	bl	100034d8 <XMC_USIC_CH_GetTransmitBufferStatus>
10004042:	1e03      	subs	r3, r0, #0
10004044:	2b80      	cmp	r3, #128	; 0x80
10004046:	d0f7      	beq.n	10004038 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
10004048:	68fb      	ldr	r3, [r7, #12]
1000404a:	2228      	movs	r2, #40	; 0x28
1000404c:	2100      	movs	r1, #0
1000404e:	5499      	strb	r1, [r3, r2]

    I2C_MASTER_SendStop(handle);
10004050:	687b      	ldr	r3, [r7, #4]
10004052:	1c18      	adds	r0, r3, #0
10004054:	f7ff fb80 	bl	10003758 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10004058:	46c0      	nop			; (mov r8, r8)
1000405a:	687b      	ldr	r3, [r7, #4]
1000405c:	681b      	ldr	r3, [r3, #0]
1000405e:	1c18      	adds	r0, r3, #0
10004060:	f7ff fa3a 	bl	100034d8 <XMC_USIC_CH_GetTransmitBufferStatus>
10004064:	1e03      	subs	r3, r0, #0
10004066:	2b80      	cmp	r3, #128	; 0x80
10004068:	d0f7      	beq.n	1000405a <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x3a>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
1000406a:	68fb      	ldr	r3, [r7, #12]
1000406c:	2227      	movs	r2, #39	; 0x27
1000406e:	2100      	movs	r1, #0
10004070:	5499      	strb	r1, [r3, r2]
  ptr_runtime->tx_busy = false;
10004072:	68fb      	ldr	r3, [r7, #12]
10004074:	2226      	movs	r2, #38	; 0x26
10004076:	2100      	movs	r1, #0
10004078:	5499      	strb	r1, [r3, r2]

  if (handle->config->rx_cbhandler != NULL)
1000407a:	687b      	ldr	r3, [r7, #4]
1000407c:	685b      	ldr	r3, [r3, #4]
1000407e:	695b      	ldr	r3, [r3, #20]
10004080:	2b00      	cmp	r3, #0
10004082:	d003      	beq.n	1000408c <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6c>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
10004084:	687b      	ldr	r3, [r7, #4]
10004086:	685b      	ldr	r3, [r3, #4]
10004088:	695b      	ldr	r3, [r3, #20]
1000408a:	4798      	blx	r3
  }
}
1000408c:	46bd      	mov	sp, r7
1000408e:	b004      	add	sp, #16
10004090:	bd80      	pop	{r7, pc}
10004092:	46c0      	nop			; (mov r8, r8)

10004094 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
10004094:	b580      	push	{r7, lr}
10004096:	b084      	sub	sp, #16
10004098:	af00      	add	r7, sp, #0
1000409a:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
1000409c:	687b      	ldr	r3, [r7, #4]
1000409e:	681b      	ldr	r3, [r3, #0]
100040a0:	1c18      	adds	r0, r3, #0
100040a2:	f7ff fab9 	bl	10003618 <XMC_I2C_CH_GetStatusFlag>
100040a6:	1c03      	adds	r3, r0, #0
100040a8:	60fb      	str	r3, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
100040aa:	687b      	ldr	r3, [r7, #4]
100040ac:	685b      	ldr	r3, [r3, #4]
100040ae:	699b      	ldr	r3, [r3, #24]
100040b0:	2b00      	cmp	r3, #0
100040b2:	d00c      	beq.n	100040ce <I2C_MASTER_ProtocolHandler+0x3a>
100040b4:	68fb      	ldr	r3, [r7, #12]
100040b6:	2220      	movs	r2, #32
100040b8:	4013      	ands	r3, r2
100040ba:	d008      	beq.n	100040ce <I2C_MASTER_ProtocolHandler+0x3a>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
100040bc:	687b      	ldr	r3, [r7, #4]
100040be:	1c18      	adds	r0, r3, #0
100040c0:	2120      	movs	r1, #32
100040c2:	f7ff fbd7 	bl	10003874 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
100040c6:	687b      	ldr	r3, [r7, #4]
100040c8:	685b      	ldr	r3, [r3, #4]
100040ca:	699b      	ldr	r3, [r3, #24]
100040cc:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
100040ce:	687b      	ldr	r3, [r7, #4]
100040d0:	685b      	ldr	r3, [r3, #4]
100040d2:	69db      	ldr	r3, [r3, #28]
100040d4:	2b00      	cmp	r3, #0
100040d6:	d00c      	beq.n	100040f2 <I2C_MASTER_ProtocolHandler+0x5e>
100040d8:	68fb      	ldr	r3, [r7, #12]
100040da:	2240      	movs	r2, #64	; 0x40
100040dc:	4013      	ands	r3, r2
100040de:	d008      	beq.n	100040f2 <I2C_MASTER_ProtocolHandler+0x5e>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
100040e0:	687b      	ldr	r3, [r7, #4]
100040e2:	1c18      	adds	r0, r3, #0
100040e4:	2140      	movs	r1, #64	; 0x40
100040e6:	f7ff fbc5 	bl	10003874 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
100040ea:	687b      	ldr	r3, [r7, #4]
100040ec:	685b      	ldr	r3, [r3, #4]
100040ee:	69db      	ldr	r3, [r3, #28]
100040f0:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
100040f2:	687b      	ldr	r3, [r7, #4]
100040f4:	685b      	ldr	r3, [r3, #4]
100040f6:	6a1b      	ldr	r3, [r3, #32]
100040f8:	2b00      	cmp	r3, #0
100040fa:	d00f      	beq.n	1000411c <I2C_MASTER_ProtocolHandler+0x88>
100040fc:	68fa      	ldr	r2, [r7, #12]
100040fe:	2381      	movs	r3, #129	; 0x81
10004100:	005b      	lsls	r3, r3, #1
10004102:	4013      	ands	r3, r2
10004104:	d00a      	beq.n	1000411c <I2C_MASTER_ProtocolHandler+0x88>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
10004106:	687a      	ldr	r2, [r7, #4]
10004108:	2380      	movs	r3, #128	; 0x80
1000410a:	005b      	lsls	r3, r3, #1
1000410c:	1c10      	adds	r0, r2, #0
1000410e:	1c19      	adds	r1, r3, #0
10004110:	f7ff fbb0 	bl	10003874 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
10004114:	687b      	ldr	r3, [r7, #4]
10004116:	685b      	ldr	r3, [r3, #4]
10004118:	6a1b      	ldr	r3, [r3, #32]
1000411a:	4798      	blx	r3
  }
}
1000411c:	46bd      	mov	sp, r7
1000411e:	b004      	add	sp, #16
10004120:	bd80      	pop	{r7, pc}
10004122:	46c0      	nop			; (mov r8, r8)

10004124 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
10004124:	b580      	push	{r7, lr}
10004126:	b086      	sub	sp, #24
10004128:	af00      	add	r7, sp, #0
1000412a:	6078      	str	r0, [r7, #4]
1000412c:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1000412e:	687b      	ldr	r3, [r7, #4]
10004130:	685b      	ldr	r3, [r3, #4]
10004132:	2227      	movs	r2, #39	; 0x27
10004134:	5c9b      	ldrb	r3, [r3, r2]
10004136:	1c1a      	adds	r2, r3, #0
10004138:	2301      	movs	r3, #1
1000413a:	4093      	lsls	r3, r2
1000413c:	1c1a      	adds	r2, r3, #0
1000413e:	2316      	movs	r3, #22
10004140:	18fb      	adds	r3, r7, r3
10004142:	701a      	strb	r2, [r3, #0]

  if ((handle->config->txFIFO_size > 0))
10004144:	687b      	ldr	r3, [r7, #4]
10004146:	685b      	ldr	r3, [r3, #4]
10004148:	2226      	movs	r2, #38	; 0x26
1000414a:	5c9b      	ldrb	r3, [r3, r2]
1000414c:	2b00      	cmp	r3, #0
1000414e:	d00b      	beq.n	10004168 <I2C_MASTER_lReconfigureRxFIFO+0x44>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
10004150:	687b      	ldr	r3, [r7, #4]
10004152:	685b      	ldr	r3, [r3, #4]
10004154:	2226      	movs	r2, #38	; 0x26
10004156:	5c9b      	ldrb	r3, [r3, r2]
10004158:	1c1a      	adds	r2, r3, #0
1000415a:	2301      	movs	r3, #1
1000415c:	4093      	lsls	r3, r2
1000415e:	1c1a      	adds	r2, r3, #0
10004160:	2317      	movs	r3, #23
10004162:	18fb      	adds	r3, r7, r3
10004164:	701a      	strb	r2, [r3, #0]
10004166:	e003      	b.n	10004170 <I2C_MASTER_lReconfigureRxFIFO+0x4c>
  }
  else
  {
    tx_fifo_size = 1U;
10004168:	2317      	movs	r3, #23
1000416a:	18fb      	adds	r3, r7, r3
1000416c:	2201      	movs	r2, #1
1000416e:	701a      	strb	r2, [r3, #0]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
10004170:	2317      	movs	r3, #23
10004172:	18fb      	adds	r3, r7, r3
10004174:	781a      	ldrb	r2, [r3, #0]
10004176:	2316      	movs	r3, #22
10004178:	18fb      	adds	r3, r7, r3
1000417a:	781b      	ldrb	r3, [r3, #0]
1000417c:	1c10      	adds	r0, r2, #0
1000417e:	1c19      	adds	r1, r3, #0
10004180:	f7ff fb34 	bl	100037ec <calculate_minfifosize>
10004184:	1c03      	adds	r3, r0, #0
10004186:	613b      	str	r3, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
10004188:	683a      	ldr	r2, [r7, #0]
1000418a:	693b      	ldr	r3, [r7, #16]
1000418c:	1c10      	adds	r0, r2, #0
1000418e:	1c19      	adds	r1, r3, #0
10004190:	f7ff fb2c 	bl	100037ec <calculate_minfifosize>
10004194:	1c02      	adds	r2, r0, #0
10004196:	230f      	movs	r3, #15
10004198:	18fb      	adds	r3, r7, r3
1000419a:	701a      	strb	r2, [r3, #0]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
1000419c:	687b      	ldr	r3, [r7, #4]
1000419e:	685b      	ldr	r3, [r3, #4]
100041a0:	2227      	movs	r2, #39	; 0x27
100041a2:	5c9b      	ldrb	r3, [r3, r2]
100041a4:	1c19      	adds	r1, r3, #0
100041a6:	230f      	movs	r3, #15
100041a8:	18fb      	adds	r3, r7, r3
100041aa:	781b      	ldrb	r3, [r3, #0]
100041ac:	3b01      	subs	r3, #1
100041ae:	687a      	ldr	r2, [r7, #4]
100041b0:	1c10      	adds	r0, r2, #0
100041b2:	1c1a      	adds	r2, r3, #0
100041b4:	f7ff fa48 	bl	10003648 <I2C_MASTER_SetRXFIFOTriggerLimit>
}
100041b8:	46bd      	mov	sp, r7
100041ba:	b006      	add	sp, #24
100041bc:	bd80      	pop	{r7, pc}
100041be:	46c0      	nop			; (mov r8, r8)

100041c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100041c0:	b580      	push	{r7, lr}
100041c2:	b082      	sub	sp, #8
100041c4:	af00      	add	r7, sp, #0
100041c6:	1c02      	adds	r2, r0, #0
100041c8:	1dfb      	adds	r3, r7, #7
100041ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100041cc:	1dfb      	adds	r3, r7, #7
100041ce:	781b      	ldrb	r3, [r3, #0]
100041d0:	2b7f      	cmp	r3, #127	; 0x7f
100041d2:	d809      	bhi.n	100041e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100041d4:	4b06      	ldr	r3, [pc, #24]	; (100041f0 <__NVIC_EnableIRQ+0x30>)
100041d6:	1dfa      	adds	r2, r7, #7
100041d8:	7812      	ldrb	r2, [r2, #0]
100041da:	1c11      	adds	r1, r2, #0
100041dc:	221f      	movs	r2, #31
100041de:	400a      	ands	r2, r1
100041e0:	2101      	movs	r1, #1
100041e2:	4091      	lsls	r1, r2
100041e4:	1c0a      	adds	r2, r1, #0
100041e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100041e8:	46bd      	mov	sp, r7
100041ea:	b002      	add	sp, #8
100041ec:	bd80      	pop	{r7, pc}
100041ee:	46c0      	nop			; (mov r8, r8)
100041f0:	e000e100 	.word	0xe000e100

100041f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100041f4:	b5b0      	push	{r4, r5, r7, lr}
100041f6:	b082      	sub	sp, #8
100041f8:	af00      	add	r7, sp, #0
100041fa:	1c02      	adds	r2, r0, #0
100041fc:	6039      	str	r1, [r7, #0]
100041fe:	1dfb      	adds	r3, r7, #7
10004200:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004202:	1dfb      	adds	r3, r7, #7
10004204:	781b      	ldrb	r3, [r3, #0]
10004206:	2b7f      	cmp	r3, #127	; 0x7f
10004208:	d827      	bhi.n	1000425a <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000420a:	4c2d      	ldr	r4, [pc, #180]	; (100042c0 <__NVIC_SetPriority+0xcc>)
1000420c:	1dfb      	adds	r3, r7, #7
1000420e:	781b      	ldrb	r3, [r3, #0]
10004210:	b25b      	sxtb	r3, r3
10004212:	089b      	lsrs	r3, r3, #2
10004214:	492a      	ldr	r1, [pc, #168]	; (100042c0 <__NVIC_SetPriority+0xcc>)
10004216:	1dfa      	adds	r2, r7, #7
10004218:	7812      	ldrb	r2, [r2, #0]
1000421a:	b252      	sxtb	r2, r2
1000421c:	0892      	lsrs	r2, r2, #2
1000421e:	32c0      	adds	r2, #192	; 0xc0
10004220:	0092      	lsls	r2, r2, #2
10004222:	5852      	ldr	r2, [r2, r1]
10004224:	1df9      	adds	r1, r7, #7
10004226:	7809      	ldrb	r1, [r1, #0]
10004228:	1c08      	adds	r0, r1, #0
1000422a:	2103      	movs	r1, #3
1000422c:	4001      	ands	r1, r0
1000422e:	00c9      	lsls	r1, r1, #3
10004230:	1c08      	adds	r0, r1, #0
10004232:	21ff      	movs	r1, #255	; 0xff
10004234:	4081      	lsls	r1, r0
10004236:	43c9      	mvns	r1, r1
10004238:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000423a:	683a      	ldr	r2, [r7, #0]
1000423c:	0192      	lsls	r2, r2, #6
1000423e:	20ff      	movs	r0, #255	; 0xff
10004240:	4002      	ands	r2, r0
10004242:	1df8      	adds	r0, r7, #7
10004244:	7800      	ldrb	r0, [r0, #0]
10004246:	1c05      	adds	r5, r0, #0
10004248:	2003      	movs	r0, #3
1000424a:	4028      	ands	r0, r5
1000424c:	00c0      	lsls	r0, r0, #3
1000424e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004250:	430a      	orrs	r2, r1
10004252:	33c0      	adds	r3, #192	; 0xc0
10004254:	009b      	lsls	r3, r3, #2
10004256:	511a      	str	r2, [r3, r4]
10004258:	e02e      	b.n	100042b8 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000425a:	4c1a      	ldr	r4, [pc, #104]	; (100042c4 <__NVIC_SetPriority+0xd0>)
1000425c:	1dfb      	adds	r3, r7, #7
1000425e:	781b      	ldrb	r3, [r3, #0]
10004260:	1c1a      	adds	r2, r3, #0
10004262:	230f      	movs	r3, #15
10004264:	4013      	ands	r3, r2
10004266:	3b08      	subs	r3, #8
10004268:	0899      	lsrs	r1, r3, #2
1000426a:	4a16      	ldr	r2, [pc, #88]	; (100042c4 <__NVIC_SetPriority+0xd0>)
1000426c:	1dfb      	adds	r3, r7, #7
1000426e:	781b      	ldrb	r3, [r3, #0]
10004270:	1c18      	adds	r0, r3, #0
10004272:	230f      	movs	r3, #15
10004274:	4003      	ands	r3, r0
10004276:	3b08      	subs	r3, #8
10004278:	089b      	lsrs	r3, r3, #2
1000427a:	3306      	adds	r3, #6
1000427c:	009b      	lsls	r3, r3, #2
1000427e:	18d3      	adds	r3, r2, r3
10004280:	685b      	ldr	r3, [r3, #4]
10004282:	1dfa      	adds	r2, r7, #7
10004284:	7812      	ldrb	r2, [r2, #0]
10004286:	1c10      	adds	r0, r2, #0
10004288:	2203      	movs	r2, #3
1000428a:	4002      	ands	r2, r0
1000428c:	00d2      	lsls	r2, r2, #3
1000428e:	1c10      	adds	r0, r2, #0
10004290:	22ff      	movs	r2, #255	; 0xff
10004292:	4082      	lsls	r2, r0
10004294:	43d2      	mvns	r2, r2
10004296:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004298:	683b      	ldr	r3, [r7, #0]
1000429a:	019b      	lsls	r3, r3, #6
1000429c:	20ff      	movs	r0, #255	; 0xff
1000429e:	4003      	ands	r3, r0
100042a0:	1df8      	adds	r0, r7, #7
100042a2:	7800      	ldrb	r0, [r0, #0]
100042a4:	1c05      	adds	r5, r0, #0
100042a6:	2003      	movs	r0, #3
100042a8:	4028      	ands	r0, r5
100042aa:	00c0      	lsls	r0, r0, #3
100042ac:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100042ae:	431a      	orrs	r2, r3
100042b0:	1d8b      	adds	r3, r1, #6
100042b2:	009b      	lsls	r3, r3, #2
100042b4:	18e3      	adds	r3, r4, r3
100042b6:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100042b8:	46bd      	mov	sp, r7
100042ba:	b002      	add	sp, #8
100042bc:	bdb0      	pop	{r4, r5, r7, pc}
100042be:	46c0      	nop			; (mov r8, r8)
100042c0:	e000e100 	.word	0xe000e100
100042c4:	e000ed00 	.word	0xe000ed00

100042c8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
100042c8:	b580      	push	{r7, lr}
100042ca:	b082      	sub	sp, #8
100042cc:	af00      	add	r7, sp, #0
100042ce:	6078      	str	r0, [r7, #4]
100042d0:	1c08      	adds	r0, r1, #0
100042d2:	1c11      	adds	r1, r2, #0
100042d4:	1cfb      	adds	r3, r7, #3
100042d6:	1c02      	adds	r2, r0, #0
100042d8:	701a      	strb	r2, [r3, #0]
100042da:	1cbb      	adds	r3, r7, #2
100042dc:	1c0a      	adds	r2, r1, #0
100042de:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100042e0:	1cfb      	adds	r3, r7, #3
100042e2:	7818      	ldrb	r0, [r3, #0]
100042e4:	1cfb      	adds	r3, r7, #3
100042e6:	781b      	ldrb	r3, [r3, #0]
100042e8:	687a      	ldr	r2, [r7, #4]
100042ea:	3306      	adds	r3, #6
100042ec:	009b      	lsls	r3, r3, #2
100042ee:	18d3      	adds	r3, r2, r3
100042f0:	685b      	ldr	r3, [r3, #4]
100042f2:	2207      	movs	r2, #7
100042f4:	4393      	bics	r3, r2
100042f6:	1c1a      	adds	r2, r3, #0
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
100042f8:	1cbb      	adds	r3, r7, #2
100042fa:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100042fc:	431a      	orrs	r2, r3
100042fe:	6879      	ldr	r1, [r7, #4]
10004300:	1d83      	adds	r3, r0, #6
10004302:	009b      	lsls	r3, r3, #2
10004304:	18cb      	adds	r3, r1, r3
10004306:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10004308:	46bd      	mov	sp, r7
1000430a:	b002      	add	sp, #8
1000430c:	bd80      	pop	{r7, pc}
1000430e:	46c0      	nop			; (mov r8, r8)

10004310 <XMC_USIC_CH_EnableInputDigitalFilter>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
10004310:	b580      	push	{r7, lr}
10004312:	b082      	sub	sp, #8
10004314:	af00      	add	r7, sp, #0
10004316:	6078      	str	r0, [r7, #4]
10004318:	1c0a      	adds	r2, r1, #0
1000431a:	1cfb      	adds	r3, r7, #3
1000431c:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
1000431e:	1cfb      	adds	r3, r7, #3
10004320:	7818      	ldrb	r0, [r3, #0]
10004322:	1cfb      	adds	r3, r7, #3
10004324:	781b      	ldrb	r3, [r3, #0]
10004326:	687a      	ldr	r2, [r7, #4]
10004328:	3306      	adds	r3, #6
1000432a:	009b      	lsls	r3, r3, #2
1000432c:	18d3      	adds	r3, r2, r3
1000432e:	685b      	ldr	r3, [r3, #4]
10004330:	2220      	movs	r2, #32
10004332:	431a      	orrs	r2, r3
10004334:	6879      	ldr	r1, [r7, #4]
10004336:	1d83      	adds	r3, r0, #6
10004338:	009b      	lsls	r3, r3, #2
1000433a:	18cb      	adds	r3, r1, r3
1000433c:	605a      	str	r2, [r3, #4]
}
1000433e:	46bd      	mov	sp, r7
10004340:	b002      	add	sp, #8
10004342:	bd80      	pop	{r7, pc}

10004344 <XMC_USIC_CH_EnableInputSync>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
10004344:	b580      	push	{r7, lr}
10004346:	b082      	sub	sp, #8
10004348:	af00      	add	r7, sp, #0
1000434a:	6078      	str	r0, [r7, #4]
1000434c:	1c0a      	adds	r2, r1, #0
1000434e:	1cfb      	adds	r3, r7, #3
10004350:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
10004352:	1cfb      	adds	r3, r7, #3
10004354:	7818      	ldrb	r0, [r3, #0]
10004356:	1cfb      	adds	r3, r7, #3
10004358:	781b      	ldrb	r3, [r3, #0]
1000435a:	687a      	ldr	r2, [r7, #4]
1000435c:	3306      	adds	r3, #6
1000435e:	009b      	lsls	r3, r3, #2
10004360:	18d3      	adds	r3, r2, r3
10004362:	685b      	ldr	r3, [r3, #4]
10004364:	2240      	movs	r2, #64	; 0x40
10004366:	431a      	orrs	r2, r3
10004368:	6879      	ldr	r1, [r7, #4]
1000436a:	1d83      	adds	r3, r0, #6
1000436c:	009b      	lsls	r3, r3, #2
1000436e:	18cb      	adds	r3, r1, r3
10004370:	605a      	str	r2, [r3, #4]
}
10004372:	46bd      	mov	sp, r7
10004374:	b002      	add	sp, #8
10004376:	bd80      	pop	{r7, pc}

10004378 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10004378:	b580      	push	{r7, lr}
1000437a:	b082      	sub	sp, #8
1000437c:	af00      	add	r7, sp, #0
1000437e:	6078      	str	r0, [r7, #4]
10004380:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
10004382:	687a      	ldr	r2, [r7, #4]
10004384:	2384      	movs	r3, #132	; 0x84
10004386:	005b      	lsls	r3, r3, #1
10004388:	58d2      	ldr	r2, [r2, r3]
1000438a:	683b      	ldr	r3, [r7, #0]
1000438c:	431a      	orrs	r2, r3
1000438e:	1c11      	adds	r1, r2, #0
10004390:	687a      	ldr	r2, [r7, #4]
10004392:	2384      	movs	r3, #132	; 0x84
10004394:	005b      	lsls	r3, r3, #1
10004396:	50d1      	str	r1, [r2, r3]
}
10004398:	46bd      	mov	sp, r7
1000439a:	b002      	add	sp, #8
1000439c:	bd80      	pop	{r7, pc}
1000439e:	46c0      	nop			; (mov r8, r8)

100043a0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100043a0:	b580      	push	{r7, lr}
100043a2:	b082      	sub	sp, #8
100043a4:	af00      	add	r7, sp, #0
100043a6:	6078      	str	r0, [r7, #4]
100043a8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
100043aa:	687a      	ldr	r2, [r7, #4]
100043ac:	2386      	movs	r3, #134	; 0x86
100043ae:	005b      	lsls	r3, r3, #1
100043b0:	58d2      	ldr	r2, [r2, r3]
100043b2:	683b      	ldr	r3, [r7, #0]
100043b4:	431a      	orrs	r2, r3
100043b6:	1c11      	adds	r1, r2, #0
100043b8:	687a      	ldr	r2, [r7, #4]
100043ba:	2386      	movs	r3, #134	; 0x86
100043bc:	005b      	lsls	r3, r3, #1
100043be:	50d1      	str	r1, [r2, r3]
}
100043c0:	46bd      	mov	sp, r7
100043c2:	b002      	add	sp, #8
100043c4:	bd80      	pop	{r7, pc}
100043c6:	46c0      	nop			; (mov r8, r8)

100043c8 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
100043c8:	b580      	push	{r7, lr}
100043ca:	b082      	sub	sp, #8
100043cc:	af00      	add	r7, sp, #0
100043ce:	6078      	str	r0, [r7, #4]
100043d0:	1c0a      	adds	r2, r1, #0
100043d2:	1cfb      	adds	r3, r7, #3
100043d4:	701a      	strb	r2, [r3, #0]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
100043d6:	687b      	ldr	r3, [r7, #4]
100043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100043da:	220f      	movs	r2, #15
100043dc:	4393      	bics	r3, r2
100043de:	1c1a      	adds	r2, r3, #0
100043e0:	1cfb      	adds	r3, r7, #3
100043e2:	781b      	ldrb	r3, [r3, #0]
100043e4:	431a      	orrs	r2, r3
100043e6:	687b      	ldr	r3, [r7, #4]
100043e8:	641a      	str	r2, [r3, #64]	; 0x40
}
100043ea:	46bd      	mov	sp, r7
100043ec:	b002      	add	sp, #8
100043ee:	bd80      	pop	{r7, pc}

100043f0 <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
100043f0:	b580      	push	{r7, lr}
100043f2:	b082      	sub	sp, #8
100043f4:	af00      	add	r7, sp, #0
100043f6:	6078      	str	r0, [r7, #4]
100043f8:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
100043fa:	687a      	ldr	r2, [r7, #4]
100043fc:	683b      	ldr	r3, [r7, #0]
100043fe:	1c10      	adds	r0, r2, #0
10004400:	1c19      	adds	r1, r3, #0
10004402:	2201      	movs	r2, #1
10004404:	f7fd fa08 	bl	10001818 <XMC_I2C_CH_InitEx>
}
10004408:	46bd      	mov	sp, r7
1000440a:	b002      	add	sp, #8
1000440c:	bd80      	pop	{r7, pc}
1000440e:	46c0      	nop			; (mov r8, r8)

10004410 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
10004410:	b580      	push	{r7, lr}
10004412:	b082      	sub	sp, #8
10004414:	af00      	add	r7, sp, #0
10004416:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
10004418:	687b      	ldr	r3, [r7, #4]
1000441a:	1c18      	adds	r0, r3, #0
1000441c:	2104      	movs	r1, #4
1000441e:	f7ff ffd3 	bl	100043c8 <XMC_USIC_CH_SetMode>
}
10004422:	46bd      	mov	sp, r7
10004424:	b002      	add	sp, #8
10004426:	bd80      	pop	{r7, pc}

10004428 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
10004428:	b580      	push	{r7, lr}
1000442a:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)10, XMC_GPIO_MODE_INPUT_TRISTATE);
1000442c:	4b06      	ldr	r3, [pc, #24]	; (10004448 <I2C_MASTER_0_disable_io+0x20>)
1000442e:	1c18      	adds	r0, r3, #0
10004430:	210a      	movs	r1, #10
10004432:	2200      	movs	r2, #0
10004434:	f7fd f966 	bl	10001704 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)1, XMC_GPIO_MODE_INPUT_TRISTATE);
10004438:	4b03      	ldr	r3, [pc, #12]	; (10004448 <I2C_MASTER_0_disable_io+0x20>)
1000443a:	1c18      	adds	r0, r3, #0
1000443c:	2101      	movs	r1, #1
1000443e:	2200      	movs	r2, #0
10004440:	f7fd f960 	bl	10001704 <XMC_GPIO_SetMode>
}
10004444:	46bd      	mov	sp, r7
10004446:	bd80      	pop	{r7, pc}
10004448:	40040200 	.word	0x40040200

1000444c <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
1000444c:	b580      	push	{r7, lr}
1000444e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)10, I2C_MASTER_0_sda_pin_config.mode);
10004450:	23dc      	movs	r3, #220	; 0xdc
10004452:	4a07      	ldr	r2, [pc, #28]	; (10004470 <I2C_MASTER_0_enable_io+0x24>)
10004454:	1c10      	adds	r0, r2, #0
10004456:	210a      	movs	r1, #10
10004458:	1c1a      	adds	r2, r3, #0
1000445a:	f7fd f953 	bl	10001704 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)1, I2C_MASTER_0_scl_pin_config.mode);
1000445e:	23dc      	movs	r3, #220	; 0xdc
10004460:	4a03      	ldr	r2, [pc, #12]	; (10004470 <I2C_MASTER_0_enable_io+0x24>)
10004462:	1c10      	adds	r0, r2, #0
10004464:	2101      	movs	r1, #1
10004466:	1c1a      	adds	r2, r3, #0
10004468:	f7fd f94c 	bl	10001704 <XMC_GPIO_SetMode>
}
1000446c:	46bd      	mov	sp, r7
1000446e:	bd80      	pop	{r7, pc}
10004470:	40040200 	.word	0x40040200

10004474 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
10004474:	b580      	push	{r7, lr}
10004476:	b084      	sub	sp, #16
10004478:	af00      	add	r7, sp, #0
 
  const uint32_t enabled_protocol_events = (uint32_t)(XMC_I2C_CH_EVENT_NACK); 
1000447a:	2380      	movs	r3, #128	; 0x80
1000447c:	039b      	lsls	r3, r3, #14
1000447e:	60fb      	str	r3, [r7, #12]

  const uint32_t tx_fifo_events = (uint32_t)(0);
10004480:	2300      	movs	r3, #0
10004482:	60bb      	str	r3, [r7, #8]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
10004484:	23c0      	movs	r3, #192	; 0xc0
10004486:	05db      	lsls	r3, r3, #23
10004488:	607b      	str	r3, [r7, #4]
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
1000448a:	4a4f      	ldr	r2, [pc, #316]	; (100045c8 <I2C_MASTER_0_init+0x154>)
1000448c:	4b4f      	ldr	r3, [pc, #316]	; (100045cc <I2C_MASTER_0_init+0x158>)
1000448e:	1c10      	adds	r0, r2, #0
10004490:	1c19      	adds	r1, r3, #0
10004492:	f7ff ffad 	bl	100043f0 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 5);
10004496:	4b4c      	ldr	r3, [pc, #304]	; (100045c8 <I2C_MASTER_0_init+0x154>)
10004498:	1c18      	adds	r0, r3, #0
1000449a:	2100      	movs	r1, #0
1000449c:	2205      	movs	r2, #5
1000449e:	f7ff ff13 	bl	100042c8 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 6);
100044a2:	4b49      	ldr	r3, [pc, #292]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044a4:	1c18      	adds	r0, r3, #0
100044a6:	2101      	movs	r1, #1
100044a8:	2206      	movs	r2, #6
100044aa:	f7ff ff0d 	bl	100042c8 <XMC_USIC_CH_SetInputSource>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
100044ae:	4b46      	ldr	r3, [pc, #280]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044b0:	1c18      	adds	r0, r3, #0
100044b2:	2103      	movs	r1, #3
100044b4:	2200      	movs	r2, #0
100044b6:	f7ff ff07 	bl	100042c8 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX4, 0U);
100044ba:	4b43      	ldr	r3, [pc, #268]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044bc:	1c18      	adds	r0, r3, #0
100044be:	2104      	movs	r1, #4
100044c0:	2200      	movs	r2, #0
100044c2:	f7ff ff01 	bl	100042c8 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
100044c6:	4b40      	ldr	r3, [pc, #256]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044c8:	1c18      	adds	r0, r3, #0
100044ca:	2105      	movs	r1, #5
100044cc:	2200      	movs	r2, #0
100044ce:	f7ff fefb 	bl	100042c8 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0);
100044d2:	4b3d      	ldr	r3, [pc, #244]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044d4:	1c18      	adds	r0, r3, #0
100044d6:	2100      	movs	r1, #0
100044d8:	f7ff ff1a 	bl	10004310 <XMC_USIC_CH_EnableInputDigitalFilter>
  XMC_USIC_CH_EnableInputSync(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0);
100044dc:	4b3a      	ldr	r3, [pc, #232]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044de:	1c18      	adds	r0, r3, #0
100044e0:	2100      	movs	r1, #0
100044e2:	f7ff ff2f 	bl	10004344 <XMC_USIC_CH_EnableInputSync>
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1);
100044e6:	4b38      	ldr	r3, [pc, #224]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044e8:	1c18      	adds	r0, r3, #0
100044ea:	2101      	movs	r1, #1
100044ec:	f7ff ff10 	bl	10004310 <XMC_USIC_CH_EnableInputDigitalFilter>
  XMC_USIC_CH_EnableInputSync(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1);
100044f0:	4b35      	ldr	r3, [pc, #212]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044f2:	1c18      	adds	r0, r3, #0
100044f4:	2101      	movs	r1, #1
100044f6:	f7ff ff25 	bl	10004344 <XMC_USIC_CH_EnableInputSync>
    
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
100044fa:	4b33      	ldr	r3, [pc, #204]	; (100045c8 <I2C_MASTER_0_init+0x154>)
100044fc:	1c18      	adds	r0, r3, #0
100044fe:	2110      	movs	r1, #16
10004500:	2204      	movs	r2, #4
10004502:	2301      	movs	r3, #1
10004504:	f7fd fe24 	bl	10002150 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
10004508:	4b2f      	ldr	r3, [pc, #188]	; (100045c8 <I2C_MASTER_0_init+0x154>)
1000450a:	1c18      	adds	r0, r3, #0
1000450c:	2110      	movs	r1, #16
1000450e:	2205      	movs	r2, #5
10004510:	f7fd feba 	bl	10002288 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)5));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C0_CH1, tx_fifo_events);
10004514:	4a2c      	ldr	r2, [pc, #176]	; (100045c8 <I2C_MASTER_0_init+0x154>)
10004516:	68bb      	ldr	r3, [r7, #8]
10004518:	1c10      	adds	r0, r2, #0
1000451a:	1c19      	adds	r1, r3, #0
1000451c:	f7ff ff2c 	bl	10004378 <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
10004520:	4b29      	ldr	r3, [pc, #164]	; (100045c8 <I2C_MASTER_0_init+0x154>)
10004522:	1c18      	adds	r0, r3, #0
10004524:	2100      	movs	r1, #0
10004526:	2204      	movs	r2, #4
10004528:	230f      	movs	r3, #15
1000452a:	f7fd fe3f 	bl	100021ac <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
1000452e:	4b26      	ldr	r3, [pc, #152]	; (100045c8 <I2C_MASTER_0_init+0x154>)
10004530:	1c18      	adds	r0, r3, #0
10004532:	2110      	movs	r1, #16
10004534:	2203      	movs	r2, #3
10004536:	f7fd fecb 	bl	100022d0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x3));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
1000453a:	4b23      	ldr	r3, [pc, #140]	; (100045c8 <I2C_MASTER_0_init+0x154>)
1000453c:	1c18      	adds	r0, r3, #0
1000453e:	2113      	movs	r1, #19
10004540:	2203      	movs	r2, #3
10004542:	f7fd fec5 	bl	100022d0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x3));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C0_CH1, rx_fifo_events);
10004546:	4a20      	ldr	r2, [pc, #128]	; (100045c8 <I2C_MASTER_0_init+0x154>)
10004548:	687b      	ldr	r3, [r7, #4]
1000454a:	1c10      	adds	r0, r2, #0
1000454c:	1c19      	adds	r1, r3, #0
1000454e:	f7ff ff27 	bl	100043a0 <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH1,
10004552:	4b1d      	ldr	r3, [pc, #116]	; (100045c8 <I2C_MASTER_0_init+0x154>)
10004554:	1c18      	adds	r0, r3, #0
10004556:	2110      	movs	r1, #16
10004558:	2200      	movs	r2, #0
1000455a:	f7fd fe75 	bl	10002248 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)0));
  XMC_I2C_CH_EnableEvent(XMC_I2C0_CH1, enabled_protocol_events);
1000455e:	4a1a      	ldr	r2, [pc, #104]	; (100045c8 <I2C_MASTER_0_init+0x154>)
10004560:	68fb      	ldr	r3, [r7, #12]
10004562:	1c10      	adds	r0, r2, #0
10004564:	1c19      	adds	r1, r3, #0
10004566:	f7fd fb6f 	bl	10001c48 <XMC_I2C_CH_EnableEvent>
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
1000456a:	4b17      	ldr	r3, [pc, #92]	; (100045c8 <I2C_MASTER_0_init+0x154>)
1000456c:	1c18      	adds	r0, r3, #0
1000456e:	f7ff ff4f 	bl	10004410 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)10, &I2C_MASTER_0_sda_pin_config);
10004572:	4a17      	ldr	r2, [pc, #92]	; (100045d0 <I2C_MASTER_0_init+0x15c>)
10004574:	4b17      	ldr	r3, [pc, #92]	; (100045d4 <I2C_MASTER_0_init+0x160>)
10004576:	1c10      	adds	r0, r2, #0
10004578:	210a      	movs	r1, #10
1000457a:	1c1a      	adds	r2, r3, #0
1000457c:	f7fc fe04 	bl	10001188 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)1, &I2C_MASTER_0_scl_pin_config);
10004580:	4a13      	ldr	r2, [pc, #76]	; (100045d0 <I2C_MASTER_0_init+0x15c>)
10004582:	4b15      	ldr	r3, [pc, #84]	; (100045d8 <I2C_MASTER_0_init+0x164>)
10004584:	1c10      	adds	r0, r2, #0
10004586:	2101      	movs	r1, #1
10004588:	1c1a      	adds	r2, r3, #0
1000458a:	f7fc fdfd 	bl	10001188 <XMC_GPIO_Init>

  NVIC_SetPriority((IRQn_Type)14, 3);
1000458e:	200e      	movs	r0, #14
10004590:	2103      	movs	r1, #3
10004592:	f7ff fe2f 	bl	100041f4 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(14, XMC_SCU_IRQCTRL_USIC0_SR5_IRQ14);
10004596:	23e0      	movs	r3, #224	; 0xe0
10004598:	011b      	lsls	r3, r3, #4
1000459a:	200e      	movs	r0, #14
1000459c:	1c19      	adds	r1, r3, #0
1000459e:	f7fd f86b 	bl	10001678 <XMC_SCU_SetInterruptControl>
  NVIC_EnableIRQ((IRQn_Type)14);
100045a2:	200e      	movs	r0, #14
100045a4:	f7ff fe0c 	bl	100041c0 <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)12, 3);
100045a8:	200c      	movs	r0, #12
100045aa:	2103      	movs	r1, #3
100045ac:	f7ff fe22 	bl	100041f4 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(12, XMC_SCU_IRQCTRL_USIC0_SR3_IRQ12);
100045b0:	23c0      	movs	r3, #192	; 0xc0
100045b2:	011b      	lsls	r3, r3, #4
100045b4:	200c      	movs	r0, #12
100045b6:	1c19      	adds	r1, r3, #0
100045b8:	f7fd f85e 	bl	10001678 <XMC_SCU_SetInterruptControl>
  NVIC_EnableIRQ((IRQn_Type)12);}
100045bc:	200c      	movs	r0, #12
100045be:	f7ff fdff 	bl	100041c0 <__NVIC_EnableIRQ>
100045c2:	46bd      	mov	sp, r7
100045c4:	b004      	add	sp, #16
100045c6:	bd80      	pop	{r7, pc}
100045c8:	48000200 	.word	0x48000200
100045cc:	100053f0 	.word	0x100053f0
100045d0:	40040200 	.word	0x40040200
100045d4:	100053e0 	.word	0x100053e0
100045d8:	100053e8 	.word	0x100053e8

100045dc <IRQ14_Handler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
100045dc:	b580      	push	{r7, lr}
100045de:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
100045e0:	4b02      	ldr	r3, [pc, #8]	; (100045ec <IRQ14_Handler+0x10>)
100045e2:	1c18      	adds	r0, r3, #0
100045e4:	f7ff f984 	bl	100038f0 <I2C_MASTER_TransmitHandler>
}
100045e8:	46bd      	mov	sp, r7
100045ea:	bd80      	pop	{r7, pc}
100045ec:	20000614 	.word	0x20000614

100045f0 <IRQ12_Handler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
100045f0:	b580      	push	{r7, lr}
100045f2:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
100045f4:	4b02      	ldr	r3, [pc, #8]	; (10004600 <IRQ12_Handler+0x10>)
100045f6:	1c18      	adds	r0, r3, #0
100045f8:	f7ff fbca 	bl	10003d90 <I2C_MASTER_ReceiveHandler>
}
100045fc:	46bd      	mov	sp, r7
100045fe:	bd80      	pop	{r7, pc}
10004600:	20000614 	.word	0x20000614

10004604 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10004604:	b580      	push	{r7, lr}
10004606:	b082      	sub	sp, #8
10004608:	af00      	add	r7, sp, #0
1000460a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
1000460c:	687b      	ldr	r3, [r7, #4]
1000460e:	6819      	ldr	r1, [r3, #0]
10004610:	687b      	ldr	r3, [r7, #4]
10004612:	7b1a      	ldrb	r2, [r3, #12]
10004614:	687b      	ldr	r3, [r7, #4]
10004616:	3304      	adds	r3, #4
10004618:	1c08      	adds	r0, r1, #0
1000461a:	1c11      	adds	r1, r2, #0
1000461c:	1c1a      	adds	r2, r3, #0
1000461e:	f7fc fdb3 	bl	10001188 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10004622:	687b      	ldr	r3, [r7, #4]
10004624:	6819      	ldr	r1, [r3, #0]
10004626:	687b      	ldr	r3, [r7, #4]
10004628:	7b1a      	ldrb	r2, [r3, #12]
1000462a:	687b      	ldr	r3, [r7, #4]
1000462c:	7b5b      	ldrb	r3, [r3, #13]
1000462e:	1c08      	adds	r0, r1, #0
10004630:	1c11      	adds	r1, r2, #0
10004632:	1c1a      	adds	r2, r3, #0
10004634:	f7fd f8ae 	bl	10001794 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
10004638:	2300      	movs	r3, #0
}
1000463a:	1c18      	adds	r0, r3, #0
1000463c:	46bd      	mov	sp, r7
1000463e:	b002      	add	sp, #8
10004640:	bd80      	pop	{r7, pc}
10004642:	46c0      	nop			; (mov r8, r8)

10004644 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10004644:	b580      	push	{r7, lr}
10004646:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
10004648:	4b03      	ldr	r3, [pc, #12]	; (10004658 <SystemCoreSetup+0x14>)
1000464a:	4a03      	ldr	r2, [pc, #12]	; (10004658 <SystemCoreSetup+0x14>)
1000464c:	6e92      	ldr	r2, [r2, #104]	; 0x68
1000464e:	2101      	movs	r1, #1
10004650:	438a      	bics	r2, r1
10004652:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
10004654:	46bd      	mov	sp, r7
10004656:	bd80      	pop	{r7, pc}
10004658:	40010000 	.word	0x40010000

1000465c <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
1000465c:	b580      	push	{r7, lr}
1000465e:	b084      	sub	sp, #16
10004660:	af00      	add	r7, sp, #0
10004662:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10004664:	230f      	movs	r3, #15
10004666:	18fb      	adds	r3, r7, r3
10004668:	2200      	movs	r2, #0
1000466a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
1000466c:	230e      	movs	r3, #14
1000466e:	18fb      	adds	r3, r7, r3
10004670:	2200      	movs	r2, #0
10004672:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10004674:	230d      	movs	r3, #13
10004676:	18fb      	adds	r3, r7, r3
10004678:	2200      	movs	r2, #0
1000467a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
1000467c:	230c      	movs	r3, #12
1000467e:	18fb      	adds	r3, r7, r3
10004680:	2200      	movs	r2, #0
10004682:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10004684:	230b      	movs	r3, #11
10004686:	18fb      	adds	r3, r7, r3
10004688:	2200      	movs	r2, #0
1000468a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
1000468c:	687b      	ldr	r3, [r7, #4]
1000468e:	781b      	ldrb	r3, [r3, #0]
10004690:	2201      	movs	r2, #1
10004692:	4053      	eors	r3, r2
10004694:	b2db      	uxtb	r3, r3
10004696:	2b00      	cmp	r3, #0
10004698:	d01b      	beq.n	100046d2 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
1000469a:	230e      	movs	r3, #14
1000469c:	18fa      	adds	r2, r7, r3
1000469e:	230d      	movs	r3, #13
100046a0:	18fb      	adds	r3, r7, r3
100046a2:	7812      	ldrb	r2, [r2, #0]
100046a4:	781b      	ldrb	r3, [r3, #0]
100046a6:	4313      	orrs	r3, r2
100046a8:	b2da      	uxtb	r2, r3
100046aa:	230c      	movs	r3, #12
100046ac:	18fb      	adds	r3, r7, r3
100046ae:	781b      	ldrb	r3, [r3, #0]
100046b0:	4313      	orrs	r3, r2
100046b2:	b2d9      	uxtb	r1, r3
100046b4:	230f      	movs	r3, #15
100046b6:	18fb      	adds	r3, r7, r3
100046b8:	220b      	movs	r2, #11
100046ba:	18ba      	adds	r2, r7, r2
100046bc:	7812      	ldrb	r2, [r2, #0]
100046be:	430a      	orrs	r2, r1
100046c0:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
100046c2:	230f      	movs	r3, #15
100046c4:	18fb      	adds	r3, r7, r3
100046c6:	781b      	ldrb	r3, [r3, #0]
100046c8:	2b00      	cmp	r3, #0
100046ca:	d102      	bne.n	100046d2 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
100046cc:	687b      	ldr	r3, [r7, #4]
100046ce:	2201      	movs	r2, #1
100046d0:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
100046d2:	230f      	movs	r3, #15
100046d4:	18fb      	adds	r3, r7, r3
100046d6:	781b      	ldrb	r3, [r3, #0]
}
100046d8:	1c18      	adds	r0, r3, #0
100046da:	46bd      	mov	sp, r7
100046dc:	b004      	add	sp, #16
100046de:	bd80      	pop	{r7, pc}

100046e0 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
100046e0:	b590      	push	{r4, r7, lr}
100046e2:	b085      	sub	sp, #20
100046e4:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
100046e6:	1c3b      	adds	r3, r7, #0
100046e8:	4a05      	ldr	r2, [pc, #20]	; (10004700 <SystemCoreClockSetup+0x20>)
100046ea:	ca13      	ldmia	r2!, {r0, r1, r4}
100046ec:	c313      	stmia	r3!, {r0, r1, r4}
100046ee:	6812      	ldr	r2, [r2, #0]
100046f0:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
100046f2:	1c3b      	adds	r3, r7, #0
100046f4:	1c18      	adds	r0, r3, #0
100046f6:	f7fc fe1f 	bl	10001338 <XMC_SCU_CLOCK_Init>
}
100046fa:	46bd      	mov	sp, r7
100046fc:	b005      	add	sp, #20
100046fe:	bd90      	pop	{r4, r7, pc}
10004700:	10005434 	.word	0x10005434

10004704 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
10004704:	b590      	push	{r4, r7, lr}
10004706:	b083      	sub	sp, #12
10004708:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
1000470a:	1dfb      	adds	r3, r7, #7
1000470c:	2200      	movs	r2, #0
1000470e:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10004710:	1dfc      	adds	r4, r7, #7
10004712:	4b1c      	ldr	r3, [pc, #112]	; (10004784 <DAVE_Init+0x80>)
10004714:	1c18      	adds	r0, r3, #0
10004716:	f7ff ffa1 	bl	1000465c <CLOCK_XMC1_Init>
1000471a:	1c03      	adds	r3, r0, #0
1000471c:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
1000471e:	1dfb      	adds	r3, r7, #7
10004720:	781b      	ldrb	r3, [r3, #0]
10004722:	2b00      	cmp	r3, #0
10004724:	d106      	bne.n	10004734 <DAVE_Init+0x30>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
10004726:	1dfc      	adds	r4, r7, #7
10004728:	4b17      	ldr	r3, [pc, #92]	; (10004788 <DAVE_Init+0x84>)
1000472a:	1c18      	adds	r0, r3, #0
1000472c:	f7fd ff4c 	bl	100025c8 <SPI_MASTER_Init>
10004730:	1c03      	adds	r3, r0, #0
10004732:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004734:	1dfb      	adds	r3, r7, #7
10004736:	781b      	ldrb	r3, [r3, #0]
10004738:	2b00      	cmp	r3, #0
1000473a:	d106      	bne.n	1000474a <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance SPI_CE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SPI_CE); 
1000473c:	1dfc      	adds	r4, r7, #7
1000473e:	4b13      	ldr	r3, [pc, #76]	; (1000478c <DAVE_Init+0x88>)
10004740:	1c18      	adds	r0, r3, #0
10004742:	f7ff ff5f 	bl	10004604 <DIGITAL_IO_Init>
10004746:	1c03      	adds	r3, r0, #0
10004748:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000474a:	1dfb      	adds	r3, r7, #7
1000474c:	781b      	ldrb	r3, [r3, #0]
1000474e:	2b00      	cmp	r3, #0
10004750:	d106      	bne.n	10004760 <DAVE_Init+0x5c>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_1 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_1); 
10004752:	1dfc      	adds	r4, r7, #7
10004754:	4b0e      	ldr	r3, [pc, #56]	; (10004790 <DAVE_Init+0x8c>)
10004756:	1c18      	adds	r0, r3, #0
10004758:	f7fd ff36 	bl	100025c8 <SPI_MASTER_Init>
1000475c:	1c03      	adds	r3, r0, #0
1000475e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004760:	1dfb      	adds	r3, r7, #7
10004762:	781b      	ldrb	r3, [r3, #0]
10004764:	2b00      	cmp	r3, #0
10004766:	d106      	bne.n	10004776 <DAVE_Init+0x72>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
10004768:	1dfc      	adds	r4, r7, #7
1000476a:	4b0a      	ldr	r3, [pc, #40]	; (10004794 <DAVE_Init+0x90>)
1000476c:	1c18      	adds	r0, r3, #0
1000476e:	f7ff f851 	bl	10003814 <I2C_MASTER_Init>
10004772:	1c03      	adds	r3, r0, #0
10004774:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10004776:	1dfb      	adds	r3, r7, #7
10004778:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
1000477a:	1c18      	adds	r0, r3, #0
1000477c:	46bd      	mov	sp, r7
1000477e:	b003      	add	sp, #12
10004780:	bd90      	pop	{r4, r7, pc}
10004782:	46c0      	nop			; (mov r8, r8)
10004784:	20000648 	.word	0x20000648
10004788:	20000590 	.word	0x20000590
1000478c:	10005424 	.word	0x10005424
10004790:	200005dc 	.word	0x200005dc
10004794:	20000614 	.word	0x20000614

10004798 <SPI_MASTER_EnableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTER_SS_SIGNAL_t slave)
{
10004798:	b580      	push	{r7, lr}
1000479a:	b082      	sub	sp, #8
1000479c:	af00      	add	r7, sp, #0
1000479e:	6078      	str	r0, [r7, #4]
100047a0:	1c0a      	adds	r2, r1, #0
100047a2:	1cfb      	adds	r3, r7, #3
100047a4:	701a      	strb	r2, [r3, #0]
                                                                               (slave == SPI_MASTER_SS_SIGNAL_4) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_5) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_6) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_7))
                                                                              );
    XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->slave_select_ch);
100047a6:	687b      	ldr	r3, [r7, #4]
100047a8:	6819      	ldr	r1, [r3, #0]
100047aa:	687b      	ldr	r3, [r7, #4]
100047ac:	685b      	ldr	r3, [r3, #4]
100047ae:	1cfa      	adds	r2, r7, #3
100047b0:	7812      	ldrb	r2, [r2, #0]
100047b2:	3214      	adds	r2, #20
100047b4:	0092      	lsls	r2, r2, #2
100047b6:	58d3      	ldr	r3, [r2, r3]
100047b8:	68db      	ldr	r3, [r3, #12]
100047ba:	1c08      	adds	r0, r1, #0
100047bc:	1c19      	adds	r1, r3, #0
100047be:	f7fd fb25 	bl	10001e0c <XMC_SPI_CH_EnableSlaveSelect>
}
100047c2:	46bd      	mov	sp, r7
100047c4:	b002      	add	sp, #8
100047c6:	bd80      	pop	{r7, pc}

100047c8 <SPI_MASTER_DisableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_DisableSlaveSelectSignal(const SPI_MASTER_t* handle)
{
100047c8:	b580      	push	{r7, lr}
100047ca:	b082      	sub	sp, #8
100047cc:	af00      	add	r7, sp, #0
100047ce:	6078      	str	r0, [r7, #4]
    XMC_ASSERT("SPI_MASTER_Transmit:handle NULL" , (handle != NULL));
    XMC_SPI_CH_DisableSlaveSelect(handle->channel);
100047d0:	687b      	ldr	r3, [r7, #4]
100047d2:	681b      	ldr	r3, [r3, #0]
100047d4:	1c18      	adds	r0, r3, #0
100047d6:	f7fd fb2f 	bl	10001e38 <XMC_SPI_CH_DisableSlaveSelect>
}
100047da:	46bd      	mov	sp, r7
100047dc:	b002      	add	sp, #8
100047de:	bd80      	pop	{r7, pc}

100047e0 <Init_ADXL345>:
 */

#include "ADXL345.h"


void Init_ADXL345(void){
100047e0:	b580      	push	{r7, lr}
100047e2:	af00      	add	r7, sp, #0
	Set_DataFormat(_BV(FULL_RES) | _BV(Range0));
100047e4:	2009      	movs	r0, #9
100047e6:	f000 f807 	bl	100047f8 <Set_DataFormat>
	Set_FIFO_CTR(_BV(Samples_D2));
100047ea:	2004      	movs	r0, #4
100047ec:	f000 f814 	bl	10004818 <Set_FIFO_CTR>
	PowerOn();
100047f0:	f000 f822 	bl	10004838 <PowerOn>
}
100047f4:	46bd      	mov	sp, r7
100047f6:	bd80      	pop	{r7, pc}

100047f8 <Set_DataFormat>:
void Set_DataFormat(uint8_t val){
100047f8:	b580      	push	{r7, lr}
100047fa:	b082      	sub	sp, #8
100047fc:	af00      	add	r7, sp, #0
100047fe:	1c02      	adds	r2, r0, #0
10004800:	1dfb      	adds	r3, r7, #7
10004802:	701a      	strb	r2, [r3, #0]
	//SPI 4Wire (0)- INT_INVERT (0)- Full resolution (1)- Justify left (0)- Range 4g (01)
	WriteRegister_SingleByte(DATA_FORMAT, val);
10004804:	1dfb      	adds	r3, r7, #7
10004806:	781b      	ldrb	r3, [r3, #0]
10004808:	2031      	movs	r0, #49	; 0x31
1000480a:	1c19      	adds	r1, r3, #0
1000480c:	f000 f81c 	bl	10004848 <WriteRegister_SingleByte>
}
10004810:	46bd      	mov	sp, r7
10004812:	b002      	add	sp, #8
10004814:	bd80      	pop	{r7, pc}
10004816:	46c0      	nop			; (mov r8, r8)

10004818 <Set_FIFO_CTR>:
void Set_FIFO_CTR(uint8_t val){
10004818:	b580      	push	{r7, lr}
1000481a:	b082      	sub	sp, #8
1000481c:	af00      	add	r7, sp, #0
1000481e:	1c02      	adds	r2, r0, #0
10004820:	1dfb      	adds	r3, r7, #7
10004822:	701a      	strb	r2, [r3, #0]
	//FIFO_Modes bypass (00)- Trigger (0)- Samples 2 (00010
	WriteRegister_SingleByte(FIFO_CTL,val);
10004824:	1dfb      	adds	r3, r7, #7
10004826:	781b      	ldrb	r3, [r3, #0]
10004828:	2038      	movs	r0, #56	; 0x38
1000482a:	1c19      	adds	r1, r3, #0
1000482c:	f000 f80c 	bl	10004848 <WriteRegister_SingleByte>
}
10004830:	46bd      	mov	sp, r7
10004832:	b002      	add	sp, #8
10004834:	bd80      	pop	{r7, pc}
10004836:	46c0      	nop			; (mov r8, r8)

10004838 <PowerOn>:
void PowerOn(){
10004838:	b580      	push	{r7, lr}
1000483a:	af00      	add	r7, sp, #0
	//Link (0)-  Auto_Sleep (0)- Measure (1)- Sleep (0)- WakeUp (00)
	WriteRegister_SingleByte(POWER_CTL,_BV(Measure));
1000483c:	202d      	movs	r0, #45	; 0x2d
1000483e:	2108      	movs	r1, #8
10004840:	f000 f802 	bl	10004848 <WriteRegister_SingleByte>
}
10004844:	46bd      	mov	sp, r7
10004846:	bd80      	pop	{r7, pc}

10004848 <WriteRegister_SingleByte>:
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_1, SPI_MASTER_SS_SIGNAL_0);
	SPI_MASTER_Transfer(&SPI_MASTER_1, ADXL345_DataSent, ADXL345_DataRead, 2);
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_1);
	return ADXL345_DataRead[1];
}
uint8_t WriteRegister_SingleByte(uint8_t reg, uint8_t data){
10004848:	b580      	push	{r7, lr}
1000484a:	b082      	sub	sp, #8
1000484c:	af00      	add	r7, sp, #0
1000484e:	1c02      	adds	r2, r0, #0
10004850:	1dfb      	adds	r3, r7, #7
10004852:	701a      	strb	r2, [r3, #0]
10004854:	1dbb      	adds	r3, r7, #6
10004856:	1c0a      	adds	r2, r1, #0
10004858:	701a      	strb	r2, [r3, #0]
	ADXL345_DataSent [0] = reg;
1000485a:	4b10      	ldr	r3, [pc, #64]	; (1000489c <WriteRegister_SingleByte+0x54>)
1000485c:	1dfa      	adds	r2, r7, #7
1000485e:	7812      	ldrb	r2, [r2, #0]
10004860:	701a      	strb	r2, [r3, #0]
	ADXL345_DataSent [1] = data;
10004862:	4b0e      	ldr	r3, [pc, #56]	; (1000489c <WriteRegister_SingleByte+0x54>)
10004864:	1dba      	adds	r2, r7, #6
10004866:	7812      	ldrb	r2, [r2, #0]
10004868:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_1, SPI_MASTER_SS_SIGNAL_0);
1000486a:	4b0d      	ldr	r3, [pc, #52]	; (100048a0 <WriteRegister_SingleByte+0x58>)
1000486c:	1c18      	adds	r0, r3, #0
1000486e:	2100      	movs	r1, #0
10004870:	f7ff ff92 	bl	10004798 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_1, ADXL345_DataSent, ADXL345_DataRead, 2);
10004874:	490a      	ldr	r1, [pc, #40]	; (100048a0 <WriteRegister_SingleByte+0x58>)
10004876:	4a09      	ldr	r2, [pc, #36]	; (1000489c <WriteRegister_SingleByte+0x54>)
10004878:	4b0a      	ldr	r3, [pc, #40]	; (100048a4 <WriteRegister_SingleByte+0x5c>)
1000487a:	1c08      	adds	r0, r1, #0
1000487c:	1c11      	adds	r1, r2, #0
1000487e:	1c1a      	adds	r2, r3, #0
10004880:	2302      	movs	r3, #2
10004882:	f7fd ff5b 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_1);
10004886:	4b06      	ldr	r3, [pc, #24]	; (100048a0 <WriteRegister_SingleByte+0x58>)
10004888:	1c18      	adds	r0, r3, #0
1000488a:	f7ff ff9d 	bl	100047c8 <SPI_MASTER_DisableSlaveSelectSignal>
	return ADXL345_DataRead[1];
1000488e:	4b05      	ldr	r3, [pc, #20]	; (100048a4 <WriteRegister_SingleByte+0x5c>)
10004890:	785b      	ldrb	r3, [r3, #1]
}
10004892:	1c18      	adds	r0, r3, #0
10004894:	46bd      	mov	sp, r7
10004896:	b002      	add	sp, #8
10004898:	bd80      	pop	{r7, pc}
1000489a:	46c0      	nop			; (mov r8, r8)
1000489c:	2000064c 	.word	0x2000064c
100048a0:	200005dc 	.word	0x200005dc
100048a4:	2000066c 	.word	0x2000066c

100048a8 <BMP180_Test>:
#ifndef BMP180_H
#define BMP180_H

#include "BMP180.h"

uint8_t BMP180_Test(void){
100048a8:	b590      	push	{r4, r7, lr}
100048aa:	b083      	sub	sp, #12
100048ac:	af02      	add	r7, sp, #8
	//I2C_MASTER_ClearFlag(&I2C_MASTER_0,I2C_MASTER_STATUS_BUSY);
	//I2C_MASTER_FlushTxFifo(&I2C_MASTER_0);
	//I2C_MASTER_FlushRxFifo(&I2C_MASTER_0);
	BMP180_DataSent[0] = 0xD0;
100048ae:	4b0a      	ldr	r3, [pc, #40]	; (100048d8 <BMP180_Test+0x30>)
100048b0:	22d0      	movs	r2, #208	; 0xd0
100048b2:	701a      	strb	r2, [r3, #0]

	I2C_MASTER_Transmit(&I2C_MASTER_0,true,0xEE,BMP180_DataSent,1,true);
100048b4:	4a09      	ldr	r2, [pc, #36]	; (100048dc <BMP180_Test+0x34>)
100048b6:	4c08      	ldr	r4, [pc, #32]	; (100048d8 <BMP180_Test+0x30>)
100048b8:	2301      	movs	r3, #1
100048ba:	9300      	str	r3, [sp, #0]
100048bc:	2301      	movs	r3, #1
100048be:	9301      	str	r3, [sp, #4]
100048c0:	1c10      	adds	r0, r2, #0
100048c2:	2101      	movs	r1, #1
100048c4:	22ee      	movs	r2, #238	; 0xee
100048c6:	1c23      	adds	r3, r4, #0
100048c8:	f7fe ffe4 	bl	10003894 <I2C_MASTER_Transmit>
	//while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
	//I2C_MASTER_Receive(&I2C_MASTER_0,true,BMP180_Address|BMP180_R,&BMP180_DataRead,1,true,true);
	//while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
	return BMP180_DataRead[0];
100048cc:	4b04      	ldr	r3, [pc, #16]	; (100048e0 <BMP180_Test+0x38>)
100048ce:	781b      	ldrb	r3, [r3, #0]
}
100048d0:	1c18      	adds	r0, r3, #0
100048d2:	46bd      	mov	sp, r7
100048d4:	b001      	add	sp, #4
100048d6:	bd90      	pop	{r4, r7, pc}
100048d8:	200006ac 	.word	0x200006ac
100048dc:	20000614 	.word	0x20000614
100048e0:	2000068c 	.word	0x2000068c

100048e4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100048e4:	b580      	push	{r7, lr}
100048e6:	b082      	sub	sp, #8
100048e8:	af00      	add	r7, sp, #0
100048ea:	6078      	str	r0, [r7, #4]
100048ec:	1c0a      	adds	r2, r1, #0
100048ee:	1cfb      	adds	r3, r7, #3
100048f0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100048f2:	1cfb      	adds	r3, r7, #3
100048f4:	781b      	ldrb	r3, [r3, #0]
100048f6:	2280      	movs	r2, #128	; 0x80
100048f8:	0252      	lsls	r2, r2, #9
100048fa:	409a      	lsls	r2, r3
100048fc:	687b      	ldr	r3, [r7, #4]
100048fe:	605a      	str	r2, [r3, #4]
}
10004900:	46bd      	mov	sp, r7
10004902:	b002      	add	sp, #8
10004904:	bd80      	pop	{r7, pc}
10004906:	46c0      	nop			; (mov r8, r8)

10004908 <SPI_MASTER_DisableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_DisableSlaveSelectSignal(const SPI_MASTER_t* handle)
{
10004908:	b580      	push	{r7, lr}
1000490a:	b082      	sub	sp, #8
1000490c:	af00      	add	r7, sp, #0
1000490e:	6078      	str	r0, [r7, #4]
    XMC_ASSERT("SPI_MASTER_Transmit:handle NULL" , (handle != NULL));
    XMC_SPI_CH_DisableSlaveSelect(handle->channel);
10004910:	687b      	ldr	r3, [r7, #4]
10004912:	681b      	ldr	r3, [r3, #0]
10004914:	1c18      	adds	r0, r3, #0
10004916:	f7fd fa8f 	bl	10001e38 <XMC_SPI_CH_DisableSlaveSelect>
}
1000491a:	46bd      	mov	sp, r7
1000491c:	b002      	add	sp, #8
1000491e:	bd80      	pop	{r7, pc}

10004920 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10004920:	b580      	push	{r7, lr}
10004922:	b082      	sub	sp, #8
10004924:	af00      	add	r7, sp, #0
10004926:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10004928:	687b      	ldr	r3, [r7, #4]
1000492a:	681a      	ldr	r2, [r3, #0]
1000492c:	687b      	ldr	r3, [r7, #4]
1000492e:	7b1b      	ldrb	r3, [r3, #12]
10004930:	1c10      	adds	r0, r2, #0
10004932:	1c19      	adds	r1, r3, #0
10004934:	f7ff ffd6 	bl	100048e4 <XMC_GPIO_SetOutputLow>
}
10004938:	46bd      	mov	sp, r7
1000493a:	b002      	add	sp, #8
1000493c:	bd80      	pop	{r7, pc}
1000493e:	46c0      	nop			; (mov r8, r8)

10004940 <main>:

extern uint8_t ADXL345_DataRead[32];
char data[] = "X, .Y, .Z, ";

int main(void)
{
10004940:	b590      	push	{r4, r7, lr}
10004942:	b083      	sub	sp, #12
10004944:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs */
10004946:	1cfc      	adds	r4, r7, #3
10004948:	f7ff fedc 	bl	10004704 <DAVE_Init>
1000494c:	1c03      	adds	r3, r0, #0
1000494e:	7023      	strb	r3, [r4, #0]

  if (status != DAVE_STATUS_SUCCESS)
10004950:	1cfb      	adds	r3, r7, #3
10004952:	781b      	ldrb	r3, [r3, #0]
10004954:	2b00      	cmp	r3, #0
10004956:	d000      	beq.n	1000495a <main+0x1a>
  	  { XMC_DEBUG("DAVE APPs initialization failed\n");  while(1U); }
10004958:	e7fe      	b.n	10004958 <main+0x18>

  DIGITAL_IO_SetOutputLow(&SPI_CE);
1000495a:	4b0f      	ldr	r3, [pc, #60]	; (10004998 <main+0x58>)
1000495c:	1c18      	adds	r0, r3, #0
1000495e:	f7ff ffdf 	bl	10004920 <DIGITAL_IO_SetOutputLow>
  SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004962:	4b0e      	ldr	r3, [pc, #56]	; (1000499c <main+0x5c>)
10004964:	1c18      	adds	r0, r3, #0
10004966:	f7ff ffcf 	bl	10004908 <SPI_MASTER_DisableSlaveSelectSignal>
  SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_1);
1000496a:	4b0d      	ldr	r3, [pc, #52]	; (100049a0 <main+0x60>)
1000496c:	1c18      	adds	r0, r3, #0
1000496e:	f7ff ffcb 	bl	10004908 <SPI_MASTER_DisableSlaveSelectSignal>

  Init_RF24();
10004972:	f000 f845 	bl	10004a00 <Init_RF24>
  TX_Mode();
10004976:	f000 fbe1 	bl	1000513c <TX_Mode>

  Init_ADXL345();
1000497a:	f7ff ff31 	bl	100047e0 <Init_ADXL345>

  while(1U)
  {
	  BMP180_Test();
1000497e:	f7ff ff93 	bl	100048a8 <BMP180_Test>
	  //data[6]  = ADXL345_DataRead[3];
	  //data[10] = ADXL345_DataRead[5];
	  //Send_Word(data);
	  //ReadRegister_SingleByte(DATAX0);
	  //Send_OneByte(ADXL345_DataRead[1]);
	  for(int i = 0 ; i < 0xFFFF;i++); //delay
10004982:	2300      	movs	r3, #0
10004984:	607b      	str	r3, [r7, #4]
10004986:	e002      	b.n	1000498e <main+0x4e>
10004988:	687b      	ldr	r3, [r7, #4]
1000498a:	3301      	adds	r3, #1
1000498c:	607b      	str	r3, [r7, #4]
1000498e:	687b      	ldr	r3, [r7, #4]
10004990:	4a04      	ldr	r2, [pc, #16]	; (100049a4 <main+0x64>)
10004992:	4293      	cmp	r3, r2
10004994:	ddf8      	ble.n	10004988 <main+0x48>
	  //data = ReadRegister(POWER_CTL);
	  //for(int i = 0 ; i < 0xFFFF;i++); //delay

  }
10004996:	e7f2      	b.n	1000497e <main+0x3e>
10004998:	10005424 	.word	0x10005424
1000499c:	20000590 	.word	0x20000590
100049a0:	200005dc 	.word	0x200005dc
100049a4:	0000fffe 	.word	0x0000fffe

100049a8 <Nack_ISR>:
}

void Nack_ISR(){
100049a8:	b580      	push	{r7, lr}
100049aa:	af00      	add	r7, sp, #0


}
100049ac:	46bd      	mov	sp, r7
100049ae:	bd80      	pop	{r7, pc}

100049b0 <SPI_Test>:

void SPI_Test(){
100049b0:	b580      	push	{r7, lr}
100049b2:	af00      	add	r7, sp, #0
	XMC_DEBUG("DAVE APPs initialization failed\n");
}
100049b4:	46bd      	mov	sp, r7
100049b6:	bd80      	pop	{r7, pc}

100049b8 <SPI_MASTER_EnableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTER_SS_SIGNAL_t slave)
{
100049b8:	b580      	push	{r7, lr}
100049ba:	b082      	sub	sp, #8
100049bc:	af00      	add	r7, sp, #0
100049be:	6078      	str	r0, [r7, #4]
100049c0:	1c0a      	adds	r2, r1, #0
100049c2:	1cfb      	adds	r3, r7, #3
100049c4:	701a      	strb	r2, [r3, #0]
                                                                               (slave == SPI_MASTER_SS_SIGNAL_4) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_5) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_6) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_7))
                                                                              );
    XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->slave_select_ch);
100049c6:	687b      	ldr	r3, [r7, #4]
100049c8:	6819      	ldr	r1, [r3, #0]
100049ca:	687b      	ldr	r3, [r7, #4]
100049cc:	685b      	ldr	r3, [r3, #4]
100049ce:	1cfa      	adds	r2, r7, #3
100049d0:	7812      	ldrb	r2, [r2, #0]
100049d2:	3214      	adds	r2, #20
100049d4:	0092      	lsls	r2, r2, #2
100049d6:	58d3      	ldr	r3, [r2, r3]
100049d8:	68db      	ldr	r3, [r3, #12]
100049da:	1c08      	adds	r0, r1, #0
100049dc:	1c19      	adds	r1, r3, #0
100049de:	f7fd fa15 	bl	10001e0c <XMC_SPI_CH_EnableSlaveSelect>
}
100049e2:	46bd      	mov	sp, r7
100049e4:	b002      	add	sp, #8
100049e6:	bd80      	pop	{r7, pc}

100049e8 <SPI_MASTER_DisableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_DisableSlaveSelectSignal(const SPI_MASTER_t* handle)
{
100049e8:	b580      	push	{r7, lr}
100049ea:	b082      	sub	sp, #8
100049ec:	af00      	add	r7, sp, #0
100049ee:	6078      	str	r0, [r7, #4]
    XMC_ASSERT("SPI_MASTER_Transmit:handle NULL" , (handle != NULL));
    XMC_SPI_CH_DisableSlaveSelect(handle->channel);
100049f0:	687b      	ldr	r3, [r7, #4]
100049f2:	681b      	ldr	r3, [r3, #0]
100049f4:	1c18      	adds	r0, r3, #0
100049f6:	f7fd fa1f 	bl	10001e38 <XMC_SPI_CH_DisableSlaveSelect>
}
100049fa:	46bd      	mov	sp, r7
100049fc:	b002      	add	sp, #8
100049fe:	bd80      	pop	{r7, pc}

10004a00 <Init_RF24>:
 *      Author: Anis Shakkour
 */

#include "nRF24L01+.h"

void Init_RF24(void){
10004a00:	b580      	push	{r7, lr}
10004a02:	b082      	sub	sp, #8
10004a04:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 0xFFFF;i++); //delay
10004a06:	2300      	movs	r3, #0
10004a08:	607b      	str	r3, [r7, #4]
10004a0a:	e002      	b.n	10004a12 <Init_RF24+0x12>
10004a0c:	687b      	ldr	r3, [r7, #4]
10004a0e:	3301      	adds	r3, #1
10004a10:	607b      	str	r3, [r7, #4]
10004a12:	687b      	ldr	r3, [r7, #4]
10004a14:	4a19      	ldr	r2, [pc, #100]	; (10004a7c <Init_RF24+0x7c>)
10004a16:	4293      	cmp	r3, r2
10004a18:	ddf8      	ble.n	10004a0c <Init_RF24+0xc>
	//uint8_t temp = getChannel();
	setChannel(76);
10004a1a:	204c      	movs	r0, #76	; 0x4c
10004a1c:	f000 f832 	bl	10004a84 <setChannel>
	//temp = getChannel();
	setRetries(5,15);
10004a20:	2005      	movs	r0, #5
10004a22:	210f      	movs	r1, #15
10004a24:	f000 f85c 	bl	10004ae0 <setRetries>
	setRadiation(3,0); //see Header file
10004a28:	2003      	movs	r0, #3
10004a2a:	2100      	movs	r1, #0
10004a2c:	f000 f89e 	bl	10004b6c <setRadiation>
	setAddressWidth(5); //Address width 5 bytes
10004a30:	2005      	movs	r0, #5
10004a32:	f000 f8df 	bl	10004bf4 <setAddressWidth>
	setFeatures(0); //
10004a36:	2000      	movs	r0, #0
10004a38:	f000 f91c 	bl	10004c74 <setFeatures>
	//enableDynamicPayLoads();
	enableAutoACK();
10004a3c:	f000 f952 	bl	10004ce4 <enableAutoACK>
	enableRXpipe(0);
10004a40:	2000      	movs	r0, #0
10004a42:	f000 f977 	bl	10004d34 <enableRXpipe>
	setPayloadSize(0x3f,0);
10004a46:	203f      	movs	r0, #63	; 0x3f
10004a48:	2100      	movs	r1, #0
10004a4a:	f000 f9d9 	bl	10004e00 <setPayloadSize>
	setRxPipeAddress(0,"00000",5);
10004a4e:	4b0c      	ldr	r3, [pc, #48]	; (10004a80 <Init_RF24+0x80>)
10004a50:	2000      	movs	r0, #0
10004a52:	1c19      	adds	r1, r3, #0
10004a54:	2205      	movs	r2, #5
10004a56:	f000 fa13 	bl	10004e80 <setRxPipeAddress>
	setTxPipeAddress("00000",5);
10004a5a:	4b09      	ldr	r3, [pc, #36]	; (10004a80 <Init_RF24+0x80>)
10004a5c:	1c18      	adds	r0, r3, #0
10004a5e:	2105      	movs	r1, #5
10004a60:	f000 fa70 	bl	10004f44 <setTxPipeAddress>
	resetStatus();
10004a64:	f000 fabc 	bl	10004fe0 <resetStatus>
	flushTX();
10004a68:	f000 fae2 	bl	10005030 <flushTX>
	flushRX();
10004a6c:	f000 fb08 	bl	10005080 <flushRX>
	PowerUP();
10004a70:	f000 fb2e 	bl	100050d0 <PowerUP>
}
10004a74:	46bd      	mov	sp, r7
10004a76:	b002      	add	sp, #8
10004a78:	bd80      	pop	{r7, pc}
10004a7a:	46c0      	nop			; (mov r8, r8)
10004a7c:	0000fffe 	.word	0x0000fffe
10004a80:	10005444 	.word	0x10005444

10004a84 <setChannel>:
	flushTX();
	//for(int i = 0 ; i < 0x3FFF;i++); //delay
	//for(int i = 0 ; i < 0x3FFF;i++); //delay
}

void setChannel(uint8_t ch){
10004a84:	b580      	push	{r7, lr}
10004a86:	b082      	sub	sp, #8
10004a88:	af00      	add	r7, sp, #0
10004a8a:	1c02      	adds	r2, r0, #0
10004a8c:	1dfb      	adds	r3, r7, #7
10004a8e:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | RFCH);
10004a90:	4b0f      	ldr	r3, [pc, #60]	; (10004ad0 <setChannel+0x4c>)
10004a92:	2225      	movs	r2, #37	; 0x25
10004a94:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = (ch);
10004a96:	4b0e      	ldr	r3, [pc, #56]	; (10004ad0 <setChannel+0x4c>)
10004a98:	1dfa      	adds	r2, r7, #7
10004a9a:	7812      	ldrb	r2, [r2, #0]
10004a9c:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004a9e:	4b0d      	ldr	r3, [pc, #52]	; (10004ad4 <setChannel+0x50>)
10004aa0:	1c18      	adds	r0, r3, #0
10004aa2:	2100      	movs	r1, #0
10004aa4:	f7ff ff88 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004aa8:	490a      	ldr	r1, [pc, #40]	; (10004ad4 <setChannel+0x50>)
10004aaa:	4a09      	ldr	r2, [pc, #36]	; (10004ad0 <setChannel+0x4c>)
10004aac:	4b0a      	ldr	r3, [pc, #40]	; (10004ad8 <setChannel+0x54>)
10004aae:	1c08      	adds	r0, r1, #0
10004ab0:	1c11      	adds	r1, r2, #0
10004ab2:	1c1a      	adds	r2, r3, #0
10004ab4:	2302      	movs	r3, #2
10004ab6:	f7fd fe41 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004aba:	4b06      	ldr	r3, [pc, #24]	; (10004ad4 <setChannel+0x50>)
10004abc:	1c18      	adds	r0, r3, #0
10004abe:	f7ff ff93 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004ac2:	4b05      	ldr	r3, [pc, #20]	; (10004ad8 <setChannel+0x54>)
10004ac4:	781a      	ldrb	r2, [r3, #0]
10004ac6:	4b05      	ldr	r3, [pc, #20]	; (10004adc <setChannel+0x58>)
10004ac8:	701a      	strb	r2, [r3, #0]
}
10004aca:	46bd      	mov	sp, r7
10004acc:	b002      	add	sp, #8
10004ace:	bd80      	pop	{r7, pc}
10004ad0:	200006f0 	.word	0x200006f0
10004ad4:	20000590 	.word	0x20000590
10004ad8:	200006cc 	.word	0x200006cc
10004adc:	20000710 	.word	0x20000710

10004ae0 <setRetries>:
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
	Status_reg = NRF24ReadData[0];
	return NRF24ReadData[1];
}

void setRetries(uint8_t AutoTransmitDelay, uint8_t AutoTransmitCount){
10004ae0:	b580      	push	{r7, lr}
10004ae2:	b082      	sub	sp, #8
10004ae4:	af00      	add	r7, sp, #0
10004ae6:	1c02      	adds	r2, r0, #0
10004ae8:	1dfb      	adds	r3, r7, #7
10004aea:	701a      	strb	r2, [r3, #0]
10004aec:	1dbb      	adds	r3, r7, #6
10004aee:	1c0a      	adds	r2, r1, #0
10004af0:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | SETUP_RETR);
10004af2:	4b1a      	ldr	r3, [pc, #104]	; (10004b5c <setRetries+0x7c>)
10004af4:	2224      	movs	r2, #36	; 0x24
10004af6:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = (_DS(Min(AutoTransmitDelay,15),4) | Min(AutoTransmitCount,15));
10004af8:	1dfb      	adds	r3, r7, #7
10004afa:	781b      	ldrb	r3, [r3, #0]
10004afc:	2b0e      	cmp	r3, #14
10004afe:	d804      	bhi.n	10004b0a <setRetries+0x2a>
10004b00:	1dfb      	adds	r3, r7, #7
10004b02:	781b      	ldrb	r3, [r3, #0]
10004b04:	011b      	lsls	r3, r3, #4
10004b06:	b2d9      	uxtb	r1, r3
10004b08:	e000      	b.n	10004b0c <setRetries+0x2c>
10004b0a:	21f0      	movs	r1, #240	; 0xf0
10004b0c:	1dbb      	adds	r3, r7, #6
10004b0e:	781b      	ldrb	r3, [r3, #0]
10004b10:	b2da      	uxtb	r2, r3
10004b12:	2a0f      	cmp	r2, #15
10004b14:	d900      	bls.n	10004b18 <setRetries+0x38>
10004b16:	230f      	movs	r3, #15
10004b18:	b2db      	uxtb	r3, r3
10004b1a:	b2db      	uxtb	r3, r3
10004b1c:	1c0a      	adds	r2, r1, #0
10004b1e:	4313      	orrs	r3, r2
10004b20:	b2db      	uxtb	r3, r3
10004b22:	b2da      	uxtb	r2, r3
10004b24:	4b0d      	ldr	r3, [pc, #52]	; (10004b5c <setRetries+0x7c>)
10004b26:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004b28:	4b0d      	ldr	r3, [pc, #52]	; (10004b60 <setRetries+0x80>)
10004b2a:	1c18      	adds	r0, r3, #0
10004b2c:	2100      	movs	r1, #0
10004b2e:	f7ff ff43 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004b32:	490b      	ldr	r1, [pc, #44]	; (10004b60 <setRetries+0x80>)
10004b34:	4a09      	ldr	r2, [pc, #36]	; (10004b5c <setRetries+0x7c>)
10004b36:	4b0b      	ldr	r3, [pc, #44]	; (10004b64 <setRetries+0x84>)
10004b38:	1c08      	adds	r0, r1, #0
10004b3a:	1c11      	adds	r1, r2, #0
10004b3c:	1c1a      	adds	r2, r3, #0
10004b3e:	2302      	movs	r3, #2
10004b40:	f7fd fdfc 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004b44:	4b06      	ldr	r3, [pc, #24]	; (10004b60 <setRetries+0x80>)
10004b46:	1c18      	adds	r0, r3, #0
10004b48:	f7ff ff4e 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004b4c:	4b05      	ldr	r3, [pc, #20]	; (10004b64 <setRetries+0x84>)
10004b4e:	781a      	ldrb	r2, [r3, #0]
10004b50:	4b05      	ldr	r3, [pc, #20]	; (10004b68 <setRetries+0x88>)
10004b52:	701a      	strb	r2, [r3, #0]
}
10004b54:	46bd      	mov	sp, r7
10004b56:	b002      	add	sp, #8
10004b58:	bd80      	pop	{r7, pc}
10004b5a:	46c0      	nop			; (mov r8, r8)
10004b5c:	200006f0 	.word	0x200006f0
10004b60:	20000590 	.word	0x20000590
10004b64:	200006cc 	.word	0x200006cc
10004b68:	20000710 	.word	0x20000710

10004b6c <setRadiation>:
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
	Status_reg = NRF24ReadData[0];
	return _AndLow4(NRF24ReadData[1]);
}

void setRadiation (uint8_t RFpwerMode, uint8_t RFspeedMode){
10004b6c:	b580      	push	{r7, lr}
10004b6e:	b082      	sub	sp, #8
10004b70:	af00      	add	r7, sp, #0
10004b72:	1c02      	adds	r2, r0, #0
10004b74:	1dfb      	adds	r3, r7, #7
10004b76:	701a      	strb	r2, [r3, #0]
10004b78:	1dbb      	adds	r3, r7, #6
10004b7a:	1c0a      	adds	r2, r1, #0
10004b7c:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | RF_SETUP);
10004b7e:	4b19      	ldr	r3, [pc, #100]	; (10004be4 <setRadiation+0x78>)
10004b80:	2226      	movs	r2, #38	; 0x26
10004b82:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = _DS(RFpwerMode, 1) | _DS(RFspeedMode & 2,4) | _DS(RFspeedMode & 1,3);
10004b84:	1dfb      	adds	r3, r7, #7
10004b86:	781b      	ldrb	r3, [r3, #0]
10004b88:	005b      	lsls	r3, r3, #1
10004b8a:	b2da      	uxtb	r2, r3
10004b8c:	1dbb      	adds	r3, r7, #6
10004b8e:	781b      	ldrb	r3, [r3, #0]
10004b90:	1c19      	adds	r1, r3, #0
10004b92:	2320      	movs	r3, #32
10004b94:	400b      	ands	r3, r1
10004b96:	b2db      	uxtb	r3, r3
10004b98:	4313      	orrs	r3, r2
10004b9a:	b2da      	uxtb	r2, r3
10004b9c:	1dbb      	adds	r3, r7, #6
10004b9e:	781b      	ldrb	r3, [r3, #0]
10004ba0:	1c19      	adds	r1, r3, #0
10004ba2:	2308      	movs	r3, #8
10004ba4:	400b      	ands	r3, r1
10004ba6:	b2db      	uxtb	r3, r3
10004ba8:	4313      	orrs	r3, r2
10004baa:	b2db      	uxtb	r3, r3
10004bac:	b2da      	uxtb	r2, r3
10004bae:	4b0d      	ldr	r3, [pc, #52]	; (10004be4 <setRadiation+0x78>)
10004bb0:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004bb2:	4b0d      	ldr	r3, [pc, #52]	; (10004be8 <setRadiation+0x7c>)
10004bb4:	1c18      	adds	r0, r3, #0
10004bb6:	2100      	movs	r1, #0
10004bb8:	f7ff fefe 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004bbc:	490a      	ldr	r1, [pc, #40]	; (10004be8 <setRadiation+0x7c>)
10004bbe:	4a09      	ldr	r2, [pc, #36]	; (10004be4 <setRadiation+0x78>)
10004bc0:	4b0a      	ldr	r3, [pc, #40]	; (10004bec <setRadiation+0x80>)
10004bc2:	1c08      	adds	r0, r1, #0
10004bc4:	1c11      	adds	r1, r2, #0
10004bc6:	1c1a      	adds	r2, r3, #0
10004bc8:	2302      	movs	r3, #2
10004bca:	f7fd fdb7 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004bce:	4b06      	ldr	r3, [pc, #24]	; (10004be8 <setRadiation+0x7c>)
10004bd0:	1c18      	adds	r0, r3, #0
10004bd2:	f7ff ff09 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004bd6:	4b05      	ldr	r3, [pc, #20]	; (10004bec <setRadiation+0x80>)
10004bd8:	781a      	ldrb	r2, [r3, #0]
10004bda:	4b05      	ldr	r3, [pc, #20]	; (10004bf0 <setRadiation+0x84>)
10004bdc:	701a      	strb	r2, [r3, #0]
}
10004bde:	46bd      	mov	sp, r7
10004be0:	b002      	add	sp, #8
10004be2:	bd80      	pop	{r7, pc}
10004be4:	200006f0 	.word	0x200006f0
10004be8:	20000590 	.word	0x20000590
10004bec:	200006cc 	.word	0x200006cc
10004bf0:	20000710 	.word	0x20000710

10004bf4 <setAddressWidth>:
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
	Status_reg = NRF24ReadData[0];
	return NRF24ReadData[1];
}

void setAddressWidth(uint8_t width){
10004bf4:	b580      	push	{r7, lr}
10004bf6:	b082      	sub	sp, #8
10004bf8:	af00      	add	r7, sp, #0
10004bfa:	1c02      	adds	r2, r0, #0
10004bfc:	1dfb      	adds	r3, r7, #7
10004bfe:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | SETUP_AW);
10004c00:	4b18      	ldr	r3, [pc, #96]	; (10004c64 <setAddressWidth+0x70>)
10004c02:	2223      	movs	r2, #35	; 0x23
10004c04:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = Max(Min(3,width),5) - 2;
10004c06:	1dfb      	adds	r3, r7, #7
10004c08:	781b      	ldrb	r3, [r3, #0]
10004c0a:	2b03      	cmp	r3, #3
10004c0c:	d80e      	bhi.n	10004c2c <setAddressWidth+0x38>
10004c0e:	1dfb      	adds	r3, r7, #7
10004c10:	781b      	ldrb	r3, [r3, #0]
10004c12:	2b05      	cmp	r3, #5
10004c14:	dd0a      	ble.n	10004c2c <setAddressWidth+0x38>
10004c16:	1dfb      	adds	r3, r7, #7
10004c18:	781b      	ldrb	r3, [r3, #0]
10004c1a:	2b03      	cmp	r3, #3
10004c1c:	d804      	bhi.n	10004c28 <setAddressWidth+0x34>
10004c1e:	1dfb      	adds	r3, r7, #7
10004c20:	781b      	ldrb	r3, [r3, #0]
10004c22:	3b02      	subs	r3, #2
10004c24:	b2db      	uxtb	r3, r3
10004c26:	e002      	b.n	10004c2e <setAddressWidth+0x3a>
10004c28:	2301      	movs	r3, #1
10004c2a:	e000      	b.n	10004c2e <setAddressWidth+0x3a>
10004c2c:	2303      	movs	r3, #3
10004c2e:	4a0d      	ldr	r2, [pc, #52]	; (10004c64 <setAddressWidth+0x70>)
10004c30:	7053      	strb	r3, [r2, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004c32:	4b0d      	ldr	r3, [pc, #52]	; (10004c68 <setAddressWidth+0x74>)
10004c34:	1c18      	adds	r0, r3, #0
10004c36:	2100      	movs	r1, #0
10004c38:	f7ff febe 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004c3c:	490a      	ldr	r1, [pc, #40]	; (10004c68 <setAddressWidth+0x74>)
10004c3e:	4a09      	ldr	r2, [pc, #36]	; (10004c64 <setAddressWidth+0x70>)
10004c40:	4b0a      	ldr	r3, [pc, #40]	; (10004c6c <setAddressWidth+0x78>)
10004c42:	1c08      	adds	r0, r1, #0
10004c44:	1c11      	adds	r1, r2, #0
10004c46:	1c1a      	adds	r2, r3, #0
10004c48:	2302      	movs	r3, #2
10004c4a:	f7fd fd77 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004c4e:	4b06      	ldr	r3, [pc, #24]	; (10004c68 <setAddressWidth+0x74>)
10004c50:	1c18      	adds	r0, r3, #0
10004c52:	f7ff fec9 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004c56:	4b05      	ldr	r3, [pc, #20]	; (10004c6c <setAddressWidth+0x78>)
10004c58:	781a      	ldrb	r2, [r3, #0]
10004c5a:	4b05      	ldr	r3, [pc, #20]	; (10004c70 <setAddressWidth+0x7c>)
10004c5c:	701a      	strb	r2, [r3, #0]
}
10004c5e:	46bd      	mov	sp, r7
10004c60:	b002      	add	sp, #8
10004c62:	bd80      	pop	{r7, pc}
10004c64:	200006f0 	.word	0x200006f0
10004c68:	20000590 	.word	0x20000590
10004c6c:	200006cc 	.word	0x200006cc
10004c70:	20000710 	.word	0x20000710

10004c74 <setFeatures>:
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
	Status_reg = NRF24ReadData[0];
	return (NRF24ReadData[1] & 3) + 2; // 2 is added cu
}

void setFeatures(uint8_t val){
10004c74:	b580      	push	{r7, lr}
10004c76:	b082      	sub	sp, #8
10004c78:	af00      	add	r7, sp, #0
10004c7a:	1c02      	adds	r2, r0, #0
10004c7c:	1dfb      	adds	r3, r7, #7
10004c7e:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | FEATURE);
10004c80:	4b14      	ldr	r3, [pc, #80]	; (10004cd4 <setFeatures+0x60>)
10004c82:	223d      	movs	r2, #61	; 0x3d
10004c84:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = Max(Min(0,val),3);
10004c86:	1dfb      	adds	r3, r7, #7
10004c88:	781b      	ldrb	r3, [r3, #0]
10004c8a:	2b00      	cmp	r3, #0
10004c8c:	d105      	bne.n	10004c9a <setFeatures+0x26>
10004c8e:	1dfb      	adds	r3, r7, #7
10004c90:	781b      	ldrb	r3, [r3, #0]
10004c92:	2b03      	cmp	r3, #3
10004c94:	dd01      	ble.n	10004c9a <setFeatures+0x26>
10004c96:	2200      	movs	r2, #0
10004c98:	e000      	b.n	10004c9c <setFeatures+0x28>
10004c9a:	2203      	movs	r2, #3
10004c9c:	4b0d      	ldr	r3, [pc, #52]	; (10004cd4 <setFeatures+0x60>)
10004c9e:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004ca0:	4b0d      	ldr	r3, [pc, #52]	; (10004cd8 <setFeatures+0x64>)
10004ca2:	1c18      	adds	r0, r3, #0
10004ca4:	2100      	movs	r1, #0
10004ca6:	f7ff fe87 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004caa:	490b      	ldr	r1, [pc, #44]	; (10004cd8 <setFeatures+0x64>)
10004cac:	4a09      	ldr	r2, [pc, #36]	; (10004cd4 <setFeatures+0x60>)
10004cae:	4b0b      	ldr	r3, [pc, #44]	; (10004cdc <setFeatures+0x68>)
10004cb0:	1c08      	adds	r0, r1, #0
10004cb2:	1c11      	adds	r1, r2, #0
10004cb4:	1c1a      	adds	r2, r3, #0
10004cb6:	2302      	movs	r3, #2
10004cb8:	f7fd fd40 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004cbc:	4b06      	ldr	r3, [pc, #24]	; (10004cd8 <setFeatures+0x64>)
10004cbe:	1c18      	adds	r0, r3, #0
10004cc0:	f7ff fe92 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004cc4:	4b05      	ldr	r3, [pc, #20]	; (10004cdc <setFeatures+0x68>)
10004cc6:	781a      	ldrb	r2, [r3, #0]
10004cc8:	4b05      	ldr	r3, [pc, #20]	; (10004ce0 <setFeatures+0x6c>)
10004cca:	701a      	strb	r2, [r3, #0]
}
10004ccc:	46bd      	mov	sp, r7
10004cce:	b002      	add	sp, #8
10004cd0:	bd80      	pop	{r7, pc}
10004cd2:	46c0      	nop			; (mov r8, r8)
10004cd4:	200006f0 	.word	0x200006f0
10004cd8:	20000590 	.word	0x20000590
10004cdc:	200006cc 	.word	0x200006cc
10004ce0:	20000710 	.word	0x20000710

10004ce4 <enableAutoACK>:
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
	Status_reg = NRF24ReadData[0];
}


void enableAutoACK(){ // all pipes
10004ce4:	b580      	push	{r7, lr}
10004ce6:	af00      	add	r7, sp, #0
	NRF24SendData [0] = (W_REGISTER | ENAA);
10004ce8:	4b0e      	ldr	r3, [pc, #56]	; (10004d24 <enableAutoACK+0x40>)
10004cea:	2221      	movs	r2, #33	; 0x21
10004cec:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = 0x3F;
10004cee:	4b0d      	ldr	r3, [pc, #52]	; (10004d24 <enableAutoACK+0x40>)
10004cf0:	223f      	movs	r2, #63	; 0x3f
10004cf2:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004cf4:	4b0c      	ldr	r3, [pc, #48]	; (10004d28 <enableAutoACK+0x44>)
10004cf6:	1c18      	adds	r0, r3, #0
10004cf8:	2100      	movs	r1, #0
10004cfa:	f7ff fe5d 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004cfe:	490a      	ldr	r1, [pc, #40]	; (10004d28 <enableAutoACK+0x44>)
10004d00:	4a08      	ldr	r2, [pc, #32]	; (10004d24 <enableAutoACK+0x40>)
10004d02:	4b0a      	ldr	r3, [pc, #40]	; (10004d2c <enableAutoACK+0x48>)
10004d04:	1c08      	adds	r0, r1, #0
10004d06:	1c11      	adds	r1, r2, #0
10004d08:	1c1a      	adds	r2, r3, #0
10004d0a:	2302      	movs	r3, #2
10004d0c:	f7fd fd16 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004d10:	4b05      	ldr	r3, [pc, #20]	; (10004d28 <enableAutoACK+0x44>)
10004d12:	1c18      	adds	r0, r3, #0
10004d14:	f7ff fe68 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004d18:	4b04      	ldr	r3, [pc, #16]	; (10004d2c <enableAutoACK+0x48>)
10004d1a:	781a      	ldrb	r2, [r3, #0]
10004d1c:	4b04      	ldr	r3, [pc, #16]	; (10004d30 <enableAutoACK+0x4c>)
10004d1e:	701a      	strb	r2, [r3, #0]
}
10004d20:	46bd      	mov	sp, r7
10004d22:	bd80      	pop	{r7, pc}
10004d24:	200006f0 	.word	0x200006f0
10004d28:	20000590 	.word	0x20000590
10004d2c:	200006cc 	.word	0x200006cc
10004d30:	20000710 	.word	0x20000710

10004d34 <enableRXpipe>:


void enableRXpipe(uint8_t pipeNum){
10004d34:	b580      	push	{r7, lr}
10004d36:	b082      	sub	sp, #8
10004d38:	af00      	add	r7, sp, #0
10004d3a:	1c02      	adds	r2, r0, #0
10004d3c:	1dfb      	adds	r3, r7, #7
10004d3e:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | EN_RXADDR);
10004d40:	4b15      	ldr	r3, [pc, #84]	; (10004d98 <enableRXpipe+0x64>)
10004d42:	2222      	movs	r2, #34	; 0x22
10004d44:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = getRXpipesEnabled() | _DS(1,pipeNum);
10004d46:	f000 f82f 	bl	10004da8 <getRXpipesEnabled>
10004d4a:	1c03      	adds	r3, r0, #0
10004d4c:	b2d9      	uxtb	r1, r3
10004d4e:	1dfb      	adds	r3, r7, #7
10004d50:	781b      	ldrb	r3, [r3, #0]
10004d52:	2201      	movs	r2, #1
10004d54:	409a      	lsls	r2, r3
10004d56:	1c13      	adds	r3, r2, #0
10004d58:	b2db      	uxtb	r3, r3
10004d5a:	1c0a      	adds	r2, r1, #0
10004d5c:	4313      	orrs	r3, r2
10004d5e:	b2db      	uxtb	r3, r3
10004d60:	b2da      	uxtb	r2, r3
10004d62:	4b0d      	ldr	r3, [pc, #52]	; (10004d98 <enableRXpipe+0x64>)
10004d64:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004d66:	4b0d      	ldr	r3, [pc, #52]	; (10004d9c <enableRXpipe+0x68>)
10004d68:	1c18      	adds	r0, r3, #0
10004d6a:	2100      	movs	r1, #0
10004d6c:	f7ff fe24 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004d70:	490a      	ldr	r1, [pc, #40]	; (10004d9c <enableRXpipe+0x68>)
10004d72:	4a09      	ldr	r2, [pc, #36]	; (10004d98 <enableRXpipe+0x64>)
10004d74:	4b0a      	ldr	r3, [pc, #40]	; (10004da0 <enableRXpipe+0x6c>)
10004d76:	1c08      	adds	r0, r1, #0
10004d78:	1c11      	adds	r1, r2, #0
10004d7a:	1c1a      	adds	r2, r3, #0
10004d7c:	2302      	movs	r3, #2
10004d7e:	f7fd fcdd 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004d82:	4b06      	ldr	r3, [pc, #24]	; (10004d9c <enableRXpipe+0x68>)
10004d84:	1c18      	adds	r0, r3, #0
10004d86:	f7ff fe2f 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004d8a:	4b05      	ldr	r3, [pc, #20]	; (10004da0 <enableRXpipe+0x6c>)
10004d8c:	781a      	ldrb	r2, [r3, #0]
10004d8e:	4b05      	ldr	r3, [pc, #20]	; (10004da4 <enableRXpipe+0x70>)
10004d90:	701a      	strb	r2, [r3, #0]
}
10004d92:	46bd      	mov	sp, r7
10004d94:	b002      	add	sp, #8
10004d96:	bd80      	pop	{r7, pc}
10004d98:	200006f0 	.word	0x200006f0
10004d9c:	20000590 	.word	0x20000590
10004da0:	200006cc 	.word	0x200006cc
10004da4:	20000710 	.word	0x20000710

10004da8 <getRXpipesEnabled>:
uint8_t getRXpipesEnabled(void){
10004da8:	b580      	push	{r7, lr}
10004daa:	af00      	add	r7, sp, #0
	NRF24SendData [0] = (R_REGISTER | EN_RXADDR);
10004dac:	4b10      	ldr	r3, [pc, #64]	; (10004df0 <getRXpipesEnabled+0x48>)
10004dae:	2202      	movs	r2, #2
10004db0:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = RF24_NOP;
10004db2:	4b0f      	ldr	r3, [pc, #60]	; (10004df0 <getRXpipesEnabled+0x48>)
10004db4:	22ff      	movs	r2, #255	; 0xff
10004db6:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004db8:	4b0e      	ldr	r3, [pc, #56]	; (10004df4 <getRXpipesEnabled+0x4c>)
10004dba:	1c18      	adds	r0, r3, #0
10004dbc:	2100      	movs	r1, #0
10004dbe:	f7ff fdfb 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004dc2:	490c      	ldr	r1, [pc, #48]	; (10004df4 <getRXpipesEnabled+0x4c>)
10004dc4:	4a0a      	ldr	r2, [pc, #40]	; (10004df0 <getRXpipesEnabled+0x48>)
10004dc6:	4b0c      	ldr	r3, [pc, #48]	; (10004df8 <getRXpipesEnabled+0x50>)
10004dc8:	1c08      	adds	r0, r1, #0
10004dca:	1c11      	adds	r1, r2, #0
10004dcc:	1c1a      	adds	r2, r3, #0
10004dce:	2302      	movs	r3, #2
10004dd0:	f7fd fcb4 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004dd4:	4b07      	ldr	r3, [pc, #28]	; (10004df4 <getRXpipesEnabled+0x4c>)
10004dd6:	1c18      	adds	r0, r3, #0
10004dd8:	f7ff fe06 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004ddc:	4b06      	ldr	r3, [pc, #24]	; (10004df8 <getRXpipesEnabled+0x50>)
10004dde:	781a      	ldrb	r2, [r3, #0]
10004de0:	4b06      	ldr	r3, [pc, #24]	; (10004dfc <getRXpipesEnabled+0x54>)
10004de2:	701a      	strb	r2, [r3, #0]
	return NRF24ReadData[1];
10004de4:	4b04      	ldr	r3, [pc, #16]	; (10004df8 <getRXpipesEnabled+0x50>)
10004de6:	785b      	ldrb	r3, [r3, #1]
}
10004de8:	1c18      	adds	r0, r3, #0
10004dea:	46bd      	mov	sp, r7
10004dec:	bd80      	pop	{r7, pc}
10004dee:	46c0      	nop			; (mov r8, r8)
10004df0:	200006f0 	.word	0x200006f0
10004df4:	20000590 	.word	0x20000590
10004df8:	200006cc 	.word	0x200006cc
10004dfc:	20000710 	.word	0x20000710

10004e00 <setPayloadSize>:
		SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
		SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
		Status_reg = NRF24ReadData[0];
	}
}
void setPayloadSize(uint8_t size,uint8_t pipeNum){
10004e00:	b580      	push	{r7, lr}
10004e02:	b082      	sub	sp, #8
10004e04:	af00      	add	r7, sp, #0
10004e06:	1c02      	adds	r2, r0, #0
10004e08:	1dfb      	adds	r3, r7, #7
10004e0a:	701a      	strb	r2, [r3, #0]
10004e0c:	1dbb      	adds	r3, r7, #6
10004e0e:	1c0a      	adds	r2, r1, #0
10004e10:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | (RX_PW_P0 + Min(pipeNum,5)));
10004e12:	1dbb      	adds	r3, r7, #6
10004e14:	781b      	ldrb	r3, [r3, #0]
10004e16:	2b04      	cmp	r3, #4
10004e18:	d80a      	bhi.n	10004e30 <setPayloadSize+0x30>
10004e1a:	1dbb      	adds	r3, r7, #6
10004e1c:	781b      	ldrb	r3, [r3, #0]
10004e1e:	3311      	adds	r3, #17
10004e20:	b2db      	uxtb	r3, r3
10004e22:	b2db      	uxtb	r3, r3
10004e24:	1c1a      	adds	r2, r3, #0
10004e26:	2320      	movs	r3, #32
10004e28:	4313      	orrs	r3, r2
10004e2a:	b2db      	uxtb	r3, r3
10004e2c:	b2da      	uxtb	r2, r3
10004e2e:	e000      	b.n	10004e32 <setPayloadSize+0x32>
10004e30:	2236      	movs	r2, #54	; 0x36
10004e32:	4b0f      	ldr	r3, [pc, #60]	; (10004e70 <setPayloadSize+0x70>)
10004e34:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = size;
10004e36:	4b0e      	ldr	r3, [pc, #56]	; (10004e70 <setPayloadSize+0x70>)
10004e38:	1dfa      	adds	r2, r7, #7
10004e3a:	7812      	ldrb	r2, [r2, #0]
10004e3c:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004e3e:	4b0d      	ldr	r3, [pc, #52]	; (10004e74 <setPayloadSize+0x74>)
10004e40:	1c18      	adds	r0, r3, #0
10004e42:	2100      	movs	r1, #0
10004e44:	f7ff fdb8 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004e48:	490a      	ldr	r1, [pc, #40]	; (10004e74 <setPayloadSize+0x74>)
10004e4a:	4a09      	ldr	r2, [pc, #36]	; (10004e70 <setPayloadSize+0x70>)
10004e4c:	4b0a      	ldr	r3, [pc, #40]	; (10004e78 <setPayloadSize+0x78>)
10004e4e:	1c08      	adds	r0, r1, #0
10004e50:	1c11      	adds	r1, r2, #0
10004e52:	1c1a      	adds	r2, r3, #0
10004e54:	2302      	movs	r3, #2
10004e56:	f7fd fc71 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004e5a:	4b06      	ldr	r3, [pc, #24]	; (10004e74 <setPayloadSize+0x74>)
10004e5c:	1c18      	adds	r0, r3, #0
10004e5e:	f7ff fdc3 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004e62:	4b05      	ldr	r3, [pc, #20]	; (10004e78 <setPayloadSize+0x78>)
10004e64:	781a      	ldrb	r2, [r3, #0]
10004e66:	4b05      	ldr	r3, [pc, #20]	; (10004e7c <setPayloadSize+0x7c>)
10004e68:	701a      	strb	r2, [r3, #0]
}
10004e6a:	46bd      	mov	sp, r7
10004e6c:	b002      	add	sp, #8
10004e6e:	bd80      	pop	{r7, pc}
10004e70:	200006f0 	.word	0x200006f0
10004e74:	20000590 	.word	0x20000590
10004e78:	200006cc 	.word	0x200006cc
10004e7c:	20000710 	.word	0x20000710

10004e80 <setRxPipeAddress>:

void setRxPipeAddress(uint8_t pipe ,char* address, uint8_t size){
10004e80:	b590      	push	{r4, r7, lr}
10004e82:	b085      	sub	sp, #20
10004e84:	af00      	add	r7, sp, #0
10004e86:	6039      	str	r1, [r7, #0]
10004e88:	1c11      	adds	r1, r2, #0
10004e8a:	1dfb      	adds	r3, r7, #7
10004e8c:	1c02      	adds	r2, r0, #0
10004e8e:	701a      	strb	r2, [r3, #0]
10004e90:	1dbb      	adds	r3, r7, #6
10004e92:	1c0a      	adds	r2, r1, #0
10004e94:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | (RX_ADDR_P0 + Min(pipe,5)));
10004e96:	1dfb      	adds	r3, r7, #7
10004e98:	781b      	ldrb	r3, [r3, #0]
10004e9a:	2b04      	cmp	r3, #4
10004e9c:	d80a      	bhi.n	10004eb4 <setRxPipeAddress+0x34>
10004e9e:	1dfb      	adds	r3, r7, #7
10004ea0:	781b      	ldrb	r3, [r3, #0]
10004ea2:	330a      	adds	r3, #10
10004ea4:	b2db      	uxtb	r3, r3
10004ea6:	b2db      	uxtb	r3, r3
10004ea8:	1c1a      	adds	r2, r3, #0
10004eaa:	2320      	movs	r3, #32
10004eac:	4313      	orrs	r3, r2
10004eae:	b2db      	uxtb	r3, r3
10004eb0:	b2da      	uxtb	r2, r3
10004eb2:	e000      	b.n	10004eb6 <setRxPipeAddress+0x36>
10004eb4:	222f      	movs	r2, #47	; 0x2f
10004eb6:	4b1f      	ldr	r3, [pc, #124]	; (10004f34 <setRxPipeAddress+0xb4>)
10004eb8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++)
10004eba:	230f      	movs	r3, #15
10004ebc:	18fb      	adds	r3, r7, r3
10004ebe:	2200      	movs	r2, #0
10004ec0:	701a      	strb	r2, [r3, #0]
10004ec2:	e012      	b.n	10004eea <setRxPipeAddress+0x6a>
		NRF24SendData [1+i] = address[i];
10004ec4:	230f      	movs	r3, #15
10004ec6:	18fb      	adds	r3, r7, r3
10004ec8:	781b      	ldrb	r3, [r3, #0]
10004eca:	3301      	adds	r3, #1
10004ecc:	220f      	movs	r2, #15
10004ece:	18ba      	adds	r2, r7, r2
10004ed0:	7812      	ldrb	r2, [r2, #0]
10004ed2:	6839      	ldr	r1, [r7, #0]
10004ed4:	188a      	adds	r2, r1, r2
10004ed6:	7811      	ldrb	r1, [r2, #0]
10004ed8:	4a16      	ldr	r2, [pc, #88]	; (10004f34 <setRxPipeAddress+0xb4>)
10004eda:	54d1      	strb	r1, [r2, r3]
	Status_reg = NRF24ReadData[0];
}

void setRxPipeAddress(uint8_t pipe ,char* address, uint8_t size){
	NRF24SendData [0] = (W_REGISTER | (RX_ADDR_P0 + Min(pipe,5)));
	for(uint8_t i = 0; i < size; i++)
10004edc:	230f      	movs	r3, #15
10004ede:	18fb      	adds	r3, r7, r3
10004ee0:	781a      	ldrb	r2, [r3, #0]
10004ee2:	230f      	movs	r3, #15
10004ee4:	18fb      	adds	r3, r7, r3
10004ee6:	3201      	adds	r2, #1
10004ee8:	701a      	strb	r2, [r3, #0]
10004eea:	230f      	movs	r3, #15
10004eec:	18fa      	adds	r2, r7, r3
10004eee:	1dbb      	adds	r3, r7, #6
10004ef0:	7812      	ldrb	r2, [r2, #0]
10004ef2:	781b      	ldrb	r3, [r3, #0]
10004ef4:	429a      	cmp	r2, r3
10004ef6:	d3e5      	bcc.n	10004ec4 <setRxPipeAddress+0x44>
		NRF24SendData [1+i] = address[i];
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004ef8:	4b0f      	ldr	r3, [pc, #60]	; (10004f38 <setRxPipeAddress+0xb8>)
10004efa:	1c18      	adds	r0, r3, #0
10004efc:	2100      	movs	r1, #0
10004efe:	f7ff fd5b 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, size + 1);
10004f02:	1dbb      	adds	r3, r7, #6
10004f04:	781b      	ldrb	r3, [r3, #0]
10004f06:	3301      	adds	r3, #1
10004f08:	1c1c      	adds	r4, r3, #0
10004f0a:	490b      	ldr	r1, [pc, #44]	; (10004f38 <setRxPipeAddress+0xb8>)
10004f0c:	4a09      	ldr	r2, [pc, #36]	; (10004f34 <setRxPipeAddress+0xb4>)
10004f0e:	4b0b      	ldr	r3, [pc, #44]	; (10004f3c <setRxPipeAddress+0xbc>)
10004f10:	1c08      	adds	r0, r1, #0
10004f12:	1c11      	adds	r1, r2, #0
10004f14:	1c1a      	adds	r2, r3, #0
10004f16:	1c23      	adds	r3, r4, #0
10004f18:	f7fd fc10 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004f1c:	4b06      	ldr	r3, [pc, #24]	; (10004f38 <setRxPipeAddress+0xb8>)
10004f1e:	1c18      	adds	r0, r3, #0
10004f20:	f7ff fd62 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004f24:	4b05      	ldr	r3, [pc, #20]	; (10004f3c <setRxPipeAddress+0xbc>)
10004f26:	781a      	ldrb	r2, [r3, #0]
10004f28:	4b05      	ldr	r3, [pc, #20]	; (10004f40 <setRxPipeAddress+0xc0>)
10004f2a:	701a      	strb	r2, [r3, #0]
}
10004f2c:	46bd      	mov	sp, r7
10004f2e:	b005      	add	sp, #20
10004f30:	bd90      	pop	{r4, r7, pc}
10004f32:	46c0      	nop			; (mov r8, r8)
10004f34:	200006f0 	.word	0x200006f0
10004f38:	20000590 	.word	0x20000590
10004f3c:	200006cc 	.word	0x200006cc
10004f40:	20000710 	.word	0x20000710

10004f44 <setTxPipeAddress>:
void setTxPipeAddress(char* address, uint8_t size){
10004f44:	b590      	push	{r4, r7, lr}
10004f46:	b085      	sub	sp, #20
10004f48:	af00      	add	r7, sp, #0
10004f4a:	6078      	str	r0, [r7, #4]
10004f4c:	1c0a      	adds	r2, r1, #0
10004f4e:	1cfb      	adds	r3, r7, #3
10004f50:	701a      	strb	r2, [r3, #0]
	NRF24SendData [0] = (W_REGISTER | TXADDR);
10004f52:	4b1f      	ldr	r3, [pc, #124]	; (10004fd0 <setTxPipeAddress+0x8c>)
10004f54:	2230      	movs	r2, #48	; 0x30
10004f56:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++)
10004f58:	230f      	movs	r3, #15
10004f5a:	18fb      	adds	r3, r7, r3
10004f5c:	2200      	movs	r2, #0
10004f5e:	701a      	strb	r2, [r3, #0]
10004f60:	e012      	b.n	10004f88 <setTxPipeAddress+0x44>
		NRF24SendData [1+i] = address[i];
10004f62:	230f      	movs	r3, #15
10004f64:	18fb      	adds	r3, r7, r3
10004f66:	781b      	ldrb	r3, [r3, #0]
10004f68:	3301      	adds	r3, #1
10004f6a:	220f      	movs	r2, #15
10004f6c:	18ba      	adds	r2, r7, r2
10004f6e:	7812      	ldrb	r2, [r2, #0]
10004f70:	6879      	ldr	r1, [r7, #4]
10004f72:	188a      	adds	r2, r1, r2
10004f74:	7811      	ldrb	r1, [r2, #0]
10004f76:	4a16      	ldr	r2, [pc, #88]	; (10004fd0 <setTxPipeAddress+0x8c>)
10004f78:	54d1      	strb	r1, [r2, r3]
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
	Status_reg = NRF24ReadData[0];
}
void setTxPipeAddress(char* address, uint8_t size){
	NRF24SendData [0] = (W_REGISTER | TXADDR);
	for(uint8_t i = 0; i < size; i++)
10004f7a:	230f      	movs	r3, #15
10004f7c:	18fb      	adds	r3, r7, r3
10004f7e:	781a      	ldrb	r2, [r3, #0]
10004f80:	230f      	movs	r3, #15
10004f82:	18fb      	adds	r3, r7, r3
10004f84:	3201      	adds	r2, #1
10004f86:	701a      	strb	r2, [r3, #0]
10004f88:	230f      	movs	r3, #15
10004f8a:	18fa      	adds	r2, r7, r3
10004f8c:	1cfb      	adds	r3, r7, #3
10004f8e:	7812      	ldrb	r2, [r2, #0]
10004f90:	781b      	ldrb	r3, [r3, #0]
10004f92:	429a      	cmp	r2, r3
10004f94:	d3e5      	bcc.n	10004f62 <setTxPipeAddress+0x1e>
		NRF24SendData [1+i] = address[i];
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004f96:	4b0f      	ldr	r3, [pc, #60]	; (10004fd4 <setTxPipeAddress+0x90>)
10004f98:	1c18      	adds	r0, r3, #0
10004f9a:	2100      	movs	r1, #0
10004f9c:	f7ff fd0c 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, size + 1);
10004fa0:	1cfb      	adds	r3, r7, #3
10004fa2:	781b      	ldrb	r3, [r3, #0]
10004fa4:	3301      	adds	r3, #1
10004fa6:	1c1c      	adds	r4, r3, #0
10004fa8:	490a      	ldr	r1, [pc, #40]	; (10004fd4 <setTxPipeAddress+0x90>)
10004faa:	4a09      	ldr	r2, [pc, #36]	; (10004fd0 <setTxPipeAddress+0x8c>)
10004fac:	4b0a      	ldr	r3, [pc, #40]	; (10004fd8 <setTxPipeAddress+0x94>)
10004fae:	1c08      	adds	r0, r1, #0
10004fb0:	1c11      	adds	r1, r2, #0
10004fb2:	1c1a      	adds	r2, r3, #0
10004fb4:	1c23      	adds	r3, r4, #0
10004fb6:	f7fd fbc1 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10004fba:	4b06      	ldr	r3, [pc, #24]	; (10004fd4 <setTxPipeAddress+0x90>)
10004fbc:	1c18      	adds	r0, r3, #0
10004fbe:	f7ff fd13 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10004fc2:	4b05      	ldr	r3, [pc, #20]	; (10004fd8 <setTxPipeAddress+0x94>)
10004fc4:	781a      	ldrb	r2, [r3, #0]
10004fc6:	4b05      	ldr	r3, [pc, #20]	; (10004fdc <setTxPipeAddress+0x98>)
10004fc8:	701a      	strb	r2, [r3, #0]
}
10004fca:	46bd      	mov	sp, r7
10004fcc:	b005      	add	sp, #20
10004fce:	bd90      	pop	{r4, r7, pc}
10004fd0:	200006f0 	.word	0x200006f0
10004fd4:	20000590 	.word	0x20000590
10004fd8:	200006cc 	.word	0x200006cc
10004fdc:	20000710 	.word	0x20000710

10004fe0 <resetStatus>:

void resetStatus(){
10004fe0:	b580      	push	{r7, lr}
10004fe2:	af00      	add	r7, sp, #0
	NRF24SendData [0] = (W_REGISTER | NRF_STATUS);
10004fe4:	4b0e      	ldr	r3, [pc, #56]	; (10005020 <resetStatus+0x40>)
10004fe6:	2227      	movs	r2, #39	; 0x27
10004fe8:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = 0b01111110;
10004fea:	4b0d      	ldr	r3, [pc, #52]	; (10005020 <resetStatus+0x40>)
10004fec:	227e      	movs	r2, #126	; 0x7e
10004fee:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10004ff0:	4b0c      	ldr	r3, [pc, #48]	; (10005024 <resetStatus+0x44>)
10004ff2:	1c18      	adds	r0, r3, #0
10004ff4:	2100      	movs	r1, #0
10004ff6:	f7ff fcdf 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10004ffa:	490a      	ldr	r1, [pc, #40]	; (10005024 <resetStatus+0x44>)
10004ffc:	4a08      	ldr	r2, [pc, #32]	; (10005020 <resetStatus+0x40>)
10004ffe:	4b0a      	ldr	r3, [pc, #40]	; (10005028 <resetStatus+0x48>)
10005000:	1c08      	adds	r0, r1, #0
10005002:	1c11      	adds	r1, r2, #0
10005004:	1c1a      	adds	r2, r3, #0
10005006:	2302      	movs	r3, #2
10005008:	f7fd fb98 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
1000500c:	4b05      	ldr	r3, [pc, #20]	; (10005024 <resetStatus+0x44>)
1000500e:	1c18      	adds	r0, r3, #0
10005010:	f7ff fcea 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10005014:	4b04      	ldr	r3, [pc, #16]	; (10005028 <resetStatus+0x48>)
10005016:	781a      	ldrb	r2, [r3, #0]
10005018:	4b04      	ldr	r3, [pc, #16]	; (1000502c <resetStatus+0x4c>)
1000501a:	701a      	strb	r2, [r3, #0]
}
1000501c:	46bd      	mov	sp, r7
1000501e:	bd80      	pop	{r7, pc}
10005020:	200006f0 	.word	0x200006f0
10005024:	20000590 	.word	0x20000590
10005028:	200006cc 	.word	0x200006cc
1000502c:	20000710 	.word	0x20000710

10005030 <flushTX>:
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
	Status_reg = NRF24ReadData[0];
	return _DSn(NRF24ReadData[1],4) & 1;
}

void flushTX(){
10005030:	b580      	push	{r7, lr}
10005032:	af00      	add	r7, sp, #0
	NRF24SendData [0] = (R_REGISTER | FLUSH_TX);
10005034:	4b0e      	ldr	r3, [pc, #56]	; (10005070 <flushTX+0x40>)
10005036:	22e1      	movs	r2, #225	; 0xe1
10005038:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = RF24_NOP;
1000503a:	4b0d      	ldr	r3, [pc, #52]	; (10005070 <flushTX+0x40>)
1000503c:	22ff      	movs	r2, #255	; 0xff
1000503e:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10005040:	4b0c      	ldr	r3, [pc, #48]	; (10005074 <flushTX+0x44>)
10005042:	1c18      	adds	r0, r3, #0
10005044:	2100      	movs	r1, #0
10005046:	f7ff fcb7 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
1000504a:	490a      	ldr	r1, [pc, #40]	; (10005074 <flushTX+0x44>)
1000504c:	4a08      	ldr	r2, [pc, #32]	; (10005070 <flushTX+0x40>)
1000504e:	4b0a      	ldr	r3, [pc, #40]	; (10005078 <flushTX+0x48>)
10005050:	1c08      	adds	r0, r1, #0
10005052:	1c11      	adds	r1, r2, #0
10005054:	1c1a      	adds	r2, r3, #0
10005056:	2302      	movs	r3, #2
10005058:	f7fd fb70 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
1000505c:	4b05      	ldr	r3, [pc, #20]	; (10005074 <flushTX+0x44>)
1000505e:	1c18      	adds	r0, r3, #0
10005060:	f7ff fcc2 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10005064:	4b04      	ldr	r3, [pc, #16]	; (10005078 <flushTX+0x48>)
10005066:	781a      	ldrb	r2, [r3, #0]
10005068:	4b04      	ldr	r3, [pc, #16]	; (1000507c <flushTX+0x4c>)
1000506a:	701a      	strb	r2, [r3, #0]
}
1000506c:	46bd      	mov	sp, r7
1000506e:	bd80      	pop	{r7, pc}
10005070:	200006f0 	.word	0x200006f0
10005074:	20000590 	.word	0x20000590
10005078:	200006cc 	.word	0x200006cc
1000507c:	20000710 	.word	0x20000710

10005080 <flushRX>:
void flushRX(){
10005080:	b580      	push	{r7, lr}
10005082:	af00      	add	r7, sp, #0
	NRF24SendData [0] = (R_REGISTER | FLUSH_RX);
10005084:	4b0e      	ldr	r3, [pc, #56]	; (100050c0 <flushRX+0x40>)
10005086:	22e2      	movs	r2, #226	; 0xe2
10005088:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = RF24_NOP;
1000508a:	4b0d      	ldr	r3, [pc, #52]	; (100050c0 <flushRX+0x40>)
1000508c:	22ff      	movs	r2, #255	; 0xff
1000508e:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10005090:	4b0c      	ldr	r3, [pc, #48]	; (100050c4 <flushRX+0x44>)
10005092:	1c18      	adds	r0, r3, #0
10005094:	2100      	movs	r1, #0
10005096:	f7ff fc8f 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
1000509a:	490a      	ldr	r1, [pc, #40]	; (100050c4 <flushRX+0x44>)
1000509c:	4a08      	ldr	r2, [pc, #32]	; (100050c0 <flushRX+0x40>)
1000509e:	4b0a      	ldr	r3, [pc, #40]	; (100050c8 <flushRX+0x48>)
100050a0:	1c08      	adds	r0, r1, #0
100050a2:	1c11      	adds	r1, r2, #0
100050a4:	1c1a      	adds	r2, r3, #0
100050a6:	2302      	movs	r3, #2
100050a8:	f7fd fb48 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
100050ac:	4b05      	ldr	r3, [pc, #20]	; (100050c4 <flushRX+0x44>)
100050ae:	1c18      	adds	r0, r3, #0
100050b0:	f7ff fc9a 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
100050b4:	4b04      	ldr	r3, [pc, #16]	; (100050c8 <flushRX+0x48>)
100050b6:	781a      	ldrb	r2, [r3, #0]
100050b8:	4b04      	ldr	r3, [pc, #16]	; (100050cc <flushRX+0x4c>)
100050ba:	701a      	strb	r2, [r3, #0]
}
100050bc:	46bd      	mov	sp, r7
100050be:	bd80      	pop	{r7, pc}
100050c0:	200006f0 	.word	0x200006f0
100050c4:	20000590 	.word	0x20000590
100050c8:	200006cc 	.word	0x200006cc
100050cc:	20000710 	.word	0x20000710

100050d0 <PowerUP>:

void PowerUP(void){
100050d0:	b580      	push	{r7, lr}
100050d2:	b082      	sub	sp, #8
100050d4:	af00      	add	r7, sp, #0
	NRF24SendData [0] = (W_REGISTER | NRF_CONFIG);
100050d6:	4b14      	ldr	r3, [pc, #80]	; (10005128 <PowerUP+0x58>)
100050d8:	2220      	movs	r2, #32
100050da:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = _BV(MASK_RX_DR) | _BV(MASK_TX_DS) | _BV(MASK_MAX_RT) | _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | ~_BV(PRIM_RX) ;
100050dc:	4b12      	ldr	r3, [pc, #72]	; (10005128 <PowerUP+0x58>)
100050de:	22fe      	movs	r2, #254	; 0xfe
100050e0:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
100050e2:	4b12      	ldr	r3, [pc, #72]	; (1000512c <PowerUP+0x5c>)
100050e4:	1c18      	adds	r0, r3, #0
100050e6:	2100      	movs	r1, #0
100050e8:	f7ff fc66 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
100050ec:	490f      	ldr	r1, [pc, #60]	; (1000512c <PowerUP+0x5c>)
100050ee:	4a0e      	ldr	r2, [pc, #56]	; (10005128 <PowerUP+0x58>)
100050f0:	4b0f      	ldr	r3, [pc, #60]	; (10005130 <PowerUP+0x60>)
100050f2:	1c08      	adds	r0, r1, #0
100050f4:	1c11      	adds	r1, r2, #0
100050f6:	1c1a      	adds	r2, r3, #0
100050f8:	2302      	movs	r3, #2
100050fa:	f7fd fb1f 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
100050fe:	4b0b      	ldr	r3, [pc, #44]	; (1000512c <PowerUP+0x5c>)
10005100:	1c18      	adds	r0, r3, #0
10005102:	f7ff fc71 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
10005106:	4b0a      	ldr	r3, [pc, #40]	; (10005130 <PowerUP+0x60>)
10005108:	781a      	ldrb	r2, [r3, #0]
1000510a:	4b0a      	ldr	r3, [pc, #40]	; (10005134 <PowerUP+0x64>)
1000510c:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 0x3FFF;i++); //delay
1000510e:	2300      	movs	r3, #0
10005110:	607b      	str	r3, [r7, #4]
10005112:	e002      	b.n	1000511a <PowerUP+0x4a>
10005114:	687b      	ldr	r3, [r7, #4]
10005116:	3301      	adds	r3, #1
10005118:	607b      	str	r3, [r7, #4]
1000511a:	687b      	ldr	r3, [r7, #4]
1000511c:	4a06      	ldr	r2, [pc, #24]	; (10005138 <PowerUP+0x68>)
1000511e:	4293      	cmp	r3, r2
10005120:	ddf8      	ble.n	10005114 <PowerUP+0x44>
}
10005122:	46bd      	mov	sp, r7
10005124:	b002      	add	sp, #8
10005126:	bd80      	pop	{r7, pc}
10005128:	200006f0 	.word	0x200006f0
1000512c:	20000590 	.word	0x20000590
10005130:	200006cc 	.word	0x200006cc
10005134:	20000710 	.word	0x20000710
10005138:	00003ffe 	.word	0x00003ffe

1000513c <TX_Mode>:
void TX_Mode(void){
1000513c:	b580      	push	{r7, lr}
1000513e:	af00      	add	r7, sp, #0
	NRF24SendData [0] = (W_REGISTER | NRF_CONFIG);
10005140:	4b11      	ldr	r3, [pc, #68]	; (10005188 <TX_Mode+0x4c>)
10005142:	2220      	movs	r2, #32
10005144:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = getConfigRegister() | _BV(PRIM_RX) ;
10005146:	f000 f827 	bl	10005198 <getConfigRegister>
1000514a:	1c03      	adds	r3, r0, #0
1000514c:	1c1a      	adds	r2, r3, #0
1000514e:	2301      	movs	r3, #1
10005150:	4313      	orrs	r3, r2
10005152:	b2da      	uxtb	r2, r3
10005154:	4b0c      	ldr	r3, [pc, #48]	; (10005188 <TX_Mode+0x4c>)
10005156:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
10005158:	4b0c      	ldr	r3, [pc, #48]	; (1000518c <TX_Mode+0x50>)
1000515a:	1c18      	adds	r0, r3, #0
1000515c:	2100      	movs	r1, #0
1000515e:	f7ff fc2b 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
10005162:	490a      	ldr	r1, [pc, #40]	; (1000518c <TX_Mode+0x50>)
10005164:	4a08      	ldr	r2, [pc, #32]	; (10005188 <TX_Mode+0x4c>)
10005166:	4b0a      	ldr	r3, [pc, #40]	; (10005190 <TX_Mode+0x54>)
10005168:	1c08      	adds	r0, r1, #0
1000516a:	1c11      	adds	r1, r2, #0
1000516c:	1c1a      	adds	r2, r3, #0
1000516e:	2302      	movs	r3, #2
10005170:	f7fd fae4 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
10005174:	4b05      	ldr	r3, [pc, #20]	; (1000518c <TX_Mode+0x50>)
10005176:	1c18      	adds	r0, r3, #0
10005178:	f7ff fc36 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
1000517c:	4b04      	ldr	r3, [pc, #16]	; (10005190 <TX_Mode+0x54>)
1000517e:	781a      	ldrb	r2, [r3, #0]
10005180:	4b04      	ldr	r3, [pc, #16]	; (10005194 <TX_Mode+0x58>)
10005182:	701a      	strb	r2, [r3, #0]
}
10005184:	46bd      	mov	sp, r7
10005186:	bd80      	pop	{r7, pc}
10005188:	200006f0 	.word	0x200006f0
1000518c:	20000590 	.word	0x20000590
10005190:	200006cc 	.word	0x200006cc
10005194:	20000710 	.word	0x20000710

10005198 <getConfigRegister>:
uint8_t getConfigRegister(void){
10005198:	b580      	push	{r7, lr}
1000519a:	af00      	add	r7, sp, #0
	NRF24SendData [0] = (R_REGISTER | NRF_CONFIG);
1000519c:	4b12      	ldr	r3, [pc, #72]	; (100051e8 <getConfigRegister+0x50>)
1000519e:	2200      	movs	r2, #0
100051a0:	701a      	strb	r2, [r3, #0]
	NRF24SendData [1] = RF24_NOP;
100051a2:	4b11      	ldr	r3, [pc, #68]	; (100051e8 <getConfigRegister+0x50>)
100051a4:	22ff      	movs	r2, #255	; 0xff
100051a6:	705a      	strb	r2, [r3, #1]
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
100051a8:	4b10      	ldr	r3, [pc, #64]	; (100051ec <getConfigRegister+0x54>)
100051aa:	1c18      	adds	r0, r3, #0
100051ac:	2100      	movs	r1, #0
100051ae:	f7ff fc03 	bl	100049b8 <SPI_MASTER_EnableSlaveSelectSignal>
	SPI_MASTER_Transfer(&SPI_MASTER_0, NRF24SendData, NRF24ReadData, 2);
100051b2:	490e      	ldr	r1, [pc, #56]	; (100051ec <getConfigRegister+0x54>)
100051b4:	4a0c      	ldr	r2, [pc, #48]	; (100051e8 <getConfigRegister+0x50>)
100051b6:	4b0e      	ldr	r3, [pc, #56]	; (100051f0 <getConfigRegister+0x58>)
100051b8:	1c08      	adds	r0, r1, #0
100051ba:	1c11      	adds	r1, r2, #0
100051bc:	1c1a      	adds	r2, r3, #0
100051be:	2302      	movs	r3, #2
100051c0:	f7fd fabc 	bl	1000273c <SPI_MASTER_Transfer>
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
100051c4:	4b09      	ldr	r3, [pc, #36]	; (100051ec <getConfigRegister+0x54>)
100051c6:	1c18      	adds	r0, r3, #0
100051c8:	f7ff fc0e 	bl	100049e8 <SPI_MASTER_DisableSlaveSelectSignal>
	Status_reg = NRF24ReadData[0];
100051cc:	4b08      	ldr	r3, [pc, #32]	; (100051f0 <getConfigRegister+0x58>)
100051ce:	781a      	ldrb	r2, [r3, #0]
100051d0:	4b08      	ldr	r3, [pc, #32]	; (100051f4 <getConfigRegister+0x5c>)
100051d2:	701a      	strb	r2, [r3, #0]
	Config_Regiter = NRF24ReadData[1];
100051d4:	4b06      	ldr	r3, [pc, #24]	; (100051f0 <getConfigRegister+0x58>)
100051d6:	785a      	ldrb	r2, [r3, #1]
100051d8:	4b07      	ldr	r3, [pc, #28]	; (100051f8 <getConfigRegister+0x60>)
100051da:	701a      	strb	r2, [r3, #0]
	return Config_Regiter;
100051dc:	4b06      	ldr	r3, [pc, #24]	; (100051f8 <getConfigRegister+0x60>)
100051de:	781b      	ldrb	r3, [r3, #0]
}
100051e0:	1c18      	adds	r0, r3, #0
100051e2:	46bd      	mov	sp, r7
100051e4:	bd80      	pop	{r7, pc}
100051e6:	46c0      	nop			; (mov r8, r8)
100051e8:	200006f0 	.word	0x200006f0
100051ec:	20000590 	.word	0x20000590
100051f0:	200006cc 	.word	0x200006cc
100051f4:	20000710 	.word	0x20000710
100051f8:	200006ec 	.word	0x200006ec

100051fc <__libc_init_array>:
100051fc:	4b0e      	ldr	r3, [pc, #56]	; (10005238 <__libc_init_array+0x3c>)
100051fe:	b570      	push	{r4, r5, r6, lr}
10005200:	2500      	movs	r5, #0
10005202:	1c1e      	adds	r6, r3, #0
10005204:	4c0d      	ldr	r4, [pc, #52]	; (1000523c <__libc_init_array+0x40>)
10005206:	1ae4      	subs	r4, r4, r3
10005208:	10a4      	asrs	r4, r4, #2
1000520a:	42a5      	cmp	r5, r4
1000520c:	d004      	beq.n	10005218 <__libc_init_array+0x1c>
1000520e:	00ab      	lsls	r3, r5, #2
10005210:	58f3      	ldr	r3, [r6, r3]
10005212:	4798      	blx	r3
10005214:	3501      	adds	r5, #1
10005216:	e7f8      	b.n	1000520a <__libc_init_array+0xe>
10005218:	f7fd f8a8 	bl	1000236c <_init>
1000521c:	4b08      	ldr	r3, [pc, #32]	; (10005240 <__libc_init_array+0x44>)
1000521e:	2500      	movs	r5, #0
10005220:	1c1e      	adds	r6, r3, #0
10005222:	4c08      	ldr	r4, [pc, #32]	; (10005244 <__libc_init_array+0x48>)
10005224:	1ae4      	subs	r4, r4, r3
10005226:	10a4      	asrs	r4, r4, #2
10005228:	42a5      	cmp	r5, r4
1000522a:	d004      	beq.n	10005236 <__libc_init_array+0x3a>
1000522c:	00ab      	lsls	r3, r5, #2
1000522e:	58f3      	ldr	r3, [r6, r3]
10005230:	4798      	blx	r3
10005232:	3501      	adds	r5, #1
10005234:	e7f8      	b.n	10005228 <__libc_init_array+0x2c>
10005236:	bd70      	pop	{r4, r5, r6, pc}
10005238:	20000620 	.word	0x20000620
1000523c:	20000620 	.word	0x20000620
10005240:	20000620 	.word	0x20000620
10005244:	20000620 	.word	0x20000620

10005248 <SPI_MASTER_0_MOSI>:
10005248:	40040300 00000000                       ...@....

10005250 <SPI_MASTER_0_MISO>:
10005250:	40040000 00000000                       ...@....

10005258 <SPI_MASTER_0_SCLKOUT>:
10005258:	40040000 00000001                       ...@....

10005260 <SPI_MASTER_0_SCLKOUT_Config>:
10005260:	000000a0 00000001 00000000 00000000     ................

10005270 <SPI_MASTER_0_SS_0>:
10005270:	40040400 00000001                       ...@....

10005278 <SPI_MASTER_0_SS_0_Config>:
10005278:	0000009c 00000001 00000000 00040000     ................

10005288 <SPI_MASTER_0_Config>:
10005288:	20000560 1000312d 10005248 20000550     `.. -1..HR..P.. 
10005298:	10005250 20000628 00000000 00000000     PR..(.. ........
	...
100052b0:	10005258 10005260 10005270 00000000     XR..`R..pR......
	...
100052d8:	10005278 00000000 00000000 00000000     xR..............
	...
100052fc:	100049b1 00000000 00000600 00000000     .I..............
1000530c:	01000000 00000101                       ........

10005314 <SPI_MASTER_1_MOSI>:
10005314:	40040100 00000005                       ...@....

1000531c <SPI_MASTER_1_MISO>:
1000531c:	40040100 00000004                       ...@....

10005324 <SPI_MASTER_1_SCLKOUT>:
10005324:	40040000 00000007                       ...@....

1000532c <SPI_MASTER_1_SCLKOUT_Config>:
1000532c:	00000098 00000001 00000000 00000000     ................

1000533c <SPI_MASTER_1_SS_0>:
1000533c:	40040100 00000006                       ...@....

10005344 <SPI_MASTER_1_SS_0_Config>:
10005344:	00000098 00000001 00000000 00040000     ................

10005354 <SPI_MASTER_1_Config>:
10005354:	200005ac 100032c5 10005314 2000059c     ... .2...S..... 
10005364:	1000531c 20000638 00000000 00000000     .S..8.. ........
	...
1000537c:	10005324 1000532c 1000533c 00000000     $S..,S..<S......
	...
100053a4:	10005344 00000000 00000000 00000000     DS..............
	...
100053d0:	00000404 40000000 01000000 00020401     .......@........

100053e0 <I2C_MASTER_0_sda_pin_config>:
100053e0:	000000dc 00000001                       ........

100053e8 <I2C_MASTER_0_scl_pin_config>:
100053e8:	000000dc 00000001                       ........

100053f0 <I2C_MASTER_0_channel_config>:
100053f0:	00061a80 00000000                       ........

100053f8 <I2C_MASTER_0_config>:
100053f8:	100053f0 10004475 1000444d 10004429     .S..uD..MD..)D..
	...
10005410:	100049a9 00000000 00000000 04040000     .I..............
10005420:	00000c0e                                ....

10005424 <SPI_CE>:
10005424:	40040000 00000080 00010000 00000002     ...@............
10005434:	00010000 03300000 00010000 00000000     ......0.........
10005444:	30303030 00000030 79206649 7320756f     00000...If you s
10005454:	74206565 20736968 7373656d 20656761     ee this message 
10005464:	6e656874 494b4f20 00000000              then OKI....

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	100032b1 	.word	0x100032b1
	Insert_InterruptVeener IRQ10	
200000f8:	1000329d 	.word	0x1000329d
	Insert_InterruptVeener IRQ11	
200000fc:	10003471 	.word	0x10003471
	Insert_InterruptVeener IRQ12	
20000100:	100045f1 	.word	0x100045f1
	Insert_InterruptVeener IRQ13	
20000104:	1000345d 	.word	0x1000345d
	Insert_InterruptVeener IRQ14	
20000108:	100045dd 	.word	0x100045dd
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
