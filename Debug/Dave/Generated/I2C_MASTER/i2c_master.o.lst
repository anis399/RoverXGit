   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "i2c_master.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.__NVIC_ClearPendingIRQ,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	__NVIC_ClearPendingIRQ:
  23              	.LFB32:
  24              	 .file 1 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include/core_cm0.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**************************************************************************//**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * @file     core_cm0.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * @version  V5.0.8
   5:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * @date     21. August 2019
   6:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
   7:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*
   8:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  *
  10:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  *
  12:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * not use this file except in compliance with the License.
  14:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * You may obtain a copy of the License at
  15:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  *
  16:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  *
  18:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * See the License for the specific language governing permissions and
  22:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  * limitations under the License.
  23:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
  24:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  25:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #if   defined ( __ICCARM__ )
  26:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__clang__)
  28:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif
  30:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  31:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  34:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #include <stdint.h>
  35:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  36:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
  37:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
  38:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif
  39:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  40:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
  41:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  44:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  47:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  49:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  50:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
  53:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  54:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  55:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
  56:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  *                 CMSIS definitions
  57:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  58:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
  59:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup Cortex_M0
  60:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
  61:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
  62:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  63:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_version.h"
  64:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  
  65:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  66:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  71:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  73:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     This core does not support an FPU at all
  75:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** */
  76:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __FPU_USED       0U
  77:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  78:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #if defined ( __CC_ARM )
  79:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  82:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  83:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARM_FP
  85:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  87:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  88:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
  89:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  92:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  93:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  94:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARMVFP__
  95:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  97:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
  98:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
 104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __FPU_VFP__
 105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __CSMC__ )
 109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif
 114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** }
 120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif
 121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
 131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif
 132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* check device defines and use defaults */
 134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __CM0_REV
 136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #define __CM0_REV               0x0000U
 137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif
 150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** */
 159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #else
 162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif
 164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* following defines should be used for structure members */
 168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  *                 Register Abstraction
 178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   Core Register contain:
 179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register
 180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Register
 181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   - Core SCB Register
 182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Register
 183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** */
 188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Core Register type definitions.
 193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
 194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   struct
 202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** } APSR_Type;
 211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* APSR Register Definitions */
 213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   struct
 232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** } IPSR_Type;
 238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* IPSR Register Definitions */
 240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   struct
 250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** } xPSR_Type;
 262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* xPSR Register Definitions */
 264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   struct
 289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** } CONTROL_Type;
 296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* CONTROL Register Definitions */
 298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
 309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0[31U];
 318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1[31U];
 320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED2[31U];
 322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED3[31U];
 324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED4[64U];
 325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** }  NVIC_Type;
 327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
 336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0;
 346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1;
 350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** } SCB_Type;
 353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Control Register Definitions */
 415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
 443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** } SysTick_Type;
 455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Current Register Definitions */
 474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
 496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
 505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted value.
 512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** */
 513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted bit field value.
 520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** */
 521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
 531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* Memory mapping of Core Hardware */
 534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*@} */
 545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  *                Hardware Abstraction Layer
 550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   Core Function Interface contains:
 551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Functions
 552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Functions
 553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register Access Functions
 554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** */
 558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   @{
 567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #else
 575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #else
 595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Enable Interrupt
 619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     __COMPILER_BARRIER();
 628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     __COMPILER_BARRIER();
 630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   }
 631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** }
 632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Enable status
 636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt is not enabled.
 639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt is enabled.
 640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   }
 648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   else
 649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   }
 652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** }
 653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Disable Interrupt
 657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     __DSB();
 667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     __ISB();
 668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   }
 669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** }
 670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Pending Interrupt
 674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt status is not pending.
 677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt status is pending.
 678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   }
 686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   else
 687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   }
 690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** }
 691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Pending Interrupt
 695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
 701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   }
 705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** }
 706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** 
 708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** /**
 709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Clear Pending Interrupt
 710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****  */
 714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** {
  25              	 .loc 1 715 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 021C     	 mov r2,r0
  39 0008 FB1D     	 add r3,r7,#7
  40 000a 1A70     	 strb r2,[r3]
 716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  41              	 .loc 1 716 0
  42 000c FB1D     	 add r3,r7,#7
  43 000e 1B78     	 ldrb r3,[r3]
  44 0010 7F2B     	 cmp r3,#127
  45 0012 0AD8     	 bhi .L1
 717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   {
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  46              	 .loc 1 718 0
  47 0014 0649     	 ldr r1,.L3
  48 0016 FB1D     	 add r3,r7,#7
  49 0018 1B78     	 ldrb r3,[r3]
  50 001a 1A1C     	 mov r2,r3
  51 001c 1F23     	 mov r3,#31
  52 001e 1340     	 and r3,r2
  53 0020 0122     	 mov r2,#1
  54 0022 9A40     	 lsl r2,r2,r3
  55 0024 C023     	 mov r3,#192
  56 0026 5B00     	 lsl r3,r3,#1
  57 0028 CA50     	 str r2,[r1,r3]
  58              	.L1:
 719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h ****   }
 720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include\core_cm0.h **** }
  59              	 .loc 1 720 0
  60 002a BD46     	 mov sp,r7
  61 002c 02B0     	 add sp,sp,#8
  62              	 
  63 002e 80BD     	 pop {r7,pc}
  64              	.L4:
  65              	 .align 2
  66              	.L3:
  67 0030 00E100E0 	 .word -536813312
  68              	 .cfi_endproc
  69              	.LFE32:
  71              	 .section .text.XMC_USIC_CH_EnableEvent,"ax",%progbits
  72              	 .align 2
  73              	 .code 16
  74              	 .thumb_func
  76              	XMC_USIC_CH_EnableEvent:
  77              	.LFB75:
  78              	 .file 2 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2020-12-05
   4:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  12:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  14:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  21:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * a source language processor.
  27:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  28:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  41:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  42:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  43:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  44:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  45:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  46:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  47:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  48:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  49:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  50:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  51:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  52:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  54:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  55:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  56:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  57:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  58:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  59:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  60:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  62:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  63:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  64:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  65:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  67:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  68:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  69:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  70:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  71:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  72:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  73:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  74:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  75:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  76:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  77:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  78:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  79:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  80:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  81:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  82:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  83:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  84:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  86:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  87:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  88:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  89:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  90:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  91:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  92:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  93:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  94:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-07-01:
  95:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Changed XMC_USIC_CH_SetBaudrateEx() input parameter types
  96:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  97:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-09-30:
  98:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_InvalidateReadData(), XMC_USIC_CH_EnableWordLengthControl() and XMC_USIC
  99:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-12-05:
 101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_PutDataEx()
 102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-04-30:
 104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_SetTriggerLimit() and XMC_USIC_CH_RXFIFO_SetTriggerLimit()
 105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-12-05:
 107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S to XMC_USIC_CH_BRG_CLOCK_SOURCE_t
 108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CTQSEL_t
 109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateDivider()
 110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
 112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
 116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
 117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
 119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc1_usic_map.h"
 186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc4_usic_map.h"
 190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos,  /**< Baudrate generator 
 436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S    = 0x3UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel input selection for CTQ
 441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CTQSEL
 443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PDIV = 0x0UL, /**< fCTQIN = fPDIV */
 445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PPP  = 0x1UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fPPP */
 446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_SCLK = 0x2UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fSCLK */
 447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_MCLK = 0x3UL << USIC_CH_BRG_CTQSEL_Pos  /**< fCTQIN = fMCLK */
 448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CTQSEL_t;
 449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma push
 508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma anon_unions
 509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning 586
 511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file,
 520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   union
 539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   {
 540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   };
 546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   union
 550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   {
 551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   };
 557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma pop
 584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning restore
 586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clksel Baudrate generator clock source.
 733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pppen Enable 2:1 Divider for fPPP.
 734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Divider Factor to generate fPDIV = fPPP / (pDIV + 1)
 735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  ctqsel Input selection for CTQ.
 736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pctq Pre-Divider for Time Quanta Counter. fCTQIN / (PCQT + 1)
 737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  dctq Denominator for Time Quanta Counter. fTQ / (DCTQ + 1)
 738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate generator of the USIC channel.
 742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFractionalDivider() \n\n\n
 745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetBaudrateDivider(XMC_USIC_CH_t *const channel, 
 747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CLOCK_SOURCE_t clksel,
 748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     bool pppen,
 749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pdiv,
 750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CTQSEL_t ctqsel,
 751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pctq,
 752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t dctq);
 753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t pdiv,
 820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t oversampling,
 821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc.
 838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_INSW_Msk;
 865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &= (uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
1005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
1006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
1007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
1010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
1012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
1014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
1024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
1025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
1028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
1030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DSEN_Msk;
1032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
1039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
1043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
1048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_freq)
1050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
1052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
1053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
1072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t transmit_control_information)
1133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value
1183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly.
1225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
  79              	 .loc 2 1253 0
  80              	 .cfi_startproc
  81 0000 80B5     	 push {r7,lr}
  82              	.LCFI3:
  83              	 .cfi_def_cfa_offset 8
  84              	 .cfi_offset 7,-8
  85              	 .cfi_offset 14,-4
  86 0002 82B0     	 sub sp,sp,#8
  87              	.LCFI4:
  88              	 .cfi_def_cfa_offset 16
  89 0004 00AF     	 add r7,sp,#0
  90              	.LCFI5:
  91              	 .cfi_def_cfa_register 7
  92 0006 7860     	 str r0,[r7,#4]
  93 0008 3960     	 str r1,[r7]
1254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
  94              	 .loc 2 1254 0
  95 000a 7B68     	 ldr r3,[r7,#4]
  96 000c 1A6C     	 ldr r2,[r3,#64]
  97 000e 3B68     	 ldr r3,[r7]
  98 0010 1A43     	 orr r2,r3
  99 0012 7B68     	 ldr r3,[r7,#4]
 100 0014 1A64     	 str r2,[r3,#64]
1255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 101              	 .loc 2 1255 0
 102 0016 BD46     	 mov sp,r7
 103 0018 02B0     	 add sp,sp,#8
 104              	 
 105 001a 80BD     	 pop {r7,pc}
 106              	 .cfi_endproc
 107              	.LFE75:
 109              	 .section .text.XMC_USIC_CH_DisableEvent,"ax",%progbits
 110              	 .align 2
 111              	 .code 16
 112              	 .thumb_func
 114              	XMC_USIC_CH_DisableEvent:
 115              	.LFB76:
1256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
1273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 116              	 .loc 2 1274 0
 117              	 .cfi_startproc
 118 0000 80B5     	 push {r7,lr}
 119              	.LCFI6:
 120              	 .cfi_def_cfa_offset 8
 121              	 .cfi_offset 7,-8
 122              	 .cfi_offset 14,-4
 123 0002 82B0     	 sub sp,sp,#8
 124              	.LCFI7:
 125              	 .cfi_def_cfa_offset 16
 126 0004 00AF     	 add r7,sp,#0
 127              	.LCFI8:
 128              	 .cfi_def_cfa_register 7
 129 0006 7860     	 str r0,[r7,#4]
 130 0008 3960     	 str r1,[r7]
1275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
 131              	 .loc 2 1275 0
 132 000a 7B68     	 ldr r3,[r7,#4]
 133 000c 1B6C     	 ldr r3,[r3,#64]
 134 000e 3A68     	 ldr r2,[r7]
 135 0010 D243     	 mvn r2,r2
 136 0012 1A40     	 and r2,r3
 137 0014 7B68     	 ldr r3,[r7,#4]
 138 0016 1A64     	 str r2,[r3,#64]
1276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 139              	 .loc 2 1276 0
 140 0018 BD46     	 mov sp,r7
 141 001a 02B0     	 add sp,sp,#8
 142              	 
 143 001c 80BD     	 pop {r7,pc}
 144              	 .cfi_endproc
 145              	.LFE76:
 147 001e C046     	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
 148              	 .align 2
 149              	 .code 16
 150              	 .thumb_func
 152              	XMC_USIC_CH_GetTransmitBufferStatus:
 153              	.LFB77:
1277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 154              	 .loc 2 1318 0
 155              	 .cfi_startproc
 156 0000 80B5     	 push {r7,lr}
 157              	.LCFI9:
 158              	 .cfi_def_cfa_offset 8
 159              	 .cfi_offset 7,-8
 160              	 .cfi_offset 14,-4
 161 0002 82B0     	 sub sp,sp,#8
 162              	.LCFI10:
 163              	 .cfi_def_cfa_offset 16
 164 0004 00AF     	 add r7,sp,#0
 165              	.LCFI11:
 166              	 .cfi_def_cfa_register 7
 167 0006 7860     	 str r0,[r7,#4]
1319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 168              	 .loc 2 1319 0
 169 0008 7B68     	 ldr r3,[r7,#4]
 170 000a 9B6B     	 ldr r3,[r3,#56]
 171 000c DBB2     	 uxtb r3,r3
 172 000e 7F22     	 mov r2,#127
 173 0010 9343     	 bic r3,r2
 174 0012 DBB2     	 uxtb r3,r3
1320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 175              	 .loc 2 1320 0
 176 0014 181C     	 mov r0,r3
 177 0016 BD46     	 mov sp,r7
 178 0018 02B0     	 add sp,sp,#8
 179              	 
 180 001a 80BD     	 pop {r7,pc}
 181              	 .cfi_endproc
 182              	.LFE77:
 184              	 .section .text.XMC_USIC_CH_TriggerServiceRequest,"ax",%progbits
 185              	 .align 2
 186              	 .code 16
 187              	 .thumb_func
 189              	XMC_USIC_CH_TriggerServiceRequest:
 190              	.LFB87:
1321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte.
1335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_START_TRANSMISION_MODE_t start_transmision_mode)
1366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output_mode)
1387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the
1399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of word length. \n\n
1422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of word length is enabled, word length is configured based on the
1423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], word length is con
1424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableWordLengthControl(XMC_USIC_CH_t *const channel)
1431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_WLEMD_Msk;
1437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of word length. \n\n
1464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of word length is disabled, word length has to configured explicitly.
1465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Word length remains fixed until it is changed again.
1466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetWordLength() \n\n\n
1469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableWordLengthControl(XMC_USIC_CH_t *const channel)
1471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_WLEMD_Msk;
1473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be
1520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled.
1521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 191              	 .loc 2 1526 0
 192              	 .cfi_startproc
 193 0000 80B5     	 push {r7,lr}
 194              	.LCFI12:
 195              	 .cfi_def_cfa_offset 8
 196              	 .cfi_offset 7,-8
 197              	 .cfi_offset 14,-4
 198 0002 82B0     	 sub sp,sp,#8
 199              	.LCFI13:
 200              	 .cfi_def_cfa_offset 16
 201 0004 00AF     	 add r7,sp,#0
 202              	.LCFI14:
 203              	 .cfi_def_cfa_register 7
 204 0006 7860     	 str r0,[r7,#4]
 205 0008 3960     	 str r1,[r7]
1527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 206              	 .loc 2 1527 0
 207 000a 3B68     	 ldr r3,[r7]
 208 000c 8022     	 mov r2,#128
 209 000e 5202     	 lsl r2,r2,#9
 210 0010 9A40     	 lsl r2,r2,r3
 211 0012 7B68     	 ldr r3,[r7,#4]
 212 0014 9A66     	 str r2,[r3,#104]
1528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 213              	 .loc 2 1528 0
 214 0016 BD46     	 mov sp,r7
 215 0018 02B0     	 add sp,sp,#8
 216              	 
 217 001a 80BD     	 pop {r7,pc}
 218              	 .cfi_endproc
 219              	.LFE87:
 221              	 .section .text.XMC_USIC_CH_TXFIFO_EnableEvent,"ax",%progbits
 222              	 .align 2
 223              	 .code 16
 224              	 .thumb_func
 226              	XMC_USIC_CH_TXFIFO_EnableEvent:
 227              	.LFB92:
1529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buffer_status)
1545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_InvalidateReadData(XMC_USIC_CH_t *const channel)
1562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = USIC_CH_FMR_CRDV0_Msk | USIC_CH_FMR_CRDV1_Msk;
1564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the
1577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive_level)
1584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() }
1627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the
1631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
1639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
1646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
1650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
1655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
1656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR = (channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) | ((limit << USIC_CH_TBCTR
1658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
1672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 228              	 .loc 2 1681 0
 229              	 .cfi_startproc
 230 0000 80B5     	 push {r7,lr}
 231              	.LCFI15:
 232              	 .cfi_def_cfa_offset 8
 233              	 .cfi_offset 7,-8
 234              	 .cfi_offset 14,-4
 235 0002 82B0     	 sub sp,sp,#8
 236              	.LCFI16:
 237              	 .cfi_def_cfa_offset 16
 238 0004 00AF     	 add r7,sp,#0
 239              	.LCFI17:
 240              	 .cfi_def_cfa_register 7
 241 0006 7860     	 str r0,[r7,#4]
 242 0008 3960     	 str r1,[r7]
1682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
 243              	 .loc 2 1682 0
 244 000a 7A68     	 ldr r2,[r7,#4]
 245 000c 8423     	 mov r3,#132
 246 000e 5B00     	 lsl r3,r3,#1
 247 0010 D258     	 ldr r2,[r2,r3]
 248 0012 3B68     	 ldr r3,[r7]
 249 0014 1A43     	 orr r2,r3
 250 0016 111C     	 mov r1,r2
 251 0018 7A68     	 ldr r2,[r7,#4]
 252 001a 8423     	 mov r3,#132
 253 001c 5B00     	 lsl r3,r3,#1
 254 001e D150     	 str r1,[r2,r3]
1683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 255              	 .loc 2 1683 0
 256 0020 BD46     	 mov sp,r7
 257 0022 02B0     	 add sp,sp,#8
 258              	 
 259 0024 80BD     	 pop {r7,pc}
 260              	 .cfi_endproc
 261              	.LFE92:
 263 0026 C046     	 .section .text.XMC_USIC_CH_TXFIFO_DisableEvent,"ax",%progbits
 264              	 .align 2
 265              	 .code 16
 266              	 .thumb_func
 268              	XMC_USIC_CH_TXFIFO_DisableEvent:
 269              	.LFB93:
1684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
1695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent().
1696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 270              	 .loc 2 1703 0
 271              	 .cfi_startproc
 272 0000 80B5     	 push {r7,lr}
 273              	.LCFI18:
 274              	 .cfi_def_cfa_offset 8
 275              	 .cfi_offset 7,-8
 276              	 .cfi_offset 14,-4
 277 0002 82B0     	 sub sp,sp,#8
 278              	.LCFI19:
 279              	 .cfi_def_cfa_offset 16
 280 0004 00AF     	 add r7,sp,#0
 281              	.LCFI20:
 282              	 .cfi_def_cfa_register 7
 283 0006 7860     	 str r0,[r7,#4]
 284 0008 3960     	 str r1,[r7]
1704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
 285              	 .loc 2 1704 0
 286 000a 7A68     	 ldr r2,[r7,#4]
 287 000c 8423     	 mov r3,#132
 288 000e 5B00     	 lsl r3,r3,#1
 289 0010 D358     	 ldr r3,[r2,r3]
 290 0012 3A68     	 ldr r2,[r7]
 291 0014 D243     	 mvn r2,r2
 292 0016 1A40     	 and r2,r3
 293 0018 111C     	 mov r1,r2
 294 001a 7A68     	 ldr r2,[r7,#4]
 295 001c 8423     	 mov r3,#132
 296 001e 5B00     	 lsl r3,r3,#1
 297 0020 D150     	 str r1,[r2,r3]
1705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 298              	 .loc 2 1705 0
 299 0022 BD46     	 mov sp,r7
 300 0024 02B0     	 add sp,sp,#8
 301              	 
 302 0026 80BD     	 pop {r7,pc}
 303              	 .cfi_endproc
 304              	.LFE93:
 306              	 .section .text.XMC_USIC_CH_TXFIFO_Flush,"ax",%progbits
 307              	 .align 2
 308              	 .code 16
 309              	 .thumb_func
 311              	XMC_USIC_CH_TXFIFO_Flush:
 312              	.LFB98:
1706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
1733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param loc Input location. \n
1761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit data can be loaded to TBUF by software by writing to the transmit buffer input
1765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * locations TBUFx (x = 00-31), consisting of 32 consecutive addresses. The data written
1766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * to one of these input locations is stored in the transmit buffer TBUF. Additionally, the
1767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * address of the written location is evaluated and can be used for additional control
1768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * purposes. This 5-bit wide information (named Transmit Control Information TCI) can be
1769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * used for different purposes in different protocols.
1770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableWordLengthControl() \n
1773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataEx(XMC_USIC_CH_t *const channel, const uint16_t data
1776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[loc] = data;
1778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_PutDataEx() \n
1796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 313              	 .loc 2 1842 0
 314              	 .cfi_startproc
 315 0000 80B5     	 push {r7,lr}
 316              	.LCFI21:
 317              	 .cfi_def_cfa_offset 8
 318              	 .cfi_offset 7,-8
 319              	 .cfi_offset 14,-4
 320 0002 82B0     	 sub sp,sp,#8
 321              	.LCFI22:
 322              	 .cfi_def_cfa_offset 16
 323 0004 00AF     	 add r7,sp,#0
 324              	.LCFI23:
 325              	 .cfi_def_cfa_register 7
 326 0006 7860     	 str r0,[r7,#4]
1843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 327              	 .loc 2 1843 0
 328 0008 7A68     	 ldr r2,[r7,#4]
 329 000a 8C23     	 mov r3,#140
 330 000c 5B00     	 lsl r3,r3,#1
 331 000e 8021     	 mov r1,#128
 332 0010 0902     	 lsl r1,r1,#8
 333 0012 D150     	 str r1,[r2,r3]
1844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 334              	 .loc 2 1844 0
 335 0014 BD46     	 mov sp,r7
 336 0016 02B0     	 add sp,sp,#8
 337              	 
 338 0018 80BD     	 pop {r7,pc}
 339              	 .cfi_endproc
 340              	.LFE98:
 342 001a C046     	 .section .text.XMC_USIC_CH_TXFIFO_IsFull,"ax",%progbits
 343              	 .align 2
 344              	 .code 16
 345              	 .thumb_func
 347              	XMC_USIC_CH_TXFIFO_IsFull:
 348              	.LFB99:
1845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 349              	 .loc 2 1861 0
 350              	 .cfi_startproc
 351 0000 80B5     	 push {r7,lr}
 352              	.LCFI24:
 353              	 .cfi_def_cfa_offset 8
 354              	 .cfi_offset 7,-8
 355              	 .cfi_offset 14,-4
 356 0002 82B0     	 sub sp,sp,#8
 357              	.LCFI25:
 358              	 .cfi_def_cfa_offset 16
 359 0004 00AF     	 add r7,sp,#0
 360              	.LCFI26:
 361              	 .cfi_def_cfa_register 7
 362 0006 7860     	 str r0,[r7,#4]
1862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 363              	 .loc 2 1862 0
 364 0008 7A68     	 ldr r2,[r7,#4]
 365 000a 8A23     	 mov r3,#138
 366 000c 5B00     	 lsl r3,r3,#1
 367 000e D258     	 ldr r2,[r2,r3]
 368 0010 8023     	 mov r3,#128
 369 0012 5B01     	 lsl r3,r3,#5
 370 0014 1340     	 and r3,r2
 371 0016 5A1E     	 sub r2,r3,#1
 372 0018 9341     	 sbc r3,r3,r2
 373 001a DBB2     	 uxtb r3,r3
1863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 374              	 .loc 2 1863 0
 375 001c 181C     	 mov r0,r3
 376 001e BD46     	 mov sp,r7
 377 0020 02B0     	 add sp,sp,#8
 378              	 
 379 0022 80BD     	 pop {r7,pc}
 380              	 .cfi_endproc
 381              	.LFE99:
 383              	 .section .text.XMC_USIC_CH_TXFIFO_IsEmpty,"ax",%progbits
 384              	 .align 2
 385              	 .code 16
 386              	 .thumb_func
 388              	XMC_USIC_CH_TXFIFO_IsEmpty:
 389              	.LFB100:
1864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO,
1875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 390              	 .loc 2 1881 0
 391              	 .cfi_startproc
 392 0000 80B5     	 push {r7,lr}
 393              	.LCFI27:
 394              	 .cfi_def_cfa_offset 8
 395              	 .cfi_offset 7,-8
 396              	 .cfi_offset 14,-4
 397 0002 82B0     	 sub sp,sp,#8
 398              	.LCFI28:
 399              	 .cfi_def_cfa_offset 16
 400 0004 00AF     	 add r7,sp,#0
 401              	.LCFI29:
 402              	 .cfi_def_cfa_register 7
 403 0006 7860     	 str r0,[r7,#4]
1882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 404              	 .loc 2 1882 0
 405 0008 7A68     	 ldr r2,[r7,#4]
 406 000a 8A23     	 mov r3,#138
 407 000c 5B00     	 lsl r3,r3,#1
 408 000e D258     	 ldr r2,[r2,r3]
 409 0010 8023     	 mov r3,#128
 410 0012 1B01     	 lsl r3,r3,#4
 411 0014 1340     	 and r3,r2
 412 0016 5A1E     	 sub r2,r3,#1
 413 0018 9341     	 sbc r3,r3,r2
 414 001a DBB2     	 uxtb r3,r3
1883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 415              	 .loc 2 1883 0
 416 001c 181C     	 mov r0,r3
 417 001e BD46     	 mov sp,r7
 418 0020 02B0     	 add sp,sp,#8
 419              	 
 420 0022 80BD     	 pop {r7,pc}
 421              	 .cfi_endproc
 422              	.LFE100:
 424              	 .section .text.XMC_USIC_CH_RXFIFO_EnableEvent,"ax",%progbits
 425              	 .align 2
 426              	 .code 16
 427              	 .thumb_func
 429              	XMC_USIC_CH_RXFIFO_EnableEvent:
 430              	.LFB105:
1884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n
1889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                         USIC_CH_TRBSR_TBERI_Msk));
1925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value.
1938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of
1940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t event)
1947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
1973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_RXFIFO_SetTriggerLimit() }
1988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the
1992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
2000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
2005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
2006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
2010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() \n\n\n
2013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
2015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
2016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
2017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR = (channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) | ((limit << USIC_CH_RBCTR
2018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
2019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
2024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
2028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
2029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
2030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
2031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
2033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
2034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
2037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
2039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 431              	 .loc 2 2039 0
 432              	 .cfi_startproc
 433 0000 80B5     	 push {r7,lr}
 434              	.LCFI30:
 435              	 .cfi_def_cfa_offset 8
 436              	 .cfi_offset 7,-8
 437              	 .cfi_offset 14,-4
 438 0002 82B0     	 sub sp,sp,#8
 439              	.LCFI31:
 440              	 .cfi_def_cfa_offset 16
 441 0004 00AF     	 add r7,sp,#0
 442              	.LCFI32:
 443              	 .cfi_def_cfa_register 7
 444 0006 7860     	 str r0,[r7,#4]
 445 0008 3960     	 str r1,[r7]
2040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
 446              	 .loc 2 2040 0
 447 000a 7A68     	 ldr r2,[r7,#4]
 448 000c 8623     	 mov r3,#134
 449 000e 5B00     	 lsl r3,r3,#1
 450 0010 D258     	 ldr r2,[r2,r3]
 451 0012 3B68     	 ldr r3,[r7]
 452 0014 1A43     	 orr r2,r3
 453 0016 111C     	 mov r1,r2
 454 0018 7A68     	 ldr r2,[r7,#4]
 455 001a 8623     	 mov r3,#134
 456 001c 5B00     	 lsl r3,r3,#1
 457 001e D150     	 str r1,[r2,r3]
2041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 458              	 .loc 2 2041 0
 459 0020 BD46     	 mov sp,r7
 460 0022 02B0     	 add sp,sp,#8
 461              	 
 462 0024 80BD     	 pop {r7,pc}
 463              	 .cfi_endproc
 464              	.LFE105:
 466 0026 C046     	 .section .text.XMC_USIC_CH_RXFIFO_DisableEvent,"ax",%progbits
 467              	 .align 2
 468              	 .code 16
 469              	 .thumb_func
 471              	XMC_USIC_CH_RXFIFO_DisableEvent:
 472              	.LFB106:
2042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
2048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
2049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
2050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
2054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
2055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent().
2056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
2057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
2058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
2063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 473              	 .loc 2 2063 0
 474              	 .cfi_startproc
 475 0000 80B5     	 push {r7,lr}
 476              	.LCFI33:
 477              	 .cfi_def_cfa_offset 8
 478              	 .cfi_offset 7,-8
 479              	 .cfi_offset 14,-4
 480 0002 82B0     	 sub sp,sp,#8
 481              	.LCFI34:
 482              	 .cfi_def_cfa_offset 16
 483 0004 00AF     	 add r7,sp,#0
 484              	.LCFI35:
 485              	 .cfi_def_cfa_register 7
 486 0006 7860     	 str r0,[r7,#4]
 487 0008 3960     	 str r1,[r7]
2064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
 488              	 .loc 2 2064 0
 489 000a 7A68     	 ldr r2,[r7,#4]
 490 000c 8623     	 mov r3,#134
 491 000e 5B00     	 lsl r3,r3,#1
 492 0010 D358     	 ldr r3,[r2,r3]
 493 0012 3A68     	 ldr r2,[r7]
 494 0014 D243     	 mvn r2,r2
 495 0016 1A40     	 and r2,r3
 496 0018 111C     	 mov r1,r2
 497 001a 7A68     	 ldr r2,[r7,#4]
 498 001c 8623     	 mov r3,#134
 499 001e 5B00     	 lsl r3,r3,#1
 500 0020 D150     	 str r1,[r2,r3]
2065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 501              	 .loc 2 2065 0
 502 0022 BD46     	 mov sp,r7
 503 0024 02B0     	 add sp,sp,#8
 504              	 
 505 0026 80BD     	 pop {r7,pc}
 506              	 .cfi_endproc
 507              	.LFE106:
 509              	 .section .text.XMC_USIC_CH_RXFIFO_Flush,"ax",%progbits
 510              	 .align 2
 511              	 .code 16
 512              	 .thumb_func
 514              	XMC_USIC_CH_RXFIFO_Flush:
 515              	.LFB108:
2066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
2071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
2072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
2073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
2074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
2075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
2079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
2080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
2081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
2082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
2083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
2084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
2085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
2087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
2092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
2093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
2094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
2099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
2100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
2103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
2104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
2105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
2106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
2107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
2110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
2112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
2113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
2114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
2115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
2123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
2124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
2127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
2129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 516              	 .loc 2 2129 0
 517              	 .cfi_startproc
 518 0000 80B5     	 push {r7,lr}
 519              	.LCFI36:
 520              	 .cfi_def_cfa_offset 8
 521              	 .cfi_offset 7,-8
 522              	 .cfi_offset 14,-4
 523 0002 82B0     	 sub sp,sp,#8
 524              	.LCFI37:
 525              	 .cfi_def_cfa_offset 16
 526 0004 00AF     	 add r7,sp,#0
 527              	.LCFI38:
 528              	 .cfi_def_cfa_register 7
 529 0006 7860     	 str r0,[r7,#4]
2130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 530              	 .loc 2 2130 0
 531 0008 7A68     	 ldr r2,[r7,#4]
 532 000a 8C23     	 mov r3,#140
 533 000c 5B00     	 lsl r3,r3,#1
 534 000e 8021     	 mov r1,#128
 535 0010 C901     	 lsl r1,r1,#7
 536 0012 D150     	 str r1,[r2,r3]
2131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 537              	 .loc 2 2131 0
 538 0014 BD46     	 mov sp,r7
 539 0016 02B0     	 add sp,sp,#8
 540              	 
 541 0018 80BD     	 pop {r7,pc}
 542              	 .cfi_endproc
 543              	.LFE108:
 545 001a C046     	 .section .text.XMC_USIC_CH_RXFIFO_IsEmpty,"ax",%progbits
 546              	 .align 2
 547              	 .code 16
 548              	 .thumb_func
 550              	XMC_USIC_CH_RXFIFO_IsEmpty:
 551              	.LFB110:
2132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
2137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
2138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
2141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
2142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
2143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
2146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
2148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
2149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
2150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
2151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
2156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
2157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
2160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
2161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
2162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
2163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
2166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
2168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 552              	 .loc 2 2168 0
 553              	 .cfi_startproc
 554 0000 80B5     	 push {r7,lr}
 555              	.LCFI39:
 556              	 .cfi_def_cfa_offset 8
 557              	 .cfi_offset 7,-8
 558              	 .cfi_offset 14,-4
 559 0002 82B0     	 sub sp,sp,#8
 560              	.LCFI40:
 561              	 .cfi_def_cfa_offset 16
 562 0004 00AF     	 add r7,sp,#0
 563              	.LCFI41:
 564              	 .cfi_def_cfa_register 7
 565 0006 7860     	 str r0,[r7,#4]
2169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 566              	 .loc 2 2169 0
 567 0008 7A68     	 ldr r2,[r7,#4]
 568 000a 8A23     	 mov r3,#138
 569 000c 5B00     	 lsl r3,r3,#1
 570 000e D358     	 ldr r3,[r2,r3]
 571 0010 0822     	 mov r2,#8
 572 0012 1340     	 and r3,r2
 573 0014 5A1E     	 sub r2,r3,#1
 574 0016 9341     	 sbc r3,r3,r2
 575 0018 DBB2     	 uxtb r3,r3
2170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 576              	 .loc 2 2170 0
 577 001a 181C     	 mov r0,r3
 578 001c BD46     	 mov sp,r7
 579 001e 02B0     	 add sp,sp,#8
 580              	 
 581 0020 80BD     	 pop {r7,pc}
 582              	 .cfi_endproc
 583              	.LFE110:
 585 0022 C046     	 .section .text.XMC_I2C_CH_SetInterruptNodePointer,"ax",%progbits
 586              	 .align 2
 587              	 .code 16
 588              	 .thumb_func
 590              	XMC_I2C_CH_SetInterruptNodePointer:
 591              	.LFB121:
 592              	 .file 3 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_i2c.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @file xmc_i2c.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @date 2020-12-05
   4:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   5:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @cond
   6:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   9:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  12:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  14:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  21:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * a source language processor.
  27:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  28:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  36:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  41:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Change History
  42:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * --------------
  43:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  44:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-02-20:
  45:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Initial <br>
  46:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  47:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-05-20:
  48:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Description updated <br>
  49:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  50:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  51:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-06-20:
  52:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  53:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  54:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-08-27:
  55:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  56:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  57:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-09-01:
  58:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  59:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  60:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  61:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  62:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  63:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  64:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-02:
  65:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix 10bit addressing
  66:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  67:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-07:
  68:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  69:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  70:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  71:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  72:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-05-20:
  73:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableDataTransmission() and XMC_I2C_CH_DisableDataTransmission()
  74:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  75:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-08-17:
  76:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Improved documentation of slave address passing
  77:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  78:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2017-10-25:
  79:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableMasterClock() and XMC_I2C_CH_DisableMasterClock()
  80:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  81:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2019-05-07:
  82:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added normal_divider_mode to XMC_I2C_CH_CONFIG_t configuration structure.
  83:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  84:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_SetBaudrateEx()
  85:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  86:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2019-12-10:
  87:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_SetHoldDelay()
  88:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  89:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2020-12-05:
  90:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *    - Added XMC_I2C_CH_InitEx() that allows user select if automatic baudrate configuration shoul
  91:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  92:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @endcond
  93:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  94:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  95:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
  96:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #ifndef XMC_I2C_H
  97:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_H
  98:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
  99:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * HEADER FILES
 101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #include "xmc_usic.h"
 104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
 107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup I2C
 112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family.
 113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * USIC IIC Features: <br>
 115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
 116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
 117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
 118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
 119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
 120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
 121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
 122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
 123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
 124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * MACROS
 129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC0)
 132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC1)
 137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC2)
 142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * ENUMS
 150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C Status
 154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C status
 164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** *  RBUF[12:8].
 190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 followed by the address reception t
 196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 when the device has been in slave m
 199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 data byte in the receive buffer */
 201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C commands
 207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C events
 216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C input stage selection
 239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * I2C channel interrupt node pointers
 255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * DATA STRUCTURES
 267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C_CH configuration structure
 270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   bool normal_divider_mode; /**< Selects normal divider mode for baudrate generator instead of defa
 275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   uint16_t address;    /**< slave address
 276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * API PROTOTYPES
 282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #ifdef __cplusplus
 285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** extern "C" {
 286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param init_brg Selects if the baudrate generator should be configured automatically.
 292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool 
 306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const
 324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_InitEx(channel, config, true);
 326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool norm
 362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C \a channel.
 370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****     const uint8_t service_request)
 418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 593              	 .loc 3 418 0
 594              	 .cfi_startproc
 595 0000 80B5     	 push {r7,lr}
 596              	.LCFI42:
 597              	 .cfi_def_cfa_offset 8
 598              	 .cfi_offset 7,-8
 599              	 .cfi_offset 14,-4
 600 0002 82B0     	 sub sp,sp,#8
 601              	.LCFI43:
 602              	 .cfi_def_cfa_offset 16
 603 0004 00AF     	 add r7,sp,#0
 604              	.LCFI44:
 605              	 .cfi_def_cfa_register 7
 606 0006 7860     	 str r0,[r7,#4]
 607 0008 0A1C     	 mov r2,r1
 608 000a FB1C     	 add r3,r7,#3
 609 000c 1A70     	 strb r2,[r3]
 419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 610              	 .loc 3 419 0
 611 000e FB1C     	 add r3,r7,#3
 612 0010 1B78     	 ldrb r3,[r3]
 613 0012 7A68     	 ldr r2,[r7,#4]
 614 0014 101C     	 mov r0,r2
 615 0016 1021     	 mov r1,#16
 616 0018 1A1C     	 mov r2,r3
 617 001a FFF7FEFF 	 bl XMC_USIC_CH_SetInterruptNodePointer
 420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 618              	 .loc 3 420 0
 619 001e BD46     	 mov sp,r7
 620 0020 02B0     	 add sp,sp,#8
 621              	 
 622 0022 80BD     	 pop {r7,pc}
 623              	 .cfi_endproc
 624              	.LFE121:
 626              	 .section .text.XMC_I2C_CH_GetStatusFlag,"ax",%progbits
 627              	 .align 2
 628              	 .code 16
 629              	 .thumb_func
 631              	XMC_I2C_CH_GetStatusFlag:
 632              	.LFB126:
 421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: @ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  			@ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number.\n
 430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****     const XMC_I2C_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
 444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****     const uint32_t service_request)
 445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****                                       (uint32_t)service_request);
 448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 			\b Range: 0 to 5.
 455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * generated if enabled.
 461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param address I2C slave address
 495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address should include an additional bit at the LSB for read/write indication. For
 504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. A 10-bit address should be provided with the identifier 0b11110xx at the mo
 505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * address 0x305 should be provided as 0x7b05(bitwise OR with 0x7800).
 506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint16_t Slave address<br>
 515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address will include an additional bit at the LSB. For example, address 0x05 will 
 523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * 10-bit address will not include the 10-bit address identifier 0b11110xx at the most signifcant b
 524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   return ((uint8_t)((channel->RBUF) >> 8U));
 677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint32_t Status byte<br>
 708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 633              	 .loc 3 716 0
 634              	 .cfi_startproc
 635 0000 80B5     	 push {r7,lr}
 636              	.LCFI45:
 637              	 .cfi_def_cfa_offset 8
 638              	 .cfi_offset 7,-8
 639              	 .cfi_offset 14,-4
 640 0002 82B0     	 sub sp,sp,#8
 641              	.LCFI46:
 642              	 .cfi_def_cfa_offset 16
 643 0004 00AF     	 add r7,sp,#0
 644              	.LCFI47:
 645              	 .cfi_def_cfa_register 7
 646 0006 7860     	 str r0,[r7,#4]
 717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   return (channel->PSR_IICMode);
 647              	 .loc 3 717 0
 648 0008 7B68     	 ldr r3,[r7,#4]
 649 000a 9B6C     	 ldr r3,[r3,#72]
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 650              	 .loc 3 718 0
 651 000c 181C     	 mov r0,r3
 652 000e BD46     	 mov sp,r7
 653 0010 02B0     	 add sp,sp,#8
 654              	 
 655 0012 80BD     	 pop {r7,pc}
 656              	 .cfi_endproc
 657              	.LFE126:
 659              	 .section .text.XMC_I2C_CH_ClearStatusFlag,"ax",%progbits
 660              	 .align 2
 661              	 .code 16
 662              	 .thumb_func
 664              	XMC_I2C_CH_ClearStatusFlag:
 665              	.LFB127:
 719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** 
 720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param flag Status flag
 723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** {
 666              	 .loc 3 732 0
 667              	 .cfi_startproc
 668 0000 80B5     	 push {r7,lr}
 669              	.LCFI48:
 670              	 .cfi_def_cfa_offset 8
 671              	 .cfi_offset 7,-8
 672              	 .cfi_offset 14,-4
 673 0002 82B0     	 sub sp,sp,#8
 674              	.LCFI49:
 675              	 .cfi_def_cfa_offset 16
 676 0004 00AF     	 add r7,sp,#0
 677              	.LCFI50:
 678              	 .cfi_def_cfa_register 7
 679 0006 7860     	 str r0,[r7,#4]
 680 0008 3960     	 str r1,[r7]
 733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->PSCR |= flag;
 681              	 .loc 3 733 0
 682 000a 7B68     	 ldr r3,[r7,#4]
 683 000c DA6C     	 ldr r2,[r3,#76]
 684 000e 3B68     	 ldr r3,[r7]
 685 0010 1A43     	 orr r2,r3
 686 0012 7B68     	 ldr r3,[r7,#4]
 687 0014 DA64     	 str r2,[r3,#76]
 734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_i2c.h **** }
 688              	 .loc 3 734 0
 689 0016 BD46     	 mov sp,r7
 690 0018 02B0     	 add sp,sp,#8
 691              	 
 692 001a 80BD     	 pop {r7,pc}
 693              	 .cfi_endproc
 694              	.LFE127:
 696              	 .section .text.I2C_MASTER_SetRXFIFOTriggerLimit,"ax",%progbits
 697              	 .align 2
 698              	 .code 16
 699              	 .thumb_func
 701              	I2C_MASTER_SetRXFIFOTriggerLimit:
 702              	.LFB138:
 703              	 .file 4 "../Dave/Generated/I2C_MASTER/i2c_master.h"
   1:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
   2:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @file i2c_master.h
   3:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @date 2021-01-08
   4:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
   5:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * NOTE:
   6:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * regenerated.
   8:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
   9:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
  10:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @cond
  11:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  12:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER v4.1.34 Configures USIC channel to transmit & receive data using I2C protocol.
  13:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  14:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  15:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * All rights reserved.
  16:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  17:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * following conditions are met:
  19:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  20:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  21:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * disclaimer.
  22:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  23:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  24:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * following disclaimer in the documentation and/or other materials provided with the distribution.
  25:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  26:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  27:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * products derived from this software without specific prior written permission.
  28:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  29:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  37:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * with Infineon Technologies AG (dave@infineon.com).
  39:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  40:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  41:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Change History
  42:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * --------------
  43:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  44:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-02-16:
  45:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Initial version<br>
  46:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  47:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-06-10:
  48:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  49:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  50:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-08-31:
  51:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - DMA support APIs added
  52:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-10-20:
  53:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Code snippets updated
  54:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2016-08-18:
  55:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Documentation of slave address formatting improved.
  56:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2017-11-17:
  57:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added tx_irqn and rx_irqn to I2C_MASTER_CONFIG_t
  58:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2017-12-20:
  59:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added I2C_MASTER_FlushTxFifo(), I2C_MASTER_FlushRxFifo(), I2C_MASTER_DisableOutputs(), I2C
  60:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  61:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2019-16-09:
  62:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added I2C_MASTER_START_TRANSMIT_RETRIES to control the wait to see the START symbol in the
  63:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added I2C_MASTER_STATUS_BUS_ERROR as possible return value from I2C_MASTER_StartTransmitIR
  64:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  65:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2021-01-08:
  66:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Modified check for minimum XMCLib version
  67:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  68:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcond
  69:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  70:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
  71:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  72:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifndef I2C_MASTER_H
  73:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_H
  74:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  75:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  76:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  77:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  78:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * HEADER FILES
  79:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  80:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "xmc_gpio.h"
  81:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "xmc_i2c.h"
  82:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "i2c_master_conf.h"
  83:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  84:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if(UC_FAMILY == XMC4)
  85:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
  86:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "GLOBAL_DMA/global_dma.h"
  87:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  88:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  89:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  90:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "DAVE_Common.h"
  91:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  92:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  93:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef void(*i2c_master_fptr_cbhandler)(void);
  94:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  95:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  96:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * MACROS
  97:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  98:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_XMC_LIB_MAJOR_VERSION 2
  99:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_XMC_LIB_MINOR_VERSION 0
 100:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_XMC_LIB_PATCH_VERSION 0
 101:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 102:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if !((XMC_LIB_MAJOR_VERSION > I2C_MASTER_XMC_LIB_MAJOR_VERSION) ||\
 103:../Dave/Generated/I2C_MASTER/i2c_master.h ****       ((XMC_LIB_MAJOR_VERSION == I2C_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > I2C_
 104:../Dave/Generated/I2C_MASTER/i2c_master.h ****       ((XMC_LIB_MAJOR_VERSION == I2C_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == I2C
 105:../Dave/Generated/I2C_MASTER/i2c_master.h **** #error "I2C_MASTER requires XMC Peripheral Library v2.0.0 or higher"
 106:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 107:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 108:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifndef I2C_MASTER_START_TRANSMIT_RETRIES
 109:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_START_TRANSMIT_RETRIES (0x7fff)
 110:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 111:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 112:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 113:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * ENUMS
 114:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
 115:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 116:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_enumerations
 117:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 118:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 119:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 120:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Initialization status.
 121:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 122:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_STATUS
 123:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 124:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_SUCCESS = 0U,           /*!< I2C_MASTER SUCCESS */
 125:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_FAILURE = 1U,           /*!< I2C_MASTER FAILURE */
 126:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_BUSY = 2U,              /*!< I2C_MASTER BUSY */
 127:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_UNSUPPORTED_MODE = 3U,  /*!< I2C_MASTER UNSUPPORTED MODE */
 128:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_BUS_ERROR = 4U          /*!< I2C_MASTER BUS_ERROR */
 129:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_STATUS_t;
 130:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 131:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 132:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Direction
 133:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 134:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_DIRECTION
 135:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 136:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_DIRECTION_TRANSMIT = 0U,   /*!< Direction indicates transmit */
 137:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_DIRECTION_RECEIVE = 1U     /*!< Direction indicates receive */
 138:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_DIRECTION_t;
 139:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 140:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 141:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 142:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 143:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_TRANSFER_MODE
 144:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 145:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 146:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 147:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP con
 148:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_TRANSFER_MODE_t;
 149:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 150:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @}
 151:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 152:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 153:../Dave/Generated/I2C_MASTER/i2c_master.h **** * DATA STRUCTURES
 154:../Dave/Generated/I2C_MASTER/i2c_master.h **** ***************************************************************************************************
 155:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 156:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 157:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_datastructures
 158:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 159:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 160:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 161:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Structure for DMA configuration.
 162:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 163:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
 164:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_DMA_CONFIG
 165:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 166:../Dave/Generated/I2C_MASTER/i2c_master.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 167:../Dave/Generated/I2C_MASTER/i2c_master.h ****   GLOBAL_DMA_t * global_dma;                   /**< Global DMA handle */
 168:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 169:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_DMA_CONFIG_t;
 170:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 171:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 172:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Constant structure for holding the configuration parameters of I2C channel.
 173:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 174:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_CONFIG
 175:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 176:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const XMC_I2C_CH_CONFIG_t *brg_config;             /*!< Basic I2C configuration from the GUI wit
 177:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 178:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel confi
 179:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                                    data transmission.*/
 180:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 181:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 182:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel confi
 183:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                                    data reception.*/
 184:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 185:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_config;         /*!< Function pointer to configure the MUX va
 186:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_enable_io;      /*!< Function pointer to enable SDA/SCL outpu
 187:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_disable_io;     /*!< Function pointer to disable SDA/SCL outp
 188:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 189:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler tx_cbhandler;            /*!< Function pointer to hold the callback fu
 190:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when the transmission is complete
 191:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler rx_cbhandler;            /*!< Function pointer to hold the callback fu
 192:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when the reception is complete*/
 193:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler nack_cbhandler;          /*!< Function pointer to hold the callback fu
 194:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when nack is received*/
 195:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler arbitration_cbhandler;   /*!< Function pointer to hold the callback fu
 196:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when arbitration lost is occured*
 197:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler error_cbhandler;         /*!< Function pointer to hold the callback fu
 198:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when error is detected.*/
 199:../Dave/Generated/I2C_MASTER/i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t transmit_mode;          /**< Mode used for transmitting data. Data ca
 200:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 201:../Dave/Generated/I2C_MASTER/i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t receive_mode;           /**< Mode used for receiving data. Data can b
 202:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 203:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 204:../Dave/Generated/I2C_MASTER/i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t txFIFO_size;               /*!< TxFIFO size configuration*/
 205:../Dave/Generated/I2C_MASTER/i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t rxFIFO_size;               /*!< RxFIFO size configuration*/
 206:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 207:../Dave/Generated/I2C_MASTER/i2c_master.h ****    IRQn_Type tx_irqn;
 208:../Dave/Generated/I2C_MASTER/i2c_master.h ****    IRQn_Type rx_irqn; 
 209:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_CONFIG_t;
 210:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 211:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 212:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Structure to hold the dynamic variables for the I2C_MASTER communication.
 213:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 214:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_RUNTIME
 215:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 216:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t * tx_data;                     /*!< Pointer to the transmit data buffer*/
 217:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t * rx_data;                     /*!< Pointer to the receive data buffer*/
 218:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t tx_data_count;                /*!< Number of bytes of data to be transmitted*/
 219:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t tx_data_index;       /*!< Index to the byte to be transmitted next in the tx_da
 220:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_data_count;                /*!< Number of bytes of data to be received*/
 221:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 222:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_dma_data_count;            /*!< Number of bytes of data to be received-DMA mode*/
 223:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_dma_data_index;            /*!< Index of bytes of data to be received-DMA mode*/
 224:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 225:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t rx_data_index;       /*!< Indicates the number of bytes currently available in 
 226:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t direction;           /*!< Indicates TRANSMIT/RECEIVE */
 227:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t send_stop;                    /*!< Indicates to stop the I2C */
 228:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t send_nack;                    /*!< Indicates to send nack */
 229:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t tx_ack_sr;                         /*!< Service request number assigned to transmit inter
 230:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t rx_sr;                         /*!< Service request number assigned to receive interrupts
 231:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool tx_busy;                 /*!< Status flag to indicate busy when a transmission is a
 232:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool rx_busy;                 /*!< Status flag to indicate busy when a reception is assi
 233:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool bus_acquired;            /*!< flag to indicate whether bus is acquired or not */
 234:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_RUNTIME_t;
 235:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 236:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 237:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 238:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 239:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 240:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER
 241:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 242:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_t *channel;                    /*!< USIC channel*/
 243:../Dave/Generated/I2C_MASTER/i2c_master.h ****   const I2C_MASTER_CONFIG_t * const config;  /*!< I2C configuration structure pointer*/
 244:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_RUNTIME_t * const runtime;      /*!< Pointer to the structure holding all variables,
 245:../Dave/Generated/I2C_MASTER/i2c_master.h ****    	                                               that can change at runtime*/
 246:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_t;
 247:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 248:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 249:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @}
 250:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 251:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 252:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifdef __cplusplus
 253:../Dave/Generated/I2C_MASTER/i2c_master.h **** extern "C" {
 254:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 255:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 256:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 257:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 258:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_apidoc
 259:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 260:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 261:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 262:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 263:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * API PROTOTYPES
 264:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
 265:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 266:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Get I2C_MASTER APP version.
 267:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return \a DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 268:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 269:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description: </b><br>
 270:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The function can be used to check application software compatibility with a
 271:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * specific version of the APP.
 272:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 273:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 274:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 275:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 276:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 277:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 278:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_APP_VERSION_t version;
 279:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_Init();
 280:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    version = I2C_MASTER_GetAppVersion();
 281:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(version.major != 4U)
 282:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 283:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 284:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 285:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 286:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 287:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 288:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 289:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 290:../Dave/Generated/I2C_MASTER/i2c_master.h **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void);
 291:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 292:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief This function initializes the I2C_MASTER APP based on user provided configuration.
 293:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 294:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
 295:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 296:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description: </b><br>
 297:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C configurations like channel selection,baud rate setting,
 298:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * FIFO configuration etc are done in this API.
 299:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Protocol specific interrupts can also be enabled using the I2C_MASTER_Init
 300:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * function.
 301:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 302:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 303:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 304:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 305:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * #include "DAVE.h"
 306:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * int main(void)
 307:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * {
 308:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   // Initializing the modules and the multiplexer
 309:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_Init(); // I2C_MASTER_Init will be called from DAVE_Init()
 310:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1)
 311:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {}
 312:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 313:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 314:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 315:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 316:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 317:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 318:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle);
 319:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 320:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 321:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 322:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief  Receives the data from I2C slave device.
 323:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 324:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start Flag to indicate that the start condition need to be send.
 325:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address I2C slave device address.
 326:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data buffer to receive data.
 327:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  count The number of bytes to be received from slave.
 328:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 329:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_nack The flag to indicate that the NACK condition need to be send for the last byte
 330:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 331:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 332:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_Receive API can be used in Interrupt and Direct modes.\n
 333:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 334:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 335:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 336:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).\n
 337:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 338:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 339:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 340:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 341:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 342:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 343:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define BYTES_TO_READ 10
 344:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
 345:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 346:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 347:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 348:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 349:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 350:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 351:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  } PCA9502_REGADDR_t;
 352:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 353:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 354:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t data = 0x55;
 355:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t rx_data;
 356:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 357:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 358:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 359:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_STATUS_t init_status;  
 360:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   init_status = DAVE_Init();
 361:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 362:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 363:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
 364:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Write data to IO EXPANDER
 365:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 366:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 367:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 368:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 369:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 370:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 371:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Read data from IO EXPANDER
 372:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 373:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 374:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 375:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 376:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 377:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 378:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1)
 379:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   { }
 380:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  return 0;
 381:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 382:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 383:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 384:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 385:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 386:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 387:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                        uint8_t * data, const uint32_t count, bool send_stop, bool s
 388:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 389:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 390:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Transmits data to I2C slave device.
 391:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 392:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 393:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start The flag to indicate that the start condition need to be send.
 394:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address I2C slave device address.
 395:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data buffer containing the data to transmit.
 396:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size The number of bytes to be send to slave.
 397:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 398:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 399:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 400:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 401:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_Transmit API can be used in Interrupt and Direct modes.\n
 402:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 403:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 404:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 405:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write). \n
 406:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 407:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 
 408:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 409:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 410:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 411:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 412:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 413:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 414:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 415:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 416:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 417:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  } PCA9502_REGADDR_t;
 418:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 419:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 420:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 421:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 422:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 423:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 424:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 425:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 426:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 427:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 428:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
 429:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Write data to IO EXPANDER
 430:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 431:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 432:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 433:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
 434:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 435:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 436:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 437:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 438:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 439:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 440:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 441:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 442:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 443:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 444:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 445:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 446:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                uint8_t *data, const uint32_t size, bool send_stop);
 447:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 448:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 449:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Get the I2C flag status.
 450:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 451:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 452:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 453:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *			 	      bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be used to selec
 454:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    multiple flags.
 455:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 456:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t Flag status.
 457:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 458:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 459:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 460:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 461:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 462:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 463:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 464:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 465:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 466:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 467:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 468:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 469:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 470:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 471:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 472:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 473:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 474:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
 475:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 476:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 477:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 478:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 479:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 480:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 481:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 482:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 483:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 484:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 485:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 486:../Dave/Generated/I2C_MASTER/i2c_master.h **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype);
 487:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 488:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 489:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Clear the I2C flag status.
 490:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 491:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 492:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 493:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    The bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be 
 494:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    multiple flags.
 495:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 496:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None <BR>
 497:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 498:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 499:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 500:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 501:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 502:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 503:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 504:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 505:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 506:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 507:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 508:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 509:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 510:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 511:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 512:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 513:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
 514:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 515:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 516:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 517:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 518:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 519:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 520:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 521:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 522:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 523:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 524:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 525:../Dave/Generated/I2C_MASTER/i2c_master.h **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype);
 526:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 527:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 528:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Aborts the ongoing data transmission.
 529:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 530:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 531:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 532:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 533:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If there is a transmission in progress, it will be stopped. Once the transmission is stopped, 
 534:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * user can start a new transmission without delay.
 535:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 536:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 537:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 538:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 539:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 540:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 541:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 542:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 543:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 544:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buf[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 545:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 546:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 547:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 548:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 549:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 550:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 551:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 552:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 553:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 554:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
 555:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 556:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 557:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 558:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
 559:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 560:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 561:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 562:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 563:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 564:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 565:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 566:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 567:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 568:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle);
 569:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 570:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 571:../Dave/Generated/I2C_MASTER/i2c_master.h **** * @brief Stops the active data reception request.
 572:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 573:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 574:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 575:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 576:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a reception is in progress, it will be stopped. When a reception request
 577:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * is active, user will not be able to place a new receive request till the active
 578:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * reception is complete. This API can stop the progressing reception to make
 579:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * a new receive request.
 580:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 581:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 582:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 583:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 584:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 585:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 586:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 587:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 588:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 589:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 590:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t rx_buf[25];
 591:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t tx_buf[2];
 592:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_STATUS_t init_status;
 593:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   init_status = DAVE_Init();
 594:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 595:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 596:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //send the address from which data to be transfered
 597:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     tx_buf[0] = 0;
 598:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 599:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 600:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 601:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 602:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_SendStop(&I2C_MASTER_0);
 603:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 604:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 605:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 606:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 607:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 608:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1U)
 609:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 610:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 611:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 612:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 1U;
 613:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 614:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 615:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 616:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 617:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 618:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle);
 619:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 620:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 621:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1U) || defined(DOXYGEN)
 622:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 623:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for transmitting data over I2C channel using DMA.
 624:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 625:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 626:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  block_size size of the block
 627:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  addr    address\n
 628:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 629:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 630:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 631:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 632:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 633:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 634:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 635:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * request is registered.
 636:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 637:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 638:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The data transmission is accomplished using DMA. User can configure a callback function in the A
 639:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. The function uses AP
 640:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * structure to store the status of transmission.
 641:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This function only registers a data transmission request, if there is no active transmission in 
 642:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Actual data transmission happens through DMA channel.
 643:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * A maximum of 4095 bytes can be transmitted in one API call. This limit is because of the DMA sin
 644:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Callback function is executed when all the data bytes are transmitted.
 645:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 646:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 647:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the completion of data transmission.
 648:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If data more than the block size of 4095 have to be transmitted, user will have to transmit them
 649:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * calls to this API.
 650:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 651:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_StartTransmitDMA API can be used in DMA mode.
 652:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit should be configured as "DMA" mode in advanced settings tab. \n
 653:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 654:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 655:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 656:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 657:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 658:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 659:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 660:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 661:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 662:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 663:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 664:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 665:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 666:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 667:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 668:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 669:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 670:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 671:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 672:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 673:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 674:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 675:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 676:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 677:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
 678:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 679:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 680:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 681:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 682:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 683:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 684:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // trigger the DMA
 685:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitDMA(&I2C_MASTER_0, sizeof(Send_Data), Send_Data);
 686:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 687:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 688:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 689:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 690:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 691:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 692:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 693:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 694:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 695:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 696:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 697:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 698:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 699:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 700:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
 701:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 702:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 703:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1U) || defined(DOXYGEN)
 704:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 705:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel using DMA.
 706:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 707:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 708:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 709:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param block_size  size of the block
 710:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  addr  address \n
 711:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 712:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 713:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 714:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 715:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 716:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 717:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 718:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 719:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured callback function will be executed.
 720:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 721:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When all the requested number of data bytes are received, the configured callback function will 
 722:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, the user has to poll for the value of the variable, \a
 723:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * handle->runtime->rx_busy to be false. The value is updated to \a false when all the requested nu
 724:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * are received.
 725:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * A maximum of 4095 bytes can be received in one API call. This limit is because of the DMA single
 726:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 727:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveDMA API can be used only in DMA mode
 728:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive should be configured as "DMA" mode in advanced settings tab \n
 729:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 730:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 731:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 732:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 733:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 734:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 735:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 736:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 737:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 738:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 739:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Pre condition:
 740:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Transmit mode and receive mode should be configured to "DMA" in advanced settings tab
 741:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 742:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t ReadData[256];
 743:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 744:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 745:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 746:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 747:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 748:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 749:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 750:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 751:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 752:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 753:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 754:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 755:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 756:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
 757:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 758:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 759:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 760:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 761:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 762:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 763:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
 764:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 765:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 766:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 767:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 768:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 769:../Dave/Generated/I2C_MASTER/i2c_master.h ****  
 770:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveDMA(&I2C_MASTER_0, 200, ReadData);
 771:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 772:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 773:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 774:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 775:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 776:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 777:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 778:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 779:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 780:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 781:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 782:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  @endcode
 783:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 784:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 785:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t block_siz
 786:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 787:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 788:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1U)
 789:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 790:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for transmitting data over I2C_MASTER channel.
 791:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 792:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 793:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start flag to indicate the start condition
 794:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address slave address
 795:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data    pointer to buffer
 796:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size    number of bytes
 797:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop flag to indicate the stop condition\n
 798:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 799:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 800:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 801:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 802:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 803:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 804:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 805:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * request is registered.
 806:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 807:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 808:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The data transmission is accomplished using transmit interrupt. User can configure a callback fu
 809:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. If transmit FIFO is 
 810:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the trigger limit is set to 1. So the transmit interrupt will be generated when all the data in 
 811:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * from FIFO. The function uses APP handle's runtime structure to store the data pointer, count, da
 812:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * status of transmission. This function only registers a data transmission request if there is no 
 813:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * in progress.
 814:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Actual data transmission happens in the transmit interrupt service routine. A trigger is generat
 815:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interrupt to start loading the data. If transmit FIFO is configured, the data is filled into the
 816:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this point of
 817:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * some more data to be transmitted, it is loaded to the FIFO again. When FIFO is not enabled, data
 818:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * byte at a time. On transmission of each byte an interrupt is generated and the next byte is tran
 819:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interrupt service routine. Callback function is executed when all the data bytes are transmitted
 820:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of t
 821:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * structure( \a handle->runtime->tx_busy ) to check for the completion of data transmission.<br>
 822:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartTransmitIRQ API can be used only in Interrupt mode.
 823:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit should be configured as "Interrupt" mode in advanced settings tab.\n
 824:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 825:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 826:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 827:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).
 828:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 829:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 830:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 831:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 832:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 833:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 834:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 835:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 836:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 837:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 838:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 839:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 840:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 841:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 842:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 843:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Write data to IO EXPANDER
 844:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 845:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 846:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 847:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,64,true);
 848:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 849:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 850:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 851:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 852:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 853:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 854:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 855:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 856:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 857:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 858:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 859:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 860:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 861:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 862:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 863:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1U)
 864:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 865:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel.
 866:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 867:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 868:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 869:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start flag to indicate the start condition
 870:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address slave address
 871:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data    pointer to buffer
 872:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  count    number of bytes
 873:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop flag to indicate the stop condition
 874:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_nack flag to indicate the nack condition\n
 875:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 876:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 877:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 878:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 879:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 880:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 881:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 882:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 883:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 884:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured callback function will be executed. Based on the UI configuration, either standard re
 885:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * receive FIFO is used for data reception. An interrupt is configured for reading received data fr
 886:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * function only registers a request to receive a number of data bytes from a USIC channel. If FIFO
 887:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * reception, the FIFO limit is dynamically configured to optimally utilize the CPU load.  When all
 888:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * of data bytes are received, the configured callback function will be executed. If a callback fun
 889:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured, the user has to poll for the value of the variable, \a handle->runtime->rx_busy to b
 890:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * is updated to \a false when all the requested number of data bytes are received.<br>
 891:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveIRQ API can be used only in Interrupt mode.
 892:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive should be configured as "Interrupt" mode in advanced settings tab.\n
 893:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 894:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 895:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 896:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).
 897:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 898:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 899:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 900:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 901:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 902:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t rx_buffer[64];
 903:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 904:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 905:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 906:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 907:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 908:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 909:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 910:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 911:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 912:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Write data to IO EXPANDER
 913:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 914:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 915:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 916:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,rx_buffer,64,true, true);
 917:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 918:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 919:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 920:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 921:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 922:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 923:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 924:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 925:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 926:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 927:../Dave/Generated/I2C_MASTER/i2c_master.h ****  I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 928:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                uint8_t * data, const uint32_t count, bool send_stop
 929:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 930:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 931:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 932:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 933:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Gets the transmit FIFO event flags.
 934:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 935:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 936:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 937:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
 938:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                      their bit positions.\n
 939:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
 940:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 941:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 942:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer interrupt flag
 943:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * buffer error flag before providing the value.
 944:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * User has to mask the bits of interest before checking the status.
 945:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: Enable transmit fifo in Advanced settings tab. <br>
 946:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 947:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 948:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 949:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 950:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 951:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 952:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 953:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 954:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 955:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 956:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 957:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 958:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 959:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 960:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
 961:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
 962:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 963:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 964:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
 965:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
 966:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
 967:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
 968:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
 969:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 970:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 971:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 972:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 973:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 974:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 975:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 976:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 977:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 978:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 979:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 980:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 981:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 982:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetTXFIFOStatus(const I2C_MASTER_t* const handle)
 983:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 984:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetTXFIFOStatus: invalid handle", (handle != NULL));
 985:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
 986:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 987:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 988:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 989:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Configures trigger limit for the transmit FIFO.
 990:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 991:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 992:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size   FIFO size
 993:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
 994:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               \bRange: 0 to transmit FIFO size.\n
 995:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
 996:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
 997:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 998:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
 999:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1000:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1001:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1002:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1003:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * below the trigger limit.
1004:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1005:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1006:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1007:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1008:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1009:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1010:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1011:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
1012:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1013:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1014:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1015:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1016:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1017:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1018:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1019:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit, draining level as 10
1020:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1021:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // Execution will happen two times in the interrupt handler as the limit is set to 10
1022:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, Send_Data, 16, true);
1023:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1024:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1025:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1026:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1027:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1028:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1029:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1030:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1031:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1032:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1033:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1034:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1035:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1036:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1037:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetTXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1038:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                              const uint32_t limit)
1039:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1040:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetTXFIFOTriggerLimit: invalid handle", (handle != NULL));
1041:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1042:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1043:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1044:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Configures trigger limit for the receive FIFO.
1045:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1046:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1047:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size   FIFO size
1048:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1049:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               \bRange: 0 to receive FIFO size.\n
1050:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1051:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1052:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1053:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1054:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1055:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1056:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1057:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1058:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * above the trigger limit.
1059:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1060:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1061:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1062:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1063:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1064:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1065:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1066:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1067:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Rx_Data[256];
1068:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1069:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1070:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1071:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1072:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1073:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1074:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1075:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure receive fifo trigger limit to filling level as 10
1076:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1077:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // Execution will happen two times in the receive interrupt handler as the limit is set to 
1078:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, Rx_Data, 16, true, true);
1079:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
1080:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1081:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1082:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1083:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1084:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1085:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1086:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1087:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1088:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1089:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1090:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1091:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1092:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1093:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1094:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                              const uint32_t limit)
1095:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 704              	 .loc 4 1095 0
 705              	 .cfi_startproc
 706 0000 80B5     	 push {r7,lr}
 707              	.LCFI51:
 708              	 .cfi_def_cfa_offset 8
 709              	 .cfi_offset 7,-8
 710              	 .cfi_offset 14,-4
 711 0002 84B0     	 sub sp,sp,#16
 712              	.LCFI52:
 713              	 .cfi_def_cfa_offset 24
 714 0004 00AF     	 add r7,sp,#0
 715              	.LCFI53:
 716              	 .cfi_def_cfa_register 7
 717 0006 F860     	 str r0,[r7,#12]
 718 0008 B960     	 str r1,[r7,#8]
 719 000a 7A60     	 str r2,[r7,#4]
1096:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
1097:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 720              	 .loc 4 1097 0
 721 000c FB68     	 ldr r3,[r7,#12]
 722 000e 1968     	 ldr r1,[r3]
 723 0010 BB68     	 ldr r3,[r7,#8]
 724 0012 DAB2     	 uxtb r2,r3
 725 0014 7B68     	 ldr r3,[r7,#4]
 726 0016 081C     	 mov r0,r1
 727 0018 111C     	 mov r1,r2
 728 001a 1A1C     	 mov r2,r3
 729 001c FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
1098:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 730              	 .loc 4 1098 0
 731 0020 BD46     	 mov sp,r7
 732 0022 04B0     	 add sp,sp,#16
 733              	 
 734 0024 80BD     	 pop {r7,pc}
 735              	 .cfi_endproc
 736              	.LFE138:
 738 0026 C046     	 .section .text.I2C_MASTER_IsTXFIFOFull,"ax",%progbits
 739              	 .align 2
 740              	 .code 16
 741              	 .thumb_func
 743              	I2C_MASTER_IsTXFIFOFull:
 744              	.LFB139:
1099:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1100:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1101:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Checks if the transmit FIFO is full.
1102:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1103:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1104:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1105:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return bool Status of transmit FIFO filling level.
1106:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1107:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1108:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1109:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while filling
1110:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * data to the transmit FIFO.
1111:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: Transmit should be "Direct" mode in advanced settings tab.<br>
1112:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1113:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1114:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1115:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1116:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1117:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1118:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1119:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1120:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t send_data[] = "Infineon Technologies";
1121:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1122:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1123:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1124:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();           // Initialization of DAVE APPs
1125:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1126:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1127:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1128:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1129:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1130:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1131:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1132:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1133:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1134:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &send_data[0], 10, false);
1135:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Wait when Tx FIFO is full
1136:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  while(!I2C_MASTER_IsTXFIFOFull(&I2C_MASTER_0))
1137:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1138:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_Transmit(&I2C_MASTER_0, false, SLAVE_ADDRESS, &send_data[0], 10, false);
1139:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1140:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  while(1U)
1141:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1142:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1143:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
1144:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1145:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1146:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
1147:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 745              	 .loc 4 1147 0
 746              	 .cfi_startproc
 747 0000 80B5     	 push {r7,lr}
 748              	.LCFI54:
 749              	 .cfi_def_cfa_offset 8
 750              	 .cfi_offset 7,-8
 751              	 .cfi_offset 14,-4
 752 0002 82B0     	 sub sp,sp,#8
 753              	.LCFI55:
 754              	 .cfi_def_cfa_offset 16
 755 0004 00AF     	 add r7,sp,#0
 756              	.LCFI56:
 757              	 .cfi_def_cfa_register 7
 758 0006 7860     	 str r0,[r7,#4]
1148:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
1149:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 759              	 .loc 4 1149 0
 760 0008 7B68     	 ldr r3,[r7,#4]
 761 000a 1B68     	 ldr r3,[r3]
 762 000c 181C     	 mov r0,r3
 763 000e FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsFull
 764 0012 031C     	 mov r3,r0
1150:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 765              	 .loc 4 1150 0
 766 0014 181C     	 mov r0,r3
 767 0016 BD46     	 mov sp,r7
 768 0018 02B0     	 add sp,sp,#8
 769              	 
 770 001a 80BD     	 pop {r7,pc}
 771              	 .cfi_endproc
 772              	.LFE139:
 774              	 .section .text.I2C_MASTER_IsRXFIFOEmpty,"ax",%progbits
 775              	 .align 2
 776              	 .code 16
 777              	 .thumb_func
 779              	I2C_MASTER_IsRXFIFOEmpty:
 780              	.LFB140:
1151:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1152:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1153:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Checks if the receive FIFO is empty.
1154:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1155:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1156:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1157:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return bool Status of receive FIFO filling level.
1158:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1159:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                       \afalse- if receive FIFO still has data.<br>
1160:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1161:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while reading data from the receive FIFO
1162:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1163:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1164:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1165:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1166:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1167:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1168:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1169:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1170:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1171:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1172:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1173:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1174:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1175:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1176:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1177:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1178:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1179:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1180:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1181:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1182:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1183:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1184:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1185:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1186:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1187:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1188:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1189:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1190:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1191:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1192:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1193:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1194:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1195:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1196:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1197:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1198:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1199:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1200:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1201:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1202:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1203:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1204:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1205:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1206:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1U)
1207:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
1208:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1209:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1210:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1211:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1212:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
1213:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 781              	 .loc 4 1213 0
 782              	 .cfi_startproc
 783 0000 80B5     	 push {r7,lr}
 784              	.LCFI57:
 785              	 .cfi_def_cfa_offset 8
 786              	 .cfi_offset 7,-8
 787              	 .cfi_offset 14,-4
 788 0002 82B0     	 sub sp,sp,#8
 789              	.LCFI58:
 790              	 .cfi_def_cfa_offset 16
 791 0004 00AF     	 add r7,sp,#0
 792              	.LCFI59:
 793              	 .cfi_def_cfa_register 7
 794 0006 7860     	 str r0,[r7,#4]
1214:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
1215:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 795              	 .loc 4 1215 0
 796 0008 7B68     	 ldr r3,[r7,#4]
 797 000a 1B68     	 ldr r3,[r3]
 798 000c 181C     	 mov r0,r3
 799 000e FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_IsEmpty
 800 0012 031C     	 mov r3,r0
1216:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 801              	 .loc 4 1216 0
 802 0014 181C     	 mov r0,r3
 803 0016 BD46     	 mov sp,r7
 804 0018 02B0     	 add sp,sp,#8
 805              	 
 806 001a 80BD     	 pop {r7,pc}
 807              	 .cfi_endproc
 808              	.LFE140:
 810              	 .section .text.I2C_MASTER_GetReceivedByte,"ax",%progbits
 811              	 .align 2
 812              	 .code 16
 813              	 .thumb_func
 815              	I2C_MASTER_GetReceivedByte:
 816              	.LFB144:
1217:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1218:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1219:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Gets the status of event flags related to receive FIFO.
1220:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1221:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1222:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1223:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1224:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer event and 
1225:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * error event in their bit positions in TRBSR register.\n
1226:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status c
1227:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * comparison using \a OR operation.
1228:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1229:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1230:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * It provides the status of standard receive buffer event, alternative receive buffer event and re
1231:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * event.
1232:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function masks the TRBSR register with the bitmask of SRBI, ARBI and RBERI flags. User has to ma
1233:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interest before checking the status.
1234:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1235:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1236:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1237:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1238:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1239:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   #define SLAVE_ADDRESS 0xA0
1240:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t mem_address[2];
1241:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   int main(void)
1242:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
1243:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     DAVE_STATUS_t init_status;
1244:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1245:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     init_status = DAVE_Init();
1246:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     if(init_status == DAVE_STATUS_SUCCESS)
1247:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1248:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       mem_address[0] = 0x00;//memory which need to be read from slave
1249:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       //Configure receive fifo trigger limit as 10
1250:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1251:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1252:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1253:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1254:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1255:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0
1256:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1257:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1258:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1259:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     else
1260:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1261:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1262:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1263:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1264:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1265:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1266:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      return 1U;
1267:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1268:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1269:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1270:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1271:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetRXFIFOStatus(const I2C_MASTER_t* const handle)
1272:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1273:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetRXFIFOStatus: invalid handle", (handle != NULL));
1274:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1275:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1276:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1277:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1278:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to
1279:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * transmit FIFO.
1280:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1281:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1282:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1283:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register to be cleared.\n
1284:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be combined 
1285:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \a OR operation.
1286:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1287:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return    None
1288:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1289:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1290:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register. But the function does 
1291:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * value with the bit positions restricted to transmit FIFO status bits. User should ensure that th
1292:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * appropriately masked.
1293:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1294:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1295:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1296:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1297:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1298:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1299:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
1300:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1301:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1302:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1303:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1304:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1305:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1306:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1307:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00; //memory which need to be read from slave
1308:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
1309:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1310:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1311:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1312:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
1313:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1314:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
1315:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1316:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
1317:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1318:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1319:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1320:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1321:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1322:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1323:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1324:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1325:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1326:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1327:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1328:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1329:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1330:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearTXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1331:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1332:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearTXFIFOStatus: invalid handle", (handle != NULL));
1333:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1334:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1335:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1336:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1337:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to receive FIFO. It should be used 
1338:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * of standard receive buffer interrupt, alternative receive buffer interrupt and receive buffer er
1339:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1340:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1341:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1342:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register to be cleared.\n
1343:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1344:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             Multiple events can be input by using \a OR operation.
1345:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1346:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return    None
1347:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1348:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1349:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1350:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The function does not mask the input value to clear only receive buffer
1351:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * events. So user should appropriately mask the input value before calling
1352:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the function.
1353:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1354:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1355:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1356:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1357:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1358:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1359:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
1360:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1361:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1362:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1363:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1364:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1365:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1366:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1367:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
1368:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure receive fifo trigger limit as 10
1369:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1370:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1371:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1372:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1373:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1374:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0)
1375:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1376:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1377:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1378:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1379:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1380:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1381:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1382:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1383:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1384:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1385:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1386:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1387:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1388:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1389:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1390:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearRXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1391:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1392:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearRXFIFOStatus: invalid handle", (handle != NULL));
1393:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1394:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1395:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1396:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1397:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Provides the received data from receive buffer.
1398:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1399:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1400:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint8_t: Data read from RBUF.\n
1401:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1402:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1403:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This can be used in receive mode "Direct" to read the received data.
1404:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1405:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Otherwise it reads the data from OUTR register.
1406:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1407:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1408:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1409:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1410:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1411:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1412:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1413:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1414:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[10];
1415:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0,loc_index = 0;
1416:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1417:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1418:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1419:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1420:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1421:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1422:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1423:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1424:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1425:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1426:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1427:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1428:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1429:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1430:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1431:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1432:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1433:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1434:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1435:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1436:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        // wait for ACK
1437:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1438:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1439:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1440:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1441:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1442:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         index++;
1443:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1444:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1445:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1446:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1447:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1448:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1449:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1450:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1451:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1452:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1453:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1454:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1455:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1456:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1457:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1458:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1459:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1460:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1461:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1462:../Dave/Generated/I2C_MASTER/i2c_master.h **** /* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
1463:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
1464:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 817              	 .loc 4 1464 0
 818              	 .cfi_startproc
 819 0000 80B5     	 push {r7,lr}
 820              	.LCFI60:
 821              	 .cfi_def_cfa_offset 8
 822              	 .cfi_offset 7,-8
 823              	 .cfi_offset 14,-4
 824 0002 82B0     	 sub sp,sp,#8
 825              	.LCFI61:
 826              	 .cfi_def_cfa_offset 16
 827 0004 00AF     	 add r7,sp,#0
 828              	.LCFI62:
 829              	 .cfi_def_cfa_register 7
 830 0006 7860     	 str r0,[r7,#4]
1465:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
1466:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 831              	 .loc 4 1466 0
 832 0008 7B68     	 ldr r3,[r7,#4]
 833 000a 1B68     	 ldr r3,[r3]
 834 000c 181C     	 mov r0,r3
 835 000e FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 836 0012 031C     	 mov r3,r0
1467:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 837              	 .loc 4 1467 0
 838 0014 181C     	 mov r0,r3
 839 0016 BD46     	 mov sp,r7
 840 0018 02B0     	 add sp,sp,#8
 841              	 
 842 001a 80BD     	 pop {r7,pc}
 843              	 .cfi_endproc
 844              	.LFE144:
 846              	 .section .text.I2C_MASTER_TransmitByte,"ax",%progbits
 847              	 .align 2
 848              	 .code 16
 849              	 .thumb_func
 851              	I2C_MASTER_TransmitByte:
 852              	.LFB145:
1468:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1469:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1470:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Transmits single byte using I2C protocol.
1471:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1472:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1473:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  byte data byte to transmit. \n
1474:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1475:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 
1476:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1477:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1478:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1479:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1480:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1481:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1482:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1483:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1484:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1485:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1486:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1487:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1488:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1489:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1490:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1491:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1492:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1493:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1494:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1495:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1496:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1497:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1498:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1499:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1500:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1501:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // wait for ACK
1502:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1503:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1504:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1505:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1506:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1507:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // wait for ACK
1508:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1509:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1510:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1511:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1512:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1513:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1514:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1515:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1516:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
1517:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 853              	 .loc 4 1517 0
 854              	 .cfi_startproc
 855 0000 80B5     	 push {r7,lr}
 856              	.LCFI63:
 857              	 .cfi_def_cfa_offset 8
 858              	 .cfi_offset 7,-8
 859              	 .cfi_offset 14,-4
 860 0002 82B0     	 sub sp,sp,#8
 861              	.LCFI64:
 862              	 .cfi_def_cfa_offset 16
 863 0004 00AF     	 add r7,sp,#0
 864              	.LCFI65:
 865              	 .cfi_def_cfa_register 7
 866 0006 7860     	 str r0,[r7,#4]
 867 0008 0A1C     	 mov r2,r1
 868 000a FB1C     	 add r3,r7,#3
 869 000c 1A70     	 strb r2,[r3]
1518:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
1519:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 870              	 .loc 4 1519 0
 871 000e 7B68     	 ldr r3,[r7,#4]
 872 0010 1A68     	 ldr r2,[r3]
 873 0012 FB1C     	 add r3,r7,#3
 874 0014 1B78     	 ldrb r3,[r3]
 875 0016 101C     	 mov r0,r2
 876 0018 191C     	 mov r1,r3
 877 001a FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
1520:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 878              	 .loc 4 1520 0
 879 001e BD46     	 mov sp,r7
 880 0020 02B0     	 add sp,sp,#8
 881              	 
 882 0022 80BD     	 pop {r7,pc}
 883              	 .cfi_endproc
 884              	.LFE145:
 886              	 .section .text.I2C_MASTER_EnableEvent,"ax",%progbits
 887              	 .align 2
 888              	 .code 16
 889              	 .thumb_func
 891              	I2C_MASTER_EnableEvent:
 892              	.LFB146:
1521:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1522:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Enables the selected protocol events for interrupt generation.
1523:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1524:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1525:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  event  Protocol events to be enabled for interrupt generation. \n
1526:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1527:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         combined using the bitwise OR operation.\n
1528:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1529:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1530:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1531:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1532:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1533:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1534:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * may not yield expected result.
1535:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1536:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1537:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1538:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1539:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1540:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1541:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1542:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1543:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1544:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1545:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1546:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1547:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1548:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1549:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1550:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1551:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1552:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1553:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1554:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1555:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1556:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_EnableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1557:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1558:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1559:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1560:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1561:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1562:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1563:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
1564:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 893              	 .loc 4 1564 0
 894              	 .cfi_startproc
 895 0000 80B5     	 push {r7,lr}
 896              	.LCFI66:
 897              	 .cfi_def_cfa_offset 8
 898              	 .cfi_offset 7,-8
 899              	 .cfi_offset 14,-4
 900 0002 82B0     	 sub sp,sp,#8
 901              	.LCFI67:
 902              	 .cfi_def_cfa_offset 16
 903 0004 00AF     	 add r7,sp,#0
 904              	.LCFI68:
 905              	 .cfi_def_cfa_register 7
 906 0006 7860     	 str r0,[r7,#4]
 907 0008 3960     	 str r1,[r7]
1565:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL));
1566:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_EnableEvent(handle->channel, event);
 908              	 .loc 4 1566 0
 909 000a 7B68     	 ldr r3,[r7,#4]
 910 000c 1A68     	 ldr r2,[r3]
 911 000e 3B68     	 ldr r3,[r7]
 912 0010 101C     	 mov r0,r2
 913 0012 191C     	 mov r1,r3
 914 0014 FFF7FEFF 	 bl XMC_I2C_CH_EnableEvent
1567:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 915              	 .loc 4 1567 0
 916 0018 BD46     	 mov sp,r7
 917 001a 02B0     	 add sp,sp,#8
 918              	 
 919 001c 80BD     	 pop {r7,pc}
 920              	 .cfi_endproc
 921              	.LFE146:
 923 001e C046     	 .section .text.I2C_MASTER_DisableEvent,"ax",%progbits
 924              	 .align 2
 925              	 .code 16
 926              	 .thumb_func
 928              	I2C_MASTER_DisableEvent:
 929              	.LFB147:
1568:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1569:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Disables selected events from generating interrupt.
1570:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1571:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1572:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  event  Events to be disabled from generating interrupt. \n
1573:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1574:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         combined using the bitwise OR operation.\n
1575:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1576:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1577:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1578:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1579:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1580:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1581:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1582:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1583:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1584:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1585:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1586:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1587:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1588:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1589:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1590:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1591:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1592:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1593:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1594:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1595:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1596:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1597:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1598:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1599:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1600:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_DisableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1601:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1602:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1603:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1604:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1605:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1606:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1607:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1608:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
1609:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 930              	 .loc 4 1609 0
 931              	 .cfi_startproc
 932 0000 80B5     	 push {r7,lr}
 933              	.LCFI69:
 934              	 .cfi_def_cfa_offset 8
 935              	 .cfi_offset 7,-8
 936              	 .cfi_offset 14,-4
 937 0002 82B0     	 sub sp,sp,#8
 938              	.LCFI70:
 939              	 .cfi_def_cfa_offset 16
 940 0004 00AF     	 add r7,sp,#0
 941              	.LCFI71:
 942              	 .cfi_def_cfa_register 7
 943 0006 7860     	 str r0,[r7,#4]
 944 0008 3960     	 str r1,[r7]
1610:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
1611:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_DisableEvent(handle->channel, event);
 945              	 .loc 4 1611 0
 946 000a 7B68     	 ldr r3,[r7,#4]
 947 000c 1A68     	 ldr r2,[r3]
 948 000e 3B68     	 ldr r3,[r7]
 949 0010 101C     	 mov r0,r2
 950 0012 191C     	 mov r1,r3
 951 0014 FFF7FEFF 	 bl XMC_I2C_CH_DisableEvent
1612:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 952              	 .loc 4 1612 0
 953 0018 BD46     	 mov sp,r7
 954 001a 02B0     	 add sp,sp,#8
 955              	 
 956 001c 80BD     	 pop {r7,pc}
 957              	 .cfi_endproc
 958              	.LFE147:
 960 001e C046     	 .section .text.I2C_MASTER_ReceiveACK,"ax",%progbits
 961              	 .align 2
 962              	 .code 16
 963              	 .thumb_func
 965              	I2C_MASTER_ReceiveACK:
 966              	.LFB148:
1613:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1614:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1615:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Receives the ACK from slave
1616:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1617:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1618:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1619:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1620:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * After transmitting a byte, master receives the ack from slave.<br>
1621:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1622:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1623:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1624:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1625:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1626:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1627:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1628:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1629:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1630:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1631:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1632:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1633:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1634:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1635:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1636:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1637:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1638:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1639:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1640:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1641:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1642:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1643:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1644:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1645:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1646:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1647:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1648:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1649:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1650:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1651:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1652:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1653:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1654:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1655:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1656:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1657:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1658:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1659:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1660:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1661:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1662:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1663:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1664:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1665:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1666:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1667:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1668:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1669:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1670:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1671:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1672:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1673:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1674:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1675:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1676:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1677:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1678:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
1679:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 967              	 .loc 4 1679 0
 968              	 .cfi_startproc
 969 0000 80B5     	 push {r7,lr}
 970              	.LCFI72:
 971              	 .cfi_def_cfa_offset 8
 972              	 .cfi_offset 7,-8
 973              	 .cfi_offset 14,-4
 974 0002 82B0     	 sub sp,sp,#8
 975              	.LCFI73:
 976              	 .cfi_def_cfa_offset 16
 977 0004 00AF     	 add r7,sp,#0
 978              	.LCFI74:
 979              	 .cfi_def_cfa_register 7
 980 0006 7860     	 str r0,[r7,#4]
1680:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
1681:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterReceiveAck(handle->channel);
 981              	 .loc 4 1681 0
 982 0008 7B68     	 ldr r3,[r7,#4]
 983 000a 1B68     	 ldr r3,[r3]
 984 000c 181C     	 mov r0,r3
 985 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
1682:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 986              	 .loc 4 1682 0
 987 0012 BD46     	 mov sp,r7
 988 0014 02B0     	 add sp,sp,#8
 989              	 
 990 0016 80BD     	 pop {r7,pc}
 991              	 .cfi_endproc
 992              	.LFE148:
 994              	 .section .text.I2C_MASTER_ReceiveNACK,"ax",%progbits
 995              	 .align 2
 996              	 .code 16
 997              	 .thumb_func
 999              	I2C_MASTER_ReceiveNACK:
 1000              	.LFB149:
1683:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1684:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Receives the NACK from slave
1685:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1686:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1687:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1688:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1689:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * After transmitting a byte, master receives the nack from slave.<br>
1690:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1691:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1692:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1693:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1694:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1695:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1696:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1697:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1698:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1699:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1700:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint32_t index = 0, loc_index = 0;
1701:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1702:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1703:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1704:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1705:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1706:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1707:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1708:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1709:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1710:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1711:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1712:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1713:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1714:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1715:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1716:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1717:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1718:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1719:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1720:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1721:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1722:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1723:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1724:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1725:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1726:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1727:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1728:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1729:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // only for the last byte
1730:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ReceiveNACK(&I2C_MASTER_0);
1731:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1732:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1733:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1734:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1735:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1736:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1737:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1738:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1739:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1740:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1741:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1742:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1743:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1744:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1745:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1746:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1747:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1748:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
1749:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 1001              	 .loc 4 1749 0
 1002              	 .cfi_startproc
 1003 0000 80B5     	 push {r7,lr}
 1004              	.LCFI75:
 1005              	 .cfi_def_cfa_offset 8
 1006              	 .cfi_offset 7,-8
 1007              	 .cfi_offset 14,-4
 1008 0002 82B0     	 sub sp,sp,#8
 1009              	.LCFI76:
 1010              	 .cfi_def_cfa_offset 16
 1011 0004 00AF     	 add r7,sp,#0
 1012              	.LCFI77:
 1013              	 .cfi_def_cfa_register 7
 1014 0006 7860     	 str r0,[r7,#4]
1750:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
1751:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterReceiveNack(handle->channel);
 1015              	 .loc 4 1751 0
 1016 0008 7B68     	 ldr r3,[r7,#4]
 1017 000a 1B68     	 ldr r3,[r3]
 1018 000c 181C     	 mov r0,r3
 1019 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
1752:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 1020              	 .loc 4 1752 0
 1021 0012 BD46     	 mov sp,r7
 1022 0014 02B0     	 add sp,sp,#8
 1023              	 
 1024 0016 80BD     	 pop {r7,pc}
 1025              	 .cfi_endproc
 1026              	.LFE149:
 1028              	 .section .text.I2C_MASTER_SendStop,"ax",%progbits
 1029              	 .align 2
 1030              	 .code 16
 1031              	 .thumb_func
 1033              	I2C_MASTER_SendStop:
 1034              	.LFB150:
1753:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1754:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends stop command to slave
1755:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1756:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1757:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1758:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1759:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * At the end of transmission, sends a stop command to slave <br>
1760:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.<br>
1761:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1762:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1763:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1764:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1765:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1766:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1767:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1768:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1769:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1770:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1771:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1772:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1773:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1774:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1775:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1776:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1777:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1778:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1779:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //send the address to which data to be transfered
1780:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1781:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1782:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1783:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1784:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1785:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1786:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
1787:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1788:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1789:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1790:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1791:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1792:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1793:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1794:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1795:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1796:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1797:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1798:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1799:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
1800:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 1035              	 .loc 4 1800 0
 1036              	 .cfi_startproc
 1037 0000 80B5     	 push {r7,lr}
 1038              	.LCFI78:
 1039              	 .cfi_def_cfa_offset 8
 1040              	 .cfi_offset 7,-8
 1041              	 .cfi_offset 14,-4
 1042 0002 82B0     	 sub sp,sp,#8
 1043              	.LCFI79:
 1044              	 .cfi_def_cfa_offset 16
 1045 0004 00AF     	 add r7,sp,#0
 1046              	.LCFI80:
 1047              	 .cfi_def_cfa_register 7
 1048 0006 7860     	 str r0,[r7,#4]
1801:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
1802:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 1049              	 .loc 4 1802 0
 1050 0008 7B68     	 ldr r3,[r7,#4]
 1051 000a 1B68     	 ldr r3,[r3]
 1052 000c 181C     	 mov r0,r3
 1053 000e 1021     	 mov r1,#16
 1054 0010 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1803:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterStop(handle->channel);
 1055              	 .loc 4 1803 0
 1056 0014 7B68     	 ldr r3,[r7,#4]
 1057 0016 1B68     	 ldr r3,[r3]
 1058 0018 181C     	 mov r0,r3
 1059 001a FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
1804:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 1060              	 .loc 4 1804 0
 1061 001e BD46     	 mov sp,r7
 1062 0020 02B0     	 add sp,sp,#8
 1063              	 
 1064 0022 80BD     	 pop {r7,pc}
 1065              	 .cfi_endproc
 1066              	.LFE150:
 1068              	 .section .text.I2C_MASTER_SendStart,"ax",%progbits
 1069              	 .align 2
 1070              	 .code 16
 1071              	 .thumb_func
 1073              	I2C_MASTER_SendStart:
 1074              	.LFB151:
1805:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1806:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends start command to slave
1807:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1808:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param address slave address
1809:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param cmd     command
1810:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1811:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1812:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1813:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Before start of transmission, sends a start command to slave. \n
1814:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1815:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1816:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1817:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1818:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1819:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1820:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1821:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1822:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
1823:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1824:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1825:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1826:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1827:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1828:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1829:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1830:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1831:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1832:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1833:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1834:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1835:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1836:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1837:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //send the address to which data to be transfered
1838:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1839:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1840:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1841:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1842:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1843:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1844:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1845:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1846:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       XMC_DEBUG("main: Application initialization failed");
1847:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while(1U)
1848:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       {
1849:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       }
1850:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1851:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1852:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1853:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1854:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1855:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
1856:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                  const XMC_I2C_CH_CMD_t cmd)
1857:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 1075              	 .loc 4 1857 0
 1076              	 .cfi_startproc
 1077 0000 80B5     	 push {r7,lr}
 1078              	.LCFI81:
 1079              	 .cfi_def_cfa_offset 8
 1080              	 .cfi_offset 7,-8
 1081              	 .cfi_offset 14,-4
 1082 0002 84B0     	 sub sp,sp,#16
 1083              	.LCFI82:
 1084              	 .cfi_def_cfa_offset 24
 1085 0004 00AF     	 add r7,sp,#0
 1086              	.LCFI83:
 1087              	 .cfi_def_cfa_register 7
 1088 0006 F860     	 str r0,[r7,#12]
 1089 0008 B960     	 str r1,[r7,#8]
 1090 000a FB1D     	 add r3,r7,#7
 1091 000c 1A70     	 strb r2,[r3]
1858:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
1859:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 1092              	 .loc 4 1859 0
 1093 000e FB68     	 ldr r3,[r7,#12]
 1094 0010 1B68     	 ldr r3,[r3]
 1095 0012 181C     	 mov r0,r3
 1096 0014 0421     	 mov r1,#4
 1097 0016 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1860:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 1098              	 .loc 4 1860 0
 1099 001a FB68     	 ldr r3,[r7,#12]
 1100 001c 1968     	 ldr r1,[r3]
 1101 001e BB68     	 ldr r3,[r7,#8]
 1102 0020 9AB2     	 uxth r2,r3
 1103 0022 FB1D     	 add r3,r7,#7
 1104 0024 1B78     	 ldrb r3,[r3]
 1105 0026 081C     	 mov r0,r1
 1106 0028 111C     	 mov r1,r2
 1107 002a 1A1C     	 mov r2,r3
 1108 002c FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
1861:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 1109              	 .loc 4 1861 0
 1110 0030 BD46     	 mov sp,r7
 1111 0032 04B0     	 add sp,sp,#16
 1112              	 
 1113 0034 80BD     	 pop {r7,pc}
 1114              	 .cfi_endproc
 1115              	.LFE151:
 1117 0036 C046     	 .section .text.I2C_MASTER_SendRepeatedStart,"ax",%progbits
 1118              	 .align 2
 1119              	 .code 16
 1120              	 .thumb_func
 1122              	I2C_MASTER_SendRepeatedStart:
 1123              	.LFB152:
1862:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1863:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends repeated start command to slave
1864:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1865:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param address slave address
1866:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param cmd     command
1867:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1868:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1869:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1870:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Before start of transmission, sends a repeatedstart command to slave if bus acquired is true.\n
1871:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1872:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1873:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1874:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1875:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1876:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1877:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1878:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1879:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1880:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1881:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1882:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1883:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1884:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rx_buf[256];
1885:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1886:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1887:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1888:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1889:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterStart(I2C_MASTER_0.channel, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1890:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1891:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1892:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1893:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1894:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1895:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //send the address to which data to be transfered
1896:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1897:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1898:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1899:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1900:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1901:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1902:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1903:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1904:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1905:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1906:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1907:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1908:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 	   memset(rx_buf,0,16);
1909:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, false, SLAVE_ADDRESS, rx_buf, 16, true, true);
1910:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1911:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1912:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1913:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1914:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1915:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1916:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1917:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1918:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 1U;
1919:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1920:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1921:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1922:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t addre
1923:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                          const XMC_I2C_CH_CMD_t cmd)
1924:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 1124              	 .loc 4 1924 0
 1125              	 .cfi_startproc
 1126 0000 80B5     	 push {r7,lr}
 1127              	.LCFI84:
 1128              	 .cfi_def_cfa_offset 8
 1129              	 .cfi_offset 7,-8
 1130              	 .cfi_offset 14,-4
 1131 0002 84B0     	 sub sp,sp,#16
 1132              	.LCFI85:
 1133              	 .cfi_def_cfa_offset 24
 1134 0004 00AF     	 add r7,sp,#0
 1135              	.LCFI86:
 1136              	 .cfi_def_cfa_register 7
 1137 0006 F860     	 str r0,[r7,#12]
 1138 0008 B960     	 str r1,[r7,#8]
 1139 000a FB1D     	 add r3,r7,#7
 1140 000c 1A70     	 strb r2,[r3]
1925:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
1926:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEI
 1141              	 .loc 4 1926 0
 1142 000e FB68     	 ldr r3,[r7,#12]
 1143 0010 1B68     	 ldr r3,[r3]
 1144 0012 181C     	 mov r0,r3
 1145 0014 0821     	 mov r1,#8
 1146 0016 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1927:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 1147              	 .loc 4 1927 0
 1148 001a FB68     	 ldr r3,[r7,#12]
 1149 001c 1968     	 ldr r1,[r3]
 1150 001e BB68     	 ldr r3,[r7,#8]
 1151 0020 9AB2     	 uxth r2,r3
 1152 0022 FB1D     	 add r3,r7,#7
 1153 0024 1B78     	 ldrb r3,[r3]
 1154 0026 081C     	 mov r0,r1
 1155 0028 111C     	 mov r1,r2
 1156 002a 1A1C     	 mov r2,r3
 1157 002c FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
1928:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 1158              	 .loc 4 1928 0
 1159 0030 BD46     	 mov sp,r7
 1160 0032 04B0     	 add sp,sp,#16
 1161              	 
 1162 0034 80BD     	 pop {r7,pc}
 1163              	 .cfi_endproc
 1164              	.LFE152:
 1166 0036 C046     	 .section .text.calculate_minfifosize,"ax",%progbits
 1167              	 .align 2
 1168              	 .code 16
 1169              	 .thumb_func
 1171              	calculate_minfifosize:
 1172              	.LFB159:
 1173              	 .file 5 "../Dave/Generated/I2C_MASTER/i2c_master.c"
   1:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**
   2:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @file i2c_master.c
   3:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @date 2019-09-16
   4:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
   5:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * NOTE:
   6:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
   8:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**
   9:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @cond
  10:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  11:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * I2C_MASTER v4.1.34 Configures USIC channel to transmit & receive data using I2C protocol.
  12:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  13:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  14:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * All rights reserved.
  15:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  16:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * following conditions are met:
  18:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  19:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   disclaimer.
  21:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  22:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  25:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  28:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  36:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  39:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  40:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Change History
  41:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * --------------
  42:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  43:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-02-16:
  44:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Initial version<br>
  45:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  46:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-06-10:
  47:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  48:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  49:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-07-31:
  50:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - DMA support APIs added
  51:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  52:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-01-19:
  53:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Avoid unintended interrupts when filling FIFO
  54:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  55:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-11-17:
  56:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Use tx_irqn of channel config structure in the call of NVIC_ClearPendingIRQ()
  57:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  58:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-12-20:
  59:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Fix TX DMA issues
  60:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  61:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2019-06-24:
  62:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - I2C_MASTER_lStartTransmitPolling() handling of non ack     
  63:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  64:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2019-09-23:
  65:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Fixed return status of I2C_MASTER_lStartReceivePolling()
  66:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  67:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2020-09-16
  68:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - I2C_MASTER_StartTransmitIRQ() returns an error if START symbol was not transmitted into th
  69:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  70:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @endcond
  71:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  72:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
  73:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  74:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * HEADER FILES
  75:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  76:../Dave/Generated/I2C_MASTER/i2c_master.c **** #include "i2c_master.h"
  77:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  78:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  79:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * MACROS
  80:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  81:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_TDF_RECEIVE_ACK             (0x0200U)
  82:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_TDF_RECEIVE_NACK       (3U << 8U)
  83:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_DST_TR_WIDTH_MASK   (0x7EU)
  84:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_ADDR_INC_MASK       (0x600U)
  85:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_ADDR_INC_POS        (9U)
  86:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_TRANSFER_WIDTH_POS  (4U)
  87:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_DST_TRANSFER_WIDTH_POS  (1U)
  88:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  89:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_DMA_MAX_BLOCK_SIZE (4095U)
  90:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  91:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  92:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * LOCAL DATA
  93:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  94:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  95:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  96:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * LOCAL ROUTINES
  97:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  98:../Dave/Generated/I2C_MASTER/i2c_master.c ****  /*
  99:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Function monitors the configured protocol interrupt flags. It is called from the protocol interr
 100:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * service handler.
 101:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Function reads the status of the USIC channel and checks for configured flags in the app UI.
 102:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If any callback function is provided in the app UI, it will be called when the selected flag is 
 103:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 104:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * I2C_MASTER_t * pointer to the I2C_MASTER APP instance handle
 105:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 106:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 107:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);
 108:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 109:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 110:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
 111:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1174              	 .loc 5 111 0
 1175              	 .cfi_startproc
 1176 0000 80B5     	 push {r7,lr}
 1177              	.LCFI87:
 1178              	 .cfi_def_cfa_offset 8
 1179              	 .cfi_offset 7,-8
 1180              	 .cfi_offset 14,-4
 1181 0002 84B0     	 sub sp,sp,#16
 1182              	.LCFI88:
 1183              	 .cfi_def_cfa_offset 24
 1184 0004 00AF     	 add r7,sp,#0
 1185              	.LCFI89:
 1186              	 .cfi_def_cfa_register 7
 1187 0006 7860     	 str r0,[r7,#4]
 1188 0008 3960     	 str r1,[r7]
 112:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t result;
 113:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 114:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (a < b)
 1189              	 .loc 5 114 0
 1190 000a 7A68     	 ldr r2,[r7,#4]
 1191 000c 3B68     	 ldr r3,[r7]
 1192 000e 9A42     	 cmp r2,r3
 1193 0010 02D2     	 bcs .L42
 115:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 116:../Dave/Generated/I2C_MASTER/i2c_master.c ****     result = a;
 1194              	 .loc 5 116 0
 1195 0012 7B68     	 ldr r3,[r7,#4]
 1196 0014 FB60     	 str r3,[r7,#12]
 1197 0016 01E0     	 b .L43
 1198              	.L42:
 117:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 118:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 119:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 120:../Dave/Generated/I2C_MASTER/i2c_master.c ****     result = b;
 1199              	 .loc 5 120 0
 1200 0018 3B68     	 ldr r3,[r7]
 1201 001a FB60     	 str r3,[r7,#12]
 1202              	.L43:
 121:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 122:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (result);
 1203              	 .loc 5 122 0
 1204 001c FB68     	 ldr r3,[r7,#12]
 123:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1205              	 .loc 5 123 0
 1206 001e 181C     	 mov r0,r3
 1207 0020 BD46     	 mov sp,r7
 1208 0022 04B0     	 add sp,sp,#16
 1209              	 
 1210 0024 80BD     	 pop {r7,pc}
 1211              	 .cfi_endproc
 1212              	.LFE159:
 1214 0026 C046     	 .section .text.I2C_MASTER_GetAppVersion,"ax",%progbits
 1215              	 .align 2
 1216              	 .global I2C_MASTER_GetAppVersion
 1217              	 .code 16
 1218              	 .thumb_func
 1220              	I2C_MASTER_GetAppVersion:
 1221              	.LFB160:
 124:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 125:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 126:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
 127:../Dave/Generated/I2C_MASTER/i2c_master.c ****     (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
 128:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle, const uint32_t address,
 129:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                const XMC_I2C_CH_CMD_t cmd);
 130:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 131:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 132:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 133:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle);
 134:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 135:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 136:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if(I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 137:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle);
 138:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 139:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 140:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 141:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle);
 142:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size);
 143:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 144:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32
 145:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                          const uint32_t count);
 146:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 147:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_
 148:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle);
 149:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 150:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 151:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 152:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
 153:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_s
 154:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         const uint32_t slave_address, uint8_t *data
 155:../Dave/Generated/I2C_MASTER/i2c_master.c ****                               bool send_stop);
 156:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 157:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if I2C_MASTER_DIRECT_RX_ENABLED
 158:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_st
 159:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        uint8_t *data, uint32_t count, bool send_sto
 160:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                bool send_nack);
 161:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 162:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 163:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortTransmitDMA(const I2C_MASTER_t *const handle);
 164:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 165:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 166:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveDMA(const I2C_MASTER_t *const handle);
 167:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 168:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 169:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1) && (I2C_MASTER_DMA_RX_ENABLED == 1)
 170:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* DMA buffer to send the ACK */
 171:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint16_t ack_buf[1];
 172:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint16_t nack_buf[1];
 173:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 174:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 175:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 176:../Dave/Generated/I2C_MASTER/i2c_master.c **** * API IMPLEMENTATION
 177:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 178:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 179:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 180:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief API to retrieve the version of the I2C_MASTER APP.
 181:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 182:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return DAVE_APP_VERSION_t Structure containing major version, minor version
 183:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *         and patch version.
 184:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 185:../Dave/Generated/I2C_MASTER/i2c_master.c **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void)
 186:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1222              	 .loc 5 186 0
 1223              	 .cfi_startproc
 1224 0000 80B5     	 push {r7,lr}
 1225              	.LCFI90:
 1226              	 .cfi_def_cfa_offset 8
 1227              	 .cfi_offset 7,-8
 1228              	 .cfi_offset 14,-4
 1229 0002 82B0     	 sub sp,sp,#8
 1230              	.LCFI91:
 1231              	 .cfi_def_cfa_offset 16
 1232 0004 00AF     	 add r7,sp,#0
 1233              	.LCFI92:
 1234              	 .cfi_def_cfa_register 7
 187:../Dave/Generated/I2C_MASTER/i2c_master.c ****   DAVE_APP_VERSION_t version;
 188:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 189:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.major = I2C_MASTER_MAJOR_VERSION;
 1235              	 .loc 5 189 0
 1236 0006 3B1C     	 mov r3,r7
 1237 0008 0422     	 mov r2,#4
 1238 000a 1A70     	 strb r2,[r3]
 190:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.minor = I2C_MASTER_MINOR_VERSION;
 1239              	 .loc 5 190 0
 1240 000c 3B1C     	 mov r3,r7
 1241 000e 0122     	 mov r2,#1
 1242 0010 5A70     	 strb r2,[r3,#1]
 191:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.patch = I2C_MASTER_PATCH_VERSION;
 1243              	 .loc 5 191 0
 1244 0012 3B1C     	 mov r3,r7
 1245 0014 2222     	 mov r2,#34
 1246 0016 9A70     	 strb r2,[r3,#2]
 192:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 193:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (version);
 1247              	 .loc 5 193 0
 1248 0018 3B1D     	 add r3,r7,#4
 1249 001a 3A1C     	 mov r2,r7
 1250 001c 1188     	 ldrh r1,[r2]
 1251 001e 1980     	 strh r1,[r3]
 1252 0020 9278     	 ldrb r2,[r2,#2]
 1253 0022 9A70     	 strb r2,[r3,#2]
 1254 0024 3A1D     	 add r2,r7,#4
 1255 0026 0023     	 mov r3,#0
 1256 0028 1178     	 ldrb r1,[r2]
 1257 002a FF20     	 mov r0,#255
 1258 002c 0140     	 and r1,r0
 1259 002e FF20     	 mov r0,#255
 1260 0030 8343     	 bic r3,r0
 1261 0032 0B43     	 orr r3,r1
 1262 0034 5178     	 ldrb r1,[r2,#1]
 1263 0036 FF20     	 mov r0,#255
 1264 0038 0140     	 and r1,r0
 1265 003a 0902     	 lsl r1,r1,#8
 1266 003c 0648     	 ldr r0,.L47
 1267 003e 0340     	 and r3,r0
 1268 0040 0B43     	 orr r3,r1
 1269 0042 9278     	 ldrb r2,[r2,#2]
 1270 0044 FF21     	 mov r1,#255
 1271 0046 0A40     	 and r2,r1
 1272 0048 1204     	 lsl r2,r2,#16
 1273 004a 0449     	 ldr r1,.L47+4
 1274 004c 0B40     	 and r3,r1
 1275 004e 1343     	 orr r3,r2
 194:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1276              	 .loc 5 194 0
 1277 0050 181C     	 mov r0,r3
 1278 0052 BD46     	 mov sp,r7
 1279 0054 02B0     	 add sp,sp,#8
 1280              	 
 1281 0056 80BD     	 pop {r7,pc}
 1282              	.L48:
 1283              	 .align 2
 1284              	.L47:
 1285 0058 FF00FFFF 	 .word -65281
 1286 005c FFFF00FF 	 .word -16711681
 1287              	 .cfi_endproc
 1288              	.LFE160:
 1290              	 .section .text.I2C_MASTER_Init,"ax",%progbits
 1291              	 .align 2
 1292              	 .global I2C_MASTER_Init
 1293              	 .code 16
 1294              	 .thumb_func
 1296              	I2C_MASTER_Init:
 1297              	.LFB161:
 195:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 196:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to initialize the USIC Channel with GUI configured values.*/
 197:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
 198:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1298              	 .loc 5 198 0
 1299              	 .cfi_startproc
 1300 0000 80B5     	 push {r7,lr}
 1301              	.LCFI93:
 1302              	 .cfi_def_cfa_offset 8
 1303              	 .cfi_offset 7,-8
 1304              	 .cfi_offset 14,-4
 1305 0002 84B0     	 sub sp,sp,#16
 1306              	.LCFI94:
 1307              	 .cfi_def_cfa_offset 24
 1308 0004 00AF     	 add r7,sp,#0
 1309              	.LCFI95:
 1310              	 .cfi_def_cfa_register 7
 1311 0006 7860     	 str r0,[r7,#4]
 199:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 200:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 201:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle != NULL)
 1312              	 .loc 5 201 0
 1313 0008 7B68     	 ldr r3,[r7,#4]
 1314 000a 002B     	 cmp r3,#0
 1315 000c 08D0     	 beq .L50
 202:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 203:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Initialize the multiplexers required for I2C_MASTER configuration*/
 204:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->fptr_i2c_config();
 1316              	 .loc 5 204 0
 1317 000e 7B68     	 ldr r3,[r7,#4]
 1318 0010 5B68     	 ldr r3,[r3,#4]
 1319 0012 5B68     	 ldr r3,[r3,#4]
 1320 0014 9847     	 blx r3
 205:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 206:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 1321              	 .loc 5 206 0
 1322 0016 0F23     	 mov r3,#15
 1323 0018 FB18     	 add r3,r7,r3
 1324 001a 0022     	 mov r2,#0
 1325 001c 1A70     	 strb r2,[r3]
 1326 001e 03E0     	 b .L51
 1327              	.L50:
 207:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 208:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 209:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 210:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1328              	 .loc 5 210 0
 1329 0020 0F23     	 mov r3,#15
 1330 0022 FB18     	 add r3,r7,r3
 1331 0024 0122     	 mov r2,#1
 1332 0026 1A70     	 strb r2,[r3]
 1333              	.L51:
 211:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 212:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1334              	 .loc 5 212 0
 1335 0028 0F23     	 mov r3,#15
 1336 002a FB18     	 add r3,r7,r3
 1337 002c 1B78     	 ldrb r3,[r3]
 213:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1338              	 .loc 5 213 0
 1339 002e 181C     	 mov r0,r3
 1340 0030 BD46     	 mov sp,r7
 1341 0032 04B0     	 add sp,sp,#16
 1342              	 
 1343 0034 80BD     	 pop {r7,pc}
 1344              	 .cfi_endproc
 1345              	.LFE161:
 1347 0036 C046     	 .section .text.I2C_MASTER_GetFlagStatus,"ax",%progbits
 1348              	 .align 2
 1349              	 .global I2C_MASTER_GetFlagStatus
 1350              	 .code 16
 1351              	 .thumb_func
 1353              	I2C_MASTER_GetFlagStatus:
 1354              	.LFB162:
 214:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 215:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to get flag status of the requested parameter */
 216:../Dave/Generated/I2C_MASTER/i2c_master.c **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
 217:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1355              	 .loc 5 217 0
 1356              	 .cfi_startproc
 1357 0000 80B5     	 push {r7,lr}
 1358              	.LCFI96:
 1359              	 .cfi_def_cfa_offset 8
 1360              	 .cfi_offset 7,-8
 1361              	 .cfi_offset 14,-4
 1362 0002 84B0     	 sub sp,sp,#16
 1363              	.LCFI97:
 1364              	 .cfi_def_cfa_offset 24
 1365 0004 00AF     	 add r7,sp,#0
 1366              	.LCFI98:
 1367              	 .cfi_def_cfa_register 7
 1368 0006 7860     	 str r0,[r7,#4]
 1369 0008 3960     	 str r1,[r7]
 218:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t status;
 219:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 220:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 1370              	 .loc 5 220 0
 1371 000a 7B68     	 ldr r3,[r7,#4]
 1372 000c 1B68     	 ldr r3,[r3]
 1373 000e 181C     	 mov r0,r3
 1374 0010 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 1375 0014 031C     	 mov r3,r0
 1376 0016 FB60     	 str r3,[r7,#12]
 221:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 222:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status & flagtype);
 1377              	 .loc 5 222 0
 1378 0018 FB68     	 ldr r3,[r7,#12]
 1379 001a 3A68     	 ldr r2,[r7]
 1380 001c 1340     	 and r3,r2
 223:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1381              	 .loc 5 223 0
 1382 001e 181C     	 mov r0,r3
 1383 0020 BD46     	 mov sp,r7
 1384 0022 04B0     	 add sp,sp,#16
 1385              	 
 1386 0024 80BD     	 pop {r7,pc}
 1387              	 .cfi_endproc
 1388              	.LFE162:
 1390 0026 C046     	 .section .text.I2C_MASTER_ClearFlag,"ax",%progbits
 1391              	 .align 2
 1392              	 .global I2C_MASTER_ClearFlag
 1393              	 .code 16
 1394              	 .thumb_func
 1396              	I2C_MASTER_ClearFlag:
 1397              	.LFB163:
 224:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 225:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to clear flag status of the requested parameter */
 226:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
 227:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1398              	 .loc 5 227 0
 1399              	 .cfi_startproc
 1400 0000 80B5     	 push {r7,lr}
 1401              	.LCFI99:
 1402              	 .cfi_def_cfa_offset 8
 1403              	 .cfi_offset 7,-8
 1404              	 .cfi_offset 14,-4
 1405 0002 82B0     	 sub sp,sp,#8
 1406              	.LCFI100:
 1407              	 .cfi_def_cfa_offset 16
 1408 0004 00AF     	 add r7,sp,#0
 1409              	.LCFI101:
 1410              	 .cfi_def_cfa_register 7
 1411 0006 7860     	 str r0,[r7,#4]
 1412 0008 3960     	 str r1,[r7]
 228:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 1413              	 .loc 5 228 0
 1414 000a 7B68     	 ldr r3,[r7,#4]
 1415 000c 1A68     	 ldr r2,[r3]
 1416 000e 3B68     	 ldr r3,[r7]
 1417 0010 101C     	 mov r0,r2
 1418 0012 191C     	 mov r1,r3
 1419 0014 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 229:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1420              	 .loc 5 229 0
 1421 0018 BD46     	 mov sp,r7
 1422 001a 02B0     	 add sp,sp,#8
 1423              	 
 1424 001c 80BD     	 pop {r7,pc}
 1425              	 .cfi_endproc
 1426              	.LFE163:
 1428 001e C046     	 .section .text.I2C_MASTER_Transmit,"ax",%progbits
 1429              	 .align 2
 1430              	 .global I2C_MASTER_Transmit
 1431              	 .code 16
 1432              	 .thumb_func
 1434              	I2C_MASTER_Transmit:
 1435              	.LFB164:
 230:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 231:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to transmit the data to slave device */
 232:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 233:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         uint8_t *data, const uint32_t size, bool send_stop)
 234:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1436              	 .loc 5 234 0
 1437              	 .cfi_startproc
 1438 0000 B0B5     	 push {r4,r5,r7,lr}
 1439              	.LCFI102:
 1440              	 .cfi_def_cfa_offset 16
 1441              	 .cfi_offset 4,-16
 1442              	 .cfi_offset 5,-12
 1443              	 .cfi_offset 7,-8
 1444              	 .cfi_offset 14,-4
 1445 0002 88B0     	 sub sp,sp,#32
 1446              	.LCFI103:
 1447              	 .cfi_def_cfa_offset 48
 1448 0004 02AF     	 add r7,sp,#8
 1449              	.LCFI104:
 1450              	 .cfi_def_cfa 7,40
 1451 0006 F860     	 str r0,[r7,#12]
 1452 0008 7A60     	 str r2,[r7,#4]
 1453 000a 3B60     	 str r3,[r7]
 1454 000c 0B23     	 mov r3,#11
 1455 000e FB18     	 add r3,r7,r3
 1456 0010 0A1C     	 add r2,r1,#0
 1457 0012 1A70     	 strb r2,[r3]
 235:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 236:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 237:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 1458              	 .loc 5 237 0
 1459 0014 1723     	 mov r3,#23
 1460 0016 FB18     	 add r3,r7,r3
 1461 0018 0222     	 mov r2,#2
 1462 001a 1A70     	 strb r2,[r3]
 238:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 239:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 1463              	 .loc 5 239 0
 1464 001c FB68     	 ldr r3,[r7,#12]
 1465 001e 5B68     	 ldr r3,[r3,#4]
 1466 0020 2422     	 mov r2,#36
 1467 0022 9B5C     	 ldrb r3,[r3,r2]
 1468 0024 002B     	 cmp r3,#0
 1469 0026 12D1     	 bne .L58
 240:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 241:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 242:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
 1470              	 .loc 5 242 0
 1471 0028 1723     	 mov r3,#23
 1472 002a FC18     	 add r4,r7,r3
 1473 002c F868     	 ldr r0,[r7,#12]
 1474 002e 0B23     	 mov r3,#11
 1475 0030 FB18     	 add r3,r7,r3
 1476 0032 1978     	 ldrb r1,[r3]
 1477 0034 7A68     	 ldr r2,[r7,#4]
 1478 0036 3D68     	 ldr r5,[r7]
 1479 0038 BB6A     	 ldr r3,[r7,#40]
 1480 003a 0093     	 str r3,[sp]
 1481 003c 2C23     	 mov r3,#44
 1482 003e FB18     	 add r3,r7,r3
 1483 0040 1B78     	 ldrb r3,[r3]
 1484 0042 0193     	 str r3,[sp,#4]
 1485 0044 2B1C     	 mov r3,r5
 1486 0046 FFF7FEFF 	 bl I2C_MASTER_StartTransmitIRQ
 1487 004a 031C     	 mov r3,r0
 1488 004c 2370     	 strb r3,[r4]
 1489              	.L58:
 243:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 244:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 245:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 246:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 247:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 248:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_UNSUPPORTED_MODE;
 249:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 250:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 251:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 252:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 253:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
 254:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 255:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 256:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 257:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 258:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1490              	 .loc 5 258 0
 1491 004e 1723     	 mov r3,#23
 1492 0050 FB18     	 add r3,r7,r3
 1493 0052 1B78     	 ldrb r3,[r3]
 259:../Dave/Generated/I2C_MASTER/i2c_master.c **** } /* end of function */
 1494              	 .loc 5 259 0
 1495 0054 181C     	 mov r0,r3
 1496 0056 BD46     	 mov sp,r7
 1497 0058 06B0     	 add sp,sp,#24
 1498              	 
 1499 005a B0BD     	 pop {r4,r5,r7,pc}
 1500              	 .cfi_endproc
 1501              	.LFE164:
 1503              	 .section .text.I2C_MASTER_TransmitHandler,"ax",%progbits
 1504              	 .align 2
 1505              	 .global I2C_MASTER_TransmitHandler
 1506              	 .code 16
 1507              	 .thumb_func
 1509              	I2C_MASTER_TransmitHandler:
 1510              	.LFB165:
 260:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 261:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 262:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 263:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Transmit interrupt handler for the APP.
 264:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This is a common interrupt handling function called for different instances of the APP.
 265:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 266:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 267:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 268:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *  @return void
 269:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 270:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
 271:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1511              	 .loc 5 271 0
 1512              	 .cfi_startproc
 1513 0000 80B5     	 push {r7,lr}
 1514              	.LCFI105:
 1515              	 .cfi_def_cfa_offset 8
 1516              	 .cfi_offset 7,-8
 1517              	 .cfi_offset 14,-4
 1518 0002 84B0     	 sub sp,sp,#16
 1519              	.LCFI106:
 1520              	 .cfi_def_cfa_offset 24
 1521 0004 00AF     	 add r7,sp,#0
 1522              	.LCFI107:
 1523              	 .cfi_def_cfa_register 7
 1524 0006 7860     	 str r0,[r7,#4]
 272:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 273:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_min;
 274:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 275:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 1525              	 .loc 5 275 0
 1526 0008 7B68     	 ldr r3,[r7,#4]
 1527 000a 9B68     	 ldr r3,[r3,#8]
 1528 000c BB60     	 str r3,[r7,#8]
 276:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_min = 0U;
 1529              	 .loc 5 276 0
 1530 000e 0F23     	 mov r3,#15
 1531 0010 FB18     	 add r3,r7,r3
 1532 0012 0022     	 mov r2,#0
 1533 0014 1A70     	 strb r2,[r3]
 277:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 278:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* check if any error flag is set */
 279:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 1534              	 .loc 5 279 0
 1535 0016 7A68     	 ldr r2,[r7,#4]
 1536 0018 B123     	 mov r3,#177
 1537 001a 5B00     	 lsl r3,r3,#1
 1538 001c 101C     	 mov r0,r2
 1539 001e 191C     	 mov r1,r3
 1540 0020 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1541 0024 031E     	 sub r3,r0,#0
 1542 0026 14D0     	 beq .L61
 280:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
 281:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
 282:../Dave/Generated/I2C_MASTER/i2c_master.c ****                     (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 283:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 284:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* Disable the transmit events */
 285:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDAR
 1543              	 .loc 5 285 0
 1544 0028 7B68     	 ldr r3,[r7,#4]
 1545 002a 1A68     	 ldr r2,[r3]
 1546 002c 8023     	 mov r3,#128
 1547 002e DB05     	 lsl r3,r3,#23
 1548 0030 101C     	 mov r0,r2
 1549 0032 191C     	 mov r1,r3
 1550 0034 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 286:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 1551              	 .loc 5 286 0
 1552 0038 7B68     	 ldr r3,[r7,#4]
 1553 003a 1A68     	 ldr r2,[r3]
 1554 003c 8023     	 mov r3,#128
 1555 003e 9B01     	 lsl r3,r3,#6
 1556 0040 101C     	 mov r0,r2
 1557 0042 191C     	 mov r1,r3
 1558 0044 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
 287:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 288:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ProtocolHandler(handle);
 1559              	 .loc 5 288 0
 1560 0048 7B68     	 ldr r3,[r7,#4]
 1561 004a 181C     	 mov r0,r3
 1562 004c FFF7FEFF 	 bl I2C_MASTER_ProtocolHandler
 1563 0050 1FE1     	 b .L60
 1564              	.L61:
 289:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 290:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 291:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 292:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 293:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Direction = Transmit, Tx FIFO enabled
 294:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 295:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 1565              	 .loc 5 295 0
 1566 0052 BB68     	 ldr r3,[r7,#8]
 1567 0054 9B69     	 ldr r3,[r3,#24]
 1568 0056 002B     	 cmp r3,#0
 1569 0058 00D0     	 beq .LCB1381
 1570 005a 8CE0     	 b .L63
 1571              	.LCB1381:
 296:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 297:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 1572              	 .loc 5 297 0
 1573 005c 7B68     	 ldr r3,[r7,#4]
 1574 005e 5B68     	 ldr r3,[r3,#4]
 1575 0060 2622     	 mov r2,#38
 1576 0062 9B5C     	 ldrb r3,[r3,r2]
 1577 0064 002B     	 cmp r3,#0
 1578 0066 63D0     	 beq .L64
 298:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 299:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1579              	 .loc 5 299 0
 1580 0068 BB68     	 ldr r3,[r7,#8]
 1581 006a DA68     	 ldr r2,[r3,#12]
 1582 006c BB68     	 ldr r3,[r7,#8]
 1583 006e 9B68     	 ldr r3,[r3,#8]
 1584 0070 9A42     	 cmp r2,r3
 1585 0072 34D2     	 bcs .L65
 300:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 301:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 1586              	 .loc 5 301 0
 1587 0074 7A68     	 ldr r2,[r7,#4]
 1588 0076 8023     	 mov r3,#128
 1589 0078 DB05     	 lsl r3,r3,#23
 1590 007a 101C     	 mov r0,r2
 1591 007c 191C     	 mov r1,r3
 1592 007e FFF7FEFF 	 bl I2C_MASTER_DisableEvent
 302:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 1593              	 .loc 5 302 0
 1594 0082 7B68     	 ldr r3,[r7,#4]
 1595 0084 1A68     	 ldr r2,[r3]
 1596 0086 8023     	 mov r3,#128
 1597 0088 DB05     	 lsl r3,r3,#23
 1598 008a 101C     	 mov r0,r2
 1599 008c 191C     	 mov r1,r3
 1600 008e FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_EnableEvent
 303:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Fill the transmit FIFO */
 304:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 1601              	 .loc 5 304 0
 1602 0092 18E0     	 b .L66
 1603              	.L69:
 305:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 306:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* transmit each byte till index reaches to the last byte */
 307:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1604              	 .loc 5 307 0
 1605 0094 BB68     	 ldr r3,[r7,#8]
 1606 0096 DA68     	 ldr r2,[r3,#12]
 1607 0098 BB68     	 ldr r3,[r7,#8]
 1608 009a 9B68     	 ldr r3,[r3,#8]
 1609 009c 9A42     	 cmp r2,r3
 1610 009e 10D2     	 bcs .L67
 308:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 309:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
 310:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_inde
 1611              	 .loc 5 310 0
 1612 00a0 BB68     	 ldr r3,[r7,#8]
 1613 00a2 1A68     	 ldr r2,[r3]
 1614 00a4 BB68     	 ldr r3,[r7,#8]
 1615 00a6 DB68     	 ldr r3,[r3,#12]
 1616 00a8 D318     	 add r3,r2,r3
 1617 00aa 1B78     	 ldrb r3,[r3]
 1618 00ac 7A68     	 ldr r2,[r7,#4]
 1619 00ae 101C     	 mov r0,r2
 1620 00b0 191C     	 mov r1,r3
 1621 00b2 FFF7FEFF 	 bl I2C_MASTER_TransmitByte
 311:../Dave/Generated/I2C_MASTER/i2c_master.c ****             ptr_runtime->tx_data_index++;
 1622              	 .loc 5 311 0
 1623 00b6 BB68     	 ldr r3,[r7,#8]
 1624 00b8 DB68     	 ldr r3,[r3,#12]
 1625 00ba 5A1C     	 add r2,r3,#1
 1626 00bc BB68     	 ldr r3,[r7,#8]
 1627 00be DA60     	 str r2,[r3,#12]
 1628 00c0 01E0     	 b .L66
 1629              	.L67:
 312:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 313:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 314:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 315:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 1630              	 .loc 5 315 0
 1631 00c2 C046     	 mov r8,r8
 1632 00c4 E5E0     	 b .L60
 1633              	.L66:
 304:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 1634              	 .loc 5 304 0
 1635 00c6 7B68     	 ldr r3,[r7,#4]
 1636 00c8 181C     	 mov r0,r3
 1637 00ca FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 1638 00ce 031C     	 mov r3,r0
 1639 00d0 1A1C     	 mov r2,r3
 1640 00d2 0123     	 mov r3,#1
 1641 00d4 5340     	 eor r3,r2
 1642 00d6 DBB2     	 uxtb r3,r3
 1643 00d8 002B     	 cmp r3,#0
 1644 00da DBD1     	 bne .L69
 1645 00dc D9E0     	 b .L60
 1646              	.L65:
 316:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 317:../Dave/Generated/I2C_MASTER/i2c_master.c ****         } /* end of while */
 318:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 319:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 320:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 321:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send
 322:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAN
 1647              	 .loc 5 322 0
 1648 00de 7B68     	 ldr r3,[r7,#4]
 1649 00e0 1A68     	 ldr r2,[r3]
 1650 00e2 8023     	 mov r3,#128
 1651 00e4 DB05     	 lsl r3,r3,#23
 1652 00e6 101C     	 mov r0,r2
 1653 00e8 191C     	 mov r1,r3
 1654 00ea FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 323:../Dave/Generated/I2C_MASTER/i2c_master.c ****       NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 1655              	 .loc 5 323 0
 1656 00ee 7B68     	 ldr r3,[r7,#4]
 1657 00f0 5B68     	 ldr r3,[r3,#4]
 1658 00f2 2822     	 mov r2,#40
 1659 00f4 9B5C     	 ldrb r3,[r3,r2]
 1660 00f6 5BB2     	 sxtb r3,r3
 1661 00f8 181C     	 mov r0,r3
 1662 00fa FFF7FEFF 	 bl __NVIC_ClearPendingIRQ
 324:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 325:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*make sure data is transmitted in FIFO*/
 326:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 1663              	 .loc 5 326 0
 1664 00fe C046     	 mov r8,r8
 1665              	.L71:
 1666              	 .loc 5 326 0 is_stmt 0 discriminator 1
 1667 0100 7B68     	 ldr r3,[r7,#4]
 1668 0102 1B68     	 ldr r3,[r3]
 1669 0104 181C     	 mov r0,r3
 1670 0106 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsEmpty
 1671 010a 031C     	 mov r3,r0
 1672 010c 1A1C     	 mov r2,r3
 1673 010e 0123     	 mov r3,#1
 1674 0110 5340     	 eor r3,r2
 1675 0112 DBB2     	 uxtb r3,r3
 1676 0114 002B     	 cmp r3,#0
 1677 0116 F3D1     	 bne .L71
 327:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 328:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (ptr_runtime->bus_acquired == true)
 1678              	 .loc 5 328 0 is_stmt 1
 1679 0118 BB68     	 ldr r3,[r7,#8]
 1680 011a 2822     	 mov r2,#40
 1681 011c 9B5C     	 ldrb r3,[r3,r2]
 1682 011e DBB2     	 uxtb r3,r3
 1683 0120 002B     	 cmp r3,#0
 1684 0122 00D1     	 bne .LCB1488
 1685 0124 B5E0     	 b .L60
 1686              	.LCB1488:
 329:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 330:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 1687              	 .loc 5 330 0
 1688 0126 7B68     	 ldr r3,[r7,#4]
 1689 0128 181C     	 mov r0,r3
 1690 012a FFF7FEFF 	 bl I2C_MASTER_lSendStop_JumpTo_TxCallback
 1691 012e B0E0     	 b .L60
 1692              	.L64:
 331:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 332:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 333:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of  if(handle->config->txFIFO_size > 0) */
 334:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 335:../Dave/Generated/I2C_MASTER/i2c_master.c ****     Direction = transmit and Tx FIFO disabled
 336:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 337:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 338:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 339:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* transmit each byte till the last byte */
 340:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1693              	 .loc 5 340 0
 1694 0130 BB68     	 ldr r3,[r7,#8]
 1695 0132 DA68     	 ldr r2,[r3,#12]
 1696 0134 BB68     	 ldr r3,[r7,#8]
 1697 0136 9B68     	 ldr r3,[r3,#8]
 1698 0138 9A42     	 cmp r2,r3
 1699 013a 10D2     	 bcs .L73
 341:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 342:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 1700              	 .loc 5 342 0
 1701 013c BB68     	 ldr r3,[r7,#8]
 1702 013e 1A68     	 ldr r2,[r3]
 1703 0140 BB68     	 ldr r3,[r7,#8]
 1704 0142 DB68     	 ldr r3,[r3,#12]
 1705 0144 D318     	 add r3,r2,r3
 1706 0146 1B78     	 ldrb r3,[r3]
 1707 0148 7A68     	 ldr r2,[r7,#4]
 1708 014a 101C     	 mov r0,r2
 1709 014c 191C     	 mov r1,r3
 1710 014e FFF7FEFF 	 bl I2C_MASTER_TransmitByte
 343:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->tx_data_index++;
 1711              	 .loc 5 343 0
 1712 0152 BB68     	 ldr r3,[r7,#8]
 1713 0154 DB68     	 ldr r3,[r3,#12]
 1714 0156 5A1C     	 add r2,r3,#1
 1715 0158 BB68     	 ldr r3,[r7,#8]
 1716 015a DA60     	 str r2,[r3,#12]
 1717 015c 99E0     	 b .L60
 1718              	.L73:
 344:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 345:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 346:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 347:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
 348:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->bus_acquired == true)
 1719              	 .loc 5 348 0
 1720 015e BB68     	 ldr r3,[r7,#8]
 1721 0160 2822     	 mov r2,#40
 1722 0162 9B5C     	 ldrb r3,[r3,r2]
 1723 0164 DBB2     	 uxtb r3,r3
 1724 0166 002B     	 cmp r3,#0
 1725 0168 00D1     	 bne .LCB1526
 1726 016a 92E0     	 b .L60
 1727              	.LCB1526:
 349:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 350:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 1728              	 .loc 5 350 0
 1729 016c 7B68     	 ldr r3,[r7,#4]
 1730 016e 181C     	 mov r0,r3
 1731 0170 FFF7FEFF 	 bl I2C_MASTER_lSendStop_JumpTo_TxCallback
 1732 0174 8DE0     	 b .L60
 1733              	.L63:
 351:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 352:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 353:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 354:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if(ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT) */
 355:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 356:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 357:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 358:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Direction = Receive, Tx, Rx FIFO enabled.
 359:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
 360:../Dave/Generated/I2C_MASTER/i2c_master.c ****   If Rx FIFO is not enabled, default size of 2 is considered.
 361:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 362:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 1734              	 .loc 5 362 0
 1735 0176 7B68     	 ldr r3,[r7,#4]
 1736 0178 5B68     	 ldr r3,[r3,#4]
 1737 017a 2622     	 mov r2,#38
 1738 017c 9B5C     	 ldrb r3,[r3,r2]
 1739 017e 002B     	 cmp r3,#0
 1740 0180 5FD0     	 beq .L74
 363:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 364:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if ((handle->config->rxFIFO_size > 0))
 1741              	 .loc 5 364 0
 1742 0182 7B68     	 ldr r3,[r7,#4]
 1743 0184 5B68     	 ldr r3,[r3,#4]
 1744 0186 2722     	 mov r2,#39
 1745 0188 9B5C     	 ldrb r3,[r3,r2]
 1746 018a 002B     	 cmp r3,#0
 1747 018c 17D0     	 beq .L75
 365:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 366:../Dave/Generated/I2C_MASTER/i2c_master.c ****         fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_
 1748              	 .loc 5 366 0
 1749 018e 7B68     	 ldr r3,[r7,#4]
 1750 0190 5B68     	 ldr r3,[r3,#4]
 1751 0192 2622     	 mov r2,#38
 1752 0194 9B5C     	 ldrb r3,[r3,r2]
 1753 0196 1A1C     	 mov r2,r3
 1754 0198 0123     	 mov r3,#1
 1755 019a 9340     	 lsl r3,r3,r2
 1756 019c 191C     	 mov r1,r3
 367:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size
 1757              	 .loc 5 367 0
 1758 019e 7B68     	 ldr r3,[r7,#4]
 1759 01a0 5B68     	 ldr r3,[r3,#4]
 1760 01a2 2722     	 mov r2,#39
 1761 01a4 9B5C     	 ldrb r3,[r3,r2]
 366:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size
 1762              	 .loc 5 366 0
 1763 01a6 1A1C     	 mov r2,r3
 1764 01a8 0123     	 mov r3,#1
 1765 01aa 9340     	 lsl r3,r3,r2
 1766 01ac 081C     	 mov r0,r1
 1767 01ae 191C     	 mov r1,r3
 1768 01b0 FFF7FEFF 	 bl calculate_minfifosize
 1769 01b4 021C     	 mov r2,r0
 1770 01b6 0F23     	 mov r3,#15
 1771 01b8 FB18     	 add r3,r7,r3
 1772 01ba 1A70     	 strb r2,[r3]
 1773 01bc 03E0     	 b .L76
 1774              	.L75:
 368:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 369:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 370:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 371:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
 372:../Dave/Generated/I2C_MASTER/i2c_master.c ****         fifo_min = 2U;
 1775              	 .loc 5 372 0
 1776 01be 0F23     	 mov r3,#15
 1777 01c0 FB18     	 add r3,r7,r3
 1778 01c2 0222     	 mov r2,#2
 1779 01c4 1A70     	 strb r2,[r3]
 1780              	.L76:
 373:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 374:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 375:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAN
 1781              	 .loc 5 375 0
 1782 01c6 7B68     	 ldr r3,[r7,#4]
 1783 01c8 1A68     	 ldr r2,[r3]
 1784 01ca 8023     	 mov r3,#128
 1785 01cc DB05     	 lsl r3,r3,#23
 1786 01ce 101C     	 mov r0,r2
 1787 01d0 191C     	 mov r1,r3
 1788 01d2 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 376:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 377:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* fill the FIFO */
 378:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 1789              	 .loc 5 378 0
 1790 01d6 27E0     	 b .L77
 1791              	.L82:
 379:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 380:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1792              	 .loc 5 380 0
 1793 01d8 BB68     	 ldr r3,[r7,#8]
 1794 01da DA68     	 ldr r2,[r3,#12]
 1795 01dc BB68     	 ldr r3,[r7,#8]
 1796 01de 9B68     	 ldr r3,[r3,#8]
 1797 01e0 9A42     	 cmp r2,r3
 1798 01e2 20D2     	 bcs .L78
 381:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 382:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* check for last byte and send_nack is set to true */
 383:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->se
 1799              	 .loc 5 383 0
 1800 01e4 BB68     	 ldr r3,[r7,#8]
 1801 01e6 DB68     	 ldr r3,[r3,#12]
 1802 01e8 5A1C     	 add r2,r3,#1
 1803 01ea BB68     	 ldr r3,[r7,#8]
 1804 01ec 9B68     	 ldr r3,[r3,#8]
 1805 01ee 9A42     	 cmp r2,r3
 1806 01f0 08D1     	 bne .L79
 1807              	 .loc 5 383 0 is_stmt 0 discriminator 1
 1808 01f2 BB68     	 ldr r3,[r7,#8]
 1809 01f4 1B6A     	 ldr r3,[r3,#32]
 1810 01f6 012B     	 cmp r3,#1
 1811 01f8 04D1     	 bne .L79
 384:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 385:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 1812              	 .loc 5 385 0 is_stmt 1
 1813 01fa 7B68     	 ldr r3,[r7,#4]
 1814 01fc 181C     	 mov r0,r3
 1815 01fe FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 1816 0202 03E0     	 b .L80
 1817              	.L79:
 386:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 387:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 388:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 389:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 1818              	 .loc 5 389 0
 1819 0204 7B68     	 ldr r3,[r7,#4]
 1820 0206 181C     	 mov r0,r3
 1821 0208 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 1822              	.L80:
 390:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 391:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 1823              	 .loc 5 391 0
 1824 020c BB68     	 ldr r3,[r7,#8]
 1825 020e DB68     	 ldr r3,[r3,#12]
 1826 0210 5A1C     	 add r2,r3,#1
 1827 0212 BB68     	 ldr r3,[r7,#8]
 1828 0214 DA60     	 str r2,[r3,#12]
 392:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 393:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*if index reaches fifo size - break*/
 394:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if ((ptr_runtime->tx_data_index) >= fifo_min)
 1829              	 .loc 5 394 0
 1830 0216 BB68     	 ldr r3,[r7,#8]
 1831 0218 DA68     	 ldr r2,[r3,#12]
 1832 021a 0F23     	 mov r3,#15
 1833 021c FB18     	 add r3,r7,r3
 1834 021e 1B78     	 ldrb r3,[r3]
 1835 0220 9A42     	 cmp r2,r3
 1836 0222 01D3     	 bcc .L77
 395:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 396:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 1837              	 .loc 5 396 0
 1838 0224 0CE0     	 b .L81
 1839              	.L78:
 397:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 398:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 399:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 400:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 401:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 1840              	 .loc 5 401 0 discriminator 5
 1841 0226 0BE0     	 b .L81
 1842              	.L77:
 378:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 1843              	 .loc 5 378 0
 1844 0228 7B68     	 ldr r3,[r7,#4]
 1845 022a 181C     	 mov r0,r3
 1846 022c FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 1847 0230 031C     	 mov r3,r0
 1848 0232 1A1C     	 mov r2,r3
 1849 0234 0123     	 mov r3,#1
 1850 0236 5340     	 eor r3,r2
 1851 0238 DBB2     	 uxtb r3,r3
 1852 023a 002B     	 cmp r3,#0
 1853 023c CCD1     	 bne .L82
 1854 023e 19E0     	 b .L83
 1855              	.L81:
 1856 0240 18E0     	 b .L83
 1857              	.L74:
 402:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 403:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 404:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if(handle->config->txFIFO_size > 0) */
 405:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 406:../Dave/Generated/I2C_MASTER/i2c_master.c ****    Direction = Receive, Tx FIFO disabled
 407:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 408:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 409:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 410:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* check for last byte and send_nack is set to true */
 411:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 1858              	 .loc 5 411 0
 1859 0242 BB68     	 ldr r3,[r7,#8]
 1860 0244 DB68     	 ldr r3,[r3,#12]
 1861 0246 5A1C     	 add r2,r3,#1
 1862 0248 BB68     	 ldr r3,[r7,#8]
 1863 024a 9B68     	 ldr r3,[r3,#8]
 1864 024c 9A42     	 cmp r2,r3
 1865 024e 08D1     	 bne .L84
 1866              	 .loc 5 411 0 is_stmt 0 discriminator 1
 1867 0250 BB68     	 ldr r3,[r7,#8]
 1868 0252 1B6A     	 ldr r3,[r3,#32]
 1869 0254 012B     	 cmp r3,#1
 1870 0256 04D1     	 bne .L84
 412:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 413:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 1871              	 .loc 5 413 0 is_stmt 1
 1872 0258 7B68     	 ldr r3,[r7,#4]
 1873 025a 181C     	 mov r0,r3
 1874 025c FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 1875 0260 03E0     	 b .L85
 1876              	.L84:
 414:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 415:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 416:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 417:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 1877              	 .loc 5 417 0
 1878 0262 7B68     	 ldr r3,[r7,#4]
 1879 0264 181C     	 mov r0,r3
 1880 0266 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 1881              	.L85:
 418:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 419:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 1882              	 .loc 5 419 0
 1883 026a BB68     	 ldr r3,[r7,#8]
 1884 026c DB68     	 ldr r3,[r3,#12]
 1885 026e 5A1C     	 add r2,r3,#1
 1886 0270 BB68     	 ldr r3,[r7,#8]
 1887 0272 DA60     	 str r2,[r3,#12]
 1888              	.L83:
 420:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 421:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 422:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 423:../Dave/Generated/I2C_MASTER/i2c_master.c ****    If last byte, then disable ACK event
 424:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 425:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 1889              	 .loc 5 425 0
 1890 0274 7B68     	 ldr r3,[r7,#4]
 1891 0276 9B68     	 ldr r3,[r3,#8]
 1892 0278 DA68     	 ldr r2,[r3,#12]
 1893 027a 7B68     	 ldr r3,[r7,#4]
 1894 027c 9B68     	 ldr r3,[r3,#8]
 1895 027e 9B68     	 ldr r3,[r3,#8]
 1896 0280 9A42     	 cmp r2,r3
 1897 0282 06D1     	 bne .L60
 426:../Dave/Generated/I2C_MASTER/i2c_master.c ****      {
 427:../Dave/Generated/I2C_MASTER/i2c_master.c ****        I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 1898              	 .loc 5 427 0
 1899 0284 7A68     	 ldr r2,[r7,#4]
 1900 0286 8023     	 mov r3,#128
 1901 0288 DB05     	 lsl r3,r3,#23
 1902 028a 101C     	 mov r0,r2
 1903 028c 191C     	 mov r1,r3
 1904 028e FFF7FEFF 	 bl I2C_MASTER_DisableEvent
 1905              	.L60:
 428:../Dave/Generated/I2C_MASTER/i2c_master.c ****      }
 429:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
 430:../Dave/Generated/I2C_MASTER/i2c_master.c ****  } /* end of else */
 431:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1906              	 .loc 5 431 0
 1907 0292 BD46     	 mov sp,r7
 1908 0294 04B0     	 add sp,sp,#16
 1909              	 
 1910 0296 80BD     	 pop {r7,pc}
 1911              	 .cfi_endproc
 1912              	.LFE165:
 1914              	 .section .text.I2C_MASTER_lSendStop_JumpTo_TxCallback,"ax",%progbits
 1915              	 .align 2
 1916              	 .code 16
 1917              	 .thumb_func
 1919              	I2C_MASTER_lSendStop_JumpTo_TxCallback:
 1920              	.LFB166:
 432:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 433:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Stop command and jump to callback routine */
 434:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
 435:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1921              	 .loc 5 435 0
 1922              	 .cfi_startproc
 1923 0000 80B5     	 push {r7,lr}
 1924              	.LCFI108:
 1925              	 .cfi_def_cfa_offset 8
 1926              	 .cfi_offset 7,-8
 1927              	 .cfi_offset 14,-4
 1928 0002 84B0     	 sub sp,sp,#16
 1929              	.LCFI109:
 1930              	 .cfi_def_cfa_offset 24
 1931 0004 00AF     	 add r7,sp,#0
 1932              	.LCFI110:
 1933              	 .cfi_def_cfa_register 7
 1934 0006 7860     	 str r0,[r7,#4]
 436:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 437:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 438:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 1935              	 .loc 5 438 0
 1936 0008 7B68     	 ldr r3,[r7,#4]
 1937 000a 9B68     	 ldr r3,[r3,#8]
 1938 000c FB60     	 str r3,[r7,#12]
 439:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 440:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 1939              	 .loc 5 440 0
 1940 000e 7A68     	 ldr r2,[r7,#4]
 1941 0010 8023     	 mov r3,#128
 1942 0012 DB05     	 lsl r3,r3,#23
 1943 0014 101C     	 mov r0,r2
 1944 0016 191C     	 mov r1,r3
 1945 0018 FFF7FEFF 	 bl I2C_MASTER_DisableEvent
 441:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 442:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->send_stop == true)
 1946              	 .loc 5 442 0
 1947 001c FB68     	 ldr r3,[r7,#12]
 1948 001e DB69     	 ldr r3,[r3,#28]
 1949 0020 012B     	 cmp r3,#1
 1950 0022 07D1     	 bne .L87
 443:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 444:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->bus_acquired = false;
 1951              	 .loc 5 444 0
 1952 0024 FB68     	 ldr r3,[r7,#12]
 1953 0026 2822     	 mov r2,#40
 1954 0028 0021     	 mov r1,#0
 1955 002a 9954     	 strb r1,[r3,r2]
 445:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
 1956              	 .loc 5 445 0
 1957 002c 7B68     	 ldr r3,[r7,#4]
 1958 002e 181C     	 mov r0,r3
 1959 0030 FFF7FEFF 	 bl I2C_MASTER_SendStop
 1960              	.L87:
 446:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 447:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 448:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 1961              	 .loc 5 448 0
 1962 0034 C046     	 mov r8,r8
 1963              	.L88:
 1964              	 .loc 5 448 0 is_stmt 0 discriminator 1
 1965 0036 7B68     	 ldr r3,[r7,#4]
 1966 0038 1B68     	 ldr r3,[r3]
 1967 003a 181C     	 mov r0,r3
 1968 003c FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 1969 0040 031E     	 sub r3,r0,#0
 1970 0042 802B     	 cmp r3,#128
 1971 0044 F7D0     	 beq .L88
 449:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 450:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*All data is transmitted*/
 451:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->tx_busy = false;
 1972              	 .loc 5 451 0 is_stmt 1
 1973 0046 FB68     	 ldr r3,[r7,#12]
 1974 0048 2622     	 mov r2,#38
 1975 004a 0021     	 mov r1,#0
 1976 004c 9954     	 strb r1,[r3,r2]
 452:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 453:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->tx_cbhandler != NULL)
 1977              	 .loc 5 453 0
 1978 004e 7B68     	 ldr r3,[r7,#4]
 1979 0050 5B68     	 ldr r3,[r3,#4]
 1980 0052 1B69     	 ldr r3,[r3,#16]
 1981 0054 002B     	 cmp r3,#0
 1982 0056 03D0     	 beq .L86
 454:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 455:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Execute the 'End of transmission' callback function*/
 456:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->tx_cbhandler();
 1983              	 .loc 5 456 0
 1984 0058 7B68     	 ldr r3,[r7,#4]
 1985 005a 5B68     	 ldr r3,[r3,#4]
 1986 005c 1B69     	 ldr r3,[r3,#16]
 1987 005e 9847     	 blx r3
 1988              	.L86:
 457:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 458:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1989              	 .loc 5 458 0
 1990 0060 BD46     	 mov sp,r7
 1991 0062 04B0     	 add sp,sp,#16
 1992              	 
 1993 0064 80BD     	 pop {r7,pc}
 1994              	 .cfi_endproc
 1995              	.LFE166:
 1997 0066 C046     	 .section .text.I2C_MASTER_Receive,"ax",%progbits
 1998              	 .align 2
 1999              	 .global I2C_MASTER_Receive
 2000              	 .code 16
 2001              	 .thumb_func
 2003              	I2C_MASTER_Receive:
 2004              	.LFB167:
 459:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 460:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 461:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 462:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief This function registers the receive request by configuring the I2C_MASTER
 463:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * receive FIFO/Standard buffer (depending on the user configuration). The data
 464:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is received asynchronously. When the requested number of data bytes are received,
 465:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * optionally, the user configured callback function will be executed. If a callback
 466:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * function is not configured on the APP UI, the user has to poll for the status of
 467:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * rx_busy variable of the APP handle structure.
 468:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 469:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Note: In FIFO mode, FIFO trigger limit should be adjusted manually to
 470:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * read required amount of data from FIFO buffer.
 471:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 472:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 473:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
 474:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_start
 475:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint32_t  slave address
 476:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint8_t*  Pointer to data array
 477:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint32_t  Total no of bytes to be read.
 478:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_stop
 479:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_nack
 480:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 481:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return  I2C_MASTER_STATUS_t I2C_MASTER_STATUS_SUCCESS if the request is accepted.
 482:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *                              I2C_MASTER_STATUS_BUSY if a reception is in progress.
 483:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 484:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 485:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * request is registered.
 486:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 487:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 488:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 489:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 490:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                    const uint32_t count, bool send_stop, bool send_nack)
 491:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2005              	 .loc 5 491 0
 2006              	 .cfi_startproc
 2007 0000 B0B5     	 push {r4,r5,r7,lr}
 2008              	.LCFI111:
 2009              	 .cfi_def_cfa_offset 16
 2010              	 .cfi_offset 4,-16
 2011              	 .cfi_offset 5,-12
 2012              	 .cfi_offset 7,-8
 2013              	 .cfi_offset 14,-4
 2014 0002 8AB0     	 sub sp,sp,#40
 2015              	.LCFI112:
 2016              	 .cfi_def_cfa_offset 56
 2017 0004 04AF     	 add r7,sp,#16
 2018              	.LCFI113:
 2019              	 .cfi_def_cfa 7,40
 2020 0006 F860     	 str r0,[r7,#12]
 2021 0008 7A60     	 str r2,[r7,#4]
 2022 000a 3B60     	 str r3,[r7]
 2023 000c 0B23     	 mov r3,#11
 2024 000e FB18     	 add r3,r7,r3
 2025 0010 0A1C     	 add r2,r1,#0
 2026 0012 1A70     	 strb r2,[r3]
 492:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 493:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 494:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 2027              	 .loc 5 494 0
 2028 0014 1723     	 mov r3,#23
 2029 0016 FB18     	 add r3,r7,r3
 2030 0018 0222     	 mov r2,#2
 2031 001a 1A70     	 strb r2,[r3]
 495:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 496:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 2032              	 .loc 5 496 0
 2033 001c FB68     	 ldr r3,[r7,#12]
 2034 001e 5B68     	 ldr r3,[r3,#4]
 2035 0020 2522     	 mov r2,#37
 2036 0022 9B5C     	 ldrb r3,[r3,r2]
 2037 0024 002B     	 cmp r3,#0
 2038 0026 16D1     	 bne .L92
 497:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 498:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 499:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nac
 2039              	 .loc 5 499 0
 2040 0028 1723     	 mov r3,#23
 2041 002a FC18     	 add r4,r7,r3
 2042 002c F868     	 ldr r0,[r7,#12]
 2043 002e 0B23     	 mov r3,#11
 2044 0030 FB18     	 add r3,r7,r3
 2045 0032 1978     	 ldrb r1,[r3]
 2046 0034 7A68     	 ldr r2,[r7,#4]
 2047 0036 3D68     	 ldr r5,[r7]
 2048 0038 BB6A     	 ldr r3,[r7,#40]
 2049 003a 0093     	 str r3,[sp]
 2050 003c 2C23     	 mov r3,#44
 2051 003e FB18     	 add r3,r7,r3
 2052 0040 1B78     	 ldrb r3,[r3]
 2053 0042 0193     	 str r3,[sp,#4]
 2054 0044 3023     	 mov r3,#48
 2055 0046 FB18     	 add r3,r7,r3
 2056 0048 1B78     	 ldrb r3,[r3]
 2057 004a 0293     	 str r3,[sp,#8]
 2058 004c 2B1C     	 mov r3,r5
 2059 004e FFF7FEFF 	 bl I2C_MASTER_StartReceiveIRQ
 2060 0052 031C     	 mov r3,r0
 2061 0054 2370     	 strb r3,[r4]
 2062              	.L92:
 500:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 501:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 502:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 503:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 504:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 505:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_UNSUPPORTED_MODE;
 506:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 507:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 508:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 509:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 510:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
 511:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, s
 512:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 513:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 514:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 515:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 2063              	 .loc 5 515 0
 2064 0056 1723     	 mov r3,#23
 2065 0058 FB18     	 add r3,r7,r3
 2066 005a 1B78     	 ldrb r3,[r3]
 516:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 2067              	 .loc 5 516 0
 2068 005c 181C     	 mov r0,r3
 2069 005e BD46     	 mov sp,r7
 2070 0060 06B0     	 add sp,sp,#24
 2071              	 
 2072 0062 B0BD     	 pop {r4,r5,r7,pc}
 2073              	 .cfi_endproc
 2074              	.LFE167:
 2076              	 .section .text.I2C_MASTER_lReceive_FIFOData,"ax",%progbits
 2077              	 .align 2
 2078              	 .code 16
 2079              	 .thumb_func
 2081              	I2C_MASTER_lReceive_FIFOData:
 2082              	.LFB168:
 517:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 518:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 519:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 520:../Dave/Generated/I2C_MASTER/i2c_master.c ****      Rx FIFO data
 521:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 522:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32
 523:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      const uint32_t count)
 524:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2083              	 .loc 5 524 0
 2084              	 .cfi_startproc
 2085 0000 80B5     	 push {r7,lr}
 2086              	.LCFI114:
 2087              	 .cfi_def_cfa_offset 8
 2088              	 .cfi_offset 7,-8
 2089              	 .cfi_offset 14,-4
 2090 0002 86B0     	 sub sp,sp,#24
 2091              	.LCFI115:
 2092              	 .cfi_def_cfa_offset 32
 2093 0004 00AF     	 add r7,sp,#0
 2094              	.LCFI116:
 2095              	 .cfi_def_cfa_register 7
 2096 0006 F860     	 str r0,[r7,#12]
 2097 0008 7A60     	 str r2,[r7,#4]
 2098 000a 3B60     	 str r3,[r7]
 2099 000c 0B23     	 mov r3,#11
 2100 000e FB18     	 add r3,r7,r3
 2101 0010 0A1C     	 add r2,r1,#0
 2102 0012 1A70     	 strb r2,[r3]
 525:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 526:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 527:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 2103              	 .loc 5 527 0
 2104 0014 FB68     	 ldr r3,[r7,#12]
 2105 0016 9B68     	 ldr r3,[r3,#8]
 2106 0018 7B61     	 str r3,[r7,#20]
 528:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 529:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Clear the receive FIFO, configure the trigger lime
 530:../Dave/Generated/I2C_MASTER/i2c_master.c ****    * and enable the receive events*/
 531:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 2107              	 .loc 5 531 0
 2108 001a FB68     	 ldr r3,[r7,#12]
 2109 001c 1B68     	 ldr r3,[r3]
 2110 001e 181C     	 mov r0,r3
 2111 0020 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_Flush
 532:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 533:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Configure the FIFO trigger limit based on the required data size*/
 534:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_lReconfigureRxFIFO(handle, count);
 2112              	 .loc 5 534 0
 2113 0024 FA68     	 ldr r2,[r7,#12]
 2114 0026 3B68     	 ldr r3,[r7]
 2115 0028 101C     	 mov r0,r2
 2116 002a 191C     	 mov r1,r3
 2117 002c FFF7FEFF 	 bl I2C_MASTER_lReconfigureRxFIFO
 535:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 536:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 2118              	 .loc 5 536 0
 2119 0030 FB68     	 ldr r3,[r7,#12]
 2120 0032 1A68     	 ldr r2,[r3]
 2121 0034 C023     	 mov r3,#192
 2122 0036 DB05     	 lsl r3,r3,#23
 2123 0038 101C     	 mov r0,r2
 2124 003a 191C     	 mov r1,r3
 2125 003c FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_EnableEvent
 537:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                 (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 538:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
 539:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (send_start == true)
 2126              	 .loc 5 539 0
 2127 0040 0B23     	 mov r3,#11
 2128 0042 FB18     	 add r3,r7,r3
 2129 0044 1B78     	 ldrb r3,[r3]
 2130 0046 002B     	 cmp r3,#0
 2131 0048 00D1     	 bne .LCB1902
 2132 004a 78E0     	 b .L95
 2133              	.LCB1902:
 540:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 541:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 2134              	 .loc 5 541 0
 2135 004c FB68     	 ldr r3,[r7,#12]
 2136 004e 5B68     	 ldr r3,[r3,#4]
 2137 0050 2422     	 mov r2,#36
 2138 0052 9B5C     	 ldrb r3,[r3,r2]
 2139 0054 012B     	 cmp r3,#1
 2140 0056 15D0     	 beq .L96
 542:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 2141              	 .loc 5 542 0 discriminator 1
 2142 0058 FB68     	 ldr r3,[r7,#12]
 2143 005a 5B68     	 ldr r3,[r3,#4]
 2144 005c 2422     	 mov r2,#36
 2145 005e 9B5C     	 ldrb r3,[r3,r2]
 541:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 2146              	 .loc 5 541 0 discriminator 1
 2147 0060 022B     	 cmp r3,#2
 2148 0062 0FD0     	 beq .L96
 543:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 544:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 2149              	 .loc 5 544 0
 2150 0064 FA68     	 ldr r2,[r7,#12]
 2151 0066 8023     	 mov r3,#128
 2152 0068 DB05     	 lsl r3,r3,#23
 2153 006a 101C     	 mov r0,r2
 2154 006c 191C     	 mov r1,r3
 2155 006e FFF7FEFF 	 bl I2C_MASTER_EnableEvent
 545:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 2156              	 .loc 5 545 0
 2157 0072 FB68     	 ldr r3,[r7,#12]
 2158 0074 1968     	 ldr r1,[r3]
 2159 0076 7B69     	 ldr r3,[r7,#20]
 2160 0078 2422     	 mov r2,#36
 2161 007a 9B5C     	 ldrb r3,[r3,r2]
 2162 007c 081C     	 mov r0,r1
 2163 007e 191C     	 mov r1,r3
 2164 0080 FFF7FEFF 	 bl XMC_I2C_CH_SetInterruptNodePointer
 2165              	.L96:
 546:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 547:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 2166              	 .loc 5 547 0
 2167 0084 FA68     	 ldr r2,[r7,#12]
 2168 0086 7B68     	 ldr r3,[r7,#4]
 2169 0088 101C     	 mov r0,r2
 2170 008a 191C     	 mov r1,r3
 2171 008c 0122     	 mov r2,#1
 2172 008e FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
 548:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 549:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED)
 550:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 551:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 552:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nac
 553:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 554:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveNACK(handle);
 555:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 556:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 557:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 558:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveACK(handle);
 559:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 560:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 561:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 562:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 563:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 2173              	 .loc 5 563 0
 2174 0092 FB68     	 ldr r3,[r7,#12]
 2175 0094 5B68     	 ldr r3,[r3,#4]
 2176 0096 2422     	 mov r2,#36
 2177 0098 9B5C     	 ldrb r3,[r3,r2]
 2178 009a 022B     	 cmp r3,#2
 2179 009c 00D0     	 beq .LCB1942
 2180 009e B2E0     	 b .L94
 2181              	.LCB1942:
 564:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 565:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 2182              	 .loc 5 565 0
 2183 00a0 FB68     	 ldr r3,[r7,#12]
 2184 00a2 5B68     	 ldr r3,[r3,#4]
 2185 00a4 2622     	 mov r2,#38
 2186 00a6 9B5C     	 ldrb r3,[r3,r2]
 2187 00a8 002B     	 cmp r3,#0
 2188 00aa 2ED0     	 beq .L98
 566:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 567:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Fill the transmit FIFO */
 568:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 2189              	 .loc 5 568 0
 2190 00ac 21E0     	 b .L99
 2191              	.L104:
 569:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 570:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 2192              	 .loc 5 570 0
 2193 00ae 7B69     	 ldr r3,[r7,#20]
 2194 00b0 DA68     	 ldr r2,[r3,#12]
 2195 00b2 7B69     	 ldr r3,[r7,#20]
 2196 00b4 9B68     	 ldr r3,[r3,#8]
 2197 00b6 9A42     	 cmp r2,r3
 2198 00b8 19D2     	 bcs .L100
 571:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 572:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send
 2199              	 .loc 5 572 0
 2200 00ba 7B69     	 ldr r3,[r7,#20]
 2201 00bc DB68     	 ldr r3,[r3,#12]
 2202 00be 5A1C     	 add r2,r3,#1
 2203 00c0 7B69     	 ldr r3,[r7,#20]
 2204 00c2 9B68     	 ldr r3,[r3,#8]
 2205 00c4 9A42     	 cmp r2,r3
 2206 00c6 08D1     	 bne .L101
 2207              	 .loc 5 572 0 is_stmt 0 discriminator 1
 2208 00c8 7B69     	 ldr r3,[r7,#20]
 2209 00ca 1B6A     	 ldr r3,[r3,#32]
 2210 00cc 012B     	 cmp r3,#1
 2211 00ce 04D1     	 bne .L101
 573:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 574:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveNACK(handle);
 2212              	 .loc 5 574 0 is_stmt 1
 2213 00d0 FB68     	 ldr r3,[r7,#12]
 2214 00d2 181C     	 mov r0,r3
 2215 00d4 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2216 00d8 03E0     	 b .L102
 2217              	.L101:
 575:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 576:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 577:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 578:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK(handle);
 2218              	 .loc 5 578 0
 2219 00da FB68     	 ldr r3,[r7,#12]
 2220 00dc 181C     	 mov r0,r3
 2221 00de FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2222              	.L102:
 579:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 580:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 2223              	 .loc 5 580 0
 2224 00e2 7B69     	 ldr r3,[r7,#20]
 2225 00e4 DB68     	 ldr r3,[r3,#12]
 2226 00e6 5A1C     	 add r2,r3,#1
 2227 00e8 7B69     	 ldr r3,[r7,#20]
 2228 00ea DA60     	 str r2,[r3,#12]
 2229 00ec 01E0     	 b .L99
 2230              	.L100:
 581:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 582:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 583:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 584:../Dave/Generated/I2C_MASTER/i2c_master.c ****         break;
 2231              	 .loc 5 584 0
 2232 00ee C046     	 mov r8,r8
 2233 00f0 89E0     	 b .L94
 2234              	.L99:
 568:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 2235              	 .loc 5 568 0
 2236 00f2 FB68     	 ldr r3,[r7,#12]
 2237 00f4 181C     	 mov r0,r3
 2238 00f6 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 2239 00fa 031C     	 mov r3,r0
 2240 00fc 1A1C     	 mov r2,r3
 2241 00fe 0123     	 mov r3,#1
 2242 0100 5340     	 eor r3,r2
 2243 0102 DBB2     	 uxtb r3,r3
 2244 0104 002B     	 cmp r3,#0
 2245 0106 D2D1     	 bne .L104
 2246 0108 7DE0     	 b .L94
 2247              	.L98:
 585:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 586:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of while */
 587:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 588:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 589:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 590:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if it is last byte and send_nack true */
 591:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 2248              	 .loc 5 591 0
 2249 010a 7B69     	 ldr r3,[r7,#20]
 2250 010c DB68     	 ldr r3,[r3,#12]
 2251 010e 5A1C     	 add r2,r3,#1
 2252 0110 7B69     	 ldr r3,[r7,#20]
 2253 0112 9B68     	 ldr r3,[r3,#8]
 2254 0114 9A42     	 cmp r2,r3
 2255 0116 08D1     	 bne .L105
 2256              	 .loc 5 591 0 is_stmt 0 discriminator 1
 2257 0118 7B69     	 ldr r3,[r7,#20]
 2258 011a 1B6A     	 ldr r3,[r3,#32]
 2259 011c 012B     	 cmp r3,#1
 2260 011e 04D1     	 bne .L105
 592:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 593:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveNACK(handle);
 2261              	 .loc 5 593 0 is_stmt 1
 2262 0120 FB68     	 ldr r3,[r7,#12]
 2263 0122 181C     	 mov r0,r3
 2264 0124 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2265 0128 03E0     	 b .L106
 2266              	.L105:
 594:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 595:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 596:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 597:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveACK(handle);
 2267              	 .loc 5 597 0
 2268 012a FB68     	 ldr r3,[r7,#12]
 2269 012c 181C     	 mov r0,r3
 2270 012e FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2271              	.L106:
 598:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 599:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 2272              	 .loc 5 599 0
 2273 0132 7B69     	 ldr r3,[r7,#20]
 2274 0134 DB68     	 ldr r3,[r3,#12]
 2275 0136 5A1C     	 add r2,r3,#1
 2276 0138 7B69     	 ldr r3,[r7,#20]
 2277 013a DA60     	 str r2,[r3,#12]
 2278 013c 63E0     	 b .L94
 2279              	.L95:
 600:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 601:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
 602:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if (send_start == true) */
 603:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 604:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 605:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* if Tx FIFO enabled */
 606:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 2280              	 .loc 5 606 0
 2281 013e FB68     	 ldr r3,[r7,#12]
 2282 0140 5B68     	 ldr r3,[r3,#4]
 2283 0142 2622     	 mov r2,#38
 2284 0144 9B5C     	 ldrb r3,[r3,r2]
 2285 0146 002B     	 cmp r3,#0
 2286 0148 36D0     	 beq .L108
 607:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 608:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
 2287              	 .loc 5 608 0
 2288 014a FB68     	 ldr r3,[r7,#12]
 2289 014c 1A68     	 ldr r2,[r3]
 2290 014e 8023     	 mov r3,#128
 2291 0150 DB05     	 lsl r3,r3,#23
 2292 0152 101C     	 mov r0,r2
 2293 0154 191C     	 mov r1,r3
 2294 0156 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 609:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 610:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Fill the transmit FIFO */
 611:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 2295              	 .loc 5 611 0
 2296 015a 21E0     	 b .L109
 2297              	.L114:
 612:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 613:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 2298              	 .loc 5 613 0
 2299 015c 7B69     	 ldr r3,[r7,#20]
 2300 015e DA68     	 ldr r2,[r3,#12]
 2301 0160 7B69     	 ldr r3,[r7,#20]
 2302 0162 9B68     	 ldr r3,[r3,#8]
 2303 0164 9A42     	 cmp r2,r3
 2304 0166 19D2     	 bcs .L110
 614:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 615:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 2305              	 .loc 5 615 0
 2306 0168 7B69     	 ldr r3,[r7,#20]
 2307 016a DB68     	 ldr r3,[r3,#12]
 2308 016c 5A1C     	 add r2,r3,#1
 2309 016e 7B69     	 ldr r3,[r7,#20]
 2310 0170 9B68     	 ldr r3,[r3,#8]
 2311 0172 9A42     	 cmp r2,r3
 2312 0174 08D1     	 bne .L111
 616:../Dave/Generated/I2C_MASTER/i2c_master.c ****                (ptr_runtime->send_nack == true))
 2313              	 .loc 5 616 0 discriminator 1
 2314 0176 7B69     	 ldr r3,[r7,#20]
 2315 0178 1B6A     	 ldr r3,[r3,#32]
 615:../Dave/Generated/I2C_MASTER/i2c_master.c ****                (ptr_runtime->send_nack == true))
 2316              	 .loc 5 615 0 discriminator 1
 2317 017a 012B     	 cmp r3,#1
 2318 017c 04D1     	 bne .L111
 617:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 618:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 2319              	 .loc 5 618 0
 2320 017e FB68     	 ldr r3,[r7,#12]
 2321 0180 181C     	 mov r0,r3
 2322 0182 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2323 0186 03E0     	 b .L112
 2324              	.L111:
 619:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 620:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 621:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 622:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 2325              	 .loc 5 622 0
 2326 0188 FB68     	 ldr r3,[r7,#12]
 2327 018a 181C     	 mov r0,r3
 2328 018c FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2329              	.L112:
 623:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 624:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 2330              	 .loc 5 624 0
 2331 0190 7B69     	 ldr r3,[r7,#20]
 2332 0192 DB68     	 ldr r3,[r3,#12]
 2333 0194 5A1C     	 add r2,r3,#1
 2334 0196 7B69     	 ldr r3,[r7,#20]
 2335 0198 DA60     	 str r2,[r3,#12]
 2336 019a 01E0     	 b .L109
 2337              	.L110:
 625:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 626:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 627:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 628:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 2338              	 .loc 5 628 0
 2339 019c C046     	 mov r8,r8
 2340 019e 32E0     	 b .L94
 2341              	.L109:
 611:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 2342              	 .loc 5 611 0
 2343 01a0 FB68     	 ldr r3,[r7,#12]
 2344 01a2 181C     	 mov r0,r3
 2345 01a4 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 2346 01a8 031C     	 mov r3,r0
 2347 01aa 1A1C     	 mov r2,r3
 2348 01ac 0123     	 mov r3,#1
 2349 01ae 5340     	 eor r3,r2
 2350 01b0 DBB2     	 uxtb r3,r3
 2351 01b2 002B     	 cmp r3,#0
 2352 01b4 D2D1     	 bne .L114
 2353 01b6 26E0     	 b .L94
 2354              	.L108:
 629:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 630:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 631:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 632:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else  /* Tx FIFO disabled and Rx FIFO enabled */
 633:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 634:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 2355              	 .loc 5 634 0
 2356 01b8 7B69     	 ldr r3,[r7,#20]
 2357 01ba DA68     	 ldr r2,[r3,#12]
 2358 01bc 7B69     	 ldr r3,[r7,#20]
 2359 01be 9B68     	 ldr r3,[r3,#8]
 2360 01c0 9A42     	 cmp r2,r3
 2361 01c2 20D2     	 bcs .L94
 635:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 636:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 2362              	 .loc 5 636 0
 2363 01c4 7B69     	 ldr r3,[r7,#20]
 2364 01c6 DB68     	 ldr r3,[r3,#12]
 2365 01c8 5A1C     	 add r2,r3,#1
 2366 01ca 7B69     	 ldr r3,[r7,#20]
 2367 01cc 9B68     	 ldr r3,[r3,#8]
 2368 01ce 9A42     	 cmp r2,r3
 2369 01d0 08D1     	 bne .L115
 637:../Dave/Generated/I2C_MASTER/i2c_master.c ****              (ptr_runtime->send_nack == true))
 2370              	 .loc 5 637 0 discriminator 1
 2371 01d2 7B69     	 ldr r3,[r7,#20]
 2372 01d4 1B6A     	 ldr r3,[r3,#32]
 636:../Dave/Generated/I2C_MASTER/i2c_master.c ****              (ptr_runtime->send_nack == true))
 2373              	 .loc 5 636 0 discriminator 1
 2374 01d6 012B     	 cmp r3,#1
 2375 01d8 04D1     	 bne .L115
 638:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 639:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveNACK(handle);
 2376              	 .loc 5 639 0
 2377 01da FB68     	 ldr r3,[r7,#12]
 2378 01dc 181C     	 mov r0,r3
 2379 01de FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2380 01e2 0BE0     	 b .L116
 2381              	.L115:
 640:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 641:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 642:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 643:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_I2C_CH_ClearStatusFlag(handle->channel, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVE
 2382              	 .loc 5 643 0
 2383 01e4 FB68     	 ldr r3,[r7,#12]
 2384 01e6 1A68     	 ldr r2,[r3]
 2385 01e8 F223     	 mov r3,#242
 2386 01ea 1B02     	 lsl r3,r3,#8
 2387 01ec 101C     	 mov r0,r2
 2388 01ee 191C     	 mov r1,r3
 2389 01f0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 644:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDI
 645:../Dave/Generated/I2C_MASTER/i2c_master.c ****                           (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION|
 646:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 647:../Dave/Generated/I2C_MASTER/i2c_master.c ****                           (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
 648:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK(handle);
 2390              	 .loc 5 648 0
 2391 01f4 FB68     	 ldr r3,[r7,#12]
 2392 01f6 181C     	 mov r0,r3
 2393 01f8 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2394              	.L116:
 649:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 650:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->tx_data_index++;
 2395              	 .loc 5 650 0
 2396 01fc 7B69     	 ldr r3,[r7,#20]
 2397 01fe DB68     	 ldr r3,[r3,#12]
 2398 0200 5A1C     	 add r2,r3,#1
 2399 0202 7B69     	 ldr r3,[r7,#20]
 2400 0204 DA60     	 str r2,[r3,#12]
 2401              	.L94:
 651:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 652:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
 653:../Dave/Generated/I2C_MASTER/i2c_master.c ****    } /* end of  if(send_start == false) */
 654:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 2402              	 .loc 5 654 0
 2403 0206 BD46     	 mov sp,r7
 2404 0208 06B0     	 add sp,sp,#24
 2405              	 
 2406 020a 80BD     	 pop {r7,pc}
 2407              	 .cfi_endproc
 2408              	.LFE168:
 2410              	 .section .text.I2C_MASTER_lReceive_StdData,"ax",%progbits
 2411              	 .align 2
 2412              	 .code 16
 2413              	 .thumb_func
 2415              	I2C_MASTER_lReceive_StdData:
 2416              	.LFB169:
 655:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 656:../Dave/Generated/I2C_MASTER/i2c_master.c ****     Standard receive mode
 657:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 658:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_
 659:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2417              	 .loc 5 659 0
 2418              	 .cfi_startproc
 2419 0000 80B5     	 push {r7,lr}
 2420              	.LCFI117:
 2421              	 .cfi_def_cfa_offset 8
 2422              	 .cfi_offset 7,-8
 2423              	 .cfi_offset 14,-4
 2424 0002 86B0     	 sub sp,sp,#24
 2425              	.LCFI118:
 2426              	 .cfi_def_cfa_offset 32
 2427 0004 00AF     	 add r7,sp,#0
 2428              	.LCFI119:
 2429              	 .cfi_def_cfa_register 7
 2430 0006 F860     	 str r0,[r7,#12]
 2431 0008 7A60     	 str r2,[r7,#4]
 2432 000a 0B23     	 mov r3,#11
 2433 000c FB18     	 add r3,r7,r3
 2434 000e 0A1C     	 add r2,r1,#0
 2435 0010 1A70     	 strb r2,[r3]
 660:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 661:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 662:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 2436              	 .loc 5 662 0
 2437 0012 FB68     	 ldr r3,[r7,#12]
 2438 0014 9B68     	 ldr r3,[r3,#8]
 2439 0016 7B61     	 str r3,[r7,#20]
 663:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 664:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE 
 2440              	 .loc 5 664 0
 2441 0018 FB68     	 ldr r3,[r7,#12]
 2442 001a 1A68     	 ldr r2,[r3]
 2443 001c C023     	 mov r3,#192
 2444 001e 1B02     	 lsl r3,r3,#8
 2445 0020 101C     	 mov r0,r2
 2446 0022 191C     	 mov r1,r3
 2447 0024 FFF7FEFF 	 bl XMC_USIC_CH_EnableEvent
 665:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                       (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEI
 666:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 667:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (send_start == true)
 2448              	 .loc 5 667 0
 2449 0028 0B23     	 mov r3,#11
 2450 002a FB18     	 add r3,r7,r3
 2451 002c 1B78     	 ldrb r3,[r3]
 2452 002e 002B     	 cmp r3,#0
 2453 0030 49D0     	 beq .L118
 668:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 669:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 2454              	 .loc 5 669 0
 2455 0032 FB68     	 ldr r3,[r7,#12]
 2456 0034 5B68     	 ldr r3,[r3,#4]
 2457 0036 2422     	 mov r2,#36
 2458 0038 9B5C     	 ldrb r3,[r3,r2]
 2459 003a 012B     	 cmp r3,#1
 2460 003c 15D0     	 beq .L119
 670:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 2461              	 .loc 5 670 0 discriminator 1
 2462 003e FB68     	 ldr r3,[r7,#12]
 2463 0040 5B68     	 ldr r3,[r3,#4]
 2464 0042 2422     	 mov r2,#36
 2465 0044 9B5C     	 ldrb r3,[r3,r2]
 669:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 2466              	 .loc 5 669 0 discriminator 1
 2467 0046 022B     	 cmp r3,#2
 2468 0048 0FD0     	 beq .L119
 671:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 672:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 2469              	 .loc 5 672 0
 2470 004a FA68     	 ldr r2,[r7,#12]
 2471 004c 8023     	 mov r3,#128
 2472 004e DB05     	 lsl r3,r3,#23
 2473 0050 101C     	 mov r0,r2
 2474 0052 191C     	 mov r1,r3
 2475 0054 FFF7FEFF 	 bl I2C_MASTER_EnableEvent
 673:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 2476              	 .loc 5 673 0
 2477 0058 FB68     	 ldr r3,[r7,#12]
 2478 005a 1968     	 ldr r1,[r3]
 2479 005c 7B69     	 ldr r3,[r7,#20]
 2480 005e 2422     	 mov r2,#36
 2481 0060 9B5C     	 ldrb r3,[r3,r2]
 2482 0062 081C     	 mov r0,r1
 2483 0064 191C     	 mov r1,r3
 2484 0066 FFF7FEFF 	 bl XMC_I2C_CH_SetInterruptNodePointer
 2485              	.L119:
 674:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 675:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 2486              	 .loc 5 675 0
 2487 006a FA68     	 ldr r2,[r7,#12]
 2488 006c 7B68     	 ldr r3,[r7,#4]
 2489 006e 101C     	 mov r0,r2
 2490 0070 191C     	 mov r1,r3
 2491 0072 0122     	 mov r2,#1
 2492 0074 FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
 676:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 677:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 2493              	 .loc 5 677 0
 2494 0078 FB68     	 ldr r3,[r7,#12]
 2495 007a 5B68     	 ldr r3,[r3,#4]
 2496 007c 2422     	 mov r2,#36
 2497 007e 9B5C     	 ldrb r3,[r3,r2]
 2498 0080 012B     	 cmp r3,#1
 2499 0082 06D0     	 beq .L120
 678:../Dave/Generated/I2C_MASTER/i2c_master.c ****         (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
 2500              	 .loc 5 678 0 discriminator 1
 2501 0084 FB68     	 ldr r3,[r7,#12]
 2502 0086 5B68     	 ldr r3,[r3,#4]
 2503 0088 2422     	 mov r2,#36
 2504 008a 9B5C     	 ldrb r3,[r3,r2]
 677:../Dave/Generated/I2C_MASTER/i2c_master.c ****         (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
 2505              	 .loc 5 677 0 discriminator 1
 2506 008c 022B     	 cmp r3,#2
 2507 008e 00D0     	 beq .LCB2249
 2508 0090 6EE0     	 b .L117
 2509              	.LCB2249:
 2510              	.L120:
 679:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 680:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nac
 2511              	 .loc 5 680 0
 2512 0092 7B69     	 ldr r3,[r7,#20]
 2513 0094 DB68     	 ldr r3,[r3,#12]
 2514 0096 5A1C     	 add r2,r3,#1
 2515 0098 7B69     	 ldr r3,[r7,#20]
 2516 009a 9B68     	 ldr r3,[r3,#8]
 2517 009c 9A42     	 cmp r2,r3
 2518 009e 08D1     	 bne .L122
 2519              	 .loc 5 680 0 is_stmt 0 discriminator 1
 2520 00a0 7B69     	 ldr r3,[r7,#20]
 2521 00a2 1B6A     	 ldr r3,[r3,#32]
 2522 00a4 012B     	 cmp r3,#1
 2523 00a6 04D1     	 bne .L122
 681:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 682:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 2524              	 .loc 5 682 0 is_stmt 1
 2525 00a8 FB68     	 ldr r3,[r7,#12]
 2526 00aa 181C     	 mov r0,r3
 2527 00ac FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2528 00b0 03E0     	 b .L123
 2529              	.L122:
 683:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 684:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 685:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 686:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveACK(handle);
 2530              	 .loc 5 686 0
 2531 00b2 FB68     	 ldr r3,[r7,#12]
 2532 00b4 181C     	 mov r0,r3
 2533 00b6 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2534              	.L123:
 687:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 688:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 2535              	 .loc 5 688 0
 2536 00ba 7B69     	 ldr r3,[r7,#20]
 2537 00bc DB68     	 ldr r3,[r3,#12]
 2538 00be 5A1C     	 add r2,r3,#1
 2539 00c0 7B69     	 ldr r3,[r7,#20]
 2540 00c2 DA60     	 str r2,[r3,#12]
 2541 00c4 54E0     	 b .L117
 2542              	.L118:
 689:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 690:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 691:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 692:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 693:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 694:../Dave/Generated/I2C_MASTER/i2c_master.c ****      send_start flag is set to false and Tx FIFO is disabled
 695:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 696:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size == 0)
 2543              	 .loc 5 696 0
 2544 00c6 FB68     	 ldr r3,[r7,#12]
 2545 00c8 5B68     	 ldr r3,[r3,#4]
 2546 00ca 2622     	 mov r2,#38
 2547 00cc 9B5C     	 ldrb r3,[r3,r2]
 2548 00ce 002B     	 cmp r3,#0
 2549 00d0 19D1     	 bne .L125
 697:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 698:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 2550              	 .loc 5 698 0
 2551 00d2 7B69     	 ldr r3,[r7,#20]
 2552 00d4 DB68     	 ldr r3,[r3,#12]
 2553 00d6 5A1C     	 add r2,r3,#1
 2554 00d8 7B69     	 ldr r3,[r7,#20]
 2555 00da 9B68     	 ldr r3,[r3,#8]
 2556 00dc 9A42     	 cmp r2,r3
 2557 00de 08D1     	 bne .L126
 2558              	 .loc 5 698 0 is_stmt 0 discriminator 1
 2559 00e0 7B69     	 ldr r3,[r7,#20]
 2560 00e2 1B6A     	 ldr r3,[r3,#32]
 2561 00e4 012B     	 cmp r3,#1
 2562 00e6 04D1     	 bne .L126
 699:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 700:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 2563              	 .loc 5 700 0 is_stmt 1
 2564 00e8 FB68     	 ldr r3,[r7,#12]
 2565 00ea 181C     	 mov r0,r3
 2566 00ec FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2567 00f0 03E0     	 b .L127
 2568              	.L126:
 701:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 702:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 703:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 704:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 2569              	 .loc 5 704 0
 2570 00f2 FB68     	 ldr r3,[r7,#12]
 2571 00f4 181C     	 mov r0,r3
 2572 00f6 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2573              	.L127:
 705:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 706:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 707:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 2574              	 .loc 5 707 0
 2575 00fa 7B69     	 ldr r3,[r7,#20]
 2576 00fc DB68     	 ldr r3,[r3,#12]
 2577 00fe 5A1C     	 add r2,r3,#1
 2578 0100 7B69     	 ldr r3,[r7,#20]
 2579 0102 DA60     	 str r2,[r3,#12]
 2580 0104 34E0     	 b .L117
 2581              	.L125:
 708:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 709:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 710:../Dave/Generated/I2C_MASTER/i2c_master.c ****      send_start flag is set to false and Tx FIFO is enabled
 711:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 712:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 713:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 714:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 2582              	 .loc 5 714 0
 2583 0106 FB68     	 ldr r3,[r7,#12]
 2584 0108 1A68     	 ldr r2,[r3]
 2585 010a 8023     	 mov r3,#128
 2586 010c DB05     	 lsl r3,r3,#23
 2587 010e 101C     	 mov r0,r2
 2588 0110 191C     	 mov r1,r3
 2589 0112 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 715:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 716:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Fill the transmit FIFO */
 717:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 2590              	 .loc 5 717 0
 2591 0116 20E0     	 b .L128
 2592              	.L132:
 718:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 719:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 2593              	 .loc 5 719 0
 2594 0118 7B69     	 ldr r3,[r7,#20]
 2595 011a DA68     	 ldr r2,[r3,#12]
 2596 011c 7B69     	 ldr r3,[r7,#20]
 2597 011e 9B68     	 ldr r3,[r3,#8]
 2598 0120 9A42     	 cmp r2,r3
 2599 0122 19D2     	 bcs .L129
 720:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 721:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->se
 2600              	 .loc 5 721 0
 2601 0124 7B69     	 ldr r3,[r7,#20]
 2602 0126 DB68     	 ldr r3,[r3,#12]
 2603 0128 5A1C     	 add r2,r3,#1
 2604 012a 7B69     	 ldr r3,[r7,#20]
 2605 012c 9B68     	 ldr r3,[r3,#8]
 2606 012e 9A42     	 cmp r2,r3
 2607 0130 08D1     	 bne .L130
 2608              	 .loc 5 721 0 is_stmt 0 discriminator 1
 2609 0132 7B69     	 ldr r3,[r7,#20]
 2610 0134 1B6A     	 ldr r3,[r3,#32]
 2611 0136 012B     	 cmp r3,#1
 2612 0138 04D1     	 bne .L130
 722:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 723:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 2613              	 .loc 5 723 0 is_stmt 1
 2614 013a FB68     	 ldr r3,[r7,#12]
 2615 013c 181C     	 mov r0,r3
 2616 013e FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2617 0142 03E0     	 b .L131
 2618              	.L130:
 724:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 725:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 726:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 727:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 2619              	 .loc 5 727 0
 2620 0144 FB68     	 ldr r3,[r7,#12]
 2621 0146 181C     	 mov r0,r3
 2622 0148 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2623              	.L131:
 728:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 729:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 2624              	 .loc 5 729 0
 2625 014c 7B69     	 ldr r3,[r7,#20]
 2626 014e DB68     	 ldr r3,[r3,#12]
 2627 0150 5A1C     	 add r2,r3,#1
 2628 0152 7B69     	 ldr r3,[r7,#20]
 2629 0154 DA60     	 str r2,[r3,#12]
 2630 0156 00E0     	 b .L128
 2631              	.L129:
 730:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 731:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 732:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 733:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 2632              	 .loc 5 733 0
 2633 0158 0AE0     	 b .L117
 2634              	.L128:
 717:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 2635              	 .loc 5 717 0
 2636 015a FB68     	 ldr r3,[r7,#12]
 2637 015c 181C     	 mov r0,r3
 2638 015e FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 2639 0162 031C     	 mov r3,r0
 2640 0164 1A1C     	 mov r2,r3
 2641 0166 0123     	 mov r3,#1
 2642 0168 5340     	 eor r3,r2
 2643 016a DBB2     	 uxtb r3,r3
 2644 016c 002B     	 cmp r3,#0
 2645 016e D3D1     	 bne .L132
 2646              	.L117:
 734:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 735:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 736:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
 737:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
 738:../Dave/Generated/I2C_MASTER/i2c_master.c **** } /* end of function */
 2647              	 .loc 5 738 0
 2648 0170 BD46     	 mov sp,r7
 2649 0172 06B0     	 add sp,sp,#24
 2650              	 
 2651 0174 80BD     	 pop {r7,pc}
 2652              	 .cfi_endproc
 2653              	.LFE169:
 2655 0176 C046     	 .section .text.I2C_MASTER_lSendStart_Or_RepeatedStart,"ax",%progbits
 2656              	 .align 2
 2657              	 .code 16
 2658              	 .thumb_func
 2660              	I2C_MASTER_lSendStart_Or_RepeatedStart:
 2661              	.LFB170:
 739:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 740:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 741:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
 742:../Dave/Generated/I2C_MASTER/i2c_master.c ****     (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
 743:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Start/Repeated Start command */
 744:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
 745:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                const XMC_I2C_CH_CMD_t cmd)
 746:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2662              	 .loc 5 746 0
 2663              	 .cfi_startproc
 2664 0000 80B5     	 push {r7,lr}
 2665              	.LCFI120:
 2666              	 .cfi_def_cfa_offset 8
 2667              	 .cfi_offset 7,-8
 2668              	 .cfi_offset 14,-4
 2669 0002 84B0     	 sub sp,sp,#16
 2670              	.LCFI121:
 2671              	 .cfi_def_cfa_offset 24
 2672 0004 00AF     	 add r7,sp,#0
 2673              	.LCFI122:
 2674              	 .cfi_def_cfa_register 7
 2675 0006 F860     	 str r0,[r7,#12]
 2676 0008 B960     	 str r1,[r7,#8]
 2677 000a FB1D     	 add r3,r7,#7
 2678 000c 1A70     	 strb r2,[r3]
 747:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC
 2679              	 .loc 5 747 0
 2680 000e FB68     	 ldr r3,[r7,#12]
 2681 0010 1B68     	 ldr r3,[r3]
 2682 0012 181C     	 mov r0,r3
 2683 0014 0C21     	 mov r1,#12
 2684 0016 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 748:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 749:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->runtime->bus_acquired == true)
 2685              	 .loc 5 749 0
 2686 001a FB68     	 ldr r3,[r7,#12]
 2687 001c 9B68     	 ldr r3,[r3,#8]
 2688 001e 2822     	 mov r2,#40
 2689 0020 9B5C     	 ldrb r3,[r3,r2]
 2690 0022 DBB2     	 uxtb r3,r3
 2691 0024 002B     	 cmp r3,#0
 2692 0026 0AD0     	 beq .L134
 750:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 751:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 2693              	 .loc 5 751 0
 2694 0028 BB68     	 ldr r3,[r7,#8]
 2695 002a 9BB2     	 uxth r3,r3
 2696 002c 191C     	 mov r1,r3
 2697 002e FA68     	 ldr r2,[r7,#12]
 2698 0030 FB1D     	 add r3,r7,#7
 2699 0032 1B78     	 ldrb r3,[r3]
 2700 0034 101C     	 mov r0,r2
 2701 0036 1A1C     	 mov r2,r3
 2702 0038 FFF7FEFF 	 bl I2C_MASTER_SendRepeatedStart
 2703 003c 0EE0     	 b .L133
 2704              	.L134:
 752:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 753:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 754:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 755:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->bus_acquired = true;
 2705              	 .loc 5 755 0
 2706 003e FB68     	 ldr r3,[r7,#12]
 2707 0040 9B68     	 ldr r3,[r3,#8]
 2708 0042 2822     	 mov r2,#40
 2709 0044 0121     	 mov r1,#1
 2710 0046 9954     	 strb r1,[r3,r2]
 756:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 2711              	 .loc 5 756 0
 2712 0048 BB68     	 ldr r3,[r7,#8]
 2713 004a 9BB2     	 uxth r3,r3
 2714 004c 191C     	 mov r1,r3
 2715 004e FA68     	 ldr r2,[r7,#12]
 2716 0050 FB1D     	 add r3,r7,#7
 2717 0052 1B78     	 ldrb r3,[r3]
 2718 0054 101C     	 mov r0,r2
 2719 0056 1A1C     	 mov r2,r3
 2720 0058 FFF7FEFF 	 bl I2C_MASTER_SendStart
 2721              	.L133:
 757:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 758:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 2722              	 .loc 5 758 0
 2723 005c BD46     	 mov sp,r7
 2724 005e 04B0     	 add sp,sp,#16
 2725              	 
 2726 0060 80BD     	 pop {r7,pc}
 2727              	 .cfi_endproc
 2728              	.LFE170:
 2730 0062 C046     	 .section .text.I2C_MASTER_StartTransmitIRQ,"ax",%progbits
 2731              	 .align 2
 2732              	 .global I2C_MASTER_StartTransmitIRQ
 2733              	 .code 16
 2734              	 .thumb_func
 2736              	I2C_MASTER_StartTransmitIRQ:
 2737              	.LFB171:
 759:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 760:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 761:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 762:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 763:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 764:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2738              	 .loc 5 764 0
 2739              	 .cfi_startproc
 2740 0000 80B5     	 push {r7,lr}
 2741              	.LCFI123:
 2742              	 .cfi_def_cfa_offset 8
 2743              	 .cfi_offset 7,-8
 2744              	 .cfi_offset 14,-4
 2745 0002 88B0     	 sub sp,sp,#32
 2746              	.LCFI124:
 2747              	 .cfi_def_cfa_offset 40
 2748 0004 00AF     	 add r7,sp,#0
 2749              	.LCFI125:
 2750              	 .cfi_def_cfa_register 7
 2751 0006 F860     	 str r0,[r7,#12]
 2752 0008 7A60     	 str r2,[r7,#4]
 2753 000a 3B60     	 str r3,[r7]
 2754 000c 0B23     	 mov r3,#11
 2755 000e FB18     	 add r3,r7,r3
 2756 0010 0A1C     	 add r2,r1,#0
 2757 0012 1A70     	 strb r2,[r3]
 765:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 766:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 767:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 768:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 2758              	 .loc 5 768 0
 2759 0014 1F23     	 mov r3,#31
 2760 0016 FB18     	 add r3,r7,r3
 2761 0018 0222     	 mov r2,#2
 2762 001a 1A70     	 strb r2,[r3]
 769:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 2763              	 .loc 5 769 0
 2764 001c FB68     	 ldr r3,[r7,#12]
 2765 001e 9B68     	 ldr r3,[r3,#8]
 2766 0020 7B61     	 str r3,[r7,#20]
 770:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 771:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
 772:../Dave/Generated/I2C_MASTER/i2c_master.c ****    If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
 773:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (siz
 2767              	 .loc 5 773 0
 2768 0022 0B23     	 mov r3,#11
 2769 0024 FB18     	 add r3,r7,r3
 2770 0026 1B78     	 ldrb r3,[r3]
 2771 0028 0122     	 mov r2,#1
 2772 002a 5340     	 eor r3,r2
 2773 002c DBB2     	 uxtb r3,r3
 2774 002e 002B     	 cmp r3,#0
 2775 0030 09D0     	 beq .L137
 2776              	 .loc 5 773 0 is_stmt 0 discriminator 1
 2777 0032 FB68     	 ldr r3,[r7,#12]
 2778 0034 9B68     	 ldr r3,[r3,#8]
 2779 0036 2822     	 mov r2,#40
 2780 0038 9B5C     	 ldrb r3,[r3,r2]
 2781 003a DBB2     	 uxtb r3,r3
 2782 003c 0122     	 mov r2,#1
 2783 003e 5340     	 eor r3,r2
 2784 0040 DBB2     	 uxtb r3,r3
 2785 0042 002B     	 cmp r3,#0
 2786 0044 05D1     	 bne .L138
 2787              	.L137:
 2788              	 .loc 5 773 0 discriminator 3
 2789 0046 3B68     	 ldr r3,[r7]
 2790 0048 002B     	 cmp r3,#0
 2791 004a 02D0     	 beq .L138
 2792              	 .loc 5 773 0 discriminator 4
 2793 004c BB6A     	 ldr r3,[r7,#40]
 2794 004e 002B     	 cmp r3,#0
 2795 0050 04D1     	 bne .L139
 2796              	.L138:
 774:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 775:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 2797              	 .loc 5 775 0 is_stmt 1
 2798 0052 1F23     	 mov r3,#31
 2799 0054 FB18     	 add r3,r7,r3
 2800 0056 0122     	 mov r2,#1
 2801 0058 1A70     	 strb r2,[r3]
 2802 005a 65E0     	 b .L140
 2803              	.L139:
 776:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 777:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 778:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 779:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 2804              	 .loc 5 779 0
 2805 005c 7B69     	 ldr r3,[r7,#20]
 2806 005e 0022     	 mov r2,#0
 2807 0060 9A61     	 str r2,[r3,#24]
 780:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 781:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (ptr_runtime->tx_busy == false)
 2808              	 .loc 5 781 0
 2809 0062 7B69     	 ldr r3,[r7,#20]
 2810 0064 2622     	 mov r2,#38
 2811 0066 9B5C     	 ldrb r3,[r3,r2]
 2812 0068 DBB2     	 uxtb r3,r3
 2813 006a 0122     	 mov r2,#1
 2814 006c 5340     	 eor r3,r2
 2815 006e DBB2     	 uxtb r3,r3
 2816 0070 002B     	 cmp r3,#0
 2817 0072 59D0     	 beq .L140
 782:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 783:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*If there is no transmission in progress, obtain the address of data, size of data*/
 784:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data = data;
 2818              	 .loc 5 784 0
 2819 0074 7B69     	 ldr r3,[r7,#20]
 2820 0076 3A68     	 ldr r2,[r7]
 2821 0078 1A60     	 str r2,[r3]
 785:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_count = size;
 2822              	 .loc 5 785 0
 2823 007a 7B69     	 ldr r3,[r7,#20]
 2824 007c BA6A     	 ldr r2,[r7,#40]
 2825 007e 9A60     	 str r2,[r3,#8]
 786:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 787:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Initialize to first index and set the busy flag*/
 788:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index = 0U;
 2826              	 .loc 5 788 0
 2827 0080 7B69     	 ldr r3,[r7,#20]
 2828 0082 0022     	 mov r2,#0
 2829 0084 DA60     	 str r2,[r3,#12]
 789:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_busy = true;
 2830              	 .loc 5 789 0
 2831 0086 7B69     	 ldr r3,[r7,#20]
 2832 0088 2622     	 mov r2,#38
 2833 008a 0121     	 mov r1,#1
 2834 008c 9954     	 strb r1,[r3,r2]
 790:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->send_stop = send_stop;
 2835              	 .loc 5 790 0
 2836 008e 2C23     	 mov r3,#44
 2837 0090 FB18     	 add r3,r7,r3
 2838 0092 1A78     	 ldrb r2,[r3]
 2839 0094 7B69     	 ldr r3,[r7,#20]
 2840 0096 DA61     	 str r2,[r3,#28]
 791:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 792:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* Enable ACK event */
 793:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 2841              	 .loc 5 793 0
 2842 0098 FA68     	 ldr r2,[r7,#12]
 2843 009a 8023     	 mov r3,#128
 2844 009c DB05     	 lsl r3,r3,#23
 2845 009e 101C     	 mov r0,r2
 2846 00a0 191C     	 mov r1,r3
 2847 00a2 FFF7FEFF 	 bl I2C_MASTER_EnableEvent
 794:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 2848              	 .loc 5 794 0
 2849 00a6 FB68     	 ldr r3,[r7,#12]
 2850 00a8 1968     	 ldr r1,[r3]
 2851 00aa 7B69     	 ldr r3,[r7,#20]
 2852 00ac 2422     	 mov r2,#36
 2853 00ae 9B5C     	 ldrb r3,[r3,r2]
 2854 00b0 081C     	 mov r0,r1
 2855 00b2 191C     	 mov r1,r3
 2856 00b4 FFF7FEFF 	 bl XMC_I2C_CH_SetInterruptNodePointer
 795:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 796:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (send_start == true)
 2857              	 .loc 5 796 0
 2858 00b8 0B23     	 mov r3,#11
 2859 00ba FB18     	 add r3,r7,r3
 2860 00bc 1B78     	 ldrb r3,[r3]
 2861 00be 002B     	 cmp r3,#0
 2862 00c0 25D0     	 beq .L141
 2863              	.LBB2:
 797:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 798:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WR
 2864              	 .loc 5 798 0
 2865 00c2 FA68     	 ldr r2,[r7,#12]
 2866 00c4 7B68     	 ldr r3,[r7,#4]
 2867 00c6 101C     	 mov r0,r2
 2868 00c8 191C     	 mov r1,r3
 2869 00ca 0022     	 mov r2,#0
 2870 00cc FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
 799:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 800:../Dave/Generated/I2C_MASTER/i2c_master.c ****         // Detect problems in multi master environments
 801:../Dave/Generated/I2C_MASTER/i2c_master.c ****         uint32_t retries = I2C_MASTER_START_TRANSMIT_RETRIES;
 2871              	 .loc 5 801 0
 2872 00d0 194B     	 ldr r3,.L147
 2873 00d2 BB61     	 str r3,[r7,#24]
 802:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (((XMC_I2C_CH_GetStatusFlag(handle->channel) & (XMC_I2C_CH_STATUS_FLAG_START_CONDITIO
 2874              	 .loc 5 802 0
 2875 00d4 C046     	 mov r8,r8
 2876              	.L143:
 2877              	 .loc 5 802 0 is_stmt 0 discriminator 2
 2878 00d6 FB68     	 ldr r3,[r7,#12]
 2879 00d8 1B68     	 ldr r3,[r3]
 2880 00da 181C     	 mov r0,r3
 2881 00dc FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 2882 00e0 021C     	 mov r2,r0
 2883 00e2 0C23     	 mov r3,#12
 2884 00e4 1340     	 and r3,r2
 2885 00e6 05D1     	 bne .L142
 2886              	 .loc 5 802 0 discriminator 1
 2887 00e8 BB69     	 ldr r3,[r7,#24]
 2888 00ea 013B     	 sub r3,r3,#1
 2889 00ec BB61     	 str r3,[r7,#24]
 2890 00ee BB69     	 ldr r3,[r7,#24]
 2891 00f0 002B     	 cmp r3,#0
 2892 00f2 F0D1     	 bne .L143
 2893              	.L142:
 803:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (retries == 0)
 2894              	 .loc 5 803 0 is_stmt 1
 2895 00f4 BB69     	 ldr r3,[r7,#24]
 2896 00f6 002B     	 cmp r3,#0
 2897 00f8 04D1     	 bne .L144
 804:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 805:../Dave/Generated/I2C_MASTER/i2c_master.c ****     	  status = I2C_MASTER_STATUS_BUS_ERROR;
 2898              	 .loc 5 805 0
 2899 00fa 1F23     	 mov r3,#31
 2900 00fc FB18     	 add r3,r7,r3
 2901 00fe 0422     	 mov r2,#4
 2902 0100 1A70     	 strb r2,[r3]
 2903 0102 11E0     	 b .L140
 2904              	.L144:
 806:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 807:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 808:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 809:../Dave/Generated/I2C_MASTER/i2c_master.c ****           status = I2C_MASTER_STATUS_SUCCESS;
 2905              	 .loc 5 809 0
 2906 0104 1F23     	 mov r3,#31
 2907 0106 FB18     	 add r3,r7,r3
 2908 0108 0022     	 mov r2,#0
 2909 010a 1A70     	 strb r2,[r3]
 2910              	.LBE2:
 2911 010c 0CE0     	 b .L140
 2912              	.L141:
 810:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 811:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 812:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 813:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 814:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Trigger the Ack interrupt*/
 815:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 2913              	 .loc 5 815 0
 2914 010e FB68     	 ldr r3,[r7,#12]
 2915 0110 1968     	 ldr r1,[r3]
 2916 0112 7B69     	 ldr r3,[r7,#20]
 2917 0114 2422     	 mov r2,#36
 2918 0116 9B5C     	 ldrb r3,[r3,r2]
 2919 0118 081C     	 mov r0,r1
 2920 011a 191C     	 mov r1,r3
 2921 011c FFF7FEFF 	 bl XMC_USIC_CH_TriggerServiceRequest
 816:../Dave/Generated/I2C_MASTER/i2c_master.c ****         status = I2C_MASTER_STATUS_SUCCESS;
 2922              	 .loc 5 816 0
 2923 0120 1F23     	 mov r3,#31
 2924 0122 FB18     	 add r3,r7,r3
 2925 0124 0022     	 mov r2,#0
 2926 0126 1A70     	 strb r2,[r3]
 2927              	.L140:
 817:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 818:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 819:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 820:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 2928              	 .loc 5 820 0
 2929 0128 1F23     	 mov r3,#31
 2930 012a FB18     	 add r3,r7,r3
 2931 012c 1B78     	 ldrb r3,[r3]
 821:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 2932              	 .loc 5 821 0
 2933 012e 181C     	 mov r0,r3
 2934 0130 BD46     	 mov sp,r7
 2935 0132 08B0     	 add sp,sp,#32
 2936              	 
 2937 0134 80BD     	 pop {r7,pc}
 2938              	.L148:
 2939 0136 C046     	 .align 2
 2940              	.L147:
 2941 0138 FF7F0000 	 .word 32767
 2942              	 .cfi_endproc
 2943              	.LFE171:
 2945              	 .section .text.I2C_MASTER_AbortTransmitIRQ,"ax",%progbits
 2946              	 .align 2
 2947              	 .code 16
 2948              	 .thumb_func
 2950              	I2C_MASTER_AbortTransmitIRQ:
 2951              	.LFB172:
 822:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 823:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
 824:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2952              	 .loc 5 824 0
 2953              	 .cfi_startproc
 2954 0000 80B5     	 push {r7,lr}
 2955              	.LCFI126:
 2956              	 .cfi_def_cfa_offset 8
 2957              	 .cfi_offset 7,-8
 2958              	 .cfi_offset 14,-4
 2959 0002 82B0     	 sub sp,sp,#8
 2960              	.LCFI127:
 2961              	 .cfi_def_cfa_offset 16
 2962 0004 00AF     	 add r7,sp,#0
 2963              	.LCFI128:
 2964              	 .cfi_def_cfa_register 7
 2965 0006 7860     	 str r0,[r7,#4]
 825:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
 2966              	 .loc 5 825 0
 2967 0008 7B68     	 ldr r3,[r7,#4]
 2968 000a 9B68     	 ldr r3,[r3,#8]
 2969 000c 2622     	 mov r2,#38
 2970 000e 0021     	 mov r1,#0
 2971 0010 9954     	 strb r1,[r3,r2]
 826:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_data = NULL;
 2972              	 .loc 5 826 0
 2973 0012 7B68     	 ldr r3,[r7,#4]
 2974 0014 9B68     	 ldr r3,[r3,#8]
 2975 0016 0022     	 mov r2,#0
 2976 0018 1A60     	 str r2,[r3]
 827:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->bus_acquired = false;
 2977              	 .loc 5 827 0
 2978 001a 7B68     	 ldr r3,[r7,#4]
 2979 001c 9B68     	 ldr r3,[r3,#8]
 2980 001e 2822     	 mov r2,#40
 2981 0020 0021     	 mov r1,#0
 2982 0022 9954     	 strb r1,[r3,r2]
 828:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 829:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Disable the transmit interrupts*/
 830:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 2983              	 .loc 5 830 0
 2984 0024 7B68     	 ldr r3,[r7,#4]
 2985 0026 5B68     	 ldr r3,[r3,#4]
 2986 0028 2622     	 mov r2,#38
 2987 002a 9B5C     	 ldrb r3,[r3,r2]
 2988 002c 002B     	 cmp r3,#0
 2989 002e 0CD0     	 beq .L150
 831:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 832:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Disable the transmit FIFO event*/
 833:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDAR
 2990              	 .loc 5 833 0
 2991 0030 7B68     	 ldr r3,[r7,#4]
 2992 0032 1A68     	 ldr r2,[r3]
 2993 0034 8023     	 mov r3,#128
 2994 0036 DB05     	 lsl r3,r3,#23
 2995 0038 101C     	 mov r0,r2
 2996 003a 191C     	 mov r1,r3
 2997 003c FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 834:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 2998              	 .loc 5 834 0
 2999 0040 7B68     	 ldr r3,[r7,#4]
 3000 0042 1B68     	 ldr r3,[r3]
 3001 0044 181C     	 mov r0,r3
 3002 0046 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_Flush
 3003              	.L150:
 835:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 836:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 3004              	 .loc 5 836 0
 3005 004a 7A68     	 ldr r2,[r7,#4]
 3006 004c 8023     	 mov r3,#128
 3007 004e DB05     	 lsl r3,r3,#23
 3008 0050 101C     	 mov r0,r2
 3009 0052 191C     	 mov r1,r3
 3010 0054 FFF7FEFF 	 bl I2C_MASTER_DisableEvent
 837:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3011              	 .loc 5 837 0
 3012 0058 BD46     	 mov sp,r7
 3013 005a 02B0     	 add sp,sp,#8
 3014              	 
 3015 005c 80BD     	 pop {r7,pc}
 3016              	 .cfi_endproc
 3017              	.LFE172:
 3019 005e C046     	 .section .text.I2C_MASTER_StartReceiveIRQ,"ax",%progbits
 3020              	 .align 2
 3021              	 .global I2C_MASTER_StartReceiveIRQ
 3022              	 .code 16
 3023              	 .thumb_func
 3025              	I2C_MASTER_StartReceiveIRQ:
 3026              	.LFB173:
 838:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 839:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 840:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 841:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_
 842:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                uint8_t * data, const uint32_t count, bool send_stop
 843:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3027              	 .loc 5 843 0
 3028              	 .cfi_startproc
 3029 0000 80B5     	 push {r7,lr}
 3030              	.LCFI129:
 3031              	 .cfi_def_cfa_offset 8
 3032              	 .cfi_offset 7,-8
 3033              	 .cfi_offset 14,-4
 3034 0002 86B0     	 sub sp,sp,#24
 3035              	.LCFI130:
 3036              	 .cfi_def_cfa_offset 32
 3037 0004 00AF     	 add r7,sp,#0
 3038              	.LCFI131:
 3039              	 .cfi_def_cfa_register 7
 3040 0006 F860     	 str r0,[r7,#12]
 3041 0008 7A60     	 str r2,[r7,#4]
 3042 000a 3B60     	 str r3,[r7]
 3043 000c 0B23     	 mov r3,#11
 3044 000e FB18     	 add r3,r7,r3
 3045 0010 0A1C     	 add r2,r1,#0
 3046 0012 1A70     	 strb r2,[r3]
 844:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 845:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 846:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 847:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 3047              	 .loc 5 847 0
 3048 0014 1723     	 mov r3,#23
 3049 0016 FB18     	 add r3,r7,r3
 3050 0018 0222     	 mov r2,#2
 3051 001a 1A70     	 strb r2,[r3]
 848:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 3052              	 .loc 5 848 0
 3053 001c FB68     	 ldr r3,[r7,#12]
 3054 001e 9B68     	 ldr r3,[r3,#8]
 3055 0020 3B61     	 str r3,[r7,#16]
 849:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 850:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (
 3056              	 .loc 5 850 0
 3057 0022 FB68     	 ldr r3,[r7,#12]
 3058 0024 002B     	 cmp r3,#0
 3059 0026 17D0     	 beq .L152
 3060              	 .loc 5 850 0 is_stmt 0 discriminator 1
 3061 0028 0B23     	 mov r3,#11
 3062 002a FB18     	 add r3,r7,r3
 3063 002c 1B78     	 ldrb r3,[r3]
 3064 002e 0122     	 mov r2,#1
 3065 0030 5340     	 eor r3,r2
 3066 0032 DBB2     	 uxtb r3,r3
 3067 0034 002B     	 cmp r3,#0
 3068 0036 09D0     	 beq .L153
 3069              	 .loc 5 850 0 discriminator 2
 3070 0038 FB68     	 ldr r3,[r7,#12]
 3071 003a 9B68     	 ldr r3,[r3,#8]
 3072 003c 2822     	 mov r2,#40
 3073 003e 9B5C     	 ldrb r3,[r3,r2]
 3074 0040 DBB2     	 uxtb r3,r3
 3075 0042 0122     	 mov r2,#1
 3076 0044 5340     	 eor r3,r2
 3077 0046 DBB2     	 uxtb r3,r3
 3078 0048 002B     	 cmp r3,#0
 3079 004a 05D1     	 bne .L152
 3080              	.L153:
 3081              	 .loc 5 850 0 discriminator 4
 3082 004c 3B68     	 ldr r3,[r7]
 3083 004e 002B     	 cmp r3,#0
 3084 0050 02D0     	 beq .L152
 3085              	 .loc 5 850 0 discriminator 5
 3086 0052 3B6A     	 ldr r3,[r7,#32]
 3087 0054 002B     	 cmp r3,#0
 3088 0056 04D1     	 bne .L154
 3089              	.L152:
 851:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (count == 0U)))
 852:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 853:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 3090              	 .loc 5 853 0 is_stmt 1
 3091 0058 1723     	 mov r3,#23
 3092 005a FB18     	 add r3,r7,r3
 3093 005c 0122     	 mov r2,#1
 3094 005e 1A70     	 strb r2,[r3]
 3095 0060 4CE0     	 b .L155
 3096              	.L154:
 854:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 855:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 856:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 857:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (ptr_runtime->rx_busy == false)
 3097              	 .loc 5 857 0
 3098 0062 3B69     	 ldr r3,[r7,#16]
 3099 0064 2722     	 mov r2,#39
 3100 0066 9B5C     	 ldrb r3,[r3,r2]
 3101 0068 DBB2     	 uxtb r3,r3
 3102 006a 0122     	 mov r2,#1
 3103 006c 5340     	 eor r3,r2
 3104 006e DBB2     	 uxtb r3,r3
 3105 0070 002B     	 cmp r3,#0
 3106 0072 43D0     	 beq .L155
 858:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 859:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 3107              	 .loc 5 859 0
 3108 0074 3B69     	 ldr r3,[r7,#16]
 3109 0076 0122     	 mov r2,#1
 3110 0078 9A61     	 str r2,[r3,#24]
 860:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 861:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* If no active reception in progress, obtain the address of data buffer and number of data b
 862:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data = data;
 3111              	 .loc 5 862 0
 3112 007a 3B69     	 ldr r3,[r7,#16]
 3113 007c 3A68     	 ldr r2,[r7]
 3114 007e 5A60     	 str r2,[r3,#4]
 863:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data_count = count;
 3115              	 .loc 5 863 0
 3116 0080 3B69     	 ldr r3,[r7,#16]
 3117 0082 3A6A     	 ldr r2,[r7,#32]
 3118 0084 1A61     	 str r2,[r3,#16]
 864:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data = data;
 3119              	 .loc 5 864 0
 3120 0086 3B69     	 ldr r3,[r7,#16]
 3121 0088 3A68     	 ldr r2,[r7]
 3122 008a 1A60     	 str r2,[r3]
 865:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_count = count;
 3123              	 .loc 5 865 0
 3124 008c 3B69     	 ldr r3,[r7,#16]
 3125 008e 3A6A     	 ldr r2,[r7,#32]
 3126 0090 9A60     	 str r2,[r3,#8]
 866:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_busy = true;
 3127              	 .loc 5 866 0
 3128 0092 3B69     	 ldr r3,[r7,#16]
 3129 0094 2622     	 mov r2,#38
 3130 0096 0121     	 mov r1,#1
 3131 0098 9954     	 strb r1,[r3,r2]
 867:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_busy = true;
 3132              	 .loc 5 867 0
 3133 009a 3B69     	 ldr r3,[r7,#16]
 3134 009c 2722     	 mov r2,#39
 3135 009e 0121     	 mov r1,#1
 3136 00a0 9954     	 strb r1,[r3,r2]
 868:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->send_stop = send_stop;
 3137              	 .loc 5 868 0
 3138 00a2 2423     	 mov r3,#36
 3139 00a4 FB18     	 add r3,r7,r3
 3140 00a6 1A78     	 ldrb r2,[r3]
 3141 00a8 3B69     	 ldr r3,[r7,#16]
 3142 00aa DA61     	 str r2,[r3,#28]
 869:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->send_nack = send_nack;
 3143              	 .loc 5 869 0
 3144 00ac 2823     	 mov r3,#40
 3145 00ae FB18     	 add r3,r7,r3
 3146 00b0 1A78     	 ldrb r2,[r3]
 3147 00b2 3B69     	 ldr r3,[r7,#16]
 3148 00b4 1A62     	 str r2,[r3,#32]
 870:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data_index = 0U;
 3149              	 .loc 5 870 0
 3150 00b6 3B69     	 ldr r3,[r7,#16]
 3151 00b8 0022     	 mov r2,#0
 3152 00ba 5A61     	 str r2,[r3,#20]
 871:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index = 0U;
 3153              	 .loc 5 871 0
 3154 00bc 3B69     	 ldr r3,[r7,#16]
 3155 00be 0022     	 mov r2,#0
 3156 00c0 DA60     	 str r2,[r3,#12]
 872:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 873:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->rxFIFO_size > 0)
 3157              	 .loc 5 873 0
 3158 00c2 FB68     	 ldr r3,[r7,#12]
 3159 00c4 5B68     	 ldr r3,[r3,#4]
 3160 00c6 2722     	 mov r2,#39
 3161 00c8 9B5C     	 ldrb r3,[r3,r2]
 3162 00ca 002B     	 cmp r3,#0
 3163 00cc 08D0     	 beq .L156
 874:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 875:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
 3164              	 .loc 5 875 0
 3165 00ce F868     	 ldr r0,[r7,#12]
 3166 00d0 0B23     	 mov r3,#11
 3167 00d2 FB18     	 add r3,r7,r3
 3168 00d4 1978     	 ldrb r1,[r3]
 3169 00d6 7A68     	 ldr r2,[r7,#4]
 3170 00d8 3B6A     	 ldr r3,[r7,#32]
 3171 00da FFF7FEFF 	 bl I2C_MASTER_lReceive_FIFOData
 3172 00de 09E0     	 b .L157
 3173              	.L156:
 876:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 877:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 878:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 879:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lReceive_StdData(handle, send_start, address);
 3174              	 .loc 5 879 0
 3175 00e0 F968     	 ldr r1,[r7,#12]
 3176 00e2 0B23     	 mov r3,#11
 3177 00e4 FB18     	 add r3,r7,r3
 3178 00e6 1A78     	 ldrb r2,[r3]
 3179 00e8 7B68     	 ldr r3,[r7,#4]
 3180 00ea 081C     	 mov r0,r1
 3181 00ec 111C     	 mov r1,r2
 3182 00ee 1A1C     	 mov r2,r3
 3183 00f0 FFF7FEFF 	 bl I2C_MASTER_lReceive_StdData
 3184              	.L157:
 880:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 881:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 3185              	 .loc 5 881 0
 3186 00f4 1723     	 mov r3,#23
 3187 00f6 FB18     	 add r3,r7,r3
 3188 00f8 0022     	 mov r2,#0
 3189 00fa 1A70     	 strb r2,[r3]
 3190              	.L155:
 882:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 883:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 884:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 3191              	 .loc 5 884 0
 3192 00fc 1723     	 mov r3,#23
 3193 00fe FB18     	 add r3,r7,r3
 3194 0100 1B78     	 ldrb r3,[r3]
 885:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3195              	 .loc 5 885 0
 3196 0102 181C     	 mov r0,r3
 3197 0104 BD46     	 mov sp,r7
 3198 0106 06B0     	 add sp,sp,#24
 3199              	 
 3200 0108 80BD     	 pop {r7,pc}
 3201              	 .cfi_endproc
 3202              	.LFE173:
 3204 010a C046     	 .section .text.I2C_MASTER_ReceiveHandler,"ax",%progbits
 3205              	 .align 2
 3206              	 .global I2C_MASTER_ReceiveHandler
 3207              	 .code 16
 3208              	 .thumb_func
 3210              	I2C_MASTER_ReceiveHandler:
 3211              	.LFB174:
 886:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 887:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 888:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Receive interrupt handler for the APP.
 889:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This is a common interrupt handling function for different instances of the I2C_MASTER APP.
 890:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 891:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 892:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 893:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void
 894:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 895:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
 896:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3212              	 .loc 5 896 0
 3213              	 .cfi_startproc
 3214 0000 90B5     	 push {r4,r7,lr}
 3215              	.LCFI132:
 3216              	 .cfi_def_cfa_offset 12
 3217              	 .cfi_offset 4,-12
 3218              	 .cfi_offset 7,-8
 3219              	 .cfi_offset 14,-4
 3220 0002 85B0     	 sub sp,sp,#20
 3221              	.LCFI133:
 3222              	 .cfi_def_cfa_offset 32
 3223 0004 00AF     	 add r7,sp,#0
 3224              	.LCFI134:
 3225              	 .cfi_def_cfa_register 7
 3226 0006 7860     	 str r0,[r7,#4]
 897:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 898:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_lindex;
 899:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_min;
 900:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 901:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 3227              	 .loc 5 901 0
 3228 0008 7B68     	 ldr r3,[r7,#4]
 3229 000a 9B68     	 ldr r3,[r3,#8]
 3230 000c BB60     	 str r3,[r7,#8]
 902:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_lindex = 0U;
 3231              	 .loc 5 902 0
 3232 000e 0F23     	 mov r3,#15
 3233 0010 FB18     	 add r3,r7,r3
 3234 0012 0022     	 mov r2,#0
 3235 0014 1A70     	 strb r2,[r3]
 903:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 904:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->rx_busy == true)
 3236              	 .loc 5 904 0
 3237 0016 BB68     	 ldr r3,[r7,#8]
 3238 0018 2722     	 mov r2,#39
 3239 001a 9B5C     	 ldrb r3,[r3,r2]
 3240 001c DBB2     	 uxtb r3,r3
 3241 001e 002B     	 cmp r3,#0
 3242 0020 00D1     	 bne .LCB2912
 3243 0022 32E1     	 b .L159
 3244              	.LCB2912:
 905:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 906:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->rxFIFO_size > 0)
 3245              	 .loc 5 906 0
 3246 0024 7B68     	 ldr r3,[r7,#4]
 3247 0026 5B68     	 ldr r3,[r3,#4]
 3248 0028 2722     	 mov r2,#39
 3249 002a 9B5C     	 ldrb r3,[r3,r2]
 3250 002c 002B     	 cmp r3,#0
 3251 002e 00D1     	 bne .LCB2918
 3252 0030 E3E0     	 b .L161
 3253              	.LCB2918:
 907:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 908:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /********************************************************************************************
 909:../Dave/Generated/I2C_MASTER/i2c_master.c ****        Rx FIFO enabled
 910:../Dave/Generated/I2C_MASTER/i2c_master.c ****       *********************************************************************************************
 911:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 3254              	 .loc 5 911 0
 3255 0032 22E0     	 b .L162
 3256              	.L164:
 912:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 913:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Read all the content of Receive FIFO */
 914:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(hand
 3257              	 .loc 5 914 0
 3258 0034 BB68     	 ldr r3,[r7,#8]
 3259 0036 5A68     	 ldr r2,[r3,#4]
 3260 0038 BB68     	 ldr r3,[r7,#8]
 3261 003a 5B69     	 ldr r3,[r3,#20]
 3262 003c D418     	 add r4,r2,r3
 3263 003e 7B68     	 ldr r3,[r7,#4]
 3264 0040 181C     	 mov r0,r3
 3265 0042 FFF7FEFF 	 bl I2C_MASTER_GetReceivedByte
 3266 0046 031C     	 mov r3,r0
 3267 0048 2370     	 strb r3,[r4]
 915:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->rx_data_index++;
 3268              	 .loc 5 915 0
 3269 004a BB68     	 ldr r3,[r7,#8]
 3270 004c 5B69     	 ldr r3,[r3,#20]
 3271 004e 5A1C     	 add r2,r3,#1
 3272 0050 BB68     	 ldr r3,[r7,#8]
 3273 0052 5A61     	 str r2,[r3,#20]
 916:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 917:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 3274              	 .loc 5 917 0
 3275 0054 BB68     	 ldr r3,[r7,#8]
 3276 0056 5A69     	 ldr r2,[r3,#20]
 3277 0058 BB68     	 ldr r3,[r7,#8]
 3278 005a 1B69     	 ldr r3,[r3,#16]
 3279 005c 9A42     	 cmp r2,r3
 3280 005e 0CD1     	 bne .L162
 918:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 919:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*Reception complete*/
 920:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->rx_busy = false;
 3281              	 .loc 5 920 0
 3282 0060 BB68     	 ldr r3,[r7,#8]
 3283 0062 2722     	 mov r2,#39
 3284 0064 0021     	 mov r1,#0
 3285 0066 9954     	 strb r1,[r3,r2]
 921:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 922:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /*Disable both standard receive and alternative receive FIFO events*/
 923:../Dave/Generated/I2C_MASTER/i2c_master.c ****             XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 3286              	 .loc 5 923 0
 3287 0068 7B68     	 ldr r3,[r7,#4]
 3288 006a 1A68     	 ldr r2,[r3]
 3289 006c C023     	 mov r3,#192
 3290 006e DB05     	 lsl r3,r3,#23
 3291 0070 101C     	 mov r0,r2
 3292 0072 191C     	 mov r1,r3
 3293 0074 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_DisableEvent
 924:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                           (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDA
 925:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                      (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERN
 926:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 927:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 3294              	 .loc 5 927 0
 3295 0078 0AE0     	 b .L163
 3296              	.L162:
 911:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 3297              	 .loc 5 911 0
 3298 007a 7B68     	 ldr r3,[r7,#4]
 3299 007c 181C     	 mov r0,r3
 3300 007e FFF7FEFF 	 bl I2C_MASTER_IsRXFIFOEmpty
 3301 0082 031C     	 mov r3,r0
 3302 0084 1A1C     	 mov r2,r3
 3303 0086 0123     	 mov r3,#1
 3304 0088 5340     	 eor r3,r2
 3305 008a DBB2     	 uxtb r3,r3
 3306 008c 002B     	 cmp r3,#0
 3307 008e D1D1     	 bne .L164
 3308              	.L163:
 928:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 929:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/
 930:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 931:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Set the trigger limit if data still to be received*/
 932:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 3309              	 .loc 5 932 0
 3310 0090 BB68     	 ldr r3,[r7,#8]
 3311 0092 5A69     	 ldr r2,[r3,#20]
 3312 0094 BB68     	 ldr r3,[r7,#8]
 3313 0096 1B69     	 ldr r3,[r3,#16]
 3314 0098 9A42     	 cmp r2,r3
 3315 009a 00D3     	 bcc .LCB2975
 3316 009c 8CE0     	 b .L165
 3317              	.LCB2975:
 933:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 934:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->r
 3318              	 .loc 5 934 0
 3319 009e BB68     	 ldr r3,[r7,#8]
 3320 00a0 1A69     	 ldr r2,[r3,#16]
 3321 00a2 BB68     	 ldr r3,[r7,#8]
 3322 00a4 5B69     	 ldr r3,[r3,#20]
 3323 00a6 D31A     	 sub r3,r2,r3
 3324 00a8 7A68     	 ldr r2,[r7,#4]
 3325 00aa 101C     	 mov r0,r2
 3326 00ac 191C     	 mov r1,r3
 3327 00ae FFF7FEFF 	 bl I2C_MASTER_lReconfigureRxFIFO
 935:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 936:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if ((handle->config->txFIFO_size > 0))
 3328              	 .loc 5 936 0
 3329 00b2 7B68     	 ldr r3,[r7,#4]
 3330 00b4 5B68     	 ldr r3,[r3,#4]
 3331 00b6 2622     	 mov r2,#38
 3332 00b8 9B5C     	 ldrb r3,[r3,r2]
 3333 00ba 002B     	 cmp r3,#0
 3334 00bc 17D0     	 beq .L166
 937:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 938:../Dave/Generated/I2C_MASTER/i2c_master.c ****           fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIF
 3335              	 .loc 5 938 0
 3336 00be 7B68     	 ldr r3,[r7,#4]
 3337 00c0 5B68     	 ldr r3,[r3,#4]
 3338 00c2 2622     	 mov r2,#38
 3339 00c4 9B5C     	 ldrb r3,[r3,r2]
 3340 00c6 1A1C     	 mov r2,r3
 3341 00c8 0123     	 mov r3,#1
 3342 00ca 9340     	 lsl r3,r3,r2
 3343 00cc 191C     	 mov r1,r3
 939:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     ((uint32_t)1 << (uint32_t)handle->config->rxFIF
 3344              	 .loc 5 939 0
 3345 00ce 7B68     	 ldr r3,[r7,#4]
 3346 00d0 5B68     	 ldr r3,[r3,#4]
 3347 00d2 2722     	 mov r2,#39
 3348 00d4 9B5C     	 ldrb r3,[r3,r2]
 938:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     ((uint32_t)1 << (uint32_t)handle->config->rxFIF
 3349              	 .loc 5 938 0
 3350 00d6 1A1C     	 mov r2,r3
 3351 00d8 0123     	 mov r3,#1
 3352 00da 9340     	 lsl r3,r3,r2
 3353 00dc 081C     	 mov r0,r1
 3354 00de 191C     	 mov r1,r3
 3355 00e0 FFF7FEFF 	 bl calculate_minfifosize
 3356 00e4 021C     	 mov r2,r0
 3357 00e6 0E23     	 mov r3,#14
 3358 00e8 FB18     	 add r3,r7,r3
 3359 00ea 1A70     	 strb r2,[r3]
 3360 00ec 03E0     	 b .L167
 3361              	.L166:
 940:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 941:../Dave/Generated/I2C_MASTER/i2c_master.c ****        else
 942:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 943:../Dave/Generated/I2C_MASTER/i2c_master.c ****           fifo_min = 2U;
 3362              	 .loc 5 943 0
 3363 00ee 0E23     	 mov r3,#14
 3364 00f0 FB18     	 add r3,r7,r3
 3365 00f2 0222     	 mov r2,#2
 3366 00f4 1A70     	 strb r2,[r3]
 3367              	.L167:
 944:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 945:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*******************************************************************************************
 946:../Dave/Generated/I2C_MASTER/i2c_master.c ****          Rx and Tx FIFO enabled
 947:../Dave/Generated/I2C_MASTER/i2c_master.c ****         *******************************************************************************************
 948:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (handle->config->txFIFO_size > 0)
 3368              	 .loc 5 948 0
 3369 00f6 7B68     	 ldr r3,[r7,#4]
 3370 00f8 5B68     	 ldr r3,[r3,#4]
 3371 00fa 2622     	 mov r2,#38
 3372 00fc 9B5C     	 ldrb r3,[r3,r2]
 3373 00fe 002B     	 cmp r3,#0
 3374 0100 41D0     	 beq .L168
 949:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 950:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*Fill the transmit FIFO */
 951:../Dave/Generated/I2C_MASTER/i2c_master.c ****           while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 3375              	 .loc 5 951 0
 3376 0102 33E0     	 b .L169
 3377              	.L174:
 952:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 953:../Dave/Generated/I2C_MASTER/i2c_master.c ****             if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 3378              	 .loc 5 953 0
 3379 0104 BB68     	 ldr r3,[r7,#8]
 3380 0106 DA68     	 ldr r2,[r3,#12]
 3381 0108 BB68     	 ldr r3,[r7,#8]
 3382 010a 9B68     	 ldr r3,[r3,#8]
 3383 010c 9A42     	 cmp r2,r3
 3384 010e 2CD2     	 bcs .L170
 954:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
 955:../Dave/Generated/I2C_MASTER/i2c_master.c ****               if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime
 3385              	 .loc 5 955 0
 3386 0110 BB68     	 ldr r3,[r7,#8]
 3387 0112 DB68     	 ldr r3,[r3,#12]
 3388 0114 5A1C     	 add r2,r3,#1
 3389 0116 BB68     	 ldr r3,[r7,#8]
 3390 0118 9B68     	 ldr r3,[r3,#8]
 3391 011a 9A42     	 cmp r2,r3
 3392 011c 08D1     	 bne .L171
 3393              	 .loc 5 955 0 is_stmt 0 discriminator 1
 3394 011e BB68     	 ldr r3,[r7,#8]
 3395 0120 1B6A     	 ldr r3,[r3,#32]
 3396 0122 012B     	 cmp r3,#1
 3397 0124 04D1     	 bne .L171
 956:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 957:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 I2C_MASTER_ReceiveNACK(handle);
 3398              	 .loc 5 957 0 is_stmt 1
 3399 0126 7B68     	 ldr r3,[r7,#4]
 3400 0128 181C     	 mov r0,r3
 3401 012a FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 3402 012e 03E0     	 b .L172
 3403              	.L171:
 958:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 959:../Dave/Generated/I2C_MASTER/i2c_master.c ****               else
 960:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 961:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 I2C_MASTER_ReceiveACK(handle);
 3404              	 .loc 5 961 0
 3405 0130 7B68     	 ldr r3,[r7,#4]
 3406 0132 181C     	 mov r0,r3
 3407 0134 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 3408              	.L172:
 962:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 963:../Dave/Generated/I2C_MASTER/i2c_master.c ****               ptr_runtime->tx_data_index++;
 3409              	 .loc 5 963 0
 3410 0138 BB68     	 ldr r3,[r7,#8]
 3411 013a DB68     	 ldr r3,[r3,#12]
 3412 013c 5A1C     	 add r2,r3,#1
 3413 013e BB68     	 ldr r3,[r7,#8]
 3414 0140 DA60     	 str r2,[r3,#12]
 964:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 965:../Dave/Generated/I2C_MASTER/i2c_master.c ****               /* if fifo size- break */
 966:../Dave/Generated/I2C_MASTER/i2c_master.c ****               if ((++fifo_lindex) >= fifo_min)
 3415              	 .loc 5 966 0
 3416 0142 0F23     	 mov r3,#15
 3417 0144 FB18     	 add r3,r7,r3
 3418 0146 0F22     	 mov r2,#15
 3419 0148 BA18     	 add r2,r7,r2
 3420 014a 1278     	 ldrb r2,[r2]
 3421 014c 0132     	 add r2,r2,#1
 3422 014e 1A70     	 strb r2,[r3]
 3423 0150 0F23     	 mov r3,#15
 3424 0152 FA18     	 add r2,r7,r3
 3425 0154 0E23     	 mov r3,#14
 3426 0156 FB18     	 add r3,r7,r3
 3427 0158 1278     	 ldrb r2,[r2]
 3428 015a 1B78     	 ldrb r3,[r3]
 3429 015c 9A42     	 cmp r2,r3
 3430 015e 05D3     	 bcc .L169
 967:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 968:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 fifo_lindex = 0U;
 3431              	 .loc 5 968 0
 3432 0160 0F23     	 mov r3,#15
 3433 0162 FB18     	 add r3,r7,r3
 3434 0164 0022     	 mov r2,#0
 3435 0166 1A70     	 strb r2,[r3]
 969:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 break;
 3436              	 .loc 5 969 0
 3437 0168 0CE0     	 b .L173
 3438              	.L170:
 970:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 971:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
 972:../Dave/Generated/I2C_MASTER/i2c_master.c ****             else
 973:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
 974:../Dave/Generated/I2C_MASTER/i2c_master.c ****               break;
 3439              	 .loc 5 974 0
 3440 016a 0BE0     	 b .L173
 3441              	.L169:
 951:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 3442              	 .loc 5 951 0
 3443 016c 7B68     	 ldr r3,[r7,#4]
 3444 016e 181C     	 mov r0,r3
 3445 0170 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 3446 0174 031C     	 mov r3,r0
 3447 0176 1A1C     	 mov r2,r3
 3448 0178 0123     	 mov r3,#1
 3449 017a 5340     	 eor r3,r2
 3450 017c DBB2     	 uxtb r3,r3
 3451 017e 002B     	 cmp r3,#0
 3452 0180 C0D1     	 bne .L174
 3453 0182 19E0     	 b .L165
 3454              	.L173:
 3455 0184 18E0     	 b .L165
 3456              	.L168:
 975:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }
 976:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 977:../Dave/Generated/I2C_MASTER/i2c_master.c ****        } /* end of  if((handle->config->txFIFO_size > 0)) */
 978:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*******************************************************************************************
 979:../Dave/Generated/I2C_MASTER/i2c_master.c ****           Rx FIFO is enabled, Tx FIFO disabled
 980:../Dave/Generated/I2C_MASTER/i2c_master.c ****        ********************************************************************************************
 981:../Dave/Generated/I2C_MASTER/i2c_master.c ****        else
 982:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 983:../Dave/Generated/I2C_MASTER/i2c_master.c ****          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->sen
 3457              	 .loc 5 983 0
 3458 0186 BB68     	 ldr r3,[r7,#8]
 3459 0188 DB68     	 ldr r3,[r3,#12]
 3460 018a 5A1C     	 add r2,r3,#1
 3461 018c BB68     	 ldr r3,[r7,#8]
 3462 018e 9B68     	 ldr r3,[r3,#8]
 3463 0190 9A42     	 cmp r2,r3
 3464 0192 08D1     	 bne .L175
 3465              	 .loc 5 983 0 is_stmt 0 discriminator 1
 3466 0194 BB68     	 ldr r3,[r7,#8]
 3467 0196 1B6A     	 ldr r3,[r3,#32]
 3468 0198 012B     	 cmp r3,#1
 3469 019a 04D1     	 bne .L175
 984:../Dave/Generated/I2C_MASTER/i2c_master.c ****          {
 985:../Dave/Generated/I2C_MASTER/i2c_master.c ****            I2C_MASTER_ReceiveNACK(handle);
 3470              	 .loc 5 985 0 is_stmt 1
 3471 019c 7B68     	 ldr r3,[r7,#4]
 3472 019e 181C     	 mov r0,r3
 3473 01a0 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 3474 01a4 03E0     	 b .L176
 3475              	.L175:
 986:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 987:../Dave/Generated/I2C_MASTER/i2c_master.c ****          else
 988:../Dave/Generated/I2C_MASTER/i2c_master.c ****          {
 989:../Dave/Generated/I2C_MASTER/i2c_master.c ****            I2C_MASTER_ReceiveACK(handle);
 3476              	 .loc 5 989 0
 3477 01a6 7B68     	 ldr r3,[r7,#4]
 3478 01a8 181C     	 mov r0,r3
 3479 01aa FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 3480              	.L176:
 990:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 991:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 992:../Dave/Generated/I2C_MASTER/i2c_master.c ****          ptr_runtime->tx_data_index++;
 3481              	 .loc 5 992 0
 3482 01ae BB68     	 ldr r3,[r7,#8]
 3483 01b0 DB68     	 ldr r3,[r3,#12]
 3484 01b2 5A1C     	 add r2,r3,#1
 3485 01b4 BB68     	 ldr r3,[r7,#8]
 3486 01b6 DA60     	 str r2,[r3,#12]
 3487              	.L165:
 993:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 994:../Dave/Generated/I2C_MASTER/i2c_master.c ****      } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
 995:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 996:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if last byte to receive then disable receive events and jump to callback routine
 997:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 998:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 3488              	 .loc 5 998 0
 3489 01b8 BB68     	 ldr r3,[r7,#8]
 3490 01ba 5A69     	 ldr r2,[r3,#20]
 3491 01bc BB68     	 ldr r3,[r7,#8]
 3492 01be 1B69     	 ldr r3,[r3,#16]
 3493 01c0 9A42     	 cmp r2,r3
 3494 01c2 62D1     	 bne .L159
 999:../Dave/Generated/I2C_MASTER/i2c_master.c ****      {
1000:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*Clear both standard receive and alternative receive FIFO events*/
1001:../Dave/Generated/I2C_MASTER/i2c_master.c ****        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVE
 3495              	 .loc 5 1001 0
 3496 01c4 7B68     	 ldr r3,[r7,#4]
 3497 01c6 1A68     	 ldr r2,[r3]
 3498 01c8 C023     	 mov r3,#192
 3499 01ca DB05     	 lsl r3,r3,#23
 3500 01cc 101C     	 mov r0,r2
 3501 01ce 191C     	 mov r1,r3
 3502 01d0 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_DisableEvent
1002:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                                    (uint32_t)XMC_USIC_CH_RXFIFO_EVE
1003:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1004:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*Disable both standard receive and alternative receive events*/
1005:../Dave/Generated/I2C_MASTER/i2c_master.c ****        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE
 3503              	 .loc 5 1005 0
 3504 01d4 7B68     	 ldr r3,[r7,#4]
 3505 01d6 1A68     	 ldr r2,[r3]
 3506 01d8 C023     	 mov r3,#192
 3507 01da 1B02     	 lsl r3,r3,#8
 3508 01dc 101C     	 mov r0,r2
 3509 01de 191C     	 mov r1,r3
 3510 01e0 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
1006:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RE
1007:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1008:../Dave/Generated/I2C_MASTER/i2c_master.c ****        if (ptr_runtime->bus_acquired == true)
 3511              	 .loc 5 1008 0
 3512 01e4 BB68     	 ldr r3,[r7,#8]
 3513 01e6 2822     	 mov r2,#40
 3514 01e8 9B5C     	 ldrb r3,[r3,r2]
 3515 01ea DBB2     	 uxtb r3,r3
 3516 01ec 002B     	 cmp r3,#0
 3517 01ee 4CD0     	 beq .L159
1009:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
1010:../Dave/Generated/I2C_MASTER/i2c_master.c ****          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 3518              	 .loc 5 1010 0
 3519 01f0 7B68     	 ldr r3,[r7,#4]
 3520 01f2 181C     	 mov r0,r3
 3521 01f4 FFF7FEFF 	 bl I2C_MASTER_lSendStop_JumpTo_RxCallback
 3522 01f8 47E0     	 b .L159
 3523              	.L161:
1011:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
1012:../Dave/Generated/I2C_MASTER/i2c_master.c ****      }
1013:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /*  end of if(handle->config->rxFIFO_size > 0) */
1014:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1015:../Dave/Generated/I2C_MASTER/i2c_master.c ****      Rx FIFO disabled
1016:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
1017:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
1018:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1019:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle
 3524              	 .loc 5 1019 0
 3525 01fa BB68     	 ldr r3,[r7,#8]
 3526 01fc 5A68     	 ldr r2,[r3,#4]
 3527 01fe BB68     	 ldr r3,[r7,#8]
 3528 0200 5B69     	 ldr r3,[r3,#20]
 3529 0202 D418     	 add r4,r2,r3
 3530 0204 7B68     	 ldr r3,[r7,#4]
 3531 0206 181C     	 mov r0,r3
 3532 0208 FFF7FEFF 	 bl I2C_MASTER_GetReceivedByte
 3533 020c 031C     	 mov r3,r0
 3534 020e 2370     	 strb r3,[r4]
1020:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->rx_data_index++;
 3535              	 .loc 5 1020 0
 3536 0210 BB68     	 ldr r3,[r7,#8]
 3537 0212 5B69     	 ldr r3,[r3,#20]
 3538 0214 5A1C     	 add r2,r3,#1
 3539 0216 BB68     	 ldr r3,[r7,#8]
 3540 0218 5A61     	 str r2,[r3,#20]
1021:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1022:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 3541              	 .loc 5 1022 0
 3542 021a BB68     	 ldr r3,[r7,#8]
 3543 021c 5A69     	 ldr r2,[r3,#20]
 3544 021e BB68     	 ldr r3,[r7,#8]
 3545 0220 1B69     	 ldr r3,[r3,#16]
 3546 0222 9A42     	 cmp r2,r3
 3547 0224 1FD2     	 bcs .L178
1023:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1024:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 3548              	 .loc 5 1024 0
 3549 0226 BB68     	 ldr r3,[r7,#8]
 3550 0228 DA68     	 ldr r2,[r3,#12]
 3551 022a BB68     	 ldr r3,[r7,#8]
 3552 022c 9B68     	 ldr r3,[r3,#8]
 3553 022e 9A42     	 cmp r2,r3
 3554 0230 2BD2     	 bcs .L159
1025:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1026:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise A
1027:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->
 3555              	 .loc 5 1027 0
 3556 0232 BB68     	 ldr r3,[r7,#8]
 3557 0234 DA68     	 ldr r2,[r3,#12]
 3558 0236 BB68     	 ldr r3,[r7,#8]
 3559 0238 9B68     	 ldr r3,[r3,#8]
 3560 023a 013B     	 sub r3,r3,#1
 3561 023c 9A42     	 cmp r2,r3
 3562 023e 08D1     	 bne .L180
 3563              	 .loc 5 1027 0 is_stmt 0 discriminator 1
 3564 0240 BB68     	 ldr r3,[r7,#8]
 3565 0242 1B6A     	 ldr r3,[r3,#32]
 3566 0244 012B     	 cmp r3,#1
 3567 0246 04D1     	 bne .L180
1028:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1029:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 3568              	 .loc 5 1029 0 is_stmt 1
 3569 0248 7B68     	 ldr r3,[r7,#4]
 3570 024a 181C     	 mov r0,r3
 3571 024c FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 3572 0250 03E0     	 b .L181
 3573              	.L180:
1030:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1031:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
1032:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1033:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 3574              	 .loc 5 1033 0
 3575 0252 7B68     	 ldr r3,[r7,#4]
 3576 0254 181C     	 mov r0,r3
 3577 0256 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 3578              	.L181:
1034:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1035:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 3579              	 .loc 5 1035 0
 3580 025a BB68     	 ldr r3,[r7,#8]
 3581 025c DB68     	 ldr r3,[r3,#12]
 3582 025e 5A1C     	 add r2,r3,#1
 3583 0260 BB68     	 ldr r3,[r7,#8]
 3584 0262 DA60     	 str r2,[r3,#12]
 3585 0264 11E0     	 b .L159
 3586              	.L178:
1036:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1037:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1038:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1039:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1040:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Disable both standard receive and alternative receive events*/
1041:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIV
 3587              	 .loc 5 1041 0
 3588 0266 7B68     	 ldr r3,[r7,#4]
 3589 0268 1A68     	 ldr r2,[r3]
 3590 026a C023     	 mov r3,#192
 3591 026c 1B02     	 lsl r3,r3,#8
 3592 026e 101C     	 mov r0,r2
 3593 0270 191C     	 mov r1,r3
 3594 0272 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
1042:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                              (uint32_t)XMC_USIC_CH_EVENT_STANDARD_R
1043:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->bus_acquired == true)
 3595              	 .loc 5 1043 0
 3596 0276 BB68     	 ldr r3,[r7,#8]
 3597 0278 2822     	 mov r2,#40
 3598 027a 9B5C     	 ldrb r3,[r3,r2]
 3599 027c DBB2     	 uxtb r3,r3
 3600 027e 002B     	 cmp r3,#0
 3601 0280 03D0     	 beq .L159
1044:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1045:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 3602              	 .loc 5 1045 0
 3603 0282 7B68     	 ldr r3,[r7,#4]
 3604 0284 181C     	 mov r0,r3
 3605 0286 FFF7FEFF 	 bl I2C_MASTER_lSendStop_JumpTo_RxCallback
 3606              	.L159:
1046:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1047:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1048:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1049:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of  if(ptr_runtime->rx_busy == true)*/
1050:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3607              	 .loc 5 1050 0
 3608 028a BD46     	 mov sp,r7
 3609 028c 05B0     	 add sp,sp,#20
 3610              	 
 3611 028e 90BD     	 pop {r4,r7,pc}
 3612              	 .cfi_endproc
 3613              	.LFE174:
 3615              	 .section .text.I2C_MASTER_lSendStop_JumpTo_RxCallback,"ax",%progbits
 3616              	 .align 2
 3617              	 .code 16
 3618              	 .thumb_func
 3620              	I2C_MASTER_lSendStop_JumpTo_RxCallback:
 3621              	.LFB175:
1051:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1052:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Stop command and jump to receive callback routine */
1053:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
1054:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3622              	 .loc 5 1054 0
 3623              	 .cfi_startproc
 3624 0000 80B5     	 push {r7,lr}
 3625              	.LCFI135:
 3626              	 .cfi_def_cfa_offset 8
 3627              	 .cfi_offset 7,-8
 3628              	 .cfi_offset 14,-4
 3629 0002 84B0     	 sub sp,sp,#16
 3630              	.LCFI136:
 3631              	 .cfi_def_cfa_offset 24
 3632 0004 00AF     	 add r7,sp,#0
 3633              	.LCFI137:
 3634              	 .cfi_def_cfa_register 7
 3635 0006 7860     	 str r0,[r7,#4]
1055:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
1056:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1057:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 3636              	 .loc 5 1057 0
 3637 0008 7B68     	 ldr r3,[r7,#4]
 3638 000a 9B68     	 ldr r3,[r3,#8]
 3639 000c FB60     	 str r3,[r7,#12]
1058:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1059:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->send_stop == true)
 3640              	 .loc 5 1059 0
 3641 000e FB68     	 ldr r3,[r7,#12]
 3642 0010 DB69     	 ldr r3,[r3,#28]
 3643 0012 012B     	 cmp r3,#1
 3644 0014 10D1     	 bne .L183
1060:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1061:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 3645              	 .loc 5 1061 0
 3646 0016 C046     	 mov r8,r8
 3647              	.L184:
 3648              	 .loc 5 1061 0 is_stmt 0 discriminator 1
 3649 0018 7B68     	 ldr r3,[r7,#4]
 3650 001a 1B68     	 ldr r3,[r3]
 3651 001c 181C     	 mov r0,r3
 3652 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 3653 0022 031E     	 sub r3,r0,#0
 3654 0024 802B     	 cmp r3,#128
 3655 0026 F7D0     	 beq .L184
1062:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1063:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->bus_acquired = false;
 3656              	 .loc 5 1063 0 is_stmt 1
 3657 0028 FB68     	 ldr r3,[r7,#12]
 3658 002a 2822     	 mov r2,#40
 3659 002c 0021     	 mov r1,#0
 3660 002e 9954     	 strb r1,[r3,r2]
1064:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1065:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
 3661              	 .loc 5 1065 0
 3662 0030 7B68     	 ldr r3,[r7,#4]
 3663 0032 181C     	 mov r0,r3
 3664 0034 FFF7FEFF 	 bl I2C_MASTER_SendStop
 3665              	.L183:
1066:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1067:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1068:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 3666              	 .loc 5 1068 0
 3667 0038 C046     	 mov r8,r8
 3668              	.L185:
 3669              	 .loc 5 1068 0 is_stmt 0 discriminator 1
 3670 003a 7B68     	 ldr r3,[r7,#4]
 3671 003c 1B68     	 ldr r3,[r3]
 3672 003e 181C     	 mov r0,r3
 3673 0040 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 3674 0044 031E     	 sub r3,r0,#0
 3675 0046 802B     	 cmp r3,#128
 3676 0048 F7D0     	 beq .L185
1069:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1070:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reception complete */
1071:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->rx_busy = false;
 3677              	 .loc 5 1071 0 is_stmt 1
 3678 004a FB68     	 ldr r3,[r7,#12]
 3679 004c 2722     	 mov r2,#39
 3680 004e 0021     	 mov r1,#0
 3681 0050 9954     	 strb r1,[r3,r2]
1072:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->tx_busy = false;
 3682              	 .loc 5 1072 0
 3683 0052 FB68     	 ldr r3,[r7,#12]
 3684 0054 2622     	 mov r2,#38
 3685 0056 0021     	 mov r1,#0
 3686 0058 9954     	 strb r1,[r3,r2]
1073:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1074:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->rx_cbhandler != NULL)
 3687              	 .loc 5 1074 0
 3688 005a 7B68     	 ldr r3,[r7,#4]
 3689 005c 5B68     	 ldr r3,[r3,#4]
 3690 005e 5B69     	 ldr r3,[r3,#20]
 3691 0060 002B     	 cmp r3,#0
 3692 0062 03D0     	 beq .L182
1075:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1076:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Execute the 'End of reception' callback function*/
1077:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->rx_cbhandler();
 3693              	 .loc 5 1077 0
 3694 0064 7B68     	 ldr r3,[r7,#4]
 3695 0066 5B68     	 ldr r3,[r3,#4]
 3696 0068 5B69     	 ldr r3,[r3,#20]
 3697 006a 9847     	 blx r3
 3698              	.L182:
1078:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1079:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3699              	 .loc 5 1079 0
 3700 006c BD46     	 mov sp,r7
 3701 006e 04B0     	 add sp,sp,#16
 3702              	 
 3703 0070 80BD     	 pop {r7,pc}
 3704              	 .cfi_endproc
 3705              	.LFE175:
 3707 0072 C046     	 .section .text.I2C_MASTER_lAbortReceiveIRQ,"ax",%progbits
 3708              	 .align 2
 3709              	 .code 16
 3710              	 .thumb_func
 3712              	I2C_MASTER_lAbortReceiveIRQ:
 3713              	.LFB176:
1080:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1081:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1082:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
1083:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3714              	 .loc 5 1083 0
 3715              	 .cfi_startproc
 3716 0000 80B5     	 push {r7,lr}
 3717              	.LCFI138:
 3718              	 .cfi_def_cfa_offset 8
 3719              	 .cfi_offset 7,-8
 3720              	 .cfi_offset 14,-4
 3721 0002 82B0     	 sub sp,sp,#8
 3722              	.LCFI139:
 3723              	 .cfi_def_cfa_offset 16
 3724 0004 00AF     	 add r7,sp,#0
 3725              	.LCFI140:
 3726              	 .cfi_def_cfa_register 7
 3727 0006 7860     	 str r0,[r7,#4]
1084:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reset the user buffer pointer to null */
1085:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_busy = false;
 3728              	 .loc 5 1085 0
 3729 0008 7B68     	 ldr r3,[r7,#4]
 3730 000a 9B68     	 ldr r3,[r3,#8]
 3731 000c 2722     	 mov r2,#39
 3732 000e 0021     	 mov r1,#0
 3733 0010 9954     	 strb r1,[r3,r2]
1086:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
 3734              	 .loc 5 1086 0
 3735 0012 7B68     	 ldr r3,[r7,#4]
 3736 0014 9B68     	 ldr r3,[r3,#8]
 3737 0016 2622     	 mov r2,#38
 3738 0018 0021     	 mov r1,#0
 3739 001a 9954     	 strb r1,[r3,r2]
1087:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_data = NULL;
 3740              	 .loc 5 1087 0
 3741 001c 7B68     	 ldr r3,[r7,#4]
 3742 001e 9B68     	 ldr r3,[r3,#8]
 3743 0020 0022     	 mov r2,#0
 3744 0022 5A60     	 str r2,[r3,#4]
1088:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1089:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->bus_acquired = false;
 3745              	 .loc 5 1089 0
 3746 0024 7B68     	 ldr r3,[r7,#4]
 3747 0026 9B68     	 ldr r3,[r3,#8]
 3748 0028 2822     	 mov r2,#40
 3749 002a 0021     	 mov r1,#0
 3750 002c 9954     	 strb r1,[r3,r2]
1090:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1091:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Disable the receive interrupts */
1092:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 3751              	 .loc 5 1092 0
 3752 002e 7B68     	 ldr r3,[r7,#4]
 3753 0030 5B68     	 ldr r3,[r3,#4]
 3754 0032 2722     	 mov r2,#39
 3755 0034 9B5C     	 ldrb r3,[r3,r2]
 3756 0036 002B     	 cmp r3,#0
 3757 0038 08D0     	 beq .L188
1093:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1094:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_
 3758              	 .loc 5 1094 0
 3759 003a 7B68     	 ldr r3,[r7,#4]
 3760 003c 1A68     	 ldr r2,[r3]
 3761 003e C023     	 mov r3,#192
 3762 0040 DB05     	 lsl r3,r3,#23
 3763 0042 101C     	 mov r0,r2
 3764 0044 191C     	 mov r1,r3
 3765 0046 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_DisableEvent
 3766 004a 07E0     	 b .L189
 3767              	.L188:
1095:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNA
1096:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1097:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1098:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1099:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEI
 3768              	 .loc 5 1099 0
 3769 004c 7B68     	 ldr r3,[r7,#4]
 3770 004e 1A68     	 ldr r2,[r3]
 3771 0050 C023     	 mov r3,#192
 3772 0052 1B02     	 lsl r3,r3,#8
 3773 0054 101C     	 mov r0,r2
 3774 0056 191C     	 mov r1,r3
 3775 0058 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
 3776              	.L189:
1100:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                  (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
1101:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1102:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 3777              	 .loc 5 1102 0
 3778 005c 7A68     	 ldr r2,[r7,#4]
 3779 005e 8023     	 mov r3,#128
 3780 0060 DB05     	 lsl r3,r3,#23
 3781 0062 101C     	 mov r0,r2
 3782 0064 191C     	 mov r1,r3
 3783 0066 FFF7FEFF 	 bl I2C_MASTER_DisableEvent
1103:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3784              	 .loc 5 1103 0
 3785 006a BD46     	 mov sp,r7
 3786 006c 02B0     	 add sp,sp,#8
 3787              	 
 3788 006e 80BD     	 pop {r7,pc}
 3789              	 .cfi_endproc
 3790              	.LFE176:
 3792              	 .section .text.I2C_MASTER_ProtocolHandler,"ax",%progbits
 3793              	 .align 2
 3794              	 .global I2C_MASTER_ProtocolHandler
 3795              	 .code 16
 3796              	 .thumb_func
 3798              	I2C_MASTER_ProtocolHandler:
 3799              	.LFB177:
1104:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1105:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1106:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
1107:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Protocol interrupt handling function.
1108:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * The function is common for different instances of the I2C_MASTER APP.
1109:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1110:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
1111:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1112:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void
1113:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
1114:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
1115:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3800              	 .loc 5 1115 0
 3801              	 .cfi_startproc
 3802 0000 80B5     	 push {r7,lr}
 3803              	.LCFI141:
 3804              	 .cfi_def_cfa_offset 8
 3805              	 .cfi_offset 7,-8
 3806              	 .cfi_offset 14,-4
 3807 0002 84B0     	 sub sp,sp,#16
 3808              	.LCFI142:
 3809              	 .cfi_def_cfa_offset 24
 3810 0004 00AF     	 add r7,sp,#0
 3811              	.LCFI143:
 3812              	 .cfi_def_cfa_register 7
 3813 0006 7860     	 str r0,[r7,#4]
1116:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t psr_status;
1117:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1118:../Dave/Generated/I2C_MASTER/i2c_master.c ****   psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 3814              	 .loc 5 1118 0
 3815 0008 7B68     	 ldr r3,[r7,#4]
 3816 000a 1B68     	 ldr r3,[r3]
 3817 000c 181C     	 mov r0,r3
 3818 000e FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 3819 0012 031C     	 mov r3,r0
 3820 0014 FB60     	 str r3,[r7,#12]
1119:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1120:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for nack event */
1121:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NA
 3821              	 .loc 5 1121 0
 3822 0016 7B68     	 ldr r3,[r7,#4]
 3823 0018 5B68     	 ldr r3,[r3,#4]
 3824 001a 9B69     	 ldr r3,[r3,#24]
 3825 001c 002B     	 cmp r3,#0
 3826 001e 0CD0     	 beq .L191
 3827              	 .loc 5 1121 0 is_stmt 0 discriminator 1
 3828 0020 FB68     	 ldr r3,[r7,#12]
 3829 0022 2022     	 mov r2,#32
 3830 0024 1340     	 and r3,r2
 3831 0026 08D0     	 beq .L191
1122:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1123:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 3832              	 .loc 5 1123 0 is_stmt 1
 3833 0028 7B68     	 ldr r3,[r7,#4]
 3834 002a 181C     	 mov r0,r3
 3835 002c 2021     	 mov r1,#32
 3836 002e FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1124:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->nack_cbhandler();
 3837              	 .loc 5 1124 0
 3838 0032 7B68     	 ldr r3,[r7,#4]
 3839 0034 5B68     	 ldr r3,[r3,#4]
 3840 0036 9B69     	 ldr r3,[r3,#24]
 3841 0038 9847     	 blx r3
 3842              	.L191:
1125:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1126:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1127:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for arbitration lost */
1128:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_
 3843              	 .loc 5 1128 0
 3844 003a 7B68     	 ldr r3,[r7,#4]
 3845 003c 5B68     	 ldr r3,[r3,#4]
 3846 003e DB69     	 ldr r3,[r3,#28]
 3847 0040 002B     	 cmp r3,#0
 3848 0042 0CD0     	 beq .L192
 3849              	 .loc 5 1128 0 is_stmt 0 discriminator 1
 3850 0044 FB68     	 ldr r3,[r7,#12]
 3851 0046 4022     	 mov r2,#64
 3852 0048 1340     	 and r3,r2
 3853 004a 08D0     	 beq .L192
1129:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1130:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 3854              	 .loc 5 1130 0 is_stmt 1
 3855 004c 7B68     	 ldr r3,[r7,#4]
 3856 004e 181C     	 mov r0,r3
 3857 0050 4021     	 mov r1,#64
 3858 0052 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1131:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->arbitration_cbhandler();
 3859              	 .loc 5 1131 0
 3860 0056 7B68     	 ldr r3,[r7,#4]
 3861 0058 5B68     	 ldr r3,[r3,#4]
 3862 005a DB69     	 ldr r3,[r3,#28]
 3863 005c 9847     	 blx r3
 3864              	.L192:
1132:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1133:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1134:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for error detected */
1135:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_
 3865              	 .loc 5 1135 0
 3866 005e 7B68     	 ldr r3,[r7,#4]
 3867 0060 5B68     	 ldr r3,[r3,#4]
 3868 0062 1B6A     	 ldr r3,[r3,#32]
 3869 0064 002B     	 cmp r3,#0
 3870 0066 0FD0     	 beq .L190
 3871              	 .loc 5 1135 0 is_stmt 0 discriminator 1
 3872 0068 FA68     	 ldr r2,[r7,#12]
 3873 006a 8123     	 mov r3,#129
 3874 006c 5B00     	 lsl r3,r3,#1
 3875 006e 1340     	 and r3,r2
 3876 0070 0AD0     	 beq .L190
1136:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1137:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 3877              	 .loc 5 1137 0 is_stmt 1
 3878 0072 7A68     	 ldr r2,[r7,#4]
 3879 0074 8023     	 mov r3,#128
 3880 0076 5B00     	 lsl r3,r3,#1
 3881 0078 101C     	 mov r0,r2
 3882 007a 191C     	 mov r1,r3
 3883 007c FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1138:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->error_cbhandler();
 3884              	 .loc 5 1138 0
 3885 0080 7B68     	 ldr r3,[r7,#4]
 3886 0082 5B68     	 ldr r3,[r3,#4]
 3887 0084 1B6A     	 ldr r3,[r3,#32]
 3888 0086 9847     	 blx r3
 3889              	.L190:
1139:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1140:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3890              	 .loc 5 1140 0
 3891 0088 BD46     	 mov sp,r7
 3892 008a 04B0     	 add sp,sp,#16
 3893              	 
 3894 008c 80BD     	 pop {r7,pc}
 3895              	 .cfi_endproc
 3896              	.LFE177:
 3898 008e C046     	 .section .text.I2C_MASTER_lReconfigureRxFIFO,"ax",%progbits
 3899              	 .align 2
 3900              	 .code 16
 3901              	 .thumb_func
 3903              	I2C_MASTER_lReconfigureRxFIFO:
 3904              	.LFB178:
1141:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1142:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
1143:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
1144:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief A local function to reconfigure Receive FIFO with the given size and trigger limit.
1145:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Size is needed because the FIFO should be disabled before changing the trigger limit by
1146:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * clearing the FIFO size.
1147:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1148:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t * pointer to the I2C_MASTER APP handle
1149:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param uint32_t  number of bytes to be received.
1150:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1151:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void.
1152:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
1153:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1154:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
1155:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3905              	 .loc 5 1155 0
 3906              	 .cfi_startproc
 3907 0000 80B5     	 push {r7,lr}
 3908              	.LCFI144:
 3909              	 .cfi_def_cfa_offset 8
 3910              	 .cfi_offset 7,-8
 3911              	 .cfi_offset 14,-4
 3912 0002 86B0     	 sub sp,sp,#24
 3913              	.LCFI145:
 3914              	 .cfi_def_cfa_offset 32
 3915 0004 00AF     	 add r7,sp,#0
 3916              	.LCFI146:
 3917              	 .cfi_def_cfa_register 7
 3918 0006 7860     	 str r0,[r7,#4]
 3919 0008 3960     	 str r1,[r7]
1156:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t minfifo_value;
1157:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t tx_fifo_size;
1158:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t rx_fifo_size;
1159:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_limit;
1160:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1161:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 3920              	 .loc 5 1161 0
 3921 000a 7B68     	 ldr r3,[r7,#4]
 3922 000c 5B68     	 ldr r3,[r3,#4]
 3923 000e 2722     	 mov r2,#39
 3924 0010 9B5C     	 ldrb r3,[r3,r2]
 3925 0012 1A1C     	 mov r2,r3
 3926 0014 0123     	 mov r3,#1
 3927 0016 9340     	 lsl r3,r3,r2
 3928 0018 1A1C     	 mov r2,r3
 3929 001a 1623     	 mov r3,#22
 3930 001c FB18     	 add r3,r7,r3
 3931 001e 1A70     	 strb r2,[r3]
1162:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1163:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->txFIFO_size > 0))
 3932              	 .loc 5 1163 0
 3933 0020 7B68     	 ldr r3,[r7,#4]
 3934 0022 5B68     	 ldr r3,[r3,#4]
 3935 0024 2622     	 mov r2,#38
 3936 0026 9B5C     	 ldrb r3,[r3,r2]
 3937 0028 002B     	 cmp r3,#0
 3938 002a 0BD0     	 beq .L195
1164:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1165:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 3939              	 .loc 5 1165 0
 3940 002c 7B68     	 ldr r3,[r7,#4]
 3941 002e 5B68     	 ldr r3,[r3,#4]
 3942 0030 2622     	 mov r2,#38
 3943 0032 9B5C     	 ldrb r3,[r3,r2]
 3944 0034 1A1C     	 mov r2,r3
 3945 0036 0123     	 mov r3,#1
 3946 0038 9340     	 lsl r3,r3,r2
 3947 003a 1A1C     	 mov r2,r3
 3948 003c 1723     	 mov r3,#23
 3949 003e FB18     	 add r3,r7,r3
 3950 0040 1A70     	 strb r2,[r3]
 3951 0042 03E0     	 b .L196
 3952              	.L195:
1166:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1167:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1168:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1169:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_fifo_size = 1U;
 3953              	 .loc 5 1169 0
 3954 0044 1723     	 mov r3,#23
 3955 0046 FB18     	 add r3,r7,r3
 3956 0048 0122     	 mov r2,#1
 3957 004a 1A70     	 strb r2,[r3]
 3958              	.L196:
1170:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1171:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1172:../Dave/Generated/I2C_MASTER/i2c_master.c ****   minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size))
 3959              	 .loc 5 1172 0
 3960 004c 1723     	 mov r3,#23
 3961 004e FB18     	 add r3,r7,r3
 3962 0050 1A78     	 ldrb r2,[r3]
 3963 0052 1623     	 mov r3,#22
 3964 0054 FB18     	 add r3,r7,r3
 3965 0056 1B78     	 ldrb r3,[r3]
 3966 0058 101C     	 mov r0,r2
 3967 005a 191C     	 mov r1,r3
 3968 005c FFF7FEFF 	 bl calculate_minfifosize
 3969 0060 031C     	 mov r3,r0
 3970 0062 3B61     	 str r3,[r7,#16]
1173:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1174:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 3971              	 .loc 5 1174 0
 3972 0064 3A68     	 ldr r2,[r7]
 3973 0066 3B69     	 ldr r3,[r7,#16]
 3974 0068 101C     	 mov r0,r2
 3975 006a 191C     	 mov r1,r3
 3976 006c FFF7FEFF 	 bl calculate_minfifosize
 3977 0070 021C     	 mov r2,r0
 3978 0072 0F23     	 mov r3,#15
 3979 0074 FB18     	 add r3,r7,r3
 3980 0076 1A70     	 strb r2,[r3]
1175:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1176:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Set the limit value */
1177:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)
 3981              	 .loc 5 1177 0
 3982 0078 7B68     	 ldr r3,[r7,#4]
 3983 007a 5B68     	 ldr r3,[r3,#4]
 3984 007c 2722     	 mov r2,#39
 3985 007e 9B5C     	 ldrb r3,[r3,r2]
 3986 0080 191C     	 mov r1,r3
 3987 0082 0F23     	 mov r3,#15
 3988 0084 FB18     	 add r3,r7,r3
 3989 0086 1B78     	 ldrb r3,[r3]
 3990 0088 013B     	 sub r3,r3,#1
 3991 008a 7A68     	 ldr r2,[r7,#4]
 3992 008c 101C     	 mov r0,r2
 3993 008e 1A1C     	 mov r2,r3
 3994 0090 FFF7FEFF 	 bl I2C_MASTER_SetRXFIFOTriggerLimit
1178:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3995              	 .loc 5 1178 0
 3996 0094 BD46     	 mov sp,r7
 3997 0096 06B0     	 add sp,sp,#24
 3998              	 
 3999 0098 80BD     	 pop {r7,pc}
 4000              	 .cfi_endproc
 4001              	.LFE178:
 4003 009a C046     	 .section .text.I2C_MASTER_AbortTransmit,"ax",%progbits
 4004              	 .align 2
 4005              	 .global I2C_MASTER_AbortTransmit
 4006              	 .code 16
 4007              	 .thumb_func
 4009              	I2C_MASTER_AbortTransmit:
 4010              	.LFB179:
1179:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1180:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1181:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1182:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data transmission.
1183:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t*  I2C_MASTER APP handle pointer of type I2C_MASTER_t
1184:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return I2C_MASTER_STATUS_t
1185:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1186:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1187:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
1188:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * the existing data will be flushed. After the transmission is stopped, user can start
1189:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new transmission without delay.
1190:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1191:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
1192:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 4011              	 .loc 5 1192 0
 4012              	 .cfi_startproc
 4013 0000 80B5     	 push {r7,lr}
 4014              	.LCFI147:
 4015              	 .cfi_def_cfa_offset 8
 4016              	 .cfi_offset 7,-8
 4017              	 .cfi_offset 14,-4
 4018 0002 84B0     	 sub sp,sp,#16
 4019              	.LCFI148:
 4020              	 .cfi_def_cfa_offset 24
 4021 0004 00AF     	 add r7,sp,#0
 4022              	.LCFI149:
 4023              	 .cfi_def_cfa_register 7
 4024 0006 7860     	 str r0,[r7,#4]
1193:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1194:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1195:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 4025              	 .loc 5 1195 0
 4026 0008 0F23     	 mov r3,#15
 4027 000a FB18     	 add r3,r7,r3
 4028 000c 0022     	 mov r2,#0
 4029 000e 1A70     	 strb r2,[r3]
1196:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1197:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 4030              	 .loc 5 1197 0
 4031 0010 7B68     	 ldr r3,[r7,#4]
 4032 0012 5B68     	 ldr r3,[r3,#4]
 4033 0014 2422     	 mov r2,#36
 4034 0016 9B5C     	 ldrb r3,[r3,r2]
 4035 0018 002B     	 cmp r3,#0
 4036 001a 04D1     	 bne .L198
1198:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1199:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
1200:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_AbortTransmitIRQ(handle);
 4037              	 .loc 5 1200 0
 4038 001c 7B68     	 ldr r3,[r7,#4]
 4039 001e 181C     	 mov r0,r3
 4040 0020 FFF7FEFF 	 bl I2C_MASTER_AbortTransmitIRQ
 4041 0024 09E0     	 b .L199
 4042              	.L198:
1201:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1202:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1203:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 4043              	 .loc 5 1203 0
 4044 0026 7B68     	 ldr r3,[r7,#4]
 4045 0028 5B68     	 ldr r3,[r3,#4]
 4046 002a 2422     	 mov r2,#36
 4047 002c 9B5C     	 ldrb r3,[r3,r2]
 4048 002e 012B     	 cmp r3,#1
 4049 0030 03D0     	 beq .L199
1204:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1205:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1206:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortTransmitDMA(handle);
1207:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1208:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1209:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1210:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1211:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 4050              	 .loc 5 1211 0
 4051 0032 0F23     	 mov r3,#15
 4052 0034 FB18     	 add r3,r7,r3
 4053 0036 0122     	 mov r2,#1
 4054 0038 1A70     	 strb r2,[r3]
 4055              	.L199:
1212:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1213:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 4056              	 .loc 5 1213 0
 4057 003a 7B68     	 ldr r3,[r7,#4]
 4058 003c 1B68     	 ldr r3,[r3]
 4059 003e 7A68     	 ldr r2,[r7,#4]
 4060 0040 1268     	 ldr r2,[r2]
 4061 0042 D26C     	 ldr r2,[r2,#76]
 4062 0044 0221     	 mov r1,#2
 4063 0046 0A43     	 orr r2,r1
 4064 0048 DA64     	 str r2,[r3,#76]
1214:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->channel->FMR = 0x00000002U;/*clear TDV*/
 4065              	 .loc 5 1214 0
 4066 004a 7B68     	 ldr r3,[r7,#4]
 4067 004c 1B68     	 ldr r3,[r3]
 4068 004e 0222     	 mov r2,#2
 4069 0050 9A66     	 str r2,[r3,#104]
1215:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1216:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 4070              	 .loc 5 1216 0
 4071 0052 0F23     	 mov r3,#15
 4072 0054 FB18     	 add r3,r7,r3
 4073 0056 1B78     	 ldrb r3,[r3]
1217:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 4074              	 .loc 5 1217 0
 4075 0058 181C     	 mov r0,r3
 4076 005a BD46     	 mov sp,r7
 4077 005c 04B0     	 add sp,sp,#16
 4078              	 
 4079 005e 80BD     	 pop {r7,pc}
 4080              	 .cfi_endproc
 4081              	.LFE179:
 4083              	 .section .text.I2C_MASTER_AbortReceive,"ax",%progbits
 4084              	 .align 2
 4085              	 .global I2C_MASTER_AbortReceive
 4086              	 .code 16
 4087              	 .thumb_func
 4089              	I2C_MASTER_AbortReceive:
 4090              	.LFB180:
1218:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1219:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1220:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data reception.
1221:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
1222:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return I2C_MASTER_STATUS_t
1223:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1224:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1225:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If a reception is in progress, it will be stopped. When a reception request
1226:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is active, user will not be able to place a new receive request till the active
1227:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * reception is complete. This API can stop the progressing reception to make
1228:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new receive request.
1229:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1230:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
1231:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 4091              	 .loc 5 1231 0
 4092              	 .cfi_startproc
 4093 0000 80B5     	 push {r7,lr}
 4094              	.LCFI150:
 4095              	 .cfi_def_cfa_offset 8
 4096              	 .cfi_offset 7,-8
 4097              	 .cfi_offset 14,-4
 4098 0002 84B0     	 sub sp,sp,#16
 4099              	.LCFI151:
 4100              	 .cfi_def_cfa_offset 24
 4101 0004 00AF     	 add r7,sp,#0
 4102              	.LCFI152:
 4103              	 .cfi_def_cfa_register 7
 4104 0006 7860     	 str r0,[r7,#4]
1232:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1233:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1234:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 4105              	 .loc 5 1234 0
 4106 0008 0F23     	 mov r3,#15
 4107 000a FB18     	 add r3,r7,r3
 4108 000c 0022     	 mov r2,#0
 4109 000e 1A70     	 strb r2,[r3]
1235:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1236:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 4110              	 .loc 5 1236 0
 4111 0010 7B68     	 ldr r3,[r7,#4]
 4112 0012 5B68     	 ldr r3,[r3,#4]
 4113 0014 2522     	 mov r2,#37
 4114 0016 9B5C     	 ldrb r3,[r3,r2]
 4115 0018 002B     	 cmp r3,#0
 4116 001a 04D1     	 bne .L202
1237:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1238:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
1239:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortReceiveIRQ(handle);
 4117              	 .loc 5 1239 0
 4118 001c 7B68     	 ldr r3,[r7,#4]
 4119 001e 181C     	 mov r0,r3
 4120 0020 FFF7FEFF 	 bl I2C_MASTER_lAbortReceiveIRQ
 4121 0024 09E0     	 b .L203
 4122              	.L202:
1240:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1241:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1242:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 4123              	 .loc 5 1242 0
 4124 0026 7B68     	 ldr r3,[r7,#4]
 4125 0028 5B68     	 ldr r3,[r3,#4]
 4126 002a 2522     	 mov r2,#37
 4127 002c 9B5C     	 ldrb r3,[r3,r2]
 4128 002e 012B     	 cmp r3,#1
 4129 0030 03D0     	 beq .L203
1243:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1244:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
1245:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortReceiveDMA(handle);
1246:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1247:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1248:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1249:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1250:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 4130              	 .loc 5 1250 0
 4131 0032 0F23     	 mov r3,#15
 4132 0034 FB18     	 add r3,r7,r3
 4133 0036 0122     	 mov r2,#1
 4134 0038 1A70     	 strb r2,[r3]
 4135              	.L203:
1251:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1252:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1253:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 4136              	 .loc 5 1253 0
 4137 003a 0F23     	 mov r3,#15
 4138 003c FB18     	 add r3,r7,r3
 4139 003e 1B78     	 ldrb r3,[r3]
1254:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 4140              	 .loc 5 1254 0
 4141 0040 181C     	 mov r0,r3
 4142 0042 BD46     	 mov sp,r7
 4143 0044 04B0     	 add sp,sp,#16
 4144              	 
 4145 0046 80BD     	 pop {r7,pc}
 4146              	 .cfi_endproc
 4147              	.LFE180:
 4149              	 .text
 4150              	.Letext0:
 4151              	 .file 6 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4152              	 .file 7 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4153              	 .file 8 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 4154              	 .file 9 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/DAVE_Common.h"
 4155              	 .file 10 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 i2c_master.c
    {standard input}:18     .text.__NVIC_ClearPendingIRQ:00000000 $t
    {standard input}:22     .text.__NVIC_ClearPendingIRQ:00000000 __NVIC_ClearPendingIRQ
    {standard input}:67     .text.__NVIC_ClearPendingIRQ:00000030 $d
    {standard input}:72     .text.XMC_USIC_CH_EnableEvent:00000000 $t
    {standard input}:76     .text.XMC_USIC_CH_EnableEvent:00000000 XMC_USIC_CH_EnableEvent
    {standard input}:110    .text.XMC_USIC_CH_DisableEvent:00000000 $t
    {standard input}:114    .text.XMC_USIC_CH_DisableEvent:00000000 XMC_USIC_CH_DisableEvent
    {standard input}:148    .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:152    .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:185    .text.XMC_USIC_CH_TriggerServiceRequest:00000000 $t
    {standard input}:189    .text.XMC_USIC_CH_TriggerServiceRequest:00000000 XMC_USIC_CH_TriggerServiceRequest
    {standard input}:222    .text.XMC_USIC_CH_TXFIFO_EnableEvent:00000000 $t
    {standard input}:226    .text.XMC_USIC_CH_TXFIFO_EnableEvent:00000000 XMC_USIC_CH_TXFIFO_EnableEvent
    {standard input}:264    .text.XMC_USIC_CH_TXFIFO_DisableEvent:00000000 $t
    {standard input}:268    .text.XMC_USIC_CH_TXFIFO_DisableEvent:00000000 XMC_USIC_CH_TXFIFO_DisableEvent
    {standard input}:307    .text.XMC_USIC_CH_TXFIFO_Flush:00000000 $t
    {standard input}:311    .text.XMC_USIC_CH_TXFIFO_Flush:00000000 XMC_USIC_CH_TXFIFO_Flush
    {standard input}:343    .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 $t
    {standard input}:347    .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 XMC_USIC_CH_TXFIFO_IsFull
    {standard input}:384    .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 $t
    {standard input}:388    .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 XMC_USIC_CH_TXFIFO_IsEmpty
    {standard input}:425    .text.XMC_USIC_CH_RXFIFO_EnableEvent:00000000 $t
    {standard input}:429    .text.XMC_USIC_CH_RXFIFO_EnableEvent:00000000 XMC_USIC_CH_RXFIFO_EnableEvent
    {standard input}:467    .text.XMC_USIC_CH_RXFIFO_DisableEvent:00000000 $t
    {standard input}:471    .text.XMC_USIC_CH_RXFIFO_DisableEvent:00000000 XMC_USIC_CH_RXFIFO_DisableEvent
    {standard input}:510    .text.XMC_USIC_CH_RXFIFO_Flush:00000000 $t
    {standard input}:514    .text.XMC_USIC_CH_RXFIFO_Flush:00000000 XMC_USIC_CH_RXFIFO_Flush
    {standard input}:546    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 $t
    {standard input}:550    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 XMC_USIC_CH_RXFIFO_IsEmpty
    {standard input}:586    .text.XMC_I2C_CH_SetInterruptNodePointer:00000000 $t
    {standard input}:590    .text.XMC_I2C_CH_SetInterruptNodePointer:00000000 XMC_I2C_CH_SetInterruptNodePointer
    {standard input}:627    .text.XMC_I2C_CH_GetStatusFlag:00000000 $t
    {standard input}:631    .text.XMC_I2C_CH_GetStatusFlag:00000000 XMC_I2C_CH_GetStatusFlag
    {standard input}:660    .text.XMC_I2C_CH_ClearStatusFlag:00000000 $t
    {standard input}:664    .text.XMC_I2C_CH_ClearStatusFlag:00000000 XMC_I2C_CH_ClearStatusFlag
    {standard input}:697    .text.I2C_MASTER_SetRXFIFOTriggerLimit:00000000 $t
    {standard input}:701    .text.I2C_MASTER_SetRXFIFOTriggerLimit:00000000 I2C_MASTER_SetRXFIFOTriggerLimit
    {standard input}:739    .text.I2C_MASTER_IsTXFIFOFull:00000000 $t
    {standard input}:743    .text.I2C_MASTER_IsTXFIFOFull:00000000 I2C_MASTER_IsTXFIFOFull
    {standard input}:775    .text.I2C_MASTER_IsRXFIFOEmpty:00000000 $t
    {standard input}:779    .text.I2C_MASTER_IsRXFIFOEmpty:00000000 I2C_MASTER_IsRXFIFOEmpty
    {standard input}:811    .text.I2C_MASTER_GetReceivedByte:00000000 $t
    {standard input}:815    .text.I2C_MASTER_GetReceivedByte:00000000 I2C_MASTER_GetReceivedByte
    {standard input}:847    .text.I2C_MASTER_TransmitByte:00000000 $t
    {standard input}:851    .text.I2C_MASTER_TransmitByte:00000000 I2C_MASTER_TransmitByte
    {standard input}:887    .text.I2C_MASTER_EnableEvent:00000000 $t
    {standard input}:891    .text.I2C_MASTER_EnableEvent:00000000 I2C_MASTER_EnableEvent
    {standard input}:924    .text.I2C_MASTER_DisableEvent:00000000 $t
    {standard input}:928    .text.I2C_MASTER_DisableEvent:00000000 I2C_MASTER_DisableEvent
    {standard input}:961    .text.I2C_MASTER_ReceiveACK:00000000 $t
    {standard input}:965    .text.I2C_MASTER_ReceiveACK:00000000 I2C_MASTER_ReceiveACK
    {standard input}:995    .text.I2C_MASTER_ReceiveNACK:00000000 $t
    {standard input}:999    .text.I2C_MASTER_ReceiveNACK:00000000 I2C_MASTER_ReceiveNACK
    {standard input}:1029   .text.I2C_MASTER_SendStop:00000000 $t
    {standard input}:1033   .text.I2C_MASTER_SendStop:00000000 I2C_MASTER_SendStop
    {standard input}:1069   .text.I2C_MASTER_SendStart:00000000 $t
    {standard input}:1073   .text.I2C_MASTER_SendStart:00000000 I2C_MASTER_SendStart
    {standard input}:1118   .text.I2C_MASTER_SendRepeatedStart:00000000 $t
    {standard input}:1122   .text.I2C_MASTER_SendRepeatedStart:00000000 I2C_MASTER_SendRepeatedStart
    {standard input}:1167   .text.calculate_minfifosize:00000000 $t
    {standard input}:1171   .text.calculate_minfifosize:00000000 calculate_minfifosize
    {standard input}:1215   .text.I2C_MASTER_GetAppVersion:00000000 $t
    {standard input}:1220   .text.I2C_MASTER_GetAppVersion:00000000 I2C_MASTER_GetAppVersion
    {standard input}:1285   .text.I2C_MASTER_GetAppVersion:00000058 $d
    {standard input}:1291   .text.I2C_MASTER_Init:00000000 $t
    {standard input}:1296   .text.I2C_MASTER_Init:00000000 I2C_MASTER_Init
    {standard input}:1348   .text.I2C_MASTER_GetFlagStatus:00000000 $t
    {standard input}:1353   .text.I2C_MASTER_GetFlagStatus:00000000 I2C_MASTER_GetFlagStatus
    {standard input}:1391   .text.I2C_MASTER_ClearFlag:00000000 $t
    {standard input}:1396   .text.I2C_MASTER_ClearFlag:00000000 I2C_MASTER_ClearFlag
    {standard input}:1429   .text.I2C_MASTER_Transmit:00000000 $t
    {standard input}:1434   .text.I2C_MASTER_Transmit:00000000 I2C_MASTER_Transmit
    {standard input}:2736   .text.I2C_MASTER_StartTransmitIRQ:00000000 I2C_MASTER_StartTransmitIRQ
    {standard input}:1504   .text.I2C_MASTER_TransmitHandler:00000000 $t
    {standard input}:1509   .text.I2C_MASTER_TransmitHandler:00000000 I2C_MASTER_TransmitHandler
    {standard input}:3798   .text.I2C_MASTER_ProtocolHandler:00000000 I2C_MASTER_ProtocolHandler
    {standard input}:1919   .text.I2C_MASTER_lSendStop_JumpTo_TxCallback:00000000 I2C_MASTER_lSendStop_JumpTo_TxCallback
    {standard input}:1915   .text.I2C_MASTER_lSendStop_JumpTo_TxCallback:00000000 $t
    {standard input}:1998   .text.I2C_MASTER_Receive:00000000 $t
    {standard input}:2003   .text.I2C_MASTER_Receive:00000000 I2C_MASTER_Receive
    {standard input}:3025   .text.I2C_MASTER_StartReceiveIRQ:00000000 I2C_MASTER_StartReceiveIRQ
    {standard input}:2077   .text.I2C_MASTER_lReceive_FIFOData:00000000 $t
    {standard input}:2081   .text.I2C_MASTER_lReceive_FIFOData:00000000 I2C_MASTER_lReceive_FIFOData
    {standard input}:3903   .text.I2C_MASTER_lReconfigureRxFIFO:00000000 I2C_MASTER_lReconfigureRxFIFO
    {standard input}:2660   .text.I2C_MASTER_lSendStart_Or_RepeatedStart:00000000 I2C_MASTER_lSendStart_Or_RepeatedStart
    {standard input}:2411   .text.I2C_MASTER_lReceive_StdData:00000000 $t
    {standard input}:2415   .text.I2C_MASTER_lReceive_StdData:00000000 I2C_MASTER_lReceive_StdData
    {standard input}:2656   .text.I2C_MASTER_lSendStart_Or_RepeatedStart:00000000 $t
    {standard input}:2731   .text.I2C_MASTER_StartTransmitIRQ:00000000 $t
    {standard input}:2941   .text.I2C_MASTER_StartTransmitIRQ:00000138 $d
    {standard input}:2946   .text.I2C_MASTER_AbortTransmitIRQ:00000000 $t
    {standard input}:2950   .text.I2C_MASTER_AbortTransmitIRQ:00000000 I2C_MASTER_AbortTransmitIRQ
    {standard input}:3020   .text.I2C_MASTER_StartReceiveIRQ:00000000 $t
    {standard input}:3205   .text.I2C_MASTER_ReceiveHandler:00000000 $t
    {standard input}:3210   .text.I2C_MASTER_ReceiveHandler:00000000 I2C_MASTER_ReceiveHandler
    {standard input}:3620   .text.I2C_MASTER_lSendStop_JumpTo_RxCallback:00000000 I2C_MASTER_lSendStop_JumpTo_RxCallback
    {standard input}:3616   .text.I2C_MASTER_lSendStop_JumpTo_RxCallback:00000000 $t
    {standard input}:3708   .text.I2C_MASTER_lAbortReceiveIRQ:00000000 $t
    {standard input}:3712   .text.I2C_MASTER_lAbortReceiveIRQ:00000000 I2C_MASTER_lAbortReceiveIRQ
    {standard input}:3793   .text.I2C_MASTER_ProtocolHandler:00000000 $t
    {standard input}:3899   .text.I2C_MASTER_lReconfigureRxFIFO:00000000 $t
    {standard input}:4004   .text.I2C_MASTER_AbortTransmit:00000000 $t
    {standard input}:4009   .text.I2C_MASTER_AbortTransmit:00000000 I2C_MASTER_AbortTransmit
    {standard input}:4084   .text.I2C_MASTER_AbortReceive:00000000 $t
    {standard input}:4089   .text.I2C_MASTER_AbortReceive:00000000 I2C_MASTER_AbortReceive
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_SetInterruptNodePointer
XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
XMC_I2C_CH_GetReceivedData
XMC_I2C_CH_MasterTransmit
XMC_I2C_CH_EnableEvent
XMC_I2C_CH_DisableEvent
XMC_I2C_CH_MasterReceiveAck
XMC_I2C_CH_MasterReceiveNack
XMC_I2C_CH_MasterStop
XMC_I2C_CH_MasterStart
XMC_I2C_CH_MasterRepeatedStart
