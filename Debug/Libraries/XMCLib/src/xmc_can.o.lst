   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_can.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_CAN_IsPanelControlReady,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_CAN_IsPanelControlReady:
  23              	.LFB62:
  24              	 .file 1 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_can.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2019-07-02
   4:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  12:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  14:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  21:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * a source language processor.
  27:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  28:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  41:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  42:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  43:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  44:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  45:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  46:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  47:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  49:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  50:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  51:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  52:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  53:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  54:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  55:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  56:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  57:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  58:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  59:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  60:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  61:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  62:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  63:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  64:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  65:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  66:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  67:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  68:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  69:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  70:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  71:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  72:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  73:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2019-07-02:
  74:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_GetClockFrequency()
  75:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsListEmpty(), XMC_CAN_GetListBegin(), XMC_CAN_GetListSize(), XMC_CAN_MO_Get
  76:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  77:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  78:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  79:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  80:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  81:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  82:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  83:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  84:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
  85:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  86:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  87:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  88:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  89:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  90:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  91:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  92:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  93:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  94:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  95:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  96:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  97:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  98:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  99:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
 101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>
 102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
 103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
 107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
 108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes.
 133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between
 135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure().
 153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions
 158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent().
 160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** */
 188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** */
 200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** */
 216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF = CAN_NODE_NSR_BOFF_Msk,              /**< Bus-off status */
 342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #endif
 347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE = CAN_NODE_NCR_CCE_Msk,    /**< Configuration change enab
 361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #endif
 365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator
 459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #else
 466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #endif
 468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #else
 470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #endif
 472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** */
 480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;     /**< Frequency of the CAN module(fCAN). \a can_frequency shall be ran
 483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                                    the synchronization segment. Sample point. Range = [0, 10000] wi
 486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** */
 524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #pragma push
 529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #pragma anon_unions
 530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #pragma warning 586
 532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #endif
 533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** */
 539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   union
 543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   {
 544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     struct
 545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     {
 546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection: 3;  /**<   Defines function of the frame counter  */
 548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode: 2;     /**<   Determines the operation mode of the frame count
 549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     };
 551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   };
 554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** */
 559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   union
 568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   {
 569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     struct
 570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     {
 571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier: 29;           /**< standard (11 bit)/Extended (29 bit) message ident
 572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode: 1;               /**< Standard/Extended identifier support */
 573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority: 2;              /**< Arbitration Mode/Priority */
 574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     };
 575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   };
 577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   union
 578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   {
 579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     struct
 580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     {
 581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask: 29;             /**< CAN Identifier of Message Object */
 582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask: 1;             /**< Identifier Extension Bit of Message Object */
 583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     };
 584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   };
 586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   union
 589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   {
 590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     uint8_t can_data_byte[8];                 /**< Each position of the array represents a data byt
 592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bits 
 593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_data[
 594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     uint64_t can_data_long;                   /** Data of the Message Object*/
 596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   };
 597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #pragma pop
 604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #pragma warning restore
 606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #endif
 607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #endif
 613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
  25              	 .loc 1 686 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
 687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
  39              	 .loc 1 687 0
  40 0008 7A68     	 ldr r2,[r7,#4]
  41 000a E223     	 mov r3,#226
  42 000c 5B00     	 lsl r3,r3,#1
  43 000e D258     	 ldr r2,[r2,r3]
  44 0010 C023     	 mov r3,#192
  45 0012 9B00     	 lsl r3,r3,#2
  46 0014 1340     	 and r3,r2
  47 0016 5A42     	 neg r2,r3
  48 0018 5341     	 adc r3,r3,r2
  49 001a DBB2     	 uxtb r3,r3
 688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
  50              	 .loc 1 688 0
  51 001c 181C     	 mov r0,r3
  52 001e BD46     	 mov sp,r7
  53 0020 02B0     	 add sp,sp,#8
  54              	 
  55 0022 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE62:
  59              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  60              	 .align 2
  61              	 .code 16
  62              	 .thumb_func
  64              	XMC_CAN_PanelControl:
  65              	.LFB63:
 689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_PANCMD_t pancmd,
 715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     const uint8_t arg1,
 716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     const uint8_t arg2)
 717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
  66              	 .loc 1 717 0
  67              	 .cfi_startproc
  68 0000 90B5     	 push {r4,r7,lr}
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 12
  71              	 .cfi_offset 4,-12
  72              	 .cfi_offset 7,-8
  73              	 .cfi_offset 14,-4
  74 0002 83B0     	 sub sp,sp,#12
  75              	.LCFI4:
  76              	 .cfi_def_cfa_offset 24
  77 0004 00AF     	 add r7,sp,#0
  78              	.LCFI5:
  79              	 .cfi_def_cfa_register 7
  80 0006 7860     	 str r0,[r7,#4]
  81 0008 0C1C     	 mov r4,r1
  82 000a 101C     	 mov r0,r2
  83 000c 191C     	 mov r1,r3
  84 000e FB1C     	 add r3,r7,#3
  85 0010 221C     	 add r2,r4,#0
  86 0012 1A70     	 strb r2,[r3]
  87 0014 BB1C     	 add r3,r7,#2
  88 0016 021C     	 add r2,r0,#0
  89 0018 1A70     	 strb r2,[r3]
  90 001a 7B1C     	 add r3,r7,#1
  91 001c 0A1C     	 add r2,r1,#0
  92 001e 1A70     	 strb r2,[r3]
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
  93              	 .loc 1 718 0
  94 0020 FB1C     	 add r3,r7,#3
  95 0022 1A78     	 ldrb r2,[r3]
 719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                 (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
  96              	 .loc 1 719 0
  97 0024 BB1C     	 add r3,r7,#2
  98 0026 1B78     	 ldrb r3,[r3]
  99 0028 1904     	 lsl r1,r3,#16
 100 002a FF23     	 mov r3,#255
 101 002c 1B04     	 lsl r3,r3,#16
 102 002e 0B40     	 and r3,r1
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 103              	 .loc 1 718 0
 104 0030 1A43     	 orr r2,r3
 720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                 (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 105              	 .loc 1 720 0
 106 0032 7B1C     	 add r3,r7,#1
 107 0034 1B78     	 ldrb r3,[r3]
 108 0036 1B06     	 lsl r3,r3,#24
 719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                 (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 109              	 .loc 1 719 0
 110 0038 1A43     	 orr r2,r3
 111 003a 111C     	 mov r1,r2
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 112              	 .loc 1 718 0
 113 003c 7A68     	 ldr r2,[r7,#4]
 114 003e E223     	 mov r3,#226
 115 0040 5B00     	 lsl r3,r3,#1
 116 0042 D150     	 str r1,[r2,r3]
 721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
 117              	 .loc 1 721 0
 118 0044 BD46     	 mov sp,r7
 119 0046 03B0     	 add sp,sp,#12
 120              	 
 121 0048 90BD     	 pop {r4,r7,pc}
 122              	 .cfi_endproc
 123              	.LFE63:
 125 004a C046     	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 126              	 .align 2
 127              	 .code 16
 128              	 .thumb_func
 130              	XMC_CAN_NODE_EnableConfigurationChange:
 131              	.LFB79:
 722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj, const XMC_CAN_NODE_INTERRUPT_TRIGGE
 744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
 747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN).
 756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN.
 765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source);
 799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency
 805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return fCAN clock frequency
 816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN base clock frequency
 819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj);
 822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #else
 848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** #endif
 850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * None
 882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     const uint32_t service_request)
 888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
 891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * None
 906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time);
 910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate.
 920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time);
 932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * None
 947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
 959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
 980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
 985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
 987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
 988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
 997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
1003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
1007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
1009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk) >> CAN_NODE_NEC
1087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_M
1166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EW
1188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node, XMC_CAN_NODE_STATUS_t
1271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
1272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NSR &= ~(uint32_t)can_node_status;
1273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
1274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 132              	 .loc 1 1292 0
 133              	 .cfi_startproc
 134 0000 80B5     	 push {r7,lr}
 135              	.LCFI6:
 136              	 .cfi_def_cfa_offset 8
 137              	 .cfi_offset 7,-8
 138              	 .cfi_offset 14,-4
 139 0002 82B0     	 sub sp,sp,#8
 140              	.LCFI7:
 141              	 .cfi_def_cfa_offset 16
 142 0004 00AF     	 add r7,sp,#0
 143              	.LCFI8:
 144              	 .cfi_def_cfa_register 7
 145 0006 7860     	 str r0,[r7,#4]
1293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 146              	 .loc 1 1293 0
 147 0008 7B68     	 ldr r3,[r7,#4]
 148 000a 1B68     	 ldr r3,[r3]
 149 000c 4022     	 mov r2,#64
 150 000e 1A43     	 orr r2,r3
 151 0010 7B68     	 ldr r3,[r7,#4]
 152 0012 1A60     	 str r2,[r3]
1294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
 153              	 .loc 1 1294 0
 154 0014 BD46     	 mov sp,r7
 155 0016 02B0     	 add sp,sp,#8
 156              	 
 157 0018 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE79:
 161 001a C046     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_CAN_NODE_DisableConfigurationChange:
 167              	.LFB80:
1295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** /**
1298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  *
1309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****  */
1310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** 
1311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** {
 168              	 .loc 1 1312 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI9:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI10:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI11:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
1313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 182              	 .loc 1 1313 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 1B68     	 ldr r3,[r3]
 185 000c 4022     	 mov r2,#64
 186 000e 9343     	 bic r3,r2
 187 0010 1A1C     	 mov r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 1A60     	 str r2,[r3]
1314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_can.h **** }
 190              	 .loc 1 1314 0
 191 0016 BD46     	 mov sp,r7
 192 0018 02B0     	 add sp,sp,#8
 193              	 
 194 001a 80BD     	 pop {r7,pc}
 195              	 .cfi_endproc
 196              	.LFE80:
 198              	 .section .text.max,"ax",%progbits
 199              	 .align 2
 200              	 .code 16
 201              	 .thumb_func
 203              	max:
 204              	.LFB120:
 205              	 .file 2 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2020-03-17
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  *****************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc_can.c ****  *
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:../Libraries/XMCLib/src/xmc_can.c ****  *
  14:../Libraries/XMCLib/src/xmc_can.c ****  * Permission is hereby granted, free of charge, to any person or organization
  15:../Libraries/XMCLib/src/xmc_can.c ****  * obtaining a copy of the software and accompanying documentation covered by
  16:../Libraries/XMCLib/src/xmc_can.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:../Libraries/XMCLib/src/xmc_can.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:../Libraries/XMCLib/src/xmc_can.c ****  * do so, all subject to the following:
  20:../Libraries/XMCLib/src/xmc_can.c ****  *
  21:../Libraries/XMCLib/src/xmc_can.c ****  * The copyright notices in the Software and this entire statement, including
  22:../Libraries/XMCLib/src/xmc_can.c ****  * the above license grant, this restriction and the following disclaimer,
  23:../Libraries/XMCLib/src/xmc_can.c ****  * must be included in all copies of the Software, in whole or in part, and
  24:../Libraries/XMCLib/src/xmc_can.c ****  * all derivative works of the Software, unless such copies or derivative
  25:../Libraries/XMCLib/src/xmc_can.c ****  * works are solely in the form of machine-executable object code generated by
  26:../Libraries/XMCLib/src/xmc_can.c ****  * a source language processor.
  27:../Libraries/XMCLib/src/xmc_can.c ****  *
  28:../Libraries/XMCLib/src/xmc_can.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:../Libraries/XMCLib/src/xmc_can.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:../Libraries/XMCLib/src/xmc_can.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:../Libraries/XMCLib/src/xmc_can.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:../Libraries/XMCLib/src/xmc_can.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:../Libraries/XMCLib/src/xmc_can.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:../Libraries/XMCLib/src/xmc_can.c ****  * DEALINGS IN THE SOFTWARE.
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share
  37:../Libraries/XMCLib/src/xmc_can.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:../Libraries/XMCLib/src/xmc_can.c ****  * at XMCSupport@infineon.com.
  39:../Libraries/XMCLib/src/xmc_can.c ****  *****************************************************************************
  40:../Libraries/XMCLib/src/xmc_can.c ****  *
  41:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  42:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  43:../Libraries/XMCLib/src/xmc_can.c ****  *
  44:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  49:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  50:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  51:../Libraries/XMCLib/src/xmc_can.c ****  *
  52:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  53:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  54:../Libraries/XMCLib/src/xmc_can.c ****  *
  55:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  56:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  57:../Libraries/XMCLib/src/xmc_can.c ****  *
  58:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  59:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  60:../Libraries/XMCLib/src/xmc_can.c ****  *
  61:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  62:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  63:../Libraries/XMCLib/src/xmc_can.c ****  *
  64:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  68:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  69:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  70:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  71:../Libraries/XMCLib/src/xmc_can.c ****  *
  72:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-06-21:
  73:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx()
  74:../Libraries/XMCLib/src/xmc_can.c ****  *
  75:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-11-12:
  76:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed assertion at XMC_CAN_InitEx()
  77:../Libraries/XMCLib/src/xmc_can.c ****  *
  78:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-05-07:
  79:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed compilation warnings
  80:../Libraries/XMCLib/src/xmc_can.c ****  *
  81:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-06-26:
  82:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx() non returning, decrementing ntq before cont
  83:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_GetClockFrequency()
  84:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_InitEx() so that XMC_CAN_SetBaudrateClockSource() is invoked before XMC_CAN_
  85:../Libraries/XMCLib/src/xmc_can.c ****  *
  86:../Libraries/XMCLib/src/xmc_can.c ****  * 2020-03-17:
  87:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_MO_ReceiveData() according to description in the reference manual
  88:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_MO_SetAcceptanceMask(), checking for matching message IDE
  89:../Libraries/XMCLib/src/xmc_can.c ****  *
  90:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  91:../Libraries/XMCLib/src/xmc_can.c ****  *
  92:../Libraries/XMCLib/src/xmc_can.c ****  */
  93:../Libraries/XMCLib/src/xmc_can.c **** 
  94:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  95:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  96:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  97:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  98:../Libraries/XMCLib/src/xmc_can.c **** 
  99:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
 100:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
 101:../Libraries/XMCLib/src/xmc_can.c **** 
 102:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
 103:../Libraries/XMCLib/src/xmc_can.c **** {
 206              	 .loc 2 103 0
 207              	 .cfi_startproc
 208 0000 80B5     	 push {r7,lr}
 209              	.LCFI12:
 210              	 .cfi_def_cfa_offset 8
 211              	 .cfi_offset 7,-8
 212              	 .cfi_offset 14,-4
 213 0002 82B0     	 sub sp,sp,#8
 214              	.LCFI13:
 215              	 .cfi_def_cfa_offset 16
 216 0004 00AF     	 add r7,sp,#0
 217              	.LCFI14:
 218              	 .cfi_def_cfa_register 7
 219 0006 7860     	 str r0,[r7,#4]
 220 0008 3960     	 str r1,[r7]
 104:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 221              	 .loc 2 104 0
 222 000a 7A68     	 ldr r2,[r7,#4]
 223 000c 3B68     	 ldr r3,[r7]
 224 000e 9342     	 cmp r3,r2
 225 0010 00D2     	 bcs .L8
 226 0012 131C     	 mov r3,r2
 227              	.L8:
 105:../Libraries/XMCLib/src/xmc_can.c **** }
 228              	 .loc 2 105 0 discriminator 1
 229 0014 181C     	 mov r0,r3
 230 0016 BD46     	 mov sp,r7
 231 0018 02B0     	 add sp,sp,#8
 232              	 
 233 001a 80BD     	 pop {r7,pc}
 234              	 .cfi_endproc
 235              	.LFE120:
 237              	 .section .text.min,"ax",%progbits
 238              	 .align 2
 239              	 .code 16
 240              	 .thumb_func
 242              	min:
 243              	.LFB121:
 106:../Libraries/XMCLib/src/xmc_can.c **** 
 107:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
 108:../Libraries/XMCLib/src/xmc_can.c **** {
 244              	 .loc 2 108 0
 245              	 .cfi_startproc
 246 0000 80B5     	 push {r7,lr}
 247              	.LCFI15:
 248              	 .cfi_def_cfa_offset 8
 249              	 .cfi_offset 7,-8
 250              	 .cfi_offset 14,-4
 251 0002 82B0     	 sub sp,sp,#8
 252              	.LCFI16:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI17:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 258 0008 3960     	 str r1,[r7]
 109:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 259              	 .loc 2 109 0
 260 000a 7A68     	 ldr r2,[r7,#4]
 261 000c 3B68     	 ldr r3,[r7]
 262 000e 9342     	 cmp r3,r2
 263 0010 00D9     	 bls .L11
 264 0012 131C     	 mov r3,r2
 265              	.L11:
 110:../Libraries/XMCLib/src/xmc_can.c **** }
 266              	 .loc 2 110 0 discriminator 1
 267 0014 181C     	 mov r0,r3
 268 0016 BD46     	 mov sp,r7
 269 0018 02B0     	 add sp,sp,#8
 270              	 
 271 001a 80BD     	 pop {r7,pc}
 272              	 .cfi_endproc
 273              	.LFE121:
 275              	 .global __aeabi_uidivmod
 276              	 .global __aeabi_uidiv
 277              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
 278              	 .align 2
 279              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
 280              	 .code 16
 281              	 .thumb_func
 283              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
 284              	.LFB122:
 111:../Libraries/XMCLib/src/xmc_can.c **** 
 112:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
 113:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
 114:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
 115:../Libraries/XMCLib/src/xmc_can.c **** 
 116:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
 117:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
 118:../Libraries/XMCLib/src/xmc_can.c **** 
 119:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
 120:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
 121:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
 122:../Libraries/XMCLib/src/xmc_can.c **** 
 123:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 124:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 125:../Libraries/XMCLib/src/xmc_can.c **** 
 126:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG1 15
 127:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG2 7
 128:../Libraries/XMCLib/src/xmc_can.c **** 
 129:../Libraries/XMCLib/src/xmc_can.c **** 
 130:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 131:../Libraries/XMCLib/src/xmc_can.c ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
 132:../Libraries/XMCLib/src/xmc_can.c **** {
 285              	 .loc 2 132 0
 286              	 .cfi_startproc
 287 0000 80B5     	 push {r7,lr}
 288              	.LCFI18:
 289              	 .cfi_def_cfa_offset 8
 290              	 .cfi_offset 7,-8
 291              	 .cfi_offset 14,-4
 292 0002 88B0     	 sub sp,sp,#32
 293              	.LCFI19:
 294              	 .cfi_def_cfa_offset 40
 295 0004 00AF     	 add r7,sp,#0
 296              	.LCFI20:
 297              	 .cfi_def_cfa_register 7
 298 0006 7860     	 str r0,[r7,#4]
 299 0008 3960     	 str r1,[r7]
 133:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 134:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 300              	 .loc 2 134 0
 301 000a 3B68     	 ldr r3,[r7]
 302 000c 1A68     	 ldr r2,[r3]
 303 000e 3B68     	 ldr r3,[r7]
 304 0010 5B68     	 ldr r3,[r3,#4]
 305 0012 101C     	 mov r0,r2
 306 0014 191C     	 mov r1,r3
 307 0016 FFF7FEFF 	 bl __aeabi_uidivmod
 308 001a 0B1E     	 sub r3,r1,#0
 309 001c 00D0     	 beq .LCB258
 310 001e 96E0     	 b .L13
 311              	.LCB258:
 312              	.LBB2:
 135:../Libraries/XMCLib/src/xmc_can.c ****   {
 136:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t prescaler = 0;
 313              	 .loc 2 136 0
 314 0020 0023     	 mov r3,#0
 315 0022 FB61     	 str r3,[r7,#28]
 137:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t div8 = 0;
 316              	 .loc 2 137 0
 317 0024 0023     	 mov r3,#0
 318 0026 BB61     	 str r3,[r7,#24]
 138:../Libraries/XMCLib/src/xmc_can.c **** 
 139:../Libraries/XMCLib/src/xmc_can.c ****     /* Calculate the factor between can frequency and required baudrate, this is equal to (prescale
 140:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 319              	 .loc 2 140 0
 320 0028 3B68     	 ldr r3,[r7]
 321 002a 1A68     	 ldr r2,[r3]
 322 002c 3B68     	 ldr r3,[r7]
 323 002e 5B68     	 ldr r3,[r3,#4]
 324 0030 101C     	 mov r0,r2
 325 0032 191C     	 mov r1,r3
 326 0034 FFF7FEFF 	 bl __aeabi_uidiv
 327 0038 031C     	 mov r3,r0
 328 003a BB60     	 str r3,[r7,#8]
 141:../Libraries/XMCLib/src/xmc_can.c **** 
 142:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 143:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 329              	 .loc 2 143 0
 330 003c 1923     	 mov r3,#25
 331 003e 7B61     	 str r3,[r7,#20]
 144:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg1 = 0;
 332              	 .loc 2 144 0
 333 0040 0023     	 mov r3,#0
 334 0042 3B61     	 str r3,[r7,#16]
 145:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg2 = 0;
 335              	 .loc 2 145 0
 336 0044 0023     	 mov r3,#0
 337 0046 FB60     	 str r3,[r7,#12]
 146:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 338              	 .loc 2 146 0
 339 0048 49E0     	 b .L14
 340              	.L19:
 147:../Libraries/XMCLib/src/xmc_can.c ****     {
 148:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 149:../Libraries/XMCLib/src/xmc_can.c ****       if ((fcan_div % ntq) == 0)
 341              	 .loc 2 149 0
 342 004a BB68     	 ldr r3,[r7,#8]
 343 004c 181C     	 mov r0,r3
 344 004e 7969     	 ldr r1,[r7,#20]
 345 0050 FFF7FEFF 	 bl __aeabi_uidivmod
 346 0054 0B1E     	 sub r3,r1,#0
 347 0056 3FD1     	 bne .L15
 150:../Libraries/XMCLib/src/xmc_can.c ****       {
 151:../Libraries/XMCLib/src/xmc_can.c ****         div8 = 0;
 348              	 .loc 2 151 0
 349 0058 0023     	 mov r3,#0
 350 005a BB61     	 str r3,[r7,#24]
 152:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 351              	 .loc 2 152 0
 352 005c B868     	 ldr r0,[r7,#8]
 353 005e 7969     	 ldr r1,[r7,#20]
 354 0060 FFF7FEFF 	 bl __aeabi_uidiv
 355 0064 031C     	 mov r3,r0
 356 0066 FB61     	 str r3,[r7,#28]
 153:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 357              	 .loc 2 153 0
 358 0068 FB69     	 ldr r3,[r7,#28]
 359 006a 002B     	 cmp r3,#0
 360 006c 34D0     	 beq .L15
 361              	 .loc 2 153 0 is_stmt 0 discriminator 1
 362 006e FA69     	 ldr r2,[r7,#28]
 363 0070 8023     	 mov r3,#128
 364 0072 9B00     	 lsl r3,r3,#2
 365 0074 9A42     	 cmp r2,r3
 366 0076 2FD8     	 bhi .L15
 154:../Libraries/XMCLib/src/xmc_can.c ****         {
 155:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
 367              	 .loc 2 155 0 is_stmt 1
 368 0078 FB69     	 ldr r3,[r7,#28]
 369 007a 3F2B     	 cmp r3,#63
 370 007c 09D9     	 bls .L16
 156:../Libraries/XMCLib/src/xmc_can.c ****           {
 157:../Libraries/XMCLib/src/xmc_can.c ****             /* consider prescaler >=64, if it is integer divisible by 8*/
 158:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) != 0)
 371              	 .loc 2 158 0
 372 007e FB69     	 ldr r3,[r7,#28]
 373 0080 0722     	 mov r2,#7
 374 0082 1340     	 and r3,r2
 375 0084 03D0     	 beq .L17
 159:../Libraries/XMCLib/src/xmc_can.c ****             {
 160:../Libraries/XMCLib/src/xmc_can.c ****               --ntq;
 376              	 .loc 2 160 0
 377 0086 7B69     	 ldr r3,[r7,#20]
 378 0088 013B     	 sub r3,r3,#1
 379 008a 7B61     	 str r3,[r7,#20]
 161:../Libraries/XMCLib/src/xmc_can.c ****               continue;
 380              	 .loc 2 161 0
 381 008c 27E0     	 b .L14
 382              	.L17:
 162:../Libraries/XMCLib/src/xmc_can.c ****             }
 163:../Libraries/XMCLib/src/xmc_can.c ****             else
 164:../Libraries/XMCLib/src/xmc_can.c ****             {
 165:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
 383              	 .loc 2 165 0
 384 008e 0123     	 mov r3,#1
 385 0090 BB61     	 str r3,[r7,#24]
 386              	.L16:
 166:../Libraries/XMCLib/src/xmc_can.c ****             }
 167:../Libraries/XMCLib/src/xmc_can.c ****           }
 168:../Libraries/XMCLib/src/xmc_can.c **** 
 169:../Libraries/XMCLib/src/xmc_can.c ****           tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 387              	 .loc 2 169 0
 388 0092 7B69     	 ldr r3,[r7,#20]
 389 0094 013B     	 sub r3,r3,#1
 390 0096 3A68     	 ldr r2,[r7]
 391 0098 1289     	 ldrh r2,[r2,#8]
 392 009a 5343     	 mul r3,r2
 393 009c 181C     	 mov r0,r3
 394 009e 2E49     	 ldr r1,.L21
 395 00a0 FFF7FEFF 	 bl __aeabi_uidiv
 396 00a4 031C     	 mov r3,r0
 397 00a6 3B61     	 str r3,[r7,#16]
 170:../Libraries/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 398              	 .loc 2 170 0
 399 00a8 7A69     	 ldr r2,[r7,#20]
 400 00aa 3B69     	 ldr r3,[r7,#16]
 401 00ac D31A     	 sub r3,r2,r3
 402 00ae 013B     	 sub r3,r3,#1
 403 00b0 FB60     	 str r3,[r7,#12]
 171:../Libraries/XMCLib/src/xmc_can.c **** 
 172:../Libraries/XMCLib/src/xmc_can.c ****           if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 404              	 .loc 2 172 0
 405 00b2 3B69     	 ldr r3,[r7,#16]
 406 00b4 022B     	 cmp r3,#2
 407 00b6 0FD9     	 bls .L15
 408              	 .loc 2 172 0 is_stmt 0 discriminator 1
 409 00b8 3B69     	 ldr r3,[r7,#16]
 410 00ba 0F2B     	 cmp r3,#15
 411 00bc 0CD8     	 bhi .L15
 412              	 .loc 2 172 0 discriminator 2
 413 00be FB68     	 ldr r3,[r7,#12]
 414 00c0 012B     	 cmp r3,#1
 415 00c2 09D9     	 bls .L15
 173:../Libraries/XMCLib/src/xmc_can.c ****               (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bi
 416              	 .loc 2 173 0 is_stmt 1
 417 00c4 FB68     	 ldr r3,[r7,#12]
 418 00c6 062B     	 cmp r3,#6
 419 00c8 06D8     	 bhi .L15
 420              	 .loc 2 173 0 is_stmt 0 discriminator 1
 421 00ca 3B68     	 ldr r3,[r7]
 422 00cc 5B89     	 ldrh r3,[r3,#10]
 423 00ce 1A1E     	 sub r2,r3,#0
 424 00d0 FB68     	 ldr r3,[r7,#12]
 425 00d2 9A42     	 cmp r2,r3
 426 00d4 00D8     	 bhi .L15
 174:../Libraries/XMCLib/src/xmc_can.c ****           {
 175:../Libraries/XMCLib/src/xmc_can.c ****             break;
 427              	 .loc 2 175 0 is_stmt 1
 428 00d6 05E0     	 b .L18
 429              	.L15:
 176:../Libraries/XMCLib/src/xmc_can.c ****           }
 177:../Libraries/XMCLib/src/xmc_can.c **** 
 178:../Libraries/XMCLib/src/xmc_can.c **** 
 179:../Libraries/XMCLib/src/xmc_can.c ****         }
 180:../Libraries/XMCLib/src/xmc_can.c ****       }
 181:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
 430              	 .loc 2 181 0
 431 00d8 7B69     	 ldr r3,[r7,#20]
 432 00da 013B     	 sub r3,r3,#1
 433 00dc 7B61     	 str r3,[r7,#20]
 434              	.L14:
 146:../Libraries/XMCLib/src/xmc_can.c ****     {
 435              	 .loc 2 146 0
 436 00de 7B69     	 ldr r3,[r7,#20]
 437 00e0 072B     	 cmp r3,#7
 438 00e2 B2D8     	 bhi .L19
 439              	.L18:
 182:../Libraries/XMCLib/src/xmc_can.c ****     }
 183:../Libraries/XMCLib/src/xmc_can.c **** 
 184:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 440              	 .loc 2 184 0
 441 00e4 7B69     	 ldr r3,[r7,#20]
 442 00e6 072B     	 cmp r3,#7
 443 00e8 31D9     	 bls .L13
 185:../Libraries/XMCLib/src/xmc_can.c ****     {
 186:../Libraries/XMCLib/src/xmc_can.c **** 
 187:../Libraries/XMCLib/src/xmc_can.c ****       XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
 188:../Libraries/XMCLib/src/xmc_can.c ****       XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
 189:../Libraries/XMCLib/src/xmc_can.c ****       XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));
 190:../Libraries/XMCLib/src/xmc_can.c **** 
 191:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 444              	 .loc 2 191 0
 445 00ea 7B68     	 ldr r3,[r7,#4]
 446 00ec 181C     	 mov r0,r3
 447 00ee FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 192:../Libraries/XMCLib/src/xmc_can.c **** 
 193:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 194:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 448              	 .loc 2 194 0
 449 00f2 FB68     	 ldr r3,[r7,#12]
 450 00f4 013B     	 sub r3,r3,#1
 451 00f6 1A03     	 lsl r2,r3,#12
 452 00f8 E023     	 mov r3,#224
 453 00fa DB01     	 lsl r3,r3,#7
 454 00fc 1A40     	 and r2,r3
 195:../Libraries/XMCLib/src/xmc_can.c ****                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE
 455              	 .loc 2 195 0
 456 00fe 3B68     	 ldr r3,[r7]
 457 0100 5B89     	 ldrh r3,[r3,#10]
 458 0102 013B     	 sub r3,r3,#1
 459 0104 9B01     	 lsl r3,r3,#6
 460 0106 FF21     	 mov r1,#255
 461 0108 0B40     	 and r3,r1
 194:../Libraries/XMCLib/src/xmc_can.c ****                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE
 462              	 .loc 2 194 0
 463 010a 1A43     	 orr r2,r3
 196:../Libraries/XMCLib/src/xmc_can.c ****                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_M
 464              	 .loc 2 196 0
 465 010c 3B69     	 ldr r3,[r7,#16]
 466 010e 013B     	 sub r3,r3,#1
 467 0110 1902     	 lsl r1,r3,#8
 468 0112 F023     	 mov r3,#240
 469 0114 1B01     	 lsl r3,r3,#4
 470 0116 0B40     	 and r3,r1
 195:../Libraries/XMCLib/src/xmc_can.c ****                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE
 471              	 .loc 2 195 0
 472 0118 1A43     	 orr r2,r3
 473 011a 111C     	 mov r1,r2
 197:../Libraries/XMCLib/src/xmc_can.c ****                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN
 474              	 .loc 2 197 0
 475 011c BA69     	 ldr r2,[r7,#24]
 476 011e 131C     	 mov r3,r2
 477 0120 5B00     	 lsl r3,r3,#1
 478 0122 9B18     	 add r3,r3,r2
 479 0124 1A1C     	 mov r2,r3
 480 0126 FB69     	 ldr r3,[r7,#28]
 481 0128 D340     	 lsr r3,r3,r2
 482 012a 013B     	 sub r3,r3,#1
 483 012c 3F22     	 mov r2,#63
 484 012e 1340     	 and r3,r2
 196:../Libraries/XMCLib/src/xmc_can.c ****                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_M
 485              	 .loc 2 196 0
 486 0130 0A1C     	 mov r2,r1
 487 0132 1A43     	 orr r2,r3
 198:../Libraries/XMCLib/src/xmc_can.c ****                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 488              	 .loc 2 198 0
 489 0134 BB69     	 ldr r3,[r7,#24]
 490 0136 DB03     	 lsl r3,r3,#15
 491 0138 1B04     	 lsl r3,r3,#16
 492 013a 1B0C     	 lsr r3,r3,#16
 197:../Libraries/XMCLib/src/xmc_can.c ****                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN
 493              	 .loc 2 197 0
 494 013c 1A43     	 orr r2,r3
 194:../Libraries/XMCLib/src/xmc_can.c ****                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE
 495              	 .loc 2 194 0
 496 013e 7B68     	 ldr r3,[r7,#4]
 497 0140 1A61     	 str r2,[r3,#16]
 199:../Libraries/XMCLib/src/xmc_can.c **** 
 200:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 498              	 .loc 2 200 0
 499 0142 7B68     	 ldr r3,[r7,#4]
 500 0144 181C     	 mov r0,r3
 501 0146 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 201:../Libraries/XMCLib/src/xmc_can.c **** 
 202:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 502              	 .loc 2 202 0
 503 014a 0023     	 mov r3,#0
 504 014c 00E0     	 b .L20
 505              	.L13:
 506              	.LBE2:
 203:../Libraries/XMCLib/src/xmc_can.c ****     }
 204:../Libraries/XMCLib/src/xmc_can.c ****   }
 205:../Libraries/XMCLib/src/xmc_can.c **** 
 206:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 507              	 .loc 2 206 0
 508 014e 0123     	 mov r3,#1
 509              	.L20:
 207:../Libraries/XMCLib/src/xmc_can.c **** }
 510              	 .loc 2 207 0
 511 0150 181C     	 mov r0,r3
 512 0152 BD46     	 mov sp,r7
 513 0154 08B0     	 add sp,sp,#32
 514              	 
 515 0156 80BD     	 pop {r7,pc}
 516              	.L22:
 517              	 .align 2
 518              	.L21:
 519 0158 10270000 	 .word 10000
 520              	 .cfi_endproc
 521              	.LFE122:
 523              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 524              	 .align 2
 525              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 526              	 .code 16
 527              	 .thumb_func
 529              	XMC_CAN_NODE_NominalBitTimeConfigure:
 530              	.LFB123:
 208:../Libraries/XMCLib/src/xmc_can.c **** 
 209:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 210:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 211:../Libraries/XMCLib/src/xmc_can.c ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
 212:../Libraries/XMCLib/src/xmc_can.c **** {
 531              	 .loc 2 212 0
 532              	 .cfi_startproc
 533 0000 80B5     	 push {r7,lr}
 534              	.LCFI21:
 535              	 .cfi_def_cfa_offset 8
 536              	 .cfi_offset 7,-8
 537              	 .cfi_offset 14,-4
 538 0002 90B0     	 sub sp,sp,#64
 539              	.LCFI22:
 540              	 .cfi_def_cfa_offset 72
 541 0004 00AF     	 add r7,sp,#0
 542              	.LCFI23:
 543              	 .cfi_def_cfa_register 7
 544 0006 7860     	 str r0,[r7,#4]
 545 0008 3960     	 str r1,[r7]
 213:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 546              	 .loc 2 213 0
 547 000a 0C23     	 mov r3,#12
 548 000c FB63     	 str r3,[r7,#60]
 214:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 549              	 .loc 2 214 0
 550 000e 0C23     	 mov r3,#12
 551 0010 BB63     	 str r3,[r7,#56]
 215:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 552              	 .loc 2 215 0
 553 0012 0023     	 mov r3,#0
 554 0014 7B63     	 str r3,[r7,#52]
 216:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 555              	 .loc 2 216 0
 556 0016 0123     	 mov r3,#1
 557 0018 3B63     	 str r3,[r7,#48]
 217:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 558              	 .loc 2 217 0
 559 001a 0023     	 mov r3,#0
 560 001c 7B61     	 str r3,[r7,#20]
 218:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 561              	 .loc 2 218 0
 562 001e 0023     	 mov r3,#0
 563 0020 FB62     	 str r3,[r7,#44]
 219:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 564              	 .loc 2 219 0
 565 0022 6A4B     	 ldr r3,.L41
 566 0024 BB62     	 str r3,[r7,#40]
 220:../Libraries/XMCLib/src/xmc_can.c **** 
 221:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 222:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 223:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 224:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 225:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 226:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 227:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 228:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 229:../Libraries/XMCLib/src/xmc_can.c **** 
 230:../Libraries/XMCLib/src/xmc_can.c ****   /*
 231:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 232:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 233:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 234:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 235:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 236:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 237:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 238:../Libraries/XMCLib/src/xmc_can.c ****    *
 239:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 240:../Libraries/XMCLib/src/xmc_can.c ****    *
 241:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 242:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 243:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 244:../Libraries/XMCLib/src/xmc_can.c ****    */
 245:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 246:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 567              	 .loc 2 246 0
 568 0026 0123     	 mov r3,#1
 569 0028 FB63     	 str r3,[r7,#60]
 570 002a 6AE0     	 b .L24
 571              	.L33:
 572              	.LBB3:
 247:../Libraries/XMCLib/src/xmc_can.c ****   {
 248:../Libraries/XMCLib/src/xmc_can.c **** 
 249:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 573              	 .loc 2 249 0
 574 002c 3B68     	 ldr r3,[r7]
 575 002e 1A68     	 ldr r2,[r3]
 576 0030 131C     	 mov r3,r2
 577 0032 9B00     	 lsl r3,r3,#2
 578 0034 9B18     	 add r3,r3,r2
 579 0036 5B00     	 lsl r3,r3,#1
 580 0038 181C     	 mov r0,r3
 581 003a F96B     	 ldr r1,[r7,#60]
 582 003c FFF7FEFF 	 bl __aeabi_uidiv
 583 0040 031C     	 mov r3,r0
 584 0042 3B61     	 str r3,[r7,#16]
 250:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 585              	 .loc 2 250 0
 586 0044 3B68     	 ldr r3,[r7]
 587 0046 5B68     	 ldr r3,[r3,#4]
 588 0048 3869     	 ldr r0,[r7,#16]
 589 004a 191C     	 mov r1,r3
 590 004c FFF7FEFF 	 bl __aeabi_uidiv
 591 0050 031C     	 mov r3,r0
 592 0052 7B62     	 str r3,[r7,#36]
 251:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 252:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 253:../Libraries/XMCLib/src/xmc_can.c **** 
 254:../Libraries/XMCLib/src/xmc_can.c ****     if ((temp_tbaud % 10U) > 5U)
 593              	 .loc 2 254 0
 594 0054 7B6A     	 ldr r3,[r7,#36]
 595 0056 181C     	 mov r0,r3
 596 0058 0A21     	 mov r1,#10
 597 005a FFF7FEFF 	 bl __aeabi_uidivmod
 598 005e 0B1E     	 sub r3,r1,#0
 599 0060 052B     	 cmp r3,#5
 600 0062 0AD9     	 bls .L25
 255:../Libraries/XMCLib/src/xmc_can.c ****     {
 256:../Libraries/XMCLib/src/xmc_can.c ****       temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 601              	 .loc 2 256 0
 602 0064 7B6A     	 ldr r3,[r7,#36]
 603 0066 181C     	 mov r0,r3
 604 0068 0A21     	 mov r1,#10
 605 006a FFF7FEFF 	 bl __aeabi_uidiv
 606 006e 031C     	 mov r3,r0
 607 0070 7B62     	 str r3,[r7,#36]
 257:../Libraries/XMCLib/src/xmc_can.c ****       temp_tbaud++;
 608              	 .loc 2 257 0
 609 0072 7B6A     	 ldr r3,[r7,#36]
 610 0074 0133     	 add r3,r3,#1
 611 0076 7B62     	 str r3,[r7,#36]
 612 0078 06E0     	 b .L26
 613              	.L25:
 258:../Libraries/XMCLib/src/xmc_can.c ****     }
 259:../Libraries/XMCLib/src/xmc_can.c ****     else
 260:../Libraries/XMCLib/src/xmc_can.c ****     {
 261:../Libraries/XMCLib/src/xmc_can.c ****       temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 614              	 .loc 2 261 0
 615 007a 7B6A     	 ldr r3,[r7,#36]
 616 007c 181C     	 mov r0,r3
 617 007e 0A21     	 mov r1,#10
 618 0080 FFF7FEFF 	 bl __aeabi_uidiv
 619 0084 031C     	 mov r3,r0
 620 0086 7B62     	 str r3,[r7,#36]
 621              	.L26:
 262:../Libraries/XMCLib/src/xmc_can.c ****     }
 263:../Libraries/XMCLib/src/xmc_can.c **** 
 264:../Libraries/XMCLib/src/xmc_can.c ****     if (temp_tbaud > 0U)
 622              	 .loc 2 264 0
 623 0088 7B6A     	 ldr r3,[r7,#36]
 624 008a 002B     	 cmp r3,#0
 625 008c 0BD0     	 beq .L27
 265:../Libraries/XMCLib/src/xmc_can.c ****     {
 266:../Libraries/XMCLib/src/xmc_can.c ****       temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 626              	 .loc 2 266 0
 627 008e 7A6A     	 ldr r2,[r7,#36]
 628 0090 131C     	 mov r3,r2
 629 0092 9B00     	 lsl r3,r3,#2
 630 0094 9B18     	 add r3,r3,r2
 631 0096 5B00     	 lsl r3,r3,#1
 632 0098 3869     	 ldr r0,[r7,#16]
 633 009a 191C     	 mov r1,r3
 634 009c FFF7FEFF 	 bl __aeabi_uidiv
 635 00a0 031C     	 mov r3,r0
 636 00a2 3B62     	 str r3,[r7,#32]
 637 00a4 08E0     	 b .L28
 638              	.L27:
 267:../Libraries/XMCLib/src/xmc_can.c ****     }
 268:../Libraries/XMCLib/src/xmc_can.c ****     else
 269:../Libraries/XMCLib/src/xmc_can.c ****     {
 270:../Libraries/XMCLib/src/xmc_can.c ****       temp_baudrate = f_quanta / 10U;
 639              	 .loc 2 270 0
 640 00a6 3B69     	 ldr r3,[r7,#16]
 641 00a8 181C     	 mov r0,r3
 642 00aa 0A21     	 mov r1,#10
 643 00ac FFF7FEFF 	 bl __aeabi_uidiv
 644 00b0 031C     	 mov r3,r0
 645 00b2 3B62     	 str r3,[r7,#32]
 271:../Libraries/XMCLib/src/xmc_can.c ****       temp_tbaud = 1;
 646              	 .loc 2 271 0
 647 00b4 0123     	 mov r3,#1
 648 00b6 7B62     	 str r3,[r7,#36]
 649              	.L28:
 272:../Libraries/XMCLib/src/xmc_can.c ****     }
 273:../Libraries/XMCLib/src/xmc_can.c **** 
 274:../Libraries/XMCLib/src/xmc_can.c ****     if (temp_baudrate >= can_bit_time->baudrate)
 650              	 .loc 2 274 0
 651 00b8 3B68     	 ldr r3,[r7]
 652 00ba 5A68     	 ldr r2,[r3,#4]
 653 00bc 3B6A     	 ldr r3,[r7,#32]
 654 00be 9A42     	 cmp r2,r3
 655 00c0 05D8     	 bhi .L29
 275:../Libraries/XMCLib/src/xmc_can.c ****     {
 276:../Libraries/XMCLib/src/xmc_can.c ****       error = temp_baudrate - can_bit_time->baudrate;
 656              	 .loc 2 276 0
 657 00c2 3B68     	 ldr r3,[r7]
 658 00c4 5B68     	 ldr r3,[r3,#4]
 659 00c6 3A6A     	 ldr r2,[r7,#32]
 660 00c8 D31A     	 sub r3,r2,r3
 661 00ca FB61     	 str r3,[r7,#28]
 662 00cc 04E0     	 b .L30
 663              	.L29:
 277:../Libraries/XMCLib/src/xmc_can.c ****     }
 278:../Libraries/XMCLib/src/xmc_can.c ****     else
 279:../Libraries/XMCLib/src/xmc_can.c ****     {
 280:../Libraries/XMCLib/src/xmc_can.c ****       error = can_bit_time->baudrate - temp_baudrate;
 664              	 .loc 2 280 0
 665 00ce 3B68     	 ldr r3,[r7]
 666 00d0 5A68     	 ldr r2,[r3,#4]
 667 00d2 3B6A     	 ldr r3,[r7,#32]
 668 00d4 D31A     	 sub r3,r2,r3
 669 00d6 FB61     	 str r3,[r7,#28]
 670              	.L30:
 281:../Libraries/XMCLib/src/xmc_can.c ****     }
 282:../Libraries/XMCLib/src/xmc_can.c **** 
 283:../Libraries/XMCLib/src/xmc_can.c ****     if ((temp_tbaud <= 20U) && (best_error > error))
 671              	 .loc 2 283 0
 672 00d8 7B6A     	 ldr r3,[r7,#36]
 673 00da 142B     	 cmp r3,#20
 674 00dc 0ED8     	 bhi .L31
 675              	 .loc 2 283 0 is_stmt 0 discriminator 1
 676 00de BA6A     	 ldr r2,[r7,#40]
 677 00e0 FB69     	 ldr r3,[r7,#28]
 678 00e2 9A42     	 cmp r2,r3
 679 00e4 0AD9     	 bls .L31
 284:../Libraries/XMCLib/src/xmc_can.c ****     {
 285:../Libraries/XMCLib/src/xmc_can.c ****       best_brp = temp_brp;
 680              	 .loc 2 285 0 is_stmt 1
 681 00e6 FB6B     	 ldr r3,[r7,#60]
 682 00e8 7B63     	 str r3,[r7,#52]
 286:../Libraries/XMCLib/src/xmc_can.c ****       best_tbaud = temp_tbaud;
 683              	 .loc 2 286 0
 684 00ea 7B6A     	 ldr r3,[r7,#36]
 685 00ec FB62     	 str r3,[r7,#44]
 287:../Libraries/XMCLib/src/xmc_can.c ****       best_error = (error);
 686              	 .loc 2 287 0
 687 00ee FB69     	 ldr r3,[r7,#28]
 688 00f0 BB62     	 str r3,[r7,#40]
 288:../Libraries/XMCLib/src/xmc_can.c **** 
 289:../Libraries/XMCLib/src/xmc_can.c ****       if (error < 1000U)
 689              	 .loc 2 289 0
 690 00f2 FB69     	 ldr r3,[r7,#28]
 691 00f4 364A     	 ldr r2,.L41+4
 692 00f6 9342     	 cmp r3,r2
 693 00f8 00D8     	 bhi .L31
 290:../Libraries/XMCLib/src/xmc_can.c ****       {
 291:../Libraries/XMCLib/src/xmc_can.c ****         break;
 694              	 .loc 2 291 0
 695 00fa 05E0     	 b .L32
 696              	.L31:
 697              	.LBE3:
 246:../Libraries/XMCLib/src/xmc_can.c ****   {
 698              	 .loc 2 246 0 discriminator 2
 699 00fc FB6B     	 ldr r3,[r7,#60]
 700 00fe 0133     	 add r3,r3,#1
 701 0100 FB63     	 str r3,[r7,#60]
 702              	.L24:
 246:../Libraries/XMCLib/src/xmc_can.c ****   {
 703              	 .loc 2 246 0 is_stmt 0 discriminator 1
 704 0102 FB6B     	 ldr r3,[r7,#60]
 705 0104 402B     	 cmp r3,#64
 706 0106 91D9     	 bls .L33
 707              	.L32:
 292:../Libraries/XMCLib/src/xmc_can.c ****       }
 293:../Libraries/XMCLib/src/xmc_can.c ****     }
 294:../Libraries/XMCLib/src/xmc_can.c ****   }
 295:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 296:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 708              	 .loc 2 296 0 is_stmt 1
 709 0108 304B     	 ldr r3,.L41
 710 010a BB62     	 str r3,[r7,#40]
 297:../Libraries/XMCLib/src/xmc_can.c **** 
 298:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 711              	 .loc 2 298 0
 712 010c 4023     	 mov r3,#64
 713 010e BB63     	 str r3,[r7,#56]
 714 0110 2EE0     	 b .L34
 715              	.L40:
 716              	.LBB4:
 299:../Libraries/XMCLib/src/xmc_can.c ****   {
 300:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 717              	 .loc 2 300 0
 718 0112 BB6B     	 ldr r3,[r7,#56]
 719 0114 0133     	 add r3,r3,#1
 720 0116 2D4A     	 ldr r2,.L41
 721 0118 5343     	 mul r3,r2
 722 011a 181C     	 mov r0,r3
 723 011c F96A     	 ldr r1,[r7,#44]
 724 011e FFF7FEFF 	 bl __aeabi_uidiv
 725 0122 031C     	 mov r3,r0
 726 0124 FB60     	 str r3,[r7,#12]
 301:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 302:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint >= can_bit_time->sample_point)
 727              	 .loc 2 302 0
 728 0126 3B68     	 ldr r3,[r7]
 729 0128 1B89     	 ldrh r3,[r3,#8]
 730 012a 1A1E     	 sub r2,r3,#0
 731 012c FB68     	 ldr r3,[r7,#12]
 732 012e 9A42     	 cmp r2,r3
 733 0130 06D8     	 bhi .L35
 303:../Libraries/XMCLib/src/xmc_can.c ****     {
 304:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 734              	 .loc 2 304 0
 735 0132 3B68     	 ldr r3,[r7]
 736 0134 1B89     	 ldrh r3,[r3,#8]
 737 0136 1A1C     	 mov r2,r3
 738 0138 FB68     	 ldr r3,[r7,#12]
 739 013a 9B1A     	 sub r3,r3,r2
 740 013c BB61     	 str r3,[r7,#24]
 741 013e 05E0     	 b .L36
 742              	.L35:
 305:../Libraries/XMCLib/src/xmc_can.c ****     }
 306:../Libraries/XMCLib/src/xmc_can.c ****     else
 307:../Libraries/XMCLib/src/xmc_can.c ****     {
 308:../Libraries/XMCLib/src/xmc_can.c ****       error = can_bit_time->sample_point  - tempSamplePoint;
 743              	 .loc 2 308 0
 744 0140 3B68     	 ldr r3,[r7]
 745 0142 1B89     	 ldrh r3,[r3,#8]
 746 0144 1A1C     	 mov r2,r3
 747 0146 FB68     	 ldr r3,[r7,#12]
 748 0148 D31A     	 sub r3,r2,r3
 749 014a BB61     	 str r3,[r7,#24]
 750              	.L36:
 309:../Libraries/XMCLib/src/xmc_can.c ****     }
 310:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 751              	 .loc 2 310 0
 752 014c BA6A     	 ldr r2,[r7,#40]
 753 014e BB69     	 ldr r3,[r7,#24]
 754 0150 9A42     	 cmp r2,r3
 755 0152 03D9     	 bls .L37
 311:../Libraries/XMCLib/src/xmc_can.c ****     {
 312:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 756              	 .loc 2 312 0
 757 0154 BB6B     	 ldr r3,[r7,#56]
 758 0156 3B63     	 str r3,[r7,#48]
 313:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 759              	 .loc 2 313 0
 760 0158 BB69     	 ldr r3,[r7,#24]
 761 015a BB62     	 str r3,[r7,#40]
 762              	.L37:
 314:../Libraries/XMCLib/src/xmc_can.c ****     }
 315:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 763              	 .loc 2 315 0
 764 015c 3B68     	 ldr r3,[r7]
 765 015e 1B89     	 ldrh r3,[r3,#8]
 766 0160 1A1E     	 sub r2,r3,#0
 767 0162 FB68     	 ldr r3,[r7,#12]
 768 0164 9A42     	 cmp r2,r3
 769 0166 00D9     	 bls .L38
 316:../Libraries/XMCLib/src/xmc_can.c ****     {
 317:../Libraries/XMCLib/src/xmc_can.c ****       break;
 770              	 .loc 2 317 0
 771 0168 05E0     	 b .L39
 772              	.L38:
 773              	.LBE4:
 298:../Libraries/XMCLib/src/xmc_can.c ****   {
 774              	 .loc 2 298 0 discriminator 2
 775 016a BB6B     	 ldr r3,[r7,#56]
 776 016c 013B     	 sub r3,r3,#1
 777 016e BB63     	 str r3,[r7,#56]
 778              	.L34:
 298:../Libraries/XMCLib/src/xmc_can.c ****   {
 779              	 .loc 2 298 0 is_stmt 0 discriminator 1
 780 0170 BB6B     	 ldr r3,[r7,#56]
 781 0172 022B     	 cmp r3,#2
 782 0174 CDD8     	 bhi .L40
 783              	.L39:
 318:../Libraries/XMCLib/src/xmc_can.c ****     }
 319:../Libraries/XMCLib/src/xmc_can.c ****   }
 320:../Libraries/XMCLib/src/xmc_can.c **** 
 321:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 784              	 .loc 2 321 0 is_stmt 1
 785 0176 FA6A     	 ldr r2,[r7,#44]
 786 0178 3B6B     	 ldr r3,[r7,#48]
 787 017a D31A     	 sub r3,r2,r3
 788 017c 013B     	 sub r3,r3,#1
 789 017e 7B61     	 str r3,[r7,#20]
 322:../Libraries/XMCLib/src/xmc_can.c **** 
 323:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 790              	 .loc 2 323 0
 791 0180 7B68     	 ldr r3,[r7,#4]
 792 0182 181C     	 mov r0,r3
 793 0184 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 324:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 325:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 794              	 .loc 2 325 0
 795 0188 7B69     	 ldr r3,[r7,#20]
 796 018a 013B     	 sub r3,r3,#1
 797 018c 1A03     	 lsl r2,r3,#12
 798 018e E023     	 mov r3,#224
 799 0190 DB01     	 lsl r3,r3,#7
 800 0192 1A40     	 and r2,r3
 326:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (
 801              	 .loc 2 326 0
 802 0194 3B68     	 ldr r3,[r7]
 803 0196 5B89     	 ldrh r3,[r3,#10]
 804 0198 013B     	 sub r3,r3,#1
 805 019a 9B01     	 lsl r3,r3,#6
 806 019c FF21     	 mov r1,#255
 807 019e 0B40     	 and r3,r1
 325:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (
 808              	 .loc 2 325 0
 809 01a0 1A43     	 orr r2,r3
 327:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_N
 810              	 .loc 2 327 0
 811 01a2 3B6B     	 ldr r3,[r7,#48]
 812 01a4 013B     	 sub r3,r3,#1
 813 01a6 1902     	 lsl r1,r3,#8
 814 01a8 F023     	 mov r3,#240
 815 01aa 1B01     	 lsl r3,r3,#4
 816 01ac 0B40     	 and r3,r1
 326:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (
 817              	 .loc 2 326 0
 818 01ae 1A43     	 orr r2,r3
 328:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 819              	 .loc 2 328 0
 820 01b0 7B6B     	 ldr r3,[r7,#52]
 821 01b2 013B     	 sub r3,r3,#1
 822 01b4 3F21     	 mov r1,#63
 823 01b6 0B40     	 and r3,r1
 824 01b8 1A43     	 orr r2,r3
 325:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (
 825              	 .loc 2 325 0
 826 01ba 7B68     	 ldr r3,[r7,#4]
 827 01bc 1A61     	 str r2,[r3,#16]
 329:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 330:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 828              	 .loc 2 330 0
 829 01be 7B68     	 ldr r3,[r7,#4]
 830 01c0 181C     	 mov r0,r3
 831 01c2 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 331:../Libraries/XMCLib/src/xmc_can.c **** }
 832              	 .loc 2 331 0
 833 01c6 BD46     	 mov sp,r7
 834 01c8 10B0     	 add sp,sp,#64
 835              	 
 836 01ca 80BD     	 pop {r7,pc}
 837              	.L42:
 838              	 .align 2
 839              	.L41:
 840 01cc 10270000 	 .word 10000
 841 01d0 E7030000 	 .word 999
 842              	 .cfi_endproc
 843              	.LFE123:
 845              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 846              	 .align 2
 847              	 .global XMC_CAN_AllocateMOtoNodeList
 848              	 .code 16
 849              	 .thumb_func
 851              	XMC_CAN_AllocateMOtoNodeList:
 852              	.LFB124:
 332:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 333:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 334:../Libraries/XMCLib/src/xmc_can.c **** {
 853              	 .loc 2 334 0
 854              	 .cfi_startproc
 855 0000 90B5     	 push {r4,r7,lr}
 856              	.LCFI24:
 857              	 .cfi_def_cfa_offset 12
 858              	 .cfi_offset 4,-12
 859              	 .cfi_offset 7,-8
 860              	 .cfi_offset 14,-4
 861 0002 83B0     	 sub sp,sp,#12
 862              	.LCFI25:
 863              	 .cfi_def_cfa_offset 24
 864 0004 00AF     	 add r7,sp,#0
 865              	.LCFI26:
 866              	 .cfi_def_cfa_register 7
 867 0006 7860     	 str r0,[r7,#4]
 868 0008 081C     	 mov r0,r1
 869 000a 111C     	 mov r1,r2
 870 000c FB1C     	 add r3,r7,#3
 871 000e 021C     	 add r2,r0,#0
 872 0010 1A70     	 strb r2,[r3]
 873 0012 BB1C     	 add r3,r7,#2
 874 0014 0A1C     	 add r2,r1,#0
 875 0016 1A70     	 strb r2,[r3]
 335:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 336:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 876              	 .loc 2 336 0
 877 0018 C046     	 mov r8,r8
 878              	.L44:
 879              	 .loc 2 336 0 is_stmt 0 discriminator 1
 880 001a 7B68     	 ldr r3,[r7,#4]
 881 001c 181C     	 mov r0,r3
 882 001e FFF7FEFF 	 bl XMC_CAN_IsPanelControlReady
 883 0022 031C     	 mov r3,r0
 884 0024 1A1C     	 mov r2,r3
 885 0026 0123     	 mov r3,#1
 886 0028 5340     	 eor r3,r2
 887 002a DBB2     	 uxtb r3,r3
 888 002c 002B     	 cmp r3,#0
 889 002e F4D1     	 bne .L44
 337:../Libraries/XMCLib/src/xmc_can.c ****   {
 338:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 339:../Libraries/XMCLib/src/xmc_can.c ****   };
 340:../Libraries/XMCLib/src/xmc_can.c **** 
 341:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 342:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 890              	 .loc 2 342 0 is_stmt 1
 891 0030 FB1C     	 add r3,r7,#3
 892 0032 1B78     	 ldrb r3,[r3]
 893 0034 0133     	 add r3,r3,#1
 894 0036 DCB2     	 uxtb r4,r3
 895 0038 7A68     	 ldr r2,[r7,#4]
 896 003a BB1C     	 add r3,r7,#2
 897 003c 1B78     	 ldrb r3,[r3]
 898 003e 101C     	 mov r0,r2
 899 0040 0221     	 mov r1,#2
 900 0042 1A1C     	 mov r2,r3
 901 0044 231C     	 mov r3,r4
 902 0046 FFF7FEFF 	 bl XMC_CAN_PanelControl
 343:../Libraries/XMCLib/src/xmc_can.c **** }
 903              	 .loc 2 343 0
 904 004a BD46     	 mov sp,r7
 905 004c 03B0     	 add sp,sp,#12
 906              	 
 907 004e 90BD     	 pop {r4,r7,pc}
 908              	 .cfi_endproc
 909              	.LFE124:
 911              	 .section .text.XMC_CAN_Disable,"ax",%progbits
 912              	 .align 2
 913              	 .global XMC_CAN_Disable
 914              	 .code 16
 915              	 .thumb_func
 917              	XMC_CAN_Disable:
 918              	.LFB125:
 344:../Libraries/XMCLib/src/xmc_can.c **** 
 345:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 346:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 347:../Libraries/XMCLib/src/xmc_can.c **** {
 919              	 .loc 2 347 0
 920              	 .cfi_startproc
 921 0000 80B5     	 push {r7,lr}
 922              	.LCFI27:
 923              	 .cfi_def_cfa_offset 8
 924              	 .cfi_offset 7,-8
 925              	 .cfi_offset 14,-4
 926 0002 82B0     	 sub sp,sp,#8
 927              	.LCFI28:
 928              	 .cfi_def_cfa_offset 16
 929 0004 00AF     	 add r7,sp,#0
 930              	.LCFI29:
 931              	 .cfi_def_cfa_register 7
 932 0006 7860     	 str r0,[r7,#4]
 348:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 349:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 933              	 .loc 2 349 0
 934 0008 7B68     	 ldr r3,[r7,#4]
 935 000a 0122     	 mov r2,#1
 936 000c 1A60     	 str r2,[r3]
 350:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 351:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 352:../Libraries/XMCLib/src/xmc_can.c **** #endif
 353:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 354:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 937              	 .loc 2 354 0
 938 000e 8023     	 mov r3,#128
 939 0010 9B03     	 lsl r3,r3,#14
 940 0012 181C     	 mov r0,r3
 941 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 355:../Libraries/XMCLib/src/xmc_can.c **** #endif
 356:../Libraries/XMCLib/src/xmc_can.c **** }
 942              	 .loc 2 356 0
 943 0018 BD46     	 mov sp,r7
 944 001a 02B0     	 add sp,sp,#8
 945              	 
 946 001c 80BD     	 pop {r7,pc}
 947              	 .cfi_endproc
 948              	.LFE125:
 950 001e C046     	 .section .text.XMC_CAN_Enable,"ax",%progbits
 951              	 .align 2
 952              	 .global XMC_CAN_Enable
 953              	 .code 16
 954              	 .thumb_func
 956              	XMC_CAN_Enable:
 957              	.LFB126:
 357:../Libraries/XMCLib/src/xmc_can.c **** 
 358:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 359:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 360:../Libraries/XMCLib/src/xmc_can.c **** {
 958              	 .loc 2 360 0
 959              	 .cfi_startproc
 960 0000 80B5     	 push {r7,lr}
 961              	.LCFI30:
 962              	 .cfi_def_cfa_offset 8
 963              	 .cfi_offset 7,-8
 964              	 .cfi_offset 14,-4
 965 0002 82B0     	 sub sp,sp,#8
 966              	.LCFI31:
 967              	 .cfi_def_cfa_offset 16
 968 0004 00AF     	 add r7,sp,#0
 969              	.LCFI32:
 970              	 .cfi_def_cfa_register 7
 971 0006 7860     	 str r0,[r7,#4]
 361:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 362:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 972              	 .loc 2 362 0
 973 0008 8023     	 mov r3,#128
 974 000a 9B03     	 lsl r3,r3,#14
 975 000c 181C     	 mov r0,r3
 976 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 363:../Libraries/XMCLib/src/xmc_can.c **** #endif
 364:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 365:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 366:../Libraries/XMCLib/src/xmc_can.c **** #endif
 367:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 368:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 977              	 .loc 2 368 0
 978 0012 7B68     	 ldr r3,[r7,#4]
 979 0014 1B68     	 ldr r3,[r3]
 980 0016 0122     	 mov r2,#1
 981 0018 9343     	 bic r3,r2
 982 001a 1A1C     	 mov r2,r3
 983 001c 7B68     	 ldr r3,[r7,#4]
 984 001e 1A60     	 str r2,[r3]
 369:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 985              	 .loc 2 369 0
 986 0020 C046     	 mov r8,r8
 987              	.L47:
 988              	 .loc 2 369 0 is_stmt 0 discriminator 1
 989 0022 7B68     	 ldr r3,[r7,#4]
 990 0024 1B68     	 ldr r3,[r3]
 991 0026 0222     	 mov r2,#2
 992 0028 1340     	 and r3,r2
 993 002a FAD1     	 bne .L47
 370:../Libraries/XMCLib/src/xmc_can.c ****   {
 371:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 372:../Libraries/XMCLib/src/xmc_can.c ****   };
 373:../Libraries/XMCLib/src/xmc_can.c **** }
 994              	 .loc 2 373 0 is_stmt 1
 995 002c BD46     	 mov sp,r7
 996 002e 02B0     	 add sp,sp,#8
 997              	 
 998 0030 80BD     	 pop {r7,pc}
 999              	 .cfi_endproc
 1000              	.LFE126:
 1002 0032 C046     	 .section .text.XMC_CAN_Init,"ax",%progbits
 1003              	 .align 2
 1004              	 .global XMC_CAN_Init
 1005              	 .code 16
 1006              	 .thumb_func
 1008              	XMC_CAN_Init:
 1009              	.LFB127:
 374:../Libraries/XMCLib/src/xmc_can.c **** 
 375:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 376:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 377:../Libraries/XMCLib/src/xmc_can.c **** {
 1010              	 .loc 2 377 0
 1011              	 .cfi_startproc
 1012 0000 80B5     	 push {r7,lr}
 1013              	.LCFI33:
 1014              	 .cfi_def_cfa_offset 8
 1015              	 .cfi_offset 7,-8
 1016              	 .cfi_offset 14,-4
 1017 0002 8EB0     	 sub sp,sp,#56
 1018              	.LCFI34:
 1019              	 .cfi_def_cfa_offset 64
 1020 0004 00AF     	 add r7,sp,#0
 1021              	.LCFI35:
 1022              	 .cfi_def_cfa_register 7
 1023 0006 F860     	 str r0,[r7,#12]
 1024 0008 7A60     	 str r2,[r7,#4]
 1025 000a 0B23     	 mov r3,#11
 1026 000c FB18     	 add r3,r7,r3
 1027 000e 0A1C     	 add r2,r1,#0
 1028 0010 1A70     	 strb r2,[r3]
 378:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 379:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 380:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 381:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 382:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 383:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 384:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 385:../Libraries/XMCLib/src/xmc_can.c **** 
 386:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 387:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 388:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1029              	 .loc 2 388 0
 1030 0012 FB68     	 ldr r3,[r7,#12]
 1031 0014 181C     	 mov r0,r3
 1032 0016 FFF7FEFF 	 bl XMC_CAN_Enable
 389:../Libraries/XMCLib/src/xmc_can.c **** 
 390:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1033              	 .loc 2 390 0
 1034 001a FA68     	 ldr r2,[r7,#12]
 1035 001c 0B23     	 mov r3,#11
 1036 001e FB18     	 add r3,r7,r3
 1037 0020 1B78     	 ldrb r3,[r3]
 1038 0022 101C     	 mov r0,r2
 1039 0024 191C     	 mov r1,r3
 1040 0026 FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1041              	 .loc 2 392 0
 1042 002a FB68     	 ldr r3,[r7,#12]
 1043 002c 181C     	 mov r0,r3
 1044 002e FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1045 0032 031C     	 mov r3,r0
 1046 0034 7B63     	 str r3,[r7,#52]
 393:../Libraries/XMCLib/src/xmc_can.c **** 
 394:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 395:../Libraries/XMCLib/src/xmc_can.c **** 
 396:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 397:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1047              	 .loc 2 397 0
 1048 0036 786B     	 ldr r0,[r7,#52]
 1049 0038 7968     	 ldr r1,[r7,#4]
 1050 003a FFF7FEFF 	 bl __aeabi_uidiv
 1051 003e 031C     	 mov r3,r0
 1052 0040 1A1C     	 mov r2,r3
 1053 0042 8023     	 mov r3,#128
 1054 0044 DB00     	 lsl r3,r3,#3
 1055 0046 9B1A     	 sub r3,r3,r2
 1056 0048 0020     	 mov r0,#0
 1057 004a 191C     	 mov r1,r3
 1058 004c FFF7FEFF 	 bl max
 1059 0050 021C     	 mov r2,r0
 1060 0052 314B     	 ldr r3,.L53
 1061 0054 101C     	 mov r0,r2
 1062 0056 191C     	 mov r1,r3
 1063 0058 FFF7FEFF 	 bl min
 1064 005c 031C     	 mov r3,r0
 1065 005e 3B63     	 str r3,[r7,#48]
 398:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 1066              	 .loc 2 398 0
 1067 0060 3B6B     	 ldr r3,[r7,#48]
 1068 0062 8022     	 mov r2,#128
 1069 0064 D200     	 lsl r2,r2,#3
 1070 0066 D31A     	 sub r3,r2,r3
 1071 0068 786B     	 ldr r0,[r7,#52]
 1072 006a 191C     	 mov r1,r3
 1073 006c FFF7FEFF 	 bl __aeabi_uidiv
 1074 0070 031C     	 mov r3,r0
 1075 0072 FB62     	 str r3,[r7,#44]
 399:../Libraries/XMCLib/src/xmc_can.c **** 
 400:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 401:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 1076              	 .loc 2 401 0
 1077 0074 7B68     	 ldr r3,[r7,#4]
 1078 0076 9B09     	 lsr r3,r3,#6
 1079 0078 BB62     	 str r3,[r7,#40]
 402:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 1080              	 .loc 2 402 0
 1081 007a 7B6B     	 ldr r3,[r7,#52]
 1082 007c 9B09     	 lsr r3,r3,#6
 1083 007e 7B62     	 str r3,[r7,#36]
 403:../Libraries/XMCLib/src/xmc_can.c **** 
 404:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 1084              	 .loc 2 404 0
 1085 0080 BB6A     	 ldr r3,[r7,#40]
 1086 0082 9B02     	 lsl r3,r3,#10
 1087 0084 181C     	 mov r0,r3
 1088 0086 796A     	 ldr r1,[r7,#36]
 1089 0088 FFF7FEFF 	 bl __aeabi_uidiv
 1090 008c 031C     	 mov r3,r0
 1091 008e 1A1C     	 mov r2,r3
 1092 0090 214B     	 ldr r3,.L53
 1093 0092 101C     	 mov r0,r2
 1094 0094 191C     	 mov r1,r3
 1095 0096 FFF7FEFF 	 bl min
 1096 009a 031C     	 mov r3,r0
 1097 009c 3B62     	 str r3,[r7,#32]
 405:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 1098              	 .loc 2 405 0
 1099 009e 7B6A     	 ldr r3,[r7,#36]
 1100 00a0 3A6A     	 ldr r2,[r7,#32]
 1101 00a2 5343     	 mul r3,r2
 1102 00a4 9B0A     	 lsr r3,r3,#10
 1103 00a6 FB61     	 str r3,[r7,#28]
 406:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 1104              	 .loc 2 406 0
 1105 00a8 FB69     	 ldr r3,[r7,#28]
 1106 00aa 9B01     	 lsl r3,r3,#6
 1107 00ac FB61     	 str r3,[r7,#28]
 407:../Libraries/XMCLib/src/xmc_can.c **** 
 408:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 1108              	 .loc 2 408 0
 1109 00ae 7A68     	 ldr r2,[r7,#4]
 1110 00b0 FB6A     	 ldr r3,[r7,#44]
 1111 00b2 D11A     	 sub r1,r2,r3
 1112 00b4 7A68     	 ldr r2,[r7,#4]
 1113 00b6 FB69     	 ldr r3,[r7,#28]
 1114 00b8 D01A     	 sub r0,r2,r3
 1115 00ba 1B23     	 mov r3,#27
 1116 00bc FA18     	 add r2,r7,r3
 1117 00be 0023     	 mov r3,#0
 1118 00c0 8842     	 cmp r0,r1
 1119 00c2 5B41     	 adc r3,r3,r3
 1120 00c4 1370     	 strb r3,[r2]
 409:../Libraries/XMCLib/src/xmc_can.c **** 
 410:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 1121              	 .loc 2 410 0
 1122 00c6 1B23     	 mov r3,#27
 1123 00c8 FB18     	 add r3,r7,r3
 1124 00ca 1B78     	 ldrb r3,[r3]
 1125 00cc 002B     	 cmp r3,#0
 1126 00ce 01D0     	 beq .L49
 1127              	 .loc 2 410 0 is_stmt 0 discriminator 1
 1128 00d0 3B6B     	 ldr r3,[r7,#48]
 1129 00d2 00E0     	 b .L50
 1130              	.L49:
 1131              	 .loc 2 410 0 discriminator 2
 1132 00d4 3B6A     	 ldr r3,[r7,#32]
 1133              	.L50:
 1134              	 .loc 2 410 0 discriminator 4
 1135 00d6 7B61     	 str r3,[r7,#20]
 411:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 1136              	 .loc 2 411 0 is_stmt 1 discriminator 4
 1137 00d8 1B23     	 mov r3,#27
 1138 00da FB18     	 add r3,r7,r3
 1139 00dc 1B78     	 ldrb r3,[r3]
 1140 00de 002B     	 cmp r3,#0
 1141 00e0 01D0     	 beq .L51
 1142              	 .loc 2 411 0 is_stmt 0 discriminator 1
 1143 00e2 0122     	 mov r2,#1
 1144 00e4 00E0     	 b .L52
 1145              	.L51:
 1146              	 .loc 2 411 0 discriminator 2
 1147 00e6 0222     	 mov r2,#2
 1148              	.L52:
 1149              	 .loc 2 411 0 discriminator 4
 1150 00e8 1323     	 mov r3,#19
 1151 00ea FB18     	 add r3,r7,r3
 1152 00ec 1A70     	 strb r2,[r3]
 412:../Libraries/XMCLib/src/xmc_can.c **** 
 413:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1153              	 .loc 2 413 0 is_stmt 1 discriminator 4
 1154 00ee FB68     	 ldr r3,[r7,#12]
 1155 00f0 DB68     	 ldr r3,[r3,#12]
 1156 00f2 0A4A     	 ldr r2,.L53+4
 1157 00f4 1A40     	 and r2,r3
 1158 00f6 FB68     	 ldr r3,[r7,#12]
 1159 00f8 DA60     	 str r2,[r3,#12]
 414:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 1160              	 .loc 2 414 0 discriminator 4
 1161 00fa FB68     	 ldr r3,[r7,#12]
 1162 00fc DA68     	 ldr r2,[r3,#12]
 1163 00fe 1323     	 mov r3,#19
 1164 0100 FB18     	 add r3,r7,r3
 1165 0102 1B78     	 ldrb r3,[r3]
 1166 0104 9903     	 lsl r1,r3,#14
 1167 0106 7B69     	 ldr r3,[r7,#20]
 1168 0108 0B43     	 orr r3,r1
 1169 010a 1A43     	 orr r2,r3
 1170 010c FB68     	 ldr r3,[r7,#12]
 1171 010e DA60     	 str r2,[r3,#12]
 415:../Libraries/XMCLib/src/xmc_can.c **** 
 416:../Libraries/XMCLib/src/xmc_can.c **** }
 1172              	 .loc 2 416 0 discriminator 4
 1173 0110 BD46     	 mov sp,r7
 1174 0112 0EB0     	 add sp,sp,#56
 1175              	 
 1176 0114 80BD     	 pop {r7,pc}
 1177              	.L54:
 1178 0116 C046     	 .align 2
 1179              	.L53:
 1180 0118 FF030000 	 .word 1023
 1181 011c 003CFFFF 	 .word -50176
 1182              	 .cfi_endproc
 1183              	.LFE127:
 1185              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 1186              	 .align 2
 1187              	 .global XMC_CAN_SetBaudrateClockSource
 1188              	 .code 16
 1189              	 .thumb_func
 1191              	XMC_CAN_SetBaudrateClockSource:
 1192              	.LFB128:
 417:../Libraries/XMCLib/src/xmc_can.c **** 
 418:../Libraries/XMCLib/src/xmc_can.c **** #else
 419:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 420:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 421:../Libraries/XMCLib/src/xmc_can.c **** {
 422:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 423:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 424:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 425:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 426:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 427:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 428:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 429:../Libraries/XMCLib/src/xmc_can.c **** 
 430:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 431:../Libraries/XMCLib/src/xmc_can.c **** 
 432:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 433:../Libraries/XMCLib/src/xmc_can.c **** 
 434:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 435:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 436:../Libraries/XMCLib/src/xmc_can.c **** 
 437:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 438:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 439:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 440:../Libraries/XMCLib/src/xmc_can.c **** 
 441:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 442:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 443:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 444:../Libraries/XMCLib/src/xmc_can.c **** 
 445:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 446:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 447:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 448:../Libraries/XMCLib/src/xmc_can.c **** 
 449:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 450:../Libraries/XMCLib/src/xmc_can.c **** 
 451:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 452:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 453:../Libraries/XMCLib/src/xmc_can.c **** 
 454:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 455:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 456:../Libraries/XMCLib/src/xmc_can.c **** }
 457:../Libraries/XMCLib/src/xmc_can.c **** #endif
 458:../Libraries/XMCLib/src/xmc_can.c **** 
 459:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
 460:../Libraries/XMCLib/src/xmc_can.c **** {
 1193              	 .loc 2 460 0
 1194              	 .cfi_startproc
 1195 0000 80B5     	 push {r7,lr}
 1196              	.LCFI36:
 1197              	 .cfi_def_cfa_offset 8
 1198              	 .cfi_offset 7,-8
 1199              	 .cfi_offset 14,-4
 1200 0002 82B0     	 sub sp,sp,#8
 1201              	.LCFI37:
 1202              	 .cfi_def_cfa_offset 16
 1203 0004 00AF     	 add r7,sp,#0
 1204              	.LCFI38:
 1205              	 .cfi_def_cfa_register 7
 1206 0006 7860     	 str r0,[r7,#4]
 1207 0008 0A1C     	 mov r2,r1
 1208 000a FB1C     	 add r3,r7,#3
 1209 000c 1A70     	 strb r2,[r3]
 461:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 462:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 1210              	 .loc 2 462 0
 1211 000e 7A68     	 ldr r2,[r7,#4]
 1212 0010 E423     	 mov r3,#228
 1213 0012 5B00     	 lsl r3,r3,#1
 1214 0014 D358     	 ldr r3,[r2,r3]
 1215 0016 0F22     	 mov r2,#15
 1216 0018 9343     	 bic r3,r2
 1217 001a 1A1C     	 mov r2,r3
 1218 001c FB1C     	 add r3,r7,#3
 1219 001e 1B78     	 ldrb r3,[r3]
 1220 0020 1A43     	 orr r2,r3
 1221 0022 111C     	 mov r1,r2
 1222 0024 7A68     	 ldr r2,[r7,#4]
 1223 0026 E423     	 mov r3,#228
 1224 0028 5B00     	 lsl r3,r3,#1
 1225 002a D150     	 str r1,[r2,r3]
 463:../Libraries/XMCLib/src/xmc_can.c **** #else
 464:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 465:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(source);
 466:../Libraries/XMCLib/src/xmc_can.c **** #endif
 467:../Libraries/XMCLib/src/xmc_can.c **** }
 1226              	 .loc 2 467 0
 1227 002c BD46     	 mov sp,r7
 1228 002e 02B0     	 add sp,sp,#8
 1229              	 
 1230 0030 80BD     	 pop {r7,pc}
 1231              	 .cfi_endproc
 1232              	.LFE128:
 1234 0032 C046     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 1235              	 .align 2
 1236              	 .global XMC_CAN_GetBaudrateClockSource
 1237              	 .code 16
 1238              	 .thumb_func
 1240              	XMC_CAN_GetBaudrateClockSource:
 1241              	.LFB129:
 468:../Libraries/XMCLib/src/xmc_can.c **** 
 469:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 470:../Libraries/XMCLib/src/xmc_can.c **** {
 1242              	 .loc 2 470 0
 1243              	 .cfi_startproc
 1244 0000 80B5     	 push {r7,lr}
 1245              	.LCFI39:
 1246              	 .cfi_def_cfa_offset 8
 1247              	 .cfi_offset 7,-8
 1248              	 .cfi_offset 14,-4
 1249 0002 82B0     	 sub sp,sp,#8
 1250              	.LCFI40:
 1251              	 .cfi_def_cfa_offset 16
 1252 0004 00AF     	 add r7,sp,#0
 1253              	.LCFI41:
 1254              	 .cfi_def_cfa_register 7
 1255 0006 7860     	 str r0,[r7,#4]
 471:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 472:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 1256              	 .loc 2 472 0
 1257 0008 7A68     	 ldr r2,[r7,#4]
 1258 000a E423     	 mov r3,#228
 1259 000c 5B00     	 lsl r3,r3,#1
 1260 000e D358     	 ldr r3,[r2,r3]
 1261 0010 DBB2     	 uxtb r3,r3
 1262 0012 0F22     	 mov r2,#15
 1263 0014 1340     	 and r3,r2
 1264 0016 DBB2     	 uxtb r3,r3
 473:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4)
 474:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 475:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 476:../Libraries/XMCLib/src/xmc_can.c **** #endif
 477:../Libraries/XMCLib/src/xmc_can.c **** }
 1265              	 .loc 2 477 0
 1266 0018 181C     	 mov r0,r3
 1267 001a BD46     	 mov sp,r7
 1268 001c 02B0     	 add sp,sp,#8
 1269              	 
 1270 001e 80BD     	 pop {r7,pc}
 1271              	 .cfi_endproc
 1272              	.LFE129:
 1274              	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 1275              	 .align 2
 1276              	 .global XMC_CAN_GetBaudrateClockFrequency
 1277              	 .code 16
 1278              	 .thumb_func
 1280              	XMC_CAN_GetBaudrateClockFrequency:
 1281              	.LFB130:
 478:../Libraries/XMCLib/src/xmc_can.c **** 
 479:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 480:../Libraries/XMCLib/src/xmc_can.c **** {
 1282              	 .loc 2 480 0
 1283              	 .cfi_startproc
 1284 0000 80B5     	 push {r7,lr}
 1285              	.LCFI42:
 1286              	 .cfi_def_cfa_offset 8
 1287              	 .cfi_offset 7,-8
 1288              	 .cfi_offset 14,-4
 1289 0002 84B0     	 sub sp,sp,#16
 1290              	.LCFI43:
 1291              	 .cfi_def_cfa_offset 24
 1292 0004 00AF     	 add r7,sp,#0
 1293              	.LCFI44:
 1294              	 .cfi_def_cfa_register 7
 1295 0006 7860     	 str r0,[r7,#4]
 481:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency = 0;
 1296              	 .loc 2 481 0
 1297 0008 0023     	 mov r3,#0
 1298 000a FB60     	 str r3,[r7,#12]
 482:../Libraries/XMCLib/src/xmc_can.c **** 
 483:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 484:../Libraries/XMCLib/src/xmc_can.c ****   switch (XMC_CAN_GetBaudrateClockSource(obj))
 1299              	 .loc 2 484 0
 1300 000c 7B68     	 ldr r3,[r7,#4]
 1301 000e 181C     	 mov r0,r3
 1302 0010 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockSource
 1303 0014 031E     	 sub r3,r0,#0
 1304 0016 012B     	 cmp r3,#1
 1305 0018 02D0     	 beq .L60
 1306 001a 022B     	 cmp r3,#2
 1307 001c 05D0     	 beq .L61
 1308 001e 09E0     	 b .L59
 1309              	.L60:
 485:../Libraries/XMCLib/src/xmc_can.c ****   {
 486:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 487:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 488:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 489:../Libraries/XMCLib/src/xmc_can.c ****       break;
 490:../Libraries/XMCLib/src/xmc_can.c **** #else
 491:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 492:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 1310              	 .loc 2 492 0
 1311 0020 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1312 0024 031C     	 mov r3,r0
 1313 0026 FB60     	 str r3,[r7,#12]
 493:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1314              	 .loc 2 493 0
 1315 0028 04E0     	 b .L59
 1316              	.L61:
 494:../Libraries/XMCLib/src/xmc_can.c **** #endif
 495:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 496:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 1317              	 .loc 2 496 0
 1318 002a FFF7FEFF 	 bl OSCHP_GetFrequency
 1319 002e 031C     	 mov r3,r0
 1320 0030 FB60     	 str r3,[r7,#12]
 497:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1321              	 .loc 2 497 0
 1322 0032 C046     	 mov r8,r8
 1323              	.L59:
 498:../Libraries/XMCLib/src/xmc_can.c ****   }
 499:../Libraries/XMCLib/src/xmc_can.c **** #else
 500:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 501:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 502:../Libraries/XMCLib/src/xmc_can.c **** #endif
 503:../Libraries/XMCLib/src/xmc_can.c **** 
 504:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 1324              	 .loc 2 504 0
 1325 0034 FB68     	 ldr r3,[r7,#12]
 505:../Libraries/XMCLib/src/xmc_can.c **** }
 1326              	 .loc 2 505 0
 1327 0036 181C     	 mov r0,r3
 1328 0038 BD46     	 mov sp,r7
 1329 003a 04B0     	 add sp,sp,#16
 1330              	 
 1331 003c 80BD     	 pop {r7,pc}
 1332              	 .cfi_endproc
 1333              	.LFE130:
 1335 003e C046     	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 1336              	 .align 2
 1337              	 .global XMC_CAN_InitEx
 1338              	 .code 16
 1339              	 .thumb_func
 1341              	XMC_CAN_InitEx:
 1342              	.LFB131:
 506:../Libraries/XMCLib/src/xmc_can.c **** 
 507:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 508:../Libraries/XMCLib/src/xmc_can.c **** {
 1343              	 .loc 2 508 0
 1344              	 .cfi_startproc
 1345 0000 80B5     	 push {r7,lr}
 1346              	.LCFI45:
 1347              	 .cfi_def_cfa_offset 8
 1348              	 .cfi_offset 7,-8
 1349              	 .cfi_offset 14,-4
 1350 0002 88B0     	 sub sp,sp,#32
 1351              	.LCFI46:
 1352              	 .cfi_def_cfa_offset 40
 1353 0004 00AF     	 add r7,sp,#0
 1354              	.LCFI47:
 1355              	 .cfi_def_cfa_register 7
 1356 0006 F860     	 str r0,[r7,#12]
 1357 0008 7A60     	 str r2,[r7,#4]
 1358 000a 0B23     	 mov r3,#11
 1359 000c FB18     	 add r3,r7,r3
 1360 000e 0A1C     	 add r2,r1,#0
 1361 0010 1A70     	 strb r2,[r3]
 509:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 510:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 511:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 512:../Libraries/XMCLib/src/xmc_can.c **** 
 513:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 514:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1362              	 .loc 2 514 0
 1363 0012 FB68     	 ldr r3,[r7,#12]
 1364 0014 181C     	 mov r0,r3
 1365 0016 FFF7FEFF 	 bl XMC_CAN_Enable
 515:../Libraries/XMCLib/src/xmc_can.c **** 
 516:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1366              	 .loc 2 516 0
 1367 001a FA68     	 ldr r2,[r7,#12]
 1368 001c 0B23     	 mov r3,#11
 1369 001e FB18     	 add r3,r7,r3
 1370 0020 1B78     	 ldrb r3,[r3]
 1371 0022 101C     	 mov r0,r2
 1372 0024 191C     	 mov r1,r3
 1373 0026 FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 517:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1374              	 .loc 2 517 0
 1375 002a FB68     	 ldr r3,[r7,#12]
 1376 002c 181C     	 mov r0,r3
 1377 002e FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1378 0032 031C     	 mov r3,r0
 1379 0034 FB61     	 str r3,[r7,#28]
 518:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 519:../Libraries/XMCLib/src/xmc_can.c **** 
 520:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 521:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1380              	 .loc 2 521 0
 1381 0036 F869     	 ldr r0,[r7,#28]
 1382 0038 7968     	 ldr r1,[r7,#4]
 1383 003a FFF7FEFF 	 bl __aeabi_uidiv
 1384 003e 031C     	 mov r3,r0
 1385 0040 1A1C     	 mov r2,r3
 1386 0042 8023     	 mov r3,#128
 1387 0044 DB00     	 lsl r3,r3,#3
 1388 0046 9B1A     	 sub r3,r3,r2
 1389 0048 0020     	 mov r0,#0
 1390 004a 191C     	 mov r1,r3
 1391 004c FFF7FEFF 	 bl max
 1392 0050 021C     	 mov r2,r0
 1393 0052 124B     	 ldr r3,.L65
 1394 0054 101C     	 mov r0,r2
 1395 0056 191C     	 mov r1,r3
 1396 0058 FFF7FEFF 	 bl min
 1397 005c 031C     	 mov r3,r0
 1398 005e BB61     	 str r3,[r7,#24]
 522:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 1399              	 .loc 2 522 0
 1400 0060 BB69     	 ldr r3,[r7,#24]
 1401 0062 8022     	 mov r2,#128
 1402 0064 D200     	 lsl r2,r2,#3
 1403 0066 D31A     	 sub r3,r2,r3
 1404 0068 F869     	 ldr r0,[r7,#28]
 1405 006a 191C     	 mov r1,r3
 1406 006c FFF7FEFF 	 bl __aeabi_uidiv
 1407 0070 031C     	 mov r3,r0
 1408 0072 7B61     	 str r3,[r7,#20]
 523:../Libraries/XMCLib/src/xmc_can.c **** 
 524:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1409              	 .loc 2 524 0
 1410 0074 FB68     	 ldr r3,[r7,#12]
 1411 0076 DB68     	 ldr r3,[r3,#12]
 1412 0078 094A     	 ldr r2,.L65+4
 1413 007a 1A40     	 and r2,r3
 1414 007c FB68     	 ldr r3,[r7,#12]
 1415 007e DA60     	 str r2,[r3,#12]
 525:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 1416              	 .loc 2 525 0
 1417 0080 FB68     	 ldr r3,[r7,#12]
 1418 0082 DA68     	 ldr r2,[r3,#12]
 1419 0084 BB69     	 ldr r3,[r7,#24]
 1420 0086 1343     	 orr r3,r2
 1421 0088 8022     	 mov r2,#128
 1422 008a D201     	 lsl r2,r2,#7
 1423 008c 1A43     	 orr r2,r3
 1424 008e FB68     	 ldr r3,[r7,#12]
 1425 0090 DA60     	 str r2,[r3,#12]
 526:../Libraries/XMCLib/src/xmc_can.c **** 
 527:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 1426              	 .loc 2 527 0
 1427 0092 7B69     	 ldr r3,[r7,#20]
 528:../Libraries/XMCLib/src/xmc_can.c **** }
 1428              	 .loc 2 528 0
 1429 0094 181C     	 mov r0,r3
 1430 0096 BD46     	 mov sp,r7
 1431 0098 08B0     	 add sp,sp,#32
 1432              	 
 1433 009a 80BD     	 pop {r7,pc}
 1434              	.L66:
 1435              	 .align 2
 1436              	.L65:
 1437 009c FF030000 	 .word 1023
 1438 00a0 003CFFFF 	 .word -50176
 1439              	 .cfi_endproc
 1440              	.LFE131:
 1442              	 .section .text.XMC_CAN_GetClockFrequency,"ax",%progbits
 1443              	 .align 2
 1444              	 .global XMC_CAN_GetClockFrequency
 1445              	 .code 16
 1446              	 .thumb_func
 1448              	XMC_CAN_GetClockFrequency:
 1449              	.LFB132:
 529:../Libraries/XMCLib/src/xmc_can.c **** 
 530:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj)
 531:../Libraries/XMCLib/src/xmc_can.c **** {
 1450              	 .loc 2 531 0
 1451              	 .cfi_startproc
 1452 0000 80B5     	 push {r7,lr}
 1453              	.LCFI48:
 1454              	 .cfi_def_cfa_offset 8
 1455              	 .cfi_offset 7,-8
 1456              	 .cfi_offset 14,-4
 1457 0002 84B0     	 sub sp,sp,#16
 1458              	.LCFI49:
 1459              	 .cfi_def_cfa_offset 24
 1460 0004 00AF     	 add r7,sp,#0
 1461              	.LCFI50:
 1462              	 .cfi_def_cfa_register 7
 1463 0006 7860     	 str r0,[r7,#4]
 532:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n = (obj->FDR & CAN_FDR_STEP_Msk) >> CAN_FDR_STEP_Pos;
 1464              	 .loc 2 532 0
 1465 0008 7B68     	 ldr r3,[r7,#4]
 1466 000a DB68     	 ldr r3,[r3,#12]
 1467 000c 9B05     	 lsl r3,r3,#22
 1468 000e 9B0D     	 lsr r3,r3,#22
 1469 0010 FB60     	 str r3,[r7,#12]
 533:../Libraries/XMCLib/src/xmc_can.c ****   return (XMC_CAN_GetBaudrateClockFrequency(obj) * (1024U - step_n));
 1470              	 .loc 2 533 0
 1471 0012 7B68     	 ldr r3,[r7,#4]
 1472 0014 181C     	 mov r0,r3
 1473 0016 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1474 001a 011C     	 mov r1,r0
 1475 001c FB68     	 ldr r3,[r7,#12]
 1476 001e 8022     	 mov r2,#128
 1477 0020 D200     	 lsl r2,r2,#3
 1478 0022 D31A     	 sub r3,r2,r3
 1479 0024 4B43     	 mul r3,r1
 534:../Libraries/XMCLib/src/xmc_can.c **** }
 1480              	 .loc 2 534 0
 1481 0026 181C     	 mov r0,r3
 1482 0028 BD46     	 mov sp,r7
 1483 002a 04B0     	 add sp,sp,#16
 1484              	 
 1485 002c 80BD     	 pop {r7,pc}
 1486              	 .cfi_endproc
 1487              	.LFE132:
 1489 002e C046     	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 1490              	 .align 2
 1491              	 .global XMC_CAN_MO_SetIdentifier
 1492              	 .code 16
 1493              	 .thumb_func
 1495              	XMC_CAN_MO_SetIdentifier:
 1496              	.LFB133:
 535:../Libraries/XMCLib/src/xmc_can.c **** 
 536:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 537:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 538:../Libraries/XMCLib/src/xmc_can.c **** {
 1497              	 .loc 2 538 0
 1498              	 .cfi_startproc
 1499 0000 80B5     	 push {r7,lr}
 1500              	.LCFI51:
 1501              	 .cfi_def_cfa_offset 8
 1502              	 .cfi_offset 7,-8
 1503              	 .cfi_offset 14,-4
 1504 0002 82B0     	 sub sp,sp,#8
 1505              	.LCFI52:
 1506              	 .cfi_def_cfa_offset 16
 1507 0004 00AF     	 add r7,sp,#0
 1508              	.LCFI53:
 1509              	 .cfi_def_cfa_register 7
 1510 0006 7860     	 str r0,[r7,#4]
 1511 0008 3960     	 str r1,[r7]
 539:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1512              	 .loc 2 539 0
 1513 000a 7B68     	 ldr r3,[r7,#4]
 1514 000c 1B68     	 ldr r3,[r3]
 1515 000e 9A69     	 ldr r2,[r3,#24]
 1516 0010 8023     	 mov r3,#128
 1517 0012 9B05     	 lsl r3,r3,#22
 1518 0014 1340     	 and r3,r2
 1519 0016 0DD1     	 bne .L70
 540:../Libraries/XMCLib/src/xmc_can.c ****   {
 541:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1520              	 .loc 2 541 0
 1521 0018 7B68     	 ldr r3,[r7,#4]
 1522 001a 1B68     	 ldr r3,[r3]
 1523 001c 7A68     	 ldr r2,[r7,#4]
 1524 001e 1268     	 ldr r2,[r2]
 1525 0020 9269     	 ldr r2,[r2,#24]
 1526 0022 520F     	 lsr r2,r2,#29
 1527 0024 5107     	 lsl r1,r2,#29
 542:../Libraries/XMCLib/src/xmc_can.c ****                                ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MO
 1528              	 .loc 2 542 0
 1529 0026 3A68     	 ldr r2,[r7]
 1530 0028 9204     	 lsl r2,r2,#18
 1531 002a D200     	 lsl r2,r2,#3
 1532 002c D208     	 lsr r2,r2,#3
 541:../Libraries/XMCLib/src/xmc_can.c ****                                ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MO
 1533              	 .loc 2 541 0
 1534 002e 0A43     	 orr r2,r1
 1535 0030 9A61     	 str r2,[r3,#24]
 1536 0032 0BE0     	 b .L71
 1537              	.L70:
 543:../Libraries/XMCLib/src/xmc_can.c ****   }
 544:../Libraries/XMCLib/src/xmc_can.c ****   else
 545:../Libraries/XMCLib/src/xmc_can.c ****   {
 546:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1538              	 .loc 2 546 0
 1539 0034 7B68     	 ldr r3,[r7,#4]
 1540 0036 1B68     	 ldr r3,[r3]
 1541 0038 7A68     	 ldr r2,[r7,#4]
 1542 003a 1268     	 ldr r2,[r2]
 1543 003c 9269     	 ldr r2,[r2,#24]
 1544 003e 520F     	 lsr r2,r2,#29
 1545 0040 5107     	 lsl r1,r2,#29
 547:../Libraries/XMCLib/src/xmc_can.c ****                                (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1546              	 .loc 2 547 0
 1547 0042 3A68     	 ldr r2,[r7]
 1548 0044 D200     	 lsl r2,r2,#3
 1549 0046 D208     	 lsr r2,r2,#3
 546:../Libraries/XMCLib/src/xmc_can.c ****                                (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1550              	 .loc 2 546 0
 1551 0048 0A43     	 orr r2,r1
 1552 004a 9A61     	 str r2,[r3,#24]
 1553              	.L71:
 548:../Libraries/XMCLib/src/xmc_can.c ****   }
 549:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 1554              	 .loc 2 549 0
 1555 004c 3B68     	 ldr r3,[r7]
 1556 004e DB00     	 lsl r3,r3,#3
 1557 0050 DA08     	 lsr r2,r3,#3
 1558 0052 7B68     	 ldr r3,[r7,#4]
 1559 0054 D200     	 lsl r2,r2,#3
 1560 0056 D208     	 lsr r2,r2,#3
 1561 0058 5968     	 ldr r1,[r3,#4]
 1562 005a 490F     	 lsr r1,r1,#29
 1563 005c 4907     	 lsl r1,r1,#29
 1564 005e 0A43     	 orr r2,r1
 1565 0060 5A60     	 str r2,[r3,#4]
 550:../Libraries/XMCLib/src/xmc_can.c **** }
 1566              	 .loc 2 550 0
 1567 0062 BD46     	 mov sp,r7
 1568 0064 02B0     	 add sp,sp,#8
 1569              	 
 1570 0066 80BD     	 pop {r7,pc}
 1571              	 .cfi_endproc
 1572              	.LFE133:
 1574              	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 1575              	 .align 2
 1576              	 .global XMC_CAN_MO_GetIdentifier
 1577              	 .code 16
 1578              	 .thumb_func
 1580              	XMC_CAN_MO_GetIdentifier:
 1581              	.LFB134:
 551:../Libraries/XMCLib/src/xmc_can.c **** 
 552:../Libraries/XMCLib/src/xmc_can.c **** 
 553:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 554:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 555:../Libraries/XMCLib/src/xmc_can.c **** {
 1582              	 .loc 2 555 0
 1583              	 .cfi_startproc
 1584 0000 80B5     	 push {r7,lr}
 1585              	.LCFI54:
 1586              	 .cfi_def_cfa_offset 8
 1587              	 .cfi_offset 7,-8
 1588              	 .cfi_offset 14,-4
 1589 0002 84B0     	 sub sp,sp,#16
 1590              	.LCFI55:
 1591              	 .cfi_def_cfa_offset 24
 1592 0004 00AF     	 add r7,sp,#0
 1593              	.LCFI56:
 1594              	 .cfi_def_cfa_register 7
 1595 0006 7860     	 str r0,[r7,#4]
 556:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 557:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1596              	 .loc 2 557 0
 1597 0008 7B68     	 ldr r3,[r7,#4]
 1598 000a 1B68     	 ldr r3,[r3]
 1599 000c 9A69     	 ldr r2,[r3,#24]
 1600 000e 8023     	 mov r3,#128
 1601 0010 9B05     	 lsl r3,r3,#22
 1602 0012 1340     	 and r3,r2
 1603 0014 07D1     	 bne .L73
 558:../Libraries/XMCLib/src/xmc_can.c ****   {
 559:../Libraries/XMCLib/src/xmc_can.c ****     identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_S
 1604              	 .loc 2 559 0
 1605 0016 7B68     	 ldr r3,[r7,#4]
 1606 0018 1B68     	 ldr r3,[r3]
 1607 001a 9B69     	 ldr r3,[r3,#24]
 1608 001c DB00     	 lsl r3,r3,#3
 1609 001e DB08     	 lsr r3,r3,#3
 1610 0020 9B0C     	 lsr r3,r3,#18
 1611 0022 FB60     	 str r3,[r7,#12]
 1612 0024 05E0     	 b .L74
 1613              	.L73:
 560:../Libraries/XMCLib/src/xmc_can.c ****   }
 561:../Libraries/XMCLib/src/xmc_can.c ****   else
 562:../Libraries/XMCLib/src/xmc_can.c ****   {
 563:../Libraries/XMCLib/src/xmc_can.c ****     identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1614              	 .loc 2 563 0
 1615 0026 7B68     	 ldr r3,[r7,#4]
 1616 0028 1B68     	 ldr r3,[r3]
 1617 002a 9B69     	 ldr r3,[r3,#24]
 1618 002c DB00     	 lsl r3,r3,#3
 1619 002e DB08     	 lsr r3,r3,#3
 1620 0030 FB60     	 str r3,[r7,#12]
 1621              	.L74:
 564:../Libraries/XMCLib/src/xmc_can.c ****   }
 565:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 1622              	 .loc 2 565 0
 1623 0032 FB68     	 ldr r3,[r7,#12]
 566:../Libraries/XMCLib/src/xmc_can.c **** }
 1624              	 .loc 2 566 0
 1625 0034 181C     	 mov r0,r3
 1626 0036 BD46     	 mov sp,r7
 1627 0038 04B0     	 add sp,sp,#16
 1628              	 
 1629 003a 80BD     	 pop {r7,pc}
 1630              	 .cfi_endproc
 1631              	.LFE134:
 1633              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1634              	 .align 2
 1635              	 .global XMC_CAN_MO_GetAcceptanceMask
 1636              	 .code 16
 1637              	 .thumb_func
 1639              	XMC_CAN_MO_GetAcceptanceMask:
 1640              	.LFB135:
 567:../Libraries/XMCLib/src/xmc_can.c **** 
 568:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 569:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 570:../Libraries/XMCLib/src/xmc_can.c **** {
 1641              	 .loc 2 570 0
 1642              	 .cfi_startproc
 1643 0000 80B5     	 push {r7,lr}
 1644              	.LCFI57:
 1645              	 .cfi_def_cfa_offset 8
 1646              	 .cfi_offset 7,-8
 1647              	 .cfi_offset 14,-4
 1648 0002 84B0     	 sub sp,sp,#16
 1649              	.LCFI58:
 1650              	 .cfi_def_cfa_offset 24
 1651 0004 00AF     	 add r7,sp,#0
 1652              	.LCFI59:
 1653              	 .cfi_def_cfa_register 7
 1654 0006 7860     	 str r0,[r7,#4]
 571:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 572:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1655              	 .loc 2 572 0
 1656 0008 7B68     	 ldr r3,[r7,#4]
 1657 000a 1B68     	 ldr r3,[r3]
 1658 000c DA68     	 ldr r2,[r3,#12]
 1659 000e 8023     	 mov r3,#128
 1660 0010 9B05     	 lsl r3,r3,#22
 1661 0012 1340     	 and r3,r2
 1662 0014 0ED1     	 bne .L77
 573:../Libraries/XMCLib/src/xmc_can.c ****       && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1663              	 .loc 2 573 0
 1664 0016 7B68     	 ldr r3,[r7,#4]
 1665 0018 1B68     	 ldr r3,[r3]
 1666 001a 9A69     	 ldr r2,[r3,#24]
 1667 001c 8023     	 mov r3,#128
 1668 001e 9B05     	 lsl r3,r3,#22
 1669 0020 1340     	 and r3,r2
 1670 0022 07D1     	 bne .L77
 574:../Libraries/XMCLib/src/xmc_can.c ****   {
 575:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1671              	 .loc 2 575 0
 1672 0024 7B68     	 ldr r3,[r7,#4]
 1673 0026 1B68     	 ldr r3,[r3]
 1674 0028 DB68     	 ldr r3,[r3,#12]
 1675 002a DB00     	 lsl r3,r3,#3
 1676 002c DB08     	 lsr r3,r3,#3
 1677 002e 9B0C     	 lsr r3,r3,#18
 1678 0030 FB60     	 str r3,[r7,#12]
 1679 0032 05E0     	 b .L78
 1680              	.L77:
 576:../Libraries/XMCLib/src/xmc_can.c ****   }
 577:../Libraries/XMCLib/src/xmc_can.c ****   else
 578:../Libraries/XMCLib/src/xmc_can.c ****   {
 579:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1681              	 .loc 2 579 0
 1682 0034 7B68     	 ldr r3,[r7,#4]
 1683 0036 1B68     	 ldr r3,[r3]
 1684 0038 DB68     	 ldr r3,[r3,#12]
 1685 003a DB00     	 lsl r3,r3,#3
 1686 003c DB08     	 lsr r3,r3,#3
 1687 003e FB60     	 str r3,[r7,#12]
 1688              	.L78:
 580:../Libraries/XMCLib/src/xmc_can.c ****   }
 581:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1689              	 .loc 2 581 0
 1690 0040 FB68     	 ldr r3,[r7,#12]
 582:../Libraries/XMCLib/src/xmc_can.c **** }
 1691              	 .loc 2 582 0
 1692 0042 181C     	 mov r0,r3
 1693 0044 BD46     	 mov sp,r7
 1694 0046 04B0     	 add sp,sp,#16
 1695              	 
 1696 0048 80BD     	 pop {r7,pc}
 1697              	 .cfi_endproc
 1698              	.LFE135:
 1700 004a C046     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1701              	 .align 2
 1702              	 .global XMC_CAN_MO_SetAcceptanceMask
 1703              	 .code 16
 1704              	 .thumb_func
 1706              	XMC_CAN_MO_SetAcceptanceMask:
 1707              	.LFB136:
 583:../Libraries/XMCLib/src/xmc_can.c **** 
 584:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the acceptance mask of the MO */
 585:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo, const uint32_t can_id_mask)
 586:../Libraries/XMCLib/src/xmc_can.c **** {
 1708              	 .loc 2 586 0
 1709              	 .cfi_startproc
 1710 0000 80B5     	 push {r7,lr}
 1711              	.LCFI60:
 1712              	 .cfi_def_cfa_offset 8
 1713              	 .cfi_offset 7,-8
 1714              	 .cfi_offset 14,-4
 1715 0002 82B0     	 sub sp,sp,#8
 1716              	.LCFI61:
 1717              	 .cfi_def_cfa_offset 16
 1718 0004 00AF     	 add r7,sp,#0
 1719              	.LCFI62:
 1720              	 .cfi_def_cfa_register 7
 1721 0006 7860     	 str r0,[r7,#4]
 1722 0008 3960     	 str r1,[r7]
 587:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != 0)
 1723              	 .loc 2 587 0
 1724 000a 7B68     	 ldr r3,[r7,#4]
 1725 000c 1B68     	 ldr r3,[r3]
 1726 000e DA68     	 ldr r2,[r3,#12]
 1727 0010 8023     	 mov r3,#128
 1728 0012 9B05     	 lsl r3,r3,#22
 1729 0014 1340     	 and r3,r2
 1730 0016 14D0     	 beq .L81
 588:../Libraries/XMCLib/src/xmc_can.c ****       && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) == 0))
 1731              	 .loc 2 588 0
 1732 0018 7B68     	 ldr r3,[r7,#4]
 1733 001a 1B68     	 ldr r3,[r3]
 1734 001c 9A69     	 ldr r2,[r3,#24]
 1735 001e 8023     	 mov r3,#128
 1736 0020 9B05     	 lsl r3,r3,#22
 1737 0022 1340     	 and r3,r2
 1738 0024 0DD1     	 bne .L81
 589:../Libraries/XMCLib/src/xmc_can.c ****   {
 590:../Libraries/XMCLib/src/xmc_can.c ****     /* Message object n receives frames only with matching IDE bit. */
 591:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1739              	 .loc 2 591 0
 1740 0026 7B68     	 ldr r3,[r7,#4]
 1741 0028 1B68     	 ldr r3,[r3]
 1742 002a 7A68     	 ldr r2,[r7,#4]
 1743 002c 1268     	 ldr r2,[r2]
 1744 002e D268     	 ldr r2,[r2,#12]
 1745 0030 520F     	 lsr r2,r2,#29
 1746 0032 5107     	 lsl r1,r2,#29
 592:../Libraries/XMCLib/src/xmc_can.c ****                                 ((can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)XMC_CAN_MO_
 1747              	 .loc 2 592 0
 1748 0034 3A68     	 ldr r2,[r7]
 1749 0036 9204     	 lsl r2,r2,#18
 1750 0038 0F48     	 ldr r0,.L83
 1751 003a 0240     	 and r2,r0
 591:../Libraries/XMCLib/src/xmc_can.c ****                                 ((can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)XMC_CAN_MO_
 1752              	 .loc 2 591 0
 1753 003c 0A43     	 orr r2,r1
 1754 003e DA60     	 str r2,[r3,#12]
 1755 0040 0BE0     	 b .L82
 1756              	.L81:
 593:../Libraries/XMCLib/src/xmc_can.c ****   }
 594:../Libraries/XMCLib/src/xmc_can.c ****   else
 595:../Libraries/XMCLib/src/xmc_can.c ****   {
 596:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1757              	 .loc 2 596 0
 1758 0042 7B68     	 ldr r3,[r7,#4]
 1759 0044 1B68     	 ldr r3,[r3]
 1760 0046 7A68     	 ldr r2,[r7,#4]
 1761 0048 1268     	 ldr r2,[r2]
 1762 004a D268     	 ldr r2,[r2,#12]
 1763 004c 520F     	 lsr r2,r2,#29
 1764 004e 5107     	 lsl r1,r2,#29
 597:../Libraries/XMCLib/src/xmc_can.c ****                                 (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1765              	 .loc 2 597 0
 1766 0050 3A68     	 ldr r2,[r7]
 1767 0052 D200     	 lsl r2,r2,#3
 1768 0054 D208     	 lsr r2,r2,#3
 596:../Libraries/XMCLib/src/xmc_can.c ****                                 (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1769              	 .loc 2 596 0
 1770 0056 0A43     	 orr r2,r1
 1771 0058 DA60     	 str r2,[r3,#12]
 1772              	.L82:
 598:../Libraries/XMCLib/src/xmc_can.c ****   }
 599:../Libraries/XMCLib/src/xmc_can.c **** 
 600:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1773              	 .loc 2 600 0
 1774 005a 3B68     	 ldr r3,[r7]
 1775 005c DB00     	 lsl r3,r3,#3
 1776 005e DA08     	 lsr r2,r3,#3
 1777 0060 7B68     	 ldr r3,[r7,#4]
 1778 0062 D200     	 lsl r2,r2,#3
 1779 0064 D208     	 lsr r2,r2,#3
 1780 0066 9968     	 ldr r1,[r3,#8]
 1781 0068 490F     	 lsr r1,r1,#29
 1782 006a 4907     	 lsl r1,r1,#29
 1783 006c 0A43     	 orr r2,r1
 1784 006e 9A60     	 str r2,[r3,#8]
 601:../Libraries/XMCLib/src/xmc_can.c **** }
 1785              	 .loc 2 601 0
 1786 0070 BD46     	 mov sp,r7
 1787 0072 02B0     	 add sp,sp,#8
 1788              	 
 1789 0074 80BD     	 pop {r7,pc}
 1790              	.L84:
 1791 0076 C046     	 .align 2
 1792              	.L83:
 1793 0078 0000FC1F 	 .word 536608768
 1794              	 .cfi_endproc
 1795              	.LFE136:
 1797              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1798              	 .align 2
 1799              	 .global XMC_CAN_MO_Config
 1800              	 .code 16
 1801              	 .thumb_func
 1803              	XMC_CAN_MO_Config:
 1804              	.LFB137:
 602:../Libraries/XMCLib/src/xmc_can.c **** 
 603:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 604:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 605:../Libraries/XMCLib/src/xmc_can.c **** {
 1805              	 .loc 2 605 0
 1806              	 .cfi_startproc
 1807 0000 80B5     	 push {r7,lr}
 1808              	.LCFI63:
 1809              	 .cfi_def_cfa_offset 8
 1810              	 .cfi_offset 7,-8
 1811              	 .cfi_offset 14,-4
 1812 0002 86B0     	 sub sp,sp,#24
 1813              	.LCFI64:
 1814              	 .cfi_def_cfa_offset 32
 1815 0004 00AF     	 add r7,sp,#0
 1816              	.LCFI65:
 1817              	 .cfi_def_cfa_register 7
 1818 0006 7860     	 str r0,[r7,#4]
 606:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 607:../Libraries/XMCLib/src/xmc_can.c **** 
 608:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 609:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 1819              	 .loc 2 609 0
 1820 0008 7B68     	 ldr r3,[r7,#4]
 1821 000a 1B68     	 ldr r3,[r3]
 1822 000c 484A     	 ldr r2,.L92
 1823 000e 9446     	 mov ip,r2
 1824 0010 6344     	 add r3,r3,ip
 1825 0012 5B09     	 lsr r3,r3,#5
 1826 0014 7B61     	 str r3,[r7,#20]
 610:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << 
 1827              	 .loc 2 610 0
 1828 0016 7B69     	 ldr r3,[r7,#20]
 1829 0018 5B09     	 lsr r3,r3,#5
 1830 001a 5A03     	 lsl r2,r3,#13
 1831 001c 7B69     	 ldr r3,[r7,#20]
 1832 001e 1F21     	 mov r1,#31
 1833 0020 0B40     	 and r3,r1
 1834 0022 1B02     	 lsl r3,r3,#8
 1835 0024 1343     	 orr r3,r2
 1836 0026 3B61     	 str r3,[r7,#16]
 611:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1837              	 .loc 2 611 0
 1838 0028 7B68     	 ldr r3,[r7,#4]
 1839 002a 1B68     	 ldr r3,[r3]
 1840 002c 7A68     	 ldr r2,[r7,#4]
 1841 002e 1268     	 ldr r2,[r2]
 1842 0030 9268     	 ldr r2,[r2,#8]
 1843 0032 4049     	 ldr r1,.L92+4
 1844 0034 0A40     	 and r2,r1
 1845 0036 9A60     	 str r2,[r3,#8]
 612:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1846              	 .loc 2 612 0
 1847 0038 7B68     	 ldr r3,[r7,#4]
 1848 003a 1B68     	 ldr r3,[r3]
 1849 003c 7A68     	 ldr r2,[r7,#4]
 1850 003e 1268     	 ldr r2,[r2]
 1851 0040 9168     	 ldr r1,[r2,#8]
 1852 0042 3A69     	 ldr r2,[r7,#16]
 1853 0044 0A43     	 orr r2,r1
 1854 0046 9A60     	 str r2,[r3,#8]
 613:../Libraries/XMCLib/src/xmc_can.c **** 
 614:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1855              	 .loc 2 614 0
 1856 0048 7B68     	 ldr r3,[r7,#4]
 1857 004a DB79     	 ldrb r3,[r3,#7]
 1858 004c 2022     	 mov r2,#32
 1859 004e 1340     	 and r3,r2
 1860 0050 DBB2     	 uxtb r3,r3
 1861 0052 002B     	 cmp r3,#0
 1862 0054 07D0     	 beq .L86
 615:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1863              	 .loc 2 615 0 discriminator 1
 1864 0056 7B68     	 ldr r3,[r7,#4]
 1865 0058 DB79     	 ldrb r3,[r3,#7]
 1866 005a 2022     	 mov r2,#32
 1867 005c 1340     	 and r3,r2
 1868 005e DBB2     	 uxtb r3,r3
 614:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1869              	 .loc 2 614 0 discriminator 1
 1870 0060 002B     	 cmp r3,#0
 1871 0062 00D1     	 bne .L86
 614:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1872              	 .loc 2 614 0 is_stmt 0
 1873 0064 61E0     	 b .L85
 1874              	.L86:
 616:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1875              	 .loc 2 616 0 is_stmt 1
 1876 0066 7B68     	 ldr r3,[r7,#4]
 1877 0068 1B7E     	 ldrb r3,[r3,#24]
 615:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1878              	 .loc 2 615 0
 1879 006a 002B     	 cmp r3,#0
 1880 006c 04D0     	 beq .L88
 617:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1881              	 .loc 2 617 0
 1882 006e 7B68     	 ldr r3,[r7,#4]
 1883 0070 1B7E     	 ldrb r3,[r3,#24]
 616:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1884              	 .loc 2 616 0
 1885 0072 012B     	 cmp r3,#1
 1886 0074 00D0     	 beq .L88
 1887 0076 58E0     	 b .L85
 1888              	.L88:
 618:../Libraries/XMCLib/src/xmc_can.c ****   {
 619:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 620:../Libraries/XMCLib/src/xmc_can.c ****   }
 621:../Libraries/XMCLib/src/xmc_can.c ****   else
 622:../Libraries/XMCLib/src/xmc_can.c ****   {
 623:../Libraries/XMCLib/src/xmc_can.c **** 
 624:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 625:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1889              	 .loc 2 625 0
 1890 0078 7B68     	 ldr r3,[r7,#4]
 1891 007a 1B68     	 ldr r3,[r3]
 1892 007c 2022     	 mov r2,#32
 1893 007e DA61     	 str r2,[r3,#28]
 626:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1894              	 .loc 2 626 0
 1895 0080 7B68     	 ldr r3,[r7,#4]
 1896 0082 DB79     	 ldrb r3,[r3,#7]
 1897 0084 2022     	 mov r2,#32
 1898 0086 1340     	 and r3,r2
 1899 0088 DBB2     	 uxtb r3,r3
 1900 008a 002B     	 cmp r3,#0
 1901 008c 28D1     	 bne .L89
 627:../Libraries/XMCLib/src/xmc_can.c ****     {
 628:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1902              	 .loc 2 628 0
 1903 008e 7B68     	 ldr r3,[r7,#4]
 1904 0090 5B68     	 ldr r3,[r3,#4]
 1905 0092 FB60     	 str r3,[r7,#12]
 629:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1906              	 .loc 2 629 0
 1907 0094 FB68     	 ldr r3,[r7,#12]
 1908 0096 5B0F     	 lsr r3,r3,#29
 1909 0098 5B07     	 lsl r3,r3,#29
 1910 009a FB60     	 str r3,[r7,#12]
 630:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1911              	 .loc 2 630 0
 1912 009c 7B68     	 ldr r3,[r7,#4]
 1913 009e 5B68     	 ldr r3,[r3,#4]
 1914 00a0 DB00     	 lsl r3,r3,#3
 1915 00a2 DB08     	 lsr r3,r3,#3
 1916 00a4 9B04     	 lsl r3,r3,#18
 1917 00a6 1A1C     	 mov r2,r3
 1918 00a8 FB68     	 ldr r3,[r7,#12]
 1919 00aa 1343     	 orr r3,r2
 1920 00ac FB60     	 str r3,[r7,#12]
 631:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1921              	 .loc 2 631 0
 1922 00ae 7B68     	 ldr r3,[r7,#4]
 1923 00b0 1B68     	 ldr r3,[r3]
 1924 00b2 FA68     	 ldr r2,[r7,#12]
 1925 00b4 9A61     	 str r2,[r3,#24]
 632:../Libraries/XMCLib/src/xmc_can.c **** 
 633:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1926              	 .loc 2 633 0
 1927 00b6 7B68     	 ldr r3,[r7,#4]
 1928 00b8 9B68     	 ldr r3,[r3,#8]
 1929 00ba FB60     	 str r3,[r7,#12]
 634:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1930              	 .loc 2 634 0
 1931 00bc FB68     	 ldr r3,[r7,#12]
 1932 00be 5B0F     	 lsr r3,r3,#29
 1933 00c0 5B07     	 lsl r3,r3,#29
 1934 00c2 FB60     	 str r3,[r7,#12]
 635:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1935              	 .loc 2 635 0
 1936 00c4 7B68     	 ldr r3,[r7,#4]
 1937 00c6 9B68     	 ldr r3,[r3,#8]
 1938 00c8 DB00     	 lsl r3,r3,#3
 1939 00ca DB08     	 lsr r3,r3,#3
 1940 00cc 9B04     	 lsl r3,r3,#18
 1941 00ce 1A1C     	 mov r2,r3
 1942 00d0 FB68     	 ldr r3,[r7,#12]
 1943 00d2 1343     	 orr r3,r2
 1944 00d4 FB60     	 str r3,[r7,#12]
 636:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1945              	 .loc 2 636 0
 1946 00d6 7B68     	 ldr r3,[r7,#4]
 1947 00d8 1B68     	 ldr r3,[r3]
 1948 00da FA68     	 ldr r2,[r7,#12]
 1949 00dc DA60     	 str r2,[r3,#12]
 1950 00de 09E0     	 b .L90
 1951              	.L89:
 637:../Libraries/XMCLib/src/xmc_can.c ****     }
 638:../Libraries/XMCLib/src/xmc_can.c ****     else
 639:../Libraries/XMCLib/src/xmc_can.c ****     {
 640:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 1952              	 .loc 2 640 0
 1953 00e0 7B68     	 ldr r3,[r7,#4]
 1954 00e2 1B68     	 ldr r3,[r3]
 1955 00e4 7A68     	 ldr r2,[r7,#4]
 1956 00e6 5268     	 ldr r2,[r2,#4]
 1957 00e8 9A61     	 str r2,[r3,#24]
 641:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1958              	 .loc 2 641 0
 1959 00ea 7B68     	 ldr r3,[r7,#4]
 1960 00ec 1B68     	 ldr r3,[r3]
 1961 00ee 7A68     	 ldr r2,[r7,#4]
 1962 00f0 9268     	 ldr r2,[r2,#8]
 1963 00f2 DA60     	 str r2,[r3,#12]
 1964              	.L90:
 642:../Libraries/XMCLib/src/xmc_can.c ****     }
 643:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 644:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1965              	 .loc 2 644 0
 1966 00f4 7B68     	 ldr r3,[r7,#4]
 1967 00f6 1B7E     	 ldrb r3,[r3,#24]
 1968 00f8 012B     	 cmp r3,#1
 1969 00fa 0DD1     	 bne .L91
 645:../Libraries/XMCLib/src/xmc_can.c ****     {
 646:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 647:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 1970              	 .loc 2 647 0
 1971 00fc 7B68     	 ldr r3,[r7,#4]
 1972 00fe 181C     	 mov r0,r3
 1973 0100 FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 648:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1974              	 .loc 2 648 0
 1975 0104 7B68     	 ldr r3,[r7,#4]
 1976 0106 1B68     	 ldr r3,[r3]
 1977 0108 8022     	 mov r2,#128
 1978 010a 1205     	 lsl r2,r2,#20
 1979 010c DA61     	 str r2,[r3,#28]
 649:../Libraries/XMCLib/src/xmc_can.c **** 
 650:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 651:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 1980              	 .loc 2 651 0
 1981 010e 7B68     	 ldr r3,[r7,#4]
 1982 0110 1B68     	 ldr r3,[r3]
 1983 0112 094A     	 ldr r2,.L92+8
 1984 0114 DA61     	 str r2,[r3,#28]
 1985 0116 08E0     	 b .L85
 1986              	.L91:
 652:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 653:../Libraries/XMCLib/src/xmc_can.c ****     }
 654:../Libraries/XMCLib/src/xmc_can.c ****     else
 655:../Libraries/XMCLib/src/xmc_can.c ****     {
 656:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 657:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 1987              	 .loc 2 657 0
 1988 0118 7B68     	 ldr r3,[r7,#4]
 1989 011a 1B68     	 ldr r3,[r3]
 1990 011c 8022     	 mov r2,#128
 1991 011e 1201     	 lsl r2,r2,#4
 1992 0120 DA61     	 str r2,[r3,#28]
 658:../Libraries/XMCLib/src/xmc_can.c **** 
 659:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 660:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 1993              	 .loc 2 660 0
 1994 0122 7B68     	 ldr r3,[r7,#4]
 1995 0124 1B68     	 ldr r3,[r3]
 1996 0126 054A     	 ldr r2,.L92+12
 1997 0128 DA61     	 str r2,[r3,#28]
 1998              	.L85:
 661:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 662:../Libraries/XMCLib/src/xmc_can.c ****     }
 663:../Libraries/XMCLib/src/xmc_can.c **** 
 664:../Libraries/XMCLib/src/xmc_can.c ****   }
 665:../Libraries/XMCLib/src/xmc_can.c **** }
 1999              	 .loc 2 665 0
 2000 012a BD46     	 mov sp,r7
 2001 012c 06B0     	 add sp,sp,#24
 2002              	 
 2003 012e 80BD     	 pop {r7,pc}
 2004              	.L93:
 2005              	 .align 2
 2006              	.L92:
 2007 0130 00F0FBAF 	 .word -1342443520
 2008 0134 FF00FFFF 	 .word -65281
 2009 0138 C0002006 	 .word 102760640
 2010 013c 4006A000 	 .word 10487360
 2011              	 .cfi_endproc
 2012              	.LFE137:
 2014              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 2015              	 .align 2
 2016              	 .global XMC_CAN_MO_UpdateData
 2017              	 .code 16
 2018              	 .thumb_func
 2020              	XMC_CAN_MO_UpdateData:
 2021              	.LFB138:
 666:../Libraries/XMCLib/src/xmc_can.c **** 
 667:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 668:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 669:../Libraries/XMCLib/src/xmc_can.c **** {
 2022              	 .loc 2 669 0
 2023              	 .cfi_startproc
 2024 0000 80B5     	 push {r7,lr}
 2025              	.LCFI66:
 2026              	 .cfi_def_cfa_offset 8
 2027              	 .cfi_offset 7,-8
 2028              	 .cfi_offset 14,-4
 2029 0002 84B0     	 sub sp,sp,#16
 2030              	.LCFI67:
 2031              	 .cfi_def_cfa_offset 24
 2032 0004 00AF     	 add r7,sp,#0
 2033              	.LCFI68:
 2034              	 .cfi_def_cfa_register 7
 2035 0006 7860     	 str r0,[r7,#4]
 670:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2036              	 .loc 2 670 0
 2037 0008 0F23     	 mov r3,#15
 2038 000a FB18     	 add r3,r7,r3
 2039 000c 0322     	 mov r2,#3
 2040 000e 1A70     	 strb r2,[r3]
 671:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 672:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 2041              	 .loc 2 672 0
 2042 0010 7B68     	 ldr r3,[r7,#4]
 2043 0012 1B7E     	 ldrb r3,[r3,#24]
 2044 0014 012B     	 cmp r3,#1
 2045 0016 25D1     	 bne .L95
 673:../Libraries/XMCLib/src/xmc_can.c ****   {
 674:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 2046              	 .loc 2 674 0
 2047 0018 7B68     	 ldr r3,[r7,#4]
 2048 001a 1B68     	 ldr r3,[r3]
 2049 001c 2022     	 mov r2,#32
 2050 001e DA61     	 str r2,[r3,#28]
 675:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 676:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 2051              	 .loc 2 676 0
 2052 0020 7B68     	 ldr r3,[r7,#4]
 2053 0022 1B68     	 ldr r3,[r3]
 2054 0024 7A68     	 ldr r2,[r7,#4]
 2055 0026 1268     	 ldr r2,[r2]
 2056 0028 1268     	 ldr r2,[r2]
 2057 002a 1449     	 ldr r1,.L98
 2058 002c 1140     	 and r1,r2
 677:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2059              	 .loc 2 677 0
 2060 002e 7A68     	 ldr r2,[r7,#4]
 2061 0030 127B     	 ldrb r2,[r2,#12]
 2062 0032 1006     	 lsl r0,r2,#24
 2063 0034 F022     	 mov r2,#240
 2064 0036 1205     	 lsl r2,r2,#20
 2065 0038 0240     	 and r2,r0
 676:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2066              	 .loc 2 676 0
 2067 003a 0A43     	 orr r2,r1
 2068 003c 1A60     	 str r2,[r3]
 678:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 679:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 2069              	 .loc 2 679 0
 2070 003e 7B68     	 ldr r3,[r7,#4]
 2071 0040 1B68     	 ldr r3,[r3]
 2072 0042 7A68     	 ldr r2,[r7,#4]
 2073 0044 1269     	 ldr r2,[r2,#16]
 2074 0046 1A61     	 str r2,[r3,#16]
 680:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 2075              	 .loc 2 680 0
 2076 0048 7B68     	 ldr r3,[r7,#4]
 2077 004a 1B68     	 ldr r3,[r3]
 2078 004c 7A68     	 ldr r2,[r7,#4]
 2079 004e 5269     	 ldr r2,[r2,#20]
 2080 0050 5A61     	 str r2,[r3,#20]
 681:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 682:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_M
 2081              	 .loc 2 682 0
 2082 0052 7B68     	 ldr r3,[r7,#4]
 2083 0054 1B68     	 ldr r3,[r3]
 2084 0056 0A4A     	 ldr r2,.L98+4
 2085 0058 DA61     	 str r2,[r3,#28]
 683:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2086              	 .loc 2 683 0
 2087 005a 0F23     	 mov r3,#15
 2088 005c FB18     	 add r3,r7,r3
 2089 005e 0022     	 mov r2,#0
 2090 0060 1A70     	 strb r2,[r3]
 2091 0062 03E0     	 b .L96
 2092              	.L95:
 684:../Libraries/XMCLib/src/xmc_can.c ****   }
 685:../Libraries/XMCLib/src/xmc_can.c ****   else
 686:../Libraries/XMCLib/src/xmc_can.c ****   {
 687:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2093              	 .loc 2 687 0
 2094 0064 0F23     	 mov r3,#15
 2095 0066 FB18     	 add r3,r7,r3
 2096 0068 0322     	 mov r2,#3
 2097 006a 1A70     	 strb r2,[r3]
 2098              	.L96:
 688:../Libraries/XMCLib/src/xmc_can.c ****   }
 689:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2099              	 .loc 2 689 0
 2100 006c 0F23     	 mov r3,#15
 2101 006e FB18     	 add r3,r7,r3
 2102 0070 1B78     	 ldrb r3,[r3]
 690:../Libraries/XMCLib/src/xmc_can.c **** }
 2103              	 .loc 2 690 0
 2104 0072 181C     	 mov r0,r3
 2105 0074 BD46     	 mov sp,r7
 2106 0076 04B0     	 add sp,sp,#16
 2107              	 
 2108 0078 80BD     	 pop {r7,pc}
 2109              	.L99:
 2110 007a C046     	 .align 2
 2111              	.L98:
 2112 007c FFFFFFF0 	 .word -251658241
 2113 0080 40002800 	 .word 2621504
 2114              	 .cfi_endproc
 2115              	.LFE138:
 2117              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 2118              	 .align 2
 2119              	 .global XMC_CAN_MO_Transmit
 2120              	 .code 16
 2121              	 .thumb_func
 2123              	XMC_CAN_MO_Transmit:
 2124              	.LFB139:
 691:../Libraries/XMCLib/src/xmc_can.c **** 
 692:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 693:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 694:../Libraries/XMCLib/src/xmc_can.c **** {
 2125              	 .loc 2 694 0
 2126              	 .cfi_startproc
 2127 0000 80B5     	 push {r7,lr}
 2128              	.LCFI69:
 2129              	 .cfi_def_cfa_offset 8
 2130              	 .cfi_offset 7,-8
 2131              	 .cfi_offset 14,-4
 2132 0002 86B0     	 sub sp,sp,#24
 2133              	.LCFI70:
 2134              	 .cfi_def_cfa_offset 32
 2135 0004 00AF     	 add r7,sp,#0
 2136              	.LCFI71:
 2137              	 .cfi_def_cfa_register 7
 2138 0006 7860     	 str r0,[r7,#4]
 695:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2139              	 .loc 2 695 0
 2140 0008 1723     	 mov r3,#23
 2141 000a FB18     	 add r3,r7,r3
 2142 000c 0122     	 mov r2,#1
 2143 000e 1A70     	 strb r2,[r3]
 696:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2144              	 .loc 2 696 0
 2145 0010 7B68     	 ldr r3,[r7,#4]
 2146 0012 1B68     	 ldr r3,[r3]
 2147 0014 DB69     	 ldr r3,[r3,#28]
 2148 0016 2022     	 mov r2,#32
 2149 0018 1340     	 and r3,r2
 2150 001a 5B09     	 lsr r3,r3,#5
 2151 001c 3B61     	 str r3,[r7,#16]
 697:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 2152              	 .loc 2 697 0
 2153 001e 7B68     	 ldr r3,[r7,#4]
 2154 0020 1B68     	 ldr r3,[r3]
 2155 0022 DA69     	 ldr r2,[r3,#28]
 2156 0024 8023     	 mov r3,#128
 2157 0026 5B00     	 lsl r3,r3,#1
 2158 0028 1340     	 and r3,r2
 2159 002a 1B0A     	 lsr r3,r3,#8
 2160 002c FB60     	 str r3,[r7,#12]
 698:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 699:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2161              	 .loc 2 699 0
 2162 002e 3B69     	 ldr r3,[r7,#16]
 2163 0030 002B     	 cmp r3,#0
 2164 0032 04D1     	 bne .L101
 700:../Libraries/XMCLib/src/xmc_can.c ****   {
 701:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2165              	 .loc 2 701 0
 2166 0034 1723     	 mov r3,#23
 2167 0036 FB18     	 add r3,r7,r3
 2168 0038 0422     	 mov r2,#4
 2169 003a 1A70     	 strb r2,[r3]
 2170 003c 10E0     	 b .L102
 2171              	.L101:
 702:../Libraries/XMCLib/src/xmc_can.c ****   }
 703:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 704:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2172              	 .loc 2 704 0
 2173 003e FB68     	 ldr r3,[r7,#12]
 2174 0040 012B     	 cmp r3,#1
 2175 0042 04D1     	 bne .L103
 705:../Libraries/XMCLib/src/xmc_can.c ****   {
 706:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2176              	 .loc 2 706 0
 2177 0044 1723     	 mov r3,#23
 2178 0046 FB18     	 add r3,r7,r3
 2179 0048 0222     	 mov r2,#2
 2180 004a 1A70     	 strb r2,[r3]
 2181 004c 08E0     	 b .L102
 2182              	.L103:
 707:../Libraries/XMCLib/src/xmc_can.c ****   }
 708:../Libraries/XMCLib/src/xmc_can.c ****   else
 709:../Libraries/XMCLib/src/xmc_can.c ****   {
 710:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 711:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 2183              	 .loc 2 711 0
 2184 004e 7B68     	 ldr r3,[r7,#4]
 2185 0050 1B68     	 ldr r3,[r3]
 2186 0052 E022     	 mov r2,#224
 2187 0054 D204     	 lsl r2,r2,#19
 2188 0056 DA61     	 str r2,[r3,#28]
 712:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2189              	 .loc 2 712 0
 2190 0058 1723     	 mov r3,#23
 2191 005a FB18     	 add r3,r7,r3
 2192 005c 0022     	 mov r2,#0
 2193 005e 1A70     	 strb r2,[r3]
 2194              	.L102:
 713:../Libraries/XMCLib/src/xmc_can.c ****   }
 714:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2195              	 .loc 2 714 0
 2196 0060 1723     	 mov r3,#23
 2197 0062 FB18     	 add r3,r7,r3
 2198 0064 1B78     	 ldrb r3,[r3]
 715:../Libraries/XMCLib/src/xmc_can.c **** }
 2199              	 .loc 2 715 0
 2200 0066 181C     	 mov r0,r3
 2201 0068 BD46     	 mov sp,r7
 2202 006a 06B0     	 add sp,sp,#24
 2203              	 
 2204 006c 80BD     	 pop {r7,pc}
 2205              	 .cfi_endproc
 2206              	.LFE139:
 2208 006e C046     	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 2209              	 .align 2
 2210              	 .global XMC_CAN_MO_ReceiveData
 2211              	 .code 16
 2212              	 .thumb_func
 2214              	XMC_CAN_MO_ReceiveData:
 2215              	.LFB140:
 716:../Libraries/XMCLib/src/xmc_can.c **** 
 717:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 718:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 719:../Libraries/XMCLib/src/xmc_can.c **** {
 2216              	 .loc 2 719 0
 2217              	 .cfi_startproc
 2218 0000 80B5     	 push {r7,lr}
 2219              	.LCFI72:
 2220              	 .cfi_def_cfa_offset 8
 2221              	 .cfi_offset 7,-8
 2222              	 .cfi_offset 14,-4
 2223 0002 86B0     	 sub sp,sp,#24
 2224              	.LCFI73:
 2225              	 .cfi_def_cfa_offset 32
 2226 0004 00AF     	 add r7,sp,#0
 2227              	.LCFI74:
 2228              	 .cfi_def_cfa_register 7
 2229 0006 7860     	 str r0,[r7,#4]
 720:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2230              	 .loc 2 720 0
 2231 0008 1723     	 mov r3,#23
 2232 000a FB18     	 add r3,r7,r3
 2233 000c 0122     	 mov r2,#1
 2234 000e 1A70     	 strb r2,[r3]
 721:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2235              	 .loc 2 721 0
 2236 0010 1623     	 mov r3,#22
 2237 0012 FB18     	 add r3,r7,r3
 2238 0014 0022     	 mov r2,#0
 2239 0016 1A70     	 strb r2,[r3]
 722:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2240              	 .loc 2 722 0
 2241 0018 1523     	 mov r3,#21
 2242 001a FB18     	 add r3,r7,r3
 2243 001c 0022     	 mov r2,#0
 2244 001e 1A70     	 strb r2,[r3]
 723:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2245              	 .loc 2 723 0
 2246 0020 7B68     	 ldr r3,[r7,#4]
 2247 0022 1B68     	 ldr r3,[r3]
 2248 0024 DA69     	 ldr r2,[r3,#28]
 2249 0026 8023     	 mov r3,#128
 2250 0028 1B01     	 lsl r3,r3,#4
 2251 002a 1340     	 and r3,r2
 2252 002c DB0A     	 lsr r3,r3,#11
 2253 002e 3B61     	 str r3,[r7,#16]
 724:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2254              	 .loc 2 724 0
 2255 0030 7B68     	 ldr r3,[r7,#4]
 2256 0032 1B68     	 ldr r3,[r3]
 2257 0034 DB69     	 ldr r3,[r3,#28]
 2258 0036 0422     	 mov r2,#4
 2259 0038 1340     	 and r3,r2
 2260 003a 9B08     	 lsr r3,r3,#2
 2261 003c FB60     	 str r3,[r7,#12]
 725:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 726:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2262              	 .loc 2 726 0
 2263 003e 3B69     	 ldr r3,[r7,#16]
 2264 0040 002B     	 cmp r3,#0
 2265 0042 04D0     	 beq .L106
 727:../Libraries/XMCLib/src/xmc_can.c ****   {
 728:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2266              	 .loc 2 728 0
 2267 0044 1723     	 mov r3,#23
 2268 0046 FB18     	 add r3,r7,r3
 2269 0048 0322     	 mov r2,#3
 2270 004a 1A70     	 strb r2,[r3]
 2271 004c 31E0     	 b .L107
 2272              	.L106:
 729:../Libraries/XMCLib/src/xmc_can.c ****   }
 730:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 731:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2273              	 .loc 2 731 0
 2274 004e FB68     	 ldr r3,[r7,#12]
 2275 0050 012B     	 cmp r3,#1
 2276 0052 04D1     	 bne .L108
 732:../Libraries/XMCLib/src/xmc_can.c ****   {
 733:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2277              	 .loc 2 733 0
 2278 0054 1723     	 mov r3,#23
 2279 0056 FB18     	 add r3,r7,r3
 2280 0058 0222     	 mov r2,#2
 2281 005a 1A70     	 strb r2,[r3]
 2282 005c 29E0     	 b .L107
 2283              	.L108:
 734:../Libraries/XMCLib/src/xmc_can.c ****   }
 735:../Libraries/XMCLib/src/xmc_can.c ****   else
 736:../Libraries/XMCLib/src/xmc_can.c ****   {
 737:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 738:../Libraries/XMCLib/src/xmc_can.c ****     do
 739:../Libraries/XMCLib/src/xmc_can.c ****     {
 740:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2284              	 .loc 2 740 0 discriminator 3
 2285 005e 7B68     	 ldr r3,[r7,#4]
 2286 0060 1B68     	 ldr r3,[r3]
 2287 0062 1A69     	 ldr r2,[r3,#16]
 2288 0064 7B68     	 ldr r3,[r7,#4]
 2289 0066 1A61     	 str r2,[r3,#16]
 741:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2290              	 .loc 2 741 0 discriminator 3
 2291 0068 7B68     	 ldr r3,[r7,#4]
 2292 006a 1B68     	 ldr r3,[r3]
 2293 006c 5A69     	 ldr r2,[r3,#20]
 2294 006e 7B68     	 ldr r3,[r7,#4]
 2295 0070 5A61     	 str r2,[r3,#20]
 742:../Libraries/XMCLib/src/xmc_can.c **** 
 743:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2296              	 .loc 2 743 0 discriminator 3
 2297 0072 7B68     	 ldr r3,[r7,#4]
 2298 0074 1B68     	 ldr r3,[r3]
 2299 0076 DB69     	 ldr r3,[r3,#28]
 2300 0078 0422     	 mov r2,#4
 2301 007a 1340     	 and r3,r2
 2302 007c 9A08     	 lsr r2,r3,#2
 2303 007e 1623     	 mov r3,#22
 2304 0080 FB18     	 add r3,r7,r3
 2305 0082 1A70     	 strb r2,[r3]
 744:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2306              	 .loc 2 744 0 discriminator 3
 2307 0084 7B68     	 ldr r3,[r7,#4]
 2308 0086 1B68     	 ldr r3,[r3]
 2309 0088 DB69     	 ldr r3,[r3,#28]
 2310 008a 0822     	 mov r2,#8
 2311 008c 1340     	 and r3,r2
 2312 008e DA08     	 lsr r2,r3,#3
 2313 0090 1523     	 mov r3,#21
 2314 0092 FB18     	 add r3,r7,r3
 2315 0094 1A70     	 strb r2,[r3]
 745:../Libraries/XMCLib/src/xmc_can.c ****     }
 746:../Libraries/XMCLib/src/xmc_can.c ****     while ((rx_pnd != 0U) || (new_data != 0U));
 2316              	 .loc 2 746 0 discriminator 3
 2317 0096 1623     	 mov r3,#22
 2318 0098 FB18     	 add r3,r7,r3
 2319 009a 1B78     	 ldrb r3,[r3]
 2320 009c 002B     	 cmp r3,#0
 2321 009e DED1     	 bne .L108
 2322              	 .loc 2 746 0 is_stmt 0 discriminator 2
 2323 00a0 1523     	 mov r3,#21
 2324 00a2 FB18     	 add r3,r7,r3
 2325 00a4 1B78     	 ldrb r3,[r3]
 2326 00a6 002B     	 cmp r3,#0
 2327 00a8 D9D1     	 bne .L108
 747:../Libraries/XMCLib/src/xmc_can.c **** 
 748:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2328              	 .loc 2 748 0 is_stmt 1
 2329 00aa 1723     	 mov r3,#23
 2330 00ac FB18     	 add r3,r7,r3
 2331 00ae 0022     	 mov r2,#0
 2332 00b0 1A70     	 strb r2,[r3]
 2333              	.L107:
 749:../Libraries/XMCLib/src/xmc_can.c ****   }
 750:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2334              	 .loc 2 750 0
 2335 00b2 1723     	 mov r3,#23
 2336 00b4 FB18     	 add r3,r7,r3
 2337 00b6 1B78     	 ldrb r3,[r3]
 751:../Libraries/XMCLib/src/xmc_can.c **** }
 2338              	 .loc 2 751 0
 2339 00b8 181C     	 mov r0,r3
 2340 00ba BD46     	 mov sp,r7
 2341 00bc 06B0     	 add sp,sp,#24
 2342              	 
 2343 00be 80BD     	 pop {r7,pc}
 2344              	 .cfi_endproc
 2345              	.LFE140:
 2347              	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 2348              	 .align 2
 2349              	 .global XMC_CAN_MO_Receive
 2350              	 .code 16
 2351              	 .thumb_func
 2353              	XMC_CAN_MO_Receive:
 2354              	.LFB141:
 752:../Libraries/XMCLib/src/xmc_can.c **** 
 753:../Libraries/XMCLib/src/xmc_can.c **** 
 754:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 755:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 756:../Libraries/XMCLib/src/xmc_can.c **** {
 2355              	 .loc 2 756 0
 2356              	 .cfi_startproc
 2357 0000 80B5     	 push {r7,lr}
 2358              	.LCFI75:
 2359              	 .cfi_def_cfa_offset 8
 2360              	 .cfi_offset 7,-8
 2361              	 .cfi_offset 14,-4
 2362 0002 86B0     	 sub sp,sp,#24
 2363              	.LCFI76:
 2364              	 .cfi_def_cfa_offset 32
 2365 0004 00AF     	 add r7,sp,#0
 2366              	.LCFI77:
 2367              	 .cfi_def_cfa_register 7
 2368 0006 7860     	 str r0,[r7,#4]
 757:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2369              	 .loc 2 757 0
 2370 0008 1723     	 mov r3,#23
 2371 000a FB18     	 add r3,r7,r3
 2372 000c 0122     	 mov r2,#1
 2373 000e 1A70     	 strb r2,[r3]
 758:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2374              	 .loc 2 758 0
 2375 0010 1623     	 mov r3,#22
 2376 0012 FB18     	 add r3,r7,r3
 2377 0014 0022     	 mov r2,#0
 2378 0016 1A70     	 strb r2,[r3]
 759:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2379              	 .loc 2 759 0
 2380 0018 1523     	 mov r3,#21
 2381 001a FB18     	 add r3,r7,r3
 2382 001c 0022     	 mov r2,#0
 2383 001e 1A70     	 strb r2,[r3]
 760:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2384              	 .loc 2 760 0
 2385 0020 7B68     	 ldr r3,[r7,#4]
 2386 0022 1B68     	 ldr r3,[r3]
 2387 0024 DA69     	 ldr r2,[r3,#28]
 2388 0026 8023     	 mov r3,#128
 2389 0028 1B01     	 lsl r3,r3,#4
 2390 002a 1340     	 and r3,r2
 2391 002c DB0A     	 lsr r3,r3,#11
 2392 002e 3B61     	 str r3,[r7,#16]
 761:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2393              	 .loc 2 761 0
 2394 0030 7B68     	 ldr r3,[r7,#4]
 2395 0032 1B68     	 ldr r3,[r3]
 2396 0034 DB69     	 ldr r3,[r3,#28]
 2397 0036 0422     	 mov r2,#4
 2398 0038 1340     	 and r3,r2
 2399 003a 9B08     	 lsr r3,r3,#2
 2400 003c FB60     	 str r3,[r7,#12]
 762:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 763:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2401              	 .loc 2 763 0
 2402 003e 3B69     	 ldr r3,[r7,#16]
 2403 0040 002B     	 cmp r3,#0
 2404 0042 04D0     	 beq .L111
 764:../Libraries/XMCLib/src/xmc_can.c ****   {
 765:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2405              	 .loc 2 765 0
 2406 0044 1723     	 mov r3,#23
 2407 0046 FB18     	 add r3,r7,r3
 2408 0048 0322     	 mov r2,#3
 2409 004a 1A70     	 strb r2,[r3]
 2410 004c D3E0     	 b .L112
 2411              	.L111:
 766:../Libraries/XMCLib/src/xmc_can.c ****   }
 767:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 768:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2412              	 .loc 2 768 0
 2413 004e FB68     	 ldr r3,[r7,#12]
 2414 0050 012B     	 cmp r3,#1
 2415 0052 04D1     	 bne .L113
 769:../Libraries/XMCLib/src/xmc_can.c ****   {
 770:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2416              	 .loc 2 770 0
 2417 0054 1723     	 mov r3,#23
 2418 0056 FB18     	 add r3,r7,r3
 2419 0058 0222     	 mov r2,#2
 2420 005a 1A70     	 strb r2,[r3]
 2421 005c CBE0     	 b .L112
 2422              	.L113:
 771:../Libraries/XMCLib/src/xmc_can.c ****   }
 772:../Libraries/XMCLib/src/xmc_can.c ****   else
 773:../Libraries/XMCLib/src/xmc_can.c ****   {
 774:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 775:../Libraries/XMCLib/src/xmc_can.c ****     do
 776:../Libraries/XMCLib/src/xmc_can.c ****     {
 777:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 2423              	 .loc 2 777 0
 2424 005e 7B68     	 ldr r3,[r7,#4]
 2425 0060 1B68     	 ldr r3,[r3]
 2426 0062 0822     	 mov r2,#8
 2427 0064 DA61     	 str r2,[r3,#28]
 778:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 2428              	 .loc 2 778 0
 2429 0066 7B68     	 ldr r3,[r7,#4]
 2430 0068 1B68     	 ldr r3,[r3]
 2431 006a 9A69     	 ldr r2,[r3,#24]
 2432 006c 8023     	 mov r3,#128
 2433 006e 9B05     	 lsl r3,r3,#22
 2434 0070 1340     	 and r3,r2
 2435 0072 5B0F     	 lsr r3,r3,#29
 2436 0074 51D1     	 bne .L114
 779:../Libraries/XMCLib/src/xmc_can.c ****       {
 780:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 2437              	 .loc 2 780 0
 2438 0076 7B68     	 ldr r3,[r7,#4]
 2439 0078 DA79     	 ldrb r2,[r3,#7]
 2440 007a 2021     	 mov r1,#32
 2441 007c 8A43     	 bic r2,r1
 2442 007e DA71     	 strb r2,[r3,#7]
 781:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 2443              	 .loc 2 781 0
 2444 0080 7B68     	 ldr r3,[r7,#4]
 2445 0082 1B68     	 ldr r3,[r3]
 2446 0084 9B69     	 ldr r3,[r3,#24]
 2447 0086 5F4A     	 ldr r2,.L120
 2448 0088 1340     	 and r3,r2
 2449 008a 9B0C     	 lsr r3,r3,#18
 2450 008c DB00     	 lsl r3,r3,#3
 2451 008e DA08     	 lsr r2,r3,#3
 2452 0090 7B68     	 ldr r3,[r7,#4]
 2453 0092 D200     	 lsl r2,r2,#3
 2454 0094 D208     	 lsr r2,r2,#3
 2455 0096 5968     	 ldr r1,[r3,#4]
 2456 0098 490F     	 lsr r1,r1,#29
 2457 009a 4907     	 lsl r1,r1,#29
 2458 009c 0A43     	 orr r2,r1
 2459 009e 5A60     	 str r2,[r3,#4]
 782:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2460              	 .loc 2 782 0
 2461 00a0 7B68     	 ldr r3,[r7,#4]
 2462 00a2 1B68     	 ldr r3,[r3]
 2463 00a4 DA68     	 ldr r2,[r3,#12]
 2464 00a6 8023     	 mov r3,#128
 2465 00a8 9B05     	 lsl r3,r3,#22
 2466 00aa 1340     	 and r3,r2
 2467 00ac 5B0F     	 lsr r3,r3,#29
 2468 00ae DBB2     	 uxtb r3,r3
 2469 00b0 1A1C     	 add r2,r3,#0
 2470 00b2 0123     	 mov r3,#1
 2471 00b4 1340     	 and r3,r2
 2472 00b6 DAB2     	 uxtb r2,r3
 2473 00b8 7B68     	 ldr r3,[r7,#4]
 2474 00ba 0121     	 mov r1,#1
 2475 00bc 0A40     	 and r2,r1
 2476 00be 5001     	 lsl r0,r2,#5
 2477 00c0 DA7A     	 ldrb r2,[r3,#11]
 2478 00c2 2021     	 mov r1,#32
 2479 00c4 8A43     	 bic r2,r1
 2480 00c6 111C     	 add r1,r2,#0
 2481 00c8 021C     	 add r2,r0,#0
 2482 00ca 0A43     	 orr r2,r1
 2483 00cc DA72     	 strb r2,[r3,#11]
 783:../Libraries/XMCLib/src/xmc_can.c ****         if (can_mo->can_ide_mask == 1U)
 2484              	 .loc 2 783 0
 2485 00ce 7B68     	 ldr r3,[r7,#4]
 2486 00d0 DB7A     	 ldrb r3,[r3,#11]
 2487 00d2 2022     	 mov r2,#32
 2488 00d4 1340     	 and r3,r2
 2489 00d6 DBB2     	 uxtb r3,r3
 2490 00d8 002B     	 cmp r3,#0
 2491 00da 10D0     	 beq .L115
 784:../Libraries/XMCLib/src/xmc_can.c ****         {
 785:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 2492              	 .loc 2 785 0
 2493 00dc 7B68     	 ldr r3,[r7,#4]
 2494 00de 1B68     	 ldr r3,[r3]
 2495 00e0 DB68     	 ldr r3,[r3,#12]
 2496 00e2 484A     	 ldr r2,.L120
 2497 00e4 1340     	 and r3,r2
 2498 00e6 9B0C     	 lsr r3,r3,#18
 2499 00e8 DB00     	 lsl r3,r3,#3
 2500 00ea DA08     	 lsr r2,r3,#3
 2501 00ec 7B68     	 ldr r3,[r7,#4]
 2502 00ee D200     	 lsl r2,r2,#3
 2503 00f0 D208     	 lsr r2,r2,#3
 2504 00f2 9968     	 ldr r1,[r3,#8]
 2505 00f4 490F     	 lsr r1,r1,#29
 2506 00f6 4907     	 lsl r1,r1,#29
 2507 00f8 0A43     	 orr r2,r1
 2508 00fa 9A60     	 str r2,[r3,#8]
 2509 00fc 43E0     	 b .L117
 2510              	.L115:
 786:../Libraries/XMCLib/src/xmc_can.c ****         }
 787:../Libraries/XMCLib/src/xmc_can.c ****         else
 788:../Libraries/XMCLib/src/xmc_can.c ****         {
 789:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2511              	 .loc 2 789 0
 2512 00fe 7B68     	 ldr r3,[r7,#4]
 2513 0100 1B68     	 ldr r3,[r3]
 2514 0102 DB68     	 ldr r3,[r3,#12]
 2515 0104 DB00     	 lsl r3,r3,#3
 2516 0106 DA08     	 lsr r2,r3,#3
 2517 0108 7B68     	 ldr r3,[r7,#4]
 2518 010a D200     	 lsl r2,r2,#3
 2519 010c D208     	 lsr r2,r2,#3
 2520 010e 9968     	 ldr r1,[r3,#8]
 2521 0110 490F     	 lsr r1,r1,#29
 2522 0112 4907     	 lsl r1,r1,#29
 2523 0114 0A43     	 orr r2,r1
 2524 0116 9A60     	 str r2,[r3,#8]
 2525 0118 35E0     	 b .L117
 2526              	.L114:
 790:../Libraries/XMCLib/src/xmc_can.c ****         }
 791:../Libraries/XMCLib/src/xmc_can.c ****       }
 792:../Libraries/XMCLib/src/xmc_can.c ****       else
 793:../Libraries/XMCLib/src/xmc_can.c ****       {
 794:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 2527              	 .loc 2 794 0
 2528 011a 7B68     	 ldr r3,[r7,#4]
 2529 011c DA79     	 ldrb r2,[r3,#7]
 2530 011e 2021     	 mov r1,#32
 2531 0120 0A43     	 orr r2,r1
 2532 0122 DA71     	 strb r2,[r3,#7]
 795:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 2533              	 .loc 2 795 0
 2534 0124 7B68     	 ldr r3,[r7,#4]
 2535 0126 1B68     	 ldr r3,[r3]
 2536 0128 9B69     	 ldr r3,[r3,#24]
 2537 012a DB00     	 lsl r3,r3,#3
 2538 012c DA08     	 lsr r2,r3,#3
 2539 012e 7B68     	 ldr r3,[r7,#4]
 2540 0130 D200     	 lsl r2,r2,#3
 2541 0132 D208     	 lsr r2,r2,#3
 2542 0134 5968     	 ldr r1,[r3,#4]
 2543 0136 490F     	 lsr r1,r1,#29
 2544 0138 4907     	 lsl r1,r1,#29
 2545 013a 0A43     	 orr r2,r1
 2546 013c 5A60     	 str r2,[r3,#4]
 796:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2547              	 .loc 2 796 0
 2548 013e 7B68     	 ldr r3,[r7,#4]
 2549 0140 1B68     	 ldr r3,[r3]
 2550 0142 DB68     	 ldr r3,[r3,#12]
 2551 0144 DB00     	 lsl r3,r3,#3
 2552 0146 DA08     	 lsr r2,r3,#3
 2553 0148 7B68     	 ldr r3,[r7,#4]
 2554 014a D200     	 lsl r2,r2,#3
 2555 014c D208     	 lsr r2,r2,#3
 2556 014e 9968     	 ldr r1,[r3,#8]
 2557 0150 490F     	 lsr r1,r1,#29
 2558 0152 4907     	 lsl r1,r1,#29
 2559 0154 0A43     	 orr r2,r1
 2560 0156 9A60     	 str r2,[r3,#8]
 797:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2561              	 .loc 2 797 0
 2562 0158 7B68     	 ldr r3,[r7,#4]
 2563 015a 1B68     	 ldr r3,[r3]
 2564 015c DA68     	 ldr r2,[r3,#12]
 2565 015e 8023     	 mov r3,#128
 2566 0160 9B05     	 lsl r3,r3,#22
 2567 0162 1340     	 and r3,r2
 2568 0164 5B0F     	 lsr r3,r3,#29
 2569 0166 DBB2     	 uxtb r3,r3
 2570 0168 1A1C     	 add r2,r3,#0
 2571 016a 0123     	 mov r3,#1
 2572 016c 1340     	 and r3,r2
 2573 016e DAB2     	 uxtb r2,r3
 2574 0170 7B68     	 ldr r3,[r7,#4]
 2575 0172 0121     	 mov r1,#1
 2576 0174 0A40     	 and r2,r1
 2577 0176 5001     	 lsl r0,r2,#5
 2578 0178 DA7A     	 ldrb r2,[r3,#11]
 2579 017a 2021     	 mov r1,#32
 2580 017c 8A43     	 bic r2,r1
 2581 017e 111C     	 add r1,r2,#0
 2582 0180 021C     	 add r2,r0,#0
 2583 0182 0A43     	 orr r2,r1
 2584 0184 DA72     	 strb r2,[r3,#11]
 2585              	.L117:
 798:../Libraries/XMCLib/src/xmc_can.c ****       }
 799:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 2586              	 .loc 2 799 0
 2587 0186 7B68     	 ldr r3,[r7,#4]
 2588 0188 1B68     	 ldr r3,[r3]
 2589 018a 1A68     	 ldr r2,[r3]
 2590 018c F023     	 mov r3,#240
 2591 018e 1B05     	 lsl r3,r3,#20
 2592 0190 1340     	 and r3,r2
 2593 0192 1B0E     	 lsr r3,r3,#24
 2594 0194 DAB2     	 uxtb r2,r3
 2595 0196 7B68     	 ldr r3,[r7,#4]
 2596 0198 1A73     	 strb r2,[r3,#12]
 800:../Libraries/XMCLib/src/xmc_can.c **** 
 801:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2597              	 .loc 2 801 0
 2598 019a 7B68     	 ldr r3,[r7,#4]
 2599 019c 1B68     	 ldr r3,[r3]
 2600 019e 1A69     	 ldr r2,[r3,#16]
 2601 01a0 7B68     	 ldr r3,[r7,#4]
 2602 01a2 1A61     	 str r2,[r3,#16]
 802:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2603              	 .loc 2 802 0
 2604 01a4 7B68     	 ldr r3,[r7,#4]
 2605 01a6 1B68     	 ldr r3,[r3]
 2606 01a8 5A69     	 ldr r2,[r3,#20]
 2607 01aa 7B68     	 ldr r3,[r7,#4]
 2608 01ac 5A61     	 str r2,[r3,#20]
 803:../Libraries/XMCLib/src/xmc_can.c **** 
 804:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2609              	 .loc 2 804 0
 2610 01ae 7B68     	 ldr r3,[r7,#4]
 2611 01b0 1B68     	 ldr r3,[r3]
 2612 01b2 DB69     	 ldr r3,[r3,#28]
 2613 01b4 0422     	 mov r2,#4
 2614 01b6 1340     	 and r3,r2
 2615 01b8 9A08     	 lsr r2,r3,#2
 2616 01ba 1623     	 mov r3,#22
 2617 01bc FB18     	 add r3,r7,r3
 2618 01be 1A70     	 strb r2,[r3]
 805:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2619              	 .loc 2 805 0
 2620 01c0 7B68     	 ldr r3,[r7,#4]
 2621 01c2 1B68     	 ldr r3,[r3]
 2622 01c4 DB69     	 ldr r3,[r3,#28]
 2623 01c6 0822     	 mov r2,#8
 2624 01c8 1340     	 and r3,r2
 2625 01ca DA08     	 lsr r2,r3,#3
 2626 01cc 1523     	 mov r3,#21
 2627 01ce FB18     	 add r3,r7,r3
 2628 01d0 1A70     	 strb r2,[r3]
 806:../Libraries/XMCLib/src/xmc_can.c ****     }
 807:../Libraries/XMCLib/src/xmc_can.c ****     while ((rx_pnd != 0U) && (new_data != 0U));
 2629              	 .loc 2 807 0
 2630 01d2 1623     	 mov r3,#22
 2631 01d4 FB18     	 add r3,r7,r3
 2632 01d6 1B78     	 ldrb r3,[r3]
 2633 01d8 002B     	 cmp r3,#0
 2634 01da 05D0     	 beq .L118
 2635              	 .loc 2 807 0 is_stmt 0 discriminator 1
 2636 01dc 1523     	 mov r3,#21
 2637 01de FB18     	 add r3,r7,r3
 2638 01e0 1B78     	 ldrb r3,[r3]
 2639 01e2 002B     	 cmp r3,#0
 2640 01e4 00D0     	 beq .LCB2359
 2641 01e6 3AE7     	 b .L113
 2642              	.LCB2359:
 2643              	.L118:
 808:../Libraries/XMCLib/src/xmc_can.c **** 
 809:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 2644              	 .loc 2 809 0 is_stmt 1
 2645 01e8 7B68     	 ldr r3,[r7,#4]
 2646 01ea 0022     	 mov r2,#0
 2647 01ec 1A76     	 strb r2,[r3,#24]
 810:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2648              	 .loc 2 810 0
 2649 01ee 1723     	 mov r3,#23
 2650 01f0 FB18     	 add r3,r7,r3
 2651 01f2 0022     	 mov r2,#0
 2652 01f4 1A70     	 strb r2,[r3]
 2653              	.L112:
 811:../Libraries/XMCLib/src/xmc_can.c ****   }
 812:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2654              	 .loc 2 812 0
 2655 01f6 1723     	 mov r3,#23
 2656 01f8 FB18     	 add r3,r7,r3
 2657 01fa 1B78     	 ldrb r3,[r3]
 813:../Libraries/XMCLib/src/xmc_can.c **** }
 2658              	 .loc 2 813 0
 2659 01fc 181C     	 mov r0,r3
 2660 01fe BD46     	 mov sp,r7
 2661 0200 06B0     	 add sp,sp,#24
 2662              	 
 2663 0202 80BD     	 pop {r7,pc}
 2664              	.L121:
 2665              	 .align 2
 2666              	.L120:
 2667 0204 0000FC1F 	 .word 536608768
 2668              	 .cfi_endproc
 2669              	.LFE141:
 2671              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 2672              	 .align 2
 2673              	 .global XMC_CAN_NODE_EnableEvent
 2674              	 .code 16
 2675              	 .thumb_func
 2677              	XMC_CAN_NODE_EnableEvent:
 2678              	.LFB142:
 814:../Libraries/XMCLib/src/xmc_can.c **** 
 815:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 816:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 817:../Libraries/XMCLib/src/xmc_can.c **** {
 2679              	 .loc 2 817 0
 2680              	 .cfi_startproc
 2681 0000 80B5     	 push {r7,lr}
 2682              	.LCFI78:
 2683              	 .cfi_def_cfa_offset 8
 2684              	 .cfi_offset 7,-8
 2685              	 .cfi_offset 14,-4
 2686 0002 82B0     	 sub sp,sp,#8
 2687              	.LCFI79:
 2688              	 .cfi_def_cfa_offset 16
 2689 0004 00AF     	 add r7,sp,#0
 2690              	.LCFI80:
 2691              	 .cfi_def_cfa_register 7
 2692 0006 7860     	 str r0,[r7,#4]
 2693 0008 3960     	 str r1,[r7]
 818:../Libraries/XMCLib/src/xmc_can.c ****   if (event != XMC_CAN_NODE_EVENT_CFCIE)
 2694              	 .loc 2 818 0
 2695 000a 3A68     	 ldr r2,[r7]
 2696 000c 8023     	 mov r3,#128
 2697 000e DB03     	 lsl r3,r3,#15
 2698 0010 9A42     	 cmp r2,r3
 2699 0012 06D0     	 beq .L123
 819:../Libraries/XMCLib/src/xmc_can.c ****   {
 820:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 2700              	 .loc 2 820 0
 2701 0014 7B68     	 ldr r3,[r7,#4]
 2702 0016 1A68     	 ldr r2,[r3]
 2703 0018 3B68     	 ldr r3,[r7]
 2704 001a 1A43     	 orr r2,r3
 2705 001c 7B68     	 ldr r3,[r7,#4]
 2706 001e 1A60     	 str r2,[r3]
 2707 0020 05E0     	 b .L122
 2708              	.L123:
 821:../Libraries/XMCLib/src/xmc_can.c ****   }
 822:../Libraries/XMCLib/src/xmc_can.c ****   else
 823:../Libraries/XMCLib/src/xmc_can.c ****   {
 824:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 2709              	 .loc 2 824 0
 2710 0022 7B68     	 ldr r3,[r7,#4]
 2711 0024 9A69     	 ldr r2,[r3,#24]
 2712 0026 3B68     	 ldr r3,[r7]
 2713 0028 1A43     	 orr r2,r3
 2714 002a 7B68     	 ldr r3,[r7,#4]
 2715 002c 9A61     	 str r2,[r3,#24]
 2716              	.L122:
 825:../Libraries/XMCLib/src/xmc_can.c ****   }
 826:../Libraries/XMCLib/src/xmc_can.c **** }
 2717              	 .loc 2 826 0
 2718 002e BD46     	 mov sp,r7
 2719 0030 02B0     	 add sp,sp,#8
 2720              	 
 2721 0032 80BD     	 pop {r7,pc}
 2722              	 .cfi_endproc
 2723              	.LFE142:
 2725              	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2726              	 .align 2
 2727              	 .global XMC_CAN_NODE_DisableEvent
 2728              	 .code 16
 2729              	 .thumb_func
 2731              	XMC_CAN_NODE_DisableEvent:
 2732              	.LFB143:
 827:../Libraries/XMCLib/src/xmc_can.c **** 
 828:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 829:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 830:../Libraries/XMCLib/src/xmc_can.c **** {
 2733              	 .loc 2 830 0
 2734              	 .cfi_startproc
 2735 0000 80B5     	 push {r7,lr}
 2736              	.LCFI81:
 2737              	 .cfi_def_cfa_offset 8
 2738              	 .cfi_offset 7,-8
 2739              	 .cfi_offset 14,-4
 2740 0002 82B0     	 sub sp,sp,#8
 2741              	.LCFI82:
 2742              	 .cfi_def_cfa_offset 16
 2743 0004 00AF     	 add r7,sp,#0
 2744              	.LCFI83:
 2745              	 .cfi_def_cfa_register 7
 2746 0006 7860     	 str r0,[r7,#4]
 2747 0008 3960     	 str r1,[r7]
 831:../Libraries/XMCLib/src/xmc_can.c ****   if (event != XMC_CAN_NODE_EVENT_CFCIE)
 2748              	 .loc 2 831 0
 2749 000a 3A68     	 ldr r2,[r7]
 2750 000c 8023     	 mov r3,#128
 2751 000e DB03     	 lsl r3,r3,#15
 2752 0010 9A42     	 cmp r2,r3
 2753 0012 07D0     	 beq .L126
 832:../Libraries/XMCLib/src/xmc_can.c ****   {
 833:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2754              	 .loc 2 833 0
 2755 0014 7B68     	 ldr r3,[r7,#4]
 2756 0016 1B68     	 ldr r3,[r3]
 2757 0018 3A68     	 ldr r2,[r7]
 2758 001a D243     	 mvn r2,r2
 2759 001c 1A40     	 and r2,r3
 2760 001e 7B68     	 ldr r3,[r7,#4]
 2761 0020 1A60     	 str r2,[r3]
 2762 0022 06E0     	 b .L125
 2763              	.L126:
 834:../Libraries/XMCLib/src/xmc_can.c ****   }
 835:../Libraries/XMCLib/src/xmc_can.c ****   else
 836:../Libraries/XMCLib/src/xmc_can.c ****   {
 837:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2764              	 .loc 2 837 0
 2765 0024 7B68     	 ldr r3,[r7,#4]
 2766 0026 9B69     	 ldr r3,[r3,#24]
 2767 0028 3A68     	 ldr r2,[r7]
 2768 002a D243     	 mvn r2,r2
 2769 002c 1A40     	 and r2,r3
 2770 002e 7B68     	 ldr r3,[r7,#4]
 2771 0030 9A61     	 str r2,[r3,#24]
 2772              	.L125:
 838:../Libraries/XMCLib/src/xmc_can.c ****   }
 839:../Libraries/XMCLib/src/xmc_can.c **** }
 2773              	 .loc 2 839 0
 2774 0032 BD46     	 mov sp,r7
 2775 0034 02B0     	 add sp,sp,#8
 2776              	 
 2777 0036 80BD     	 pop {r7,pc}
 2778              	 .cfi_endproc
 2779              	.LFE143:
 2781              	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2782              	 .align 2
 2783              	 .global XMC_CAN_TXFIFO_Transmit
 2784              	 .code 16
 2785              	 .thumb_func
 2787              	XMC_CAN_TXFIFO_Transmit:
 2788              	.LFB144:
 840:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 841:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 842:../Libraries/XMCLib/src/xmc_can.c **** {
 2789              	 .loc 2 842 0
 2790              	 .cfi_startproc
 2791 0000 80B5     	 push {r7,lr}
 2792              	.LCFI84:
 2793              	 .cfi_def_cfa_offset 8
 2794              	 .cfi_offset 7,-8
 2795              	 .cfi_offset 14,-4
 2796 0002 88B0     	 sub sp,sp,#32
 2797              	.LCFI85:
 2798              	 .cfi_def_cfa_offset 40
 2799 0004 00AF     	 add r7,sp,#0
 2800              	.LCFI86:
 2801              	 .cfi_def_cfa_register 7
 2802 0006 7860     	 str r0,[r7,#4]
 843:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2803              	 .loc 2 843 0
 2804 0008 1F23     	 mov r3,#31
 2805 000a FB18     	 add r3,r7,r3
 2806 000c 0122     	 mov r2,#1
 2807 000e 1A70     	 strb r2,[r3]
 844:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2808              	 .loc 2 844 0
 2809 0010 7B68     	 ldr r3,[r7,#4]
 2810 0012 1B68     	 ldr r3,[r3]
 2811 0014 DB69     	 ldr r3,[r3,#28]
 2812 0016 2022     	 mov r2,#32
 2813 0018 1340     	 and r3,r2
 2814 001a 5B09     	 lsr r3,r3,#5
 2815 001c BB61     	 str r3,[r7,#24]
 845:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2816              	 .loc 2 845 0
 2817 001e 7B68     	 ldr r3,[r7,#4]
 2818 0020 1B68     	 ldr r3,[r3]
 2819 0022 DA69     	 ldr r2,[r3,#28]
 2820 0024 8023     	 mov r3,#128
 2821 0026 5B00     	 lsl r3,r3,#1
 2822 0028 1340     	 and r3,r2
 2823 002a 1B0A     	 lsr r3,r3,#8
 2824 002c 7B61     	 str r3,[r7,#20]
 846:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2825              	 .loc 2 846 0
 2826 002e 7B68     	 ldr r3,[r7,#4]
 2827 0030 1B68     	 ldr r3,[r3]
 2828 0032 5A68     	 ldr r2,[r3,#4]
 2829 0034 FF23     	 mov r3,#255
 2830 0036 1B04     	 lsl r3,r3,#16
 2831 0038 1340     	 and r3,r2
 2832 003a 1B0C     	 lsr r3,r3,#16
 2833 003c 3B61     	 str r3,[r7,#16]
 847:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef  *mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2834              	 .loc 2 847 0
 2835 003e 3B69     	 ldr r3,[r7,#16]
 2836 0040 114A     	 ldr r2,.L133
 2837 0042 9446     	 mov ip,r2
 2838 0044 6344     	 add r3,r3,ip
 2839 0046 5B01     	 lsl r3,r3,#5
 2840 0048 FB60     	 str r3,[r7,#12]
 848:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 849:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2841              	 .loc 2 849 0
 2842 004a BB69     	 ldr r3,[r7,#24]
 2843 004c 002B     	 cmp r3,#0
 2844 004e 04D1     	 bne .L129
 850:../Libraries/XMCLib/src/xmc_can.c ****   {
 851:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2845              	 .loc 2 851 0
 2846 0050 1F23     	 mov r3,#31
 2847 0052 FB18     	 add r3,r7,r3
 2848 0054 0422     	 mov r2,#4
 2849 0056 1A70     	 strb r2,[r3]
 2850 0058 0FE0     	 b .L130
 2851              	.L129:
 852:../Libraries/XMCLib/src/xmc_can.c ****   }
 853:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 854:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2852              	 .loc 2 854 0
 2853 005a 7B69     	 ldr r3,[r7,#20]
 2854 005c 012B     	 cmp r3,#1
 2855 005e 04D1     	 bne .L131
 855:../Libraries/XMCLib/src/xmc_can.c ****   {
 856:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2856              	 .loc 2 856 0
 2857 0060 1F23     	 mov r3,#31
 2858 0062 FB18     	 add r3,r7,r3
 2859 0064 0222     	 mov r2,#2
 2860 0066 1A70     	 strb r2,[r3]
 2861 0068 07E0     	 b .L130
 2862              	.L131:
 857:../Libraries/XMCLib/src/xmc_can.c ****   }
 858:../Libraries/XMCLib/src/xmc_can.c ****   else
 859:../Libraries/XMCLib/src/xmc_can.c ****   {
 860:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2863              	 .loc 2 860 0
 2864 006a FB68     	 ldr r3,[r7,#12]
 2865 006c E022     	 mov r2,#224
 2866 006e D204     	 lsl r2,r2,#19
 2867 0070 DA61     	 str r2,[r3,#28]
 861:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2868              	 .loc 2 861 0
 2869 0072 1F23     	 mov r3,#31
 2870 0074 FB18     	 add r3,r7,r3
 2871 0076 0022     	 mov r2,#0
 2872 0078 1A70     	 strb r2,[r3]
 2873              	.L130:
 862:../Libraries/XMCLib/src/xmc_can.c ****   }
 863:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2874              	 .loc 2 863 0
 2875 007a 1F23     	 mov r3,#31
 2876 007c FB18     	 add r3,r7,r3
 2877 007e 1B78     	 ldrb r3,[r3]
 864:../Libraries/XMCLib/src/xmc_can.c **** }
 2878              	 .loc 2 864 0
 2879 0080 181C     	 mov r0,r3
 2880 0082 BD46     	 mov sp,r7
 2881 0084 08B0     	 add sp,sp,#32
 2882              	 
 2883 0086 80BD     	 pop {r7,pc}
 2884              	.L134:
 2885              	 .align 2
 2886              	.L133:
 2887 0088 80208002 	 .word 41951360
 2888              	 .cfi_endproc
 2889              	.LFE144:
 2891              	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 2892              	 .align 2
 2893              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 2894              	 .code 16
 2895              	 .thumb_func
 2897              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 2898              	.LFB145:
 865:../Libraries/XMCLib/src/xmc_can.c **** 
 866:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 867:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo, const XMC_CAN_FIFO_CONFIG_
 868:../Libraries/XMCLib/src/xmc_can.c **** {
 2899              	 .loc 2 868 0
 2900              	 .cfi_startproc
 2901 0000 80B5     	 push {r7,lr}
 2902              	.LCFI87:
 2903              	 .cfi_def_cfa_offset 8
 2904              	 .cfi_offset 7,-8
 2905              	 .cfi_offset 14,-4
 2906 0002 82B0     	 sub sp,sp,#8
 2907              	.LCFI88:
 2908              	 .cfi_def_cfa_offset 16
 2909 0004 00AF     	 add r7,sp,#0
 2910              	.LCFI89:
 2911              	 .cfi_def_cfa_register 7
 2912 0006 7860     	 str r0,[r7,#4]
 2913 0008 3B1C     	 mov r3,r7
 2914 000a 1960     	 str r1,[r3]
 869:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2915              	 .loc 2 869 0
 2916 000c 7B68     	 ldr r3,[r7,#4]
 2917 000e 1B68     	 ldr r3,[r3]
 2918 0010 7A68     	 ldr r2,[r7,#4]
 2919 0012 1268     	 ldr r2,[r2]
 2920 0014 1268     	 ldr r2,[r2]
 2921 0016 0F21     	 mov r1,#15
 2922 0018 8A43     	 bic r2,r1
 2923 001a 0221     	 mov r1,#2
 2924 001c 0A43     	 orr r2,r1
 2925 001e 1A60     	 str r2,[r3]
 870:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 871:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 2926              	 .loc 2 871 0
 2927 0020 7B68     	 ldr r3,[r7,#4]
 2928 0022 1B68     	 ldr r3,[r3]
 2929 0024 7A68     	 ldr r2,[r7,#4]
 2930 0026 1268     	 ldr r2,[r2]
 2931 0028 5268     	 ldr r2,[r2,#4]
 2932 002a 120E     	 lsr r2,r2,#24
 2933 002c 1206     	 lsl r2,r2,#24
 872:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_TOP_Msk |
 873:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_CUR_Msk)) |
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2934              	 .loc 2 874 0
 2935 002e 391C     	 mov r1,r7
 2936 0030 0978     	 ldrb r1,[r1]
 873:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2937              	 .loc 2 873 0
 2938 0032 1143     	 orr r1,r2
 875:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2939              	 .loc 2 875 0
 2940 0034 3A1C     	 mov r2,r7
 2941 0036 9278     	 ldrb r2,[r2,#2]
 2942 0038 1004     	 lsl r0,r2,#16
 2943 003a FF22     	 mov r2,#255
 2944 003c 1204     	 lsl r2,r2,#16
 2945 003e 0240     	 and r2,r0
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2946              	 .loc 2 874 0
 2947 0040 1143     	 orr r1,r2
 876:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2948              	 .loc 2 876 0
 2949 0042 3A1C     	 mov r2,r7
 2950 0044 5278     	 ldrb r2,[r2,#1]
 2951 0046 1202     	 lsl r2,r2,#8
 2952 0048 1204     	 lsl r2,r2,#16
 2953 004a 120C     	 lsr r2,r2,#16
 875:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2954              	 .loc 2 875 0
 2955 004c 0A43     	 orr r2,r1
 871:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_TOP_Msk |
 2956              	 .loc 2 871 0
 2957 004e 5A60     	 str r2,[r3,#4]
 877:../Libraries/XMCLib/src/xmc_can.c **** }
 2958              	 .loc 2 877 0
 2959 0050 BD46     	 mov sp,r7
 2960 0052 02B0     	 add sp,sp,#8
 2961              	 
 2962 0054 80BD     	 pop {r7,pc}
 2963              	 .cfi_endproc
 2964              	.LFE145:
 2966 0056 C046     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 2967              	 .align 2
 2968              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 2969              	 .code 16
 2970              	 .thumb_func
 2972              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 2973              	.LFB146:
 878:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 879:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo, const XMC_CAN_FIFO_CONFIG_
 880:../Libraries/XMCLib/src/xmc_can.c **** {
 2974              	 .loc 2 880 0
 2975              	 .cfi_startproc
 2976 0000 80B5     	 push {r7,lr}
 2977              	.LCFI90:
 2978              	 .cfi_def_cfa_offset 8
 2979              	 .cfi_offset 7,-8
 2980              	 .cfi_offset 14,-4
 2981 0002 82B0     	 sub sp,sp,#8
 2982              	.LCFI91:
 2983              	 .cfi_def_cfa_offset 16
 2984 0004 00AF     	 add r7,sp,#0
 2985              	.LCFI92:
 2986              	 .cfi_def_cfa_register 7
 2987 0006 7860     	 str r0,[r7,#4]
 2988 0008 3B1C     	 mov r3,r7
 2989 000a 1960     	 str r1,[r3]
 881:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2990              	 .loc 2 881 0
 2991 000c 7B68     	 ldr r3,[r7,#4]
 2992 000e 1B68     	 ldr r3,[r3]
 2993 0010 7A68     	 ldr r2,[r7,#4]
 2994 0012 1268     	 ldr r2,[r2]
 2995 0014 1268     	 ldr r2,[r2]
 2996 0016 0F21     	 mov r1,#15
 2997 0018 8A43     	 bic r2,r1
 2998 001a 0121     	 mov r1,#1
 2999 001c 0A43     	 orr r2,r1
 3000 001e 1A60     	 str r2,[r3]
 882:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 883:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 3001              	 .loc 2 883 0
 3002 0020 7B68     	 ldr r3,[r7,#4]
 3003 0022 1B68     	 ldr r3,[r3]
 3004 0024 7A68     	 ldr r2,[r7,#4]
 3005 0026 1268     	 ldr r2,[r2]
 3006 0028 5268     	 ldr r2,[r2,#4]
 3007 002a 120E     	 lsr r2,r2,#24
 3008 002c 1206     	 lsl r2,r2,#24
 884:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_TOP_Msk |
 885:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_CUR_Msk)) |
 886:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 3009              	 .loc 2 886 0
 3010 002e 391C     	 mov r1,r7
 3011 0030 0978     	 ldrb r1,[r1]
 885:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 3012              	 .loc 2 885 0
 3013 0032 1143     	 orr r1,r2
 887:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3014              	 .loc 2 887 0
 3015 0034 3A1C     	 mov r2,r7
 3016 0036 9278     	 ldrb r2,[r2,#2]
 3017 0038 1004     	 lsl r0,r2,#16
 3018 003a FF22     	 mov r2,#255
 3019 003c 1204     	 lsl r2,r2,#16
 3020 003e 0240     	 and r2,r0
 886:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3021              	 .loc 2 886 0
 3022 0040 1143     	 orr r1,r2
 888:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 3023              	 .loc 2 888 0
 3024 0042 3A1C     	 mov r2,r7
 3025 0044 5278     	 ldrb r2,[r2,#1]
 3026 0046 1202     	 lsl r2,r2,#8
 3027 0048 1204     	 lsl r2,r2,#16
 3028 004a 120C     	 lsr r2,r2,#16
 887:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3029              	 .loc 2 887 0
 3030 004c 0A43     	 orr r2,r1
 883:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_TOP_Msk |
 3031              	 .loc 2 883 0
 3032 004e 5A60     	 str r2,[r3,#4]
 889:../Libraries/XMCLib/src/xmc_can.c **** }
 3033              	 .loc 2 889 0
 3034 0050 BD46     	 mov sp,r7
 3035 0052 02B0     	 add sp,sp,#8
 3036              	 
 3037 0054 80BD     	 pop {r7,pc}
 3038              	 .cfi_endproc
 3039              	.LFE146:
 3041 0056 C046     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 3042              	 .align 2
 3043              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 3044              	 .code 16
 3045              	 .thumb_func
 3047              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 3048              	.LFB147:
 890:../Libraries/XMCLib/src/xmc_can.c **** 
 891:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 892:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo, const XMC_CAN_FIFO_CONFIG
 893:../Libraries/XMCLib/src/xmc_can.c **** {
 3049              	 .loc 2 893 0
 3050              	 .cfi_startproc
 3051 0000 80B5     	 push {r7,lr}
 3052              	.LCFI93:
 3053              	 .cfi_def_cfa_offset 8
 3054              	 .cfi_offset 7,-8
 3055              	 .cfi_offset 14,-4
 3056 0002 82B0     	 sub sp,sp,#8
 3057              	.LCFI94:
 3058              	 .cfi_def_cfa_offset 16
 3059 0004 00AF     	 add r7,sp,#0
 3060              	.LCFI95:
 3061              	 .cfi_def_cfa_register 7
 3062 0006 7860     	 str r0,[r7,#4]
 3063 0008 3B1C     	 mov r3,r7
 3064 000a 1960     	 str r1,[r3]
 894:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 3065              	 .loc 2 894 0
 3066 000c 7B68     	 ldr r3,[r7,#4]
 3067 000e 1B68     	 ldr r3,[r3]
 3068 0010 7A68     	 ldr r2,[r7,#4]
 3069 0012 1268     	 ldr r2,[r2]
 3070 0014 1268     	 ldr r2,[r2]
 3071 0016 0F21     	 mov r1,#15
 3072 0018 8A43     	 bic r2,r1
 3073 001a 0321     	 mov r1,#3
 3074 001c 0A43     	 orr r2,r1
 3075 001e 1A60     	 str r2,[r3]
 895:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 896:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 3076              	 .loc 2 896 0
 3077 0020 7B68     	 ldr r3,[r7,#4]
 3078 0022 1B68     	 ldr r3,[r3]
 3079 0024 7A68     	 ldr r2,[r7,#4]
 3080 0026 1268     	 ldr r2,[r2]
 3081 0028 5268     	 ldr r2,[r2,#4]
 3082 002a 0849     	 ldr r1,.L138
 3083 002c 1140     	 and r1,r2
 897:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3084              	 .loc 2 897 0
 3085 002e 3A1C     	 mov r2,r7
 3086 0030 9278     	 ldrb r2,[r2,#2]
 3087 0032 1004     	 lsl r0,r2,#16
 3088 0034 FF22     	 mov r2,#255
 3089 0036 1204     	 lsl r2,r2,#16
 3090 0038 0240     	 and r2,r0
 896:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3091              	 .loc 2 896 0
 3092 003a 0A43     	 orr r2,r1
 3093 003c 5A60     	 str r2,[r3,#4]
 898:../Libraries/XMCLib/src/xmc_can.c **** 
 899:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk |
 3094              	 .loc 2 899 0
 3095 003e 7B68     	 ldr r3,[r7,#4]
 3096 0040 1B68     	 ldr r3,[r3]
 3097 0042 034A     	 ldr r2,.L138+4
 3098 0044 DA61     	 str r2,[r3,#28]
 900:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 901:../Libraries/XMCLib/src/xmc_can.c **** }
 3099              	 .loc 2 901 0
 3100 0046 BD46     	 mov sp,r7
 3101 0048 02B0     	 add sp,sp,#8
 3102              	 
 3103 004a 80BD     	 pop {r7,pc}
 3104              	.L139:
 3105              	 .align 2
 3106              	.L138:
 3107 004c FFFF00FF 	 .word -16711681
 3108 0050 00040002 	 .word 33555456
 3109              	 .cfi_endproc
 3110              	.LFE147:
 3112              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 3113              	 .align 2
 3114              	 .global XMC_CAN_GATEWAY_InitSourceObject
 3115              	 .code 16
 3116              	 .thumb_func
 3118              	XMC_CAN_GATEWAY_InitSourceObject:
 3119              	.LFB148:
 902:../Libraries/XMCLib/src/xmc_can.c **** 
 903:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 904:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo, const XMC_CAN_GATEWAY_CONFI
 905:../Libraries/XMCLib/src/xmc_can.c **** {
 3120              	 .loc 2 905 0
 3121              	 .cfi_startproc
 3122 0000 80B5     	 push {r7,lr}
 3123              	.LCFI96:
 3124              	 .cfi_def_cfa_offset 8
 3125              	 .cfi_offset 7,-8
 3126              	 .cfi_offset 14,-4
 3127 0002 84B0     	 sub sp,sp,#16
 3128              	.LCFI97:
 3129              	 .cfi_def_cfa_offset 24
 3130 0004 00AF     	 add r7,sp,#0
 3131              	.LCFI98:
 3132              	 .cfi_def_cfa_register 7
 3133 0006 F860     	 str r0,[r7,#12]
 3134 0008 3B1D     	 add r3,r7,#4
 3135 000a 1960     	 str r1,[r3]
 3136 000c 5A60     	 str r2,[r3,#4]
 906:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 3137              	 .loc 2 906 0
 3138 000e FB68     	 ldr r3,[r7,#12]
 3139 0010 1B68     	 ldr r3,[r3]
 907:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3140              	 .loc 2 907 0
 3141 0012 3A1D     	 add r2,r7,#4
 3142 0014 D278     	 ldrb r2,[r2,#3]
 3143 0016 1102     	 lsl r1,r2,#8
 3144 0018 8022     	 mov r2,#128
 3145 001a 5200     	 lsl r2,r2,#1
 3146 001c 1140     	 and r1,r2
 908:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3147              	 .loc 2 908 0
 3148 001e 3A1D     	 add r2,r7,#4
 3149 0020 5279     	 ldrb r2,[r2,#5]
 3150 0022 9002     	 lsl r0,r2,#10
 3151 0024 8022     	 mov r2,#128
 3152 0026 D200     	 lsl r2,r2,#3
 3153 0028 0240     	 and r2,r0
 907:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3154              	 .loc 2 907 0
 3155 002a 1143     	 orr r1,r2
 909:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3156              	 .loc 2 909 0
 3157 002c 3A1D     	 add r2,r7,#4
 3158 002e 1279     	 ldrb r2,[r2,#4]
 3159 0030 5002     	 lsl r0,r2,#9
 3160 0032 8022     	 mov r2,#128
 3161 0034 9200     	 lsl r2,r2,#2
 3162 0036 0240     	 and r2,r0
 908:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3163              	 .loc 2 908 0
 3164 0038 1143     	 orr r1,r2
 910:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 3165              	 .loc 2 910 0
 3166 003a 3A1D     	 add r2,r7,#4
 3167 003c 9279     	 ldrb r2,[r2,#6]
 3168 003e D002     	 lsl r0,r2,#11
 3169 0040 8022     	 mov r2,#128
 3170 0042 1201     	 lsl r2,r2,#4
 3171 0044 0240     	 and r2,r0
 909:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3172              	 .loc 2 909 0
 3173 0046 0A43     	 orr r2,r1
 3174 0048 0421     	 mov r1,#4
 3175 004a 0A43     	 orr r2,r1
 906:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3176              	 .loc 2 906 0
 3177 004c 1A60     	 str r2,[r3]
 911:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3178              	 .loc 2 911 0
 3179 004e FB68     	 ldr r3,[r7,#12]
 3180 0050 1B68     	 ldr r3,[r3]
 3181 0052 3A1D     	 add r2,r7,#4
 3182 0054 1278     	 ldrb r2,[r2]
 3183 0056 101C     	 mov r0,r2
 912:../Libraries/XMCLib/src/xmc_can.c ****                                           (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR
 3184              	 .loc 2 912 0
 3185 0058 3A1D     	 add r2,r7,#4
 3186 005a 9278     	 ldrb r2,[r2,#2]
 3187 005c 1104     	 lsl r1,r2,#16
 3188 005e FF22     	 mov r2,#255
 3189 0060 1204     	 lsl r2,r2,#16
 3190 0062 0A40     	 and r2,r1
 911:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3191              	 .loc 2 911 0
 3192 0064 011C     	 mov r1,r0
 3193 0066 1143     	 orr r1,r2
 913:../Libraries/XMCLib/src/xmc_can.c ****                                           (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_
 3194              	 .loc 2 913 0
 3195 0068 3A1D     	 add r2,r7,#4
 3196 006a 5278     	 ldrb r2,[r2,#1]
 3197 006c 1202     	 lsl r2,r2,#8
 3198 006e 1204     	 lsl r2,r2,#16
 3199 0070 120C     	 lsr r2,r2,#16
 911:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3200              	 .loc 2 911 0
 3201 0072 0A43     	 orr r2,r1
 3202 0074 5A60     	 str r2,[r3,#4]
 914:../Libraries/XMCLib/src/xmc_can.c **** }
 3203              	 .loc 2 914 0
 3204 0076 BD46     	 mov sp,r7
 3205 0078 04B0     	 add sp,sp,#16
 3206              	 
 3207 007a 80BD     	 pop {r7,pc}
 3208              	 .cfi_endproc
 3209              	.LFE148:
 3211              	 .text
 3212              	.Letext0:
 3213              	 .file 3 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3214              	 .file 4 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3215              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 3216              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc1_scu.h"
 3217              	 .file 7 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include/cmsis_gcc.h"
 3218              	 .file 8 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:18     .text.XMC_CAN_IsPanelControlReady:00000000 $t
    {standard input}:22     .text.XMC_CAN_IsPanelControlReady:00000000 XMC_CAN_IsPanelControlReady
    {standard input}:60     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:64     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:126    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:130    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:162    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:166    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:199    .text.max:00000000 $t
    {standard input}:203    .text.max:00000000 max
    {standard input}:238    .text.min:00000000 $t
    {standard input}:242    .text.min:00000000 min
    {standard input}:278    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:283    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:519    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000158 $d
    {standard input}:524    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:529    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:840    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001cc $d
    {standard input}:846    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:851    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:912    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:917    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:951    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:956    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:1003   .text.XMC_CAN_Init:00000000 $t
    {standard input}:1008   .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:1191   .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:1280   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:1180   .text.XMC_CAN_Init:00000118 $d
    {standard input}:1186   .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:1235   .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:1240   .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:1275   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:1336   .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:1341   .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:1437   .text.XMC_CAN_InitEx:0000009c $d
    {standard input}:1443   .text.XMC_CAN_GetClockFrequency:00000000 $t
    {standard input}:1448   .text.XMC_CAN_GetClockFrequency:00000000 XMC_CAN_GetClockFrequency
    {standard input}:1490   .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:1495   .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:1575   .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:1580   .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1634   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1639   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1701   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1706   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1793   .text.XMC_CAN_MO_SetAcceptanceMask:00000078 $d
    {standard input}:1798   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1803   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:2020   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:2007   .text.XMC_CAN_MO_Config:00000130 $d
    {standard input}:2015   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:2112   .text.XMC_CAN_MO_UpdateData:0000007c $d
    {standard input}:2118   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:2123   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:2209   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:2214   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:2348   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:2353   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:2667   .text.XMC_CAN_MO_Receive:00000204 $d
    {standard input}:2672   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:2677   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2726   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2731   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2782   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2787   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:2887   .text.XMC_CAN_TXFIFO_Transmit:00000088 $d
    {standard input}:2892   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2897   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:2967   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2972   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:3042   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:3047   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:3107   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000004c $d
    {standard input}:3113   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:3118   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidivmod
__aeabi_uidiv
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GetPeripheralClockFrequency
OSCHP_GetFrequency
