   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_vadc.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_VADC_GROUP_ExternalMuxControlInit:
  23              	.LFB86:
  24              	 .file 1 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2019-12-02
   4:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  12:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  14:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  21:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * a source language processor.
  27:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  28:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  41:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  42:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  43:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  44:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  45:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  46:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  47:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  48:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  49:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  50:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  51:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  52:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  53:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  54:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  55:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  57:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  58:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  59:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  60:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  61:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  62:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  63:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  64:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  65:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  66:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  67:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  68:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  69:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  70:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  71:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  72:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  73:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  74:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  75:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  76:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  77:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  78:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  79:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  80:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed.
  81:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  82:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  83:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  84:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  85:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  86:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  87:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  88:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  89:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  90:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  91:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  92:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  93:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  94:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  95:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  96:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  97:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR.
  98:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  99:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
 100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
 101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
 102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
 103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
 104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2019-03-30:
 123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
 124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetChannelAlias()
 125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2019-12-02:
 127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fix including files following the convention: angle brackets are used for standard include
 128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2020-09-03:
 130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetPowerMode()
 131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
 132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2020-11-11:
 133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() and XMC_VADC_GROUP_SetChannelAlias()
 134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
 135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond
 136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_common.h"
 146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_scu.h"
 147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_vadc_map.h"
 148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/
 300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH,    /**< Input higher than than programmed reference */
 476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION
 658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_RS_PRIORITY_t;
 677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level i
 686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level i
 687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_BOUNDARY_SELECT_t;
 698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_0   = 0,
 706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_1,
 707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_2,
 709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_3
 710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_INDEX_t;
 712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** */
 717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SHS_GAIN_LEVEL_t;
 753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SHS_LOOP_CH_t;
 763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_BOUNDARY_NODE_t;
 789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SYNCTR_EVAL_t;
 803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma push
 810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma anon_unions
 811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma warning 586
 813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request s
 821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion s
 824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as the 
 832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
 836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
 838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigger. U
 839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
 841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
 844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating. Us
 845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 8;
 847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant sampl
 848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 3;
 850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t asctrl;
 852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 2;
 858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trigger 
 859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conversi
 860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion com
 861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_LOAD_
 863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 26;
 864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t asmr;
 866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t input_class                : 2;  /**< Input conversion class selection.
 883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 2;
 885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bound?
 886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bound?
 888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the configu
 892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either VARef
 893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 4;
 895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result_reg_number          : 4;  /**< Group result register number */
 896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t use_global_result          : 1;  /**< Use global result register for background requ
 897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result_alignment           : 1;  /**< Alignment of the results read in the result re
 898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 6;
 900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor for 
 901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacitor is
 903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t chctr;
 905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 8;
 911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should cha
 913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should cha
 915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should cha
 917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should cha
 919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 4;
 922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 4;
 924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the specific 
 932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the specific 
 933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the specific 
 934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the specific 
 935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 12;
 937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t bfl;
 939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 0
 946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 1
 948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 2
 950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 3
 952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 16;
 954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t bflc;
 956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   bool    channel_priority;  /**< Only non priority channels can be converted by Background Request
 959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (which
 960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<BR>Ra
 974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back into t
 975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trigger.
 977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 24;
 978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qinr0;
 981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
 984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request s
 990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC_G
 993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as the
 999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
1000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
1001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigger.
1006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
1007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
1008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
1009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
1010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
1011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating.
1012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
1013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 8;
1014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be act
1015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 3;
1016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qctrl0;
1018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                   : 2;
1024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                   : 29;
1026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qmr0;
1028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly connect
1043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly con
1046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected via EM
1050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connected vi
1053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 16;
1057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globiclass;
1060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 0x1F
1075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 2;
1076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter */
1077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Range:
1078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 5;
1079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 17;
1080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globcfg;
1082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globbound;
1102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0]*
1107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1]*
1108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 16;
1113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be overwr
1116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 6;
1118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new result.
1119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globrcr;
1121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                             : 2;
1128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sleep 
1129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                             : 28;
1130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t clc;
1132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly connect
1147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly con
1150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected via EM
1153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connected vi
1156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_iclass0;
1160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC will
1174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 13;
1177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected. */
1179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected. */
1181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 5;
1182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Steady,
1184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC_VAD
1186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external cha
1187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b connect
1189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 1;
1191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 2;
1193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_emuxctr;
1196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[0]
1208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[1]
1209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_bound;
1219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 4;
1225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 1;
1227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode or 
1228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 24;
1230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_arbcfg;
1232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 16;
1246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_VADC_
1248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 2;
1252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous results 
1253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIFO? *
1254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new result.
1256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_rcr;
1258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            : 3;  /**< Select a Sample and hold unit for the stepper's 
1273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             : 1; /**< Should the step be added to the sequence */
1275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            : 3;  /**< Select a Sample and hold unit for the stepper's 
1276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             : 1; /**< Should the step be added to the sequence */
1278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            : 3;  /**< Select a Sample and hold unit for the stepper's 
1279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             : 1; /**< Should the step be added to the sequence */
1281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            : 3;  /**< Select a Sample and hold unit for the stepper's 
1282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             : 1; /**< Should the step be added to the sequence */
1284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            : 3;  /**< Select a Sample and hold unit for the stepper's 
1285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             : 1; /**< Should the step be added to the sequence */
1287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            : 3;  /**< Select a Sample and hold unit for the stepper's 
1288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             : 1; /**< Should the step be added to the sequence */
1290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            : 3;  /**< Select a Sample and hold unit for the stepper's 
1291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             : 1; /**< Should the step be added to the sequence */
1293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            : 3;  /**< Select a Sample and hold unit for the stepper's 
1294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             : 1; /**< Should the step be added to the sequence */
1296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        : 4; /**< The divider value for the SHS clock. Range: [0x0 
1313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 6;
1314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 10;
1316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  : 2; /**< It is possible to different reference voltage for
1318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 20;
1319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_CONFIG_t;
1326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   : 16; /**< Result of the Analog to digital conversion*/
1339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             : 4;  /**< Indicates the group to which the channel_number 
1340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           : 5;  /**< Converted channel number*/
1341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      : 3;   /**< Converted external multiplexer channel number.
1342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source : 2;  /**< Converted request source*/
1344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      : 1;  /**< Fast compare result if conversion mode is fast c
1345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             : 1;  /**< Valid flag is set when a new result is available
1346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   : 16; /**< Result of the Analog to digital conversion*/
1361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   : 4;  /**< Results reduction counter value*/
1362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           : 5;  /**< Converted channel number*/
1363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      : 3;   /**< Converted external multiplexer channel number.
1364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source : 2;  /**< Converted request source*/
1366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      : 1;  /**< Fast compare result if conversion mode is fast c
1367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             : 1;  /**< Valid flag is set when a new result is available
1368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma pop
1377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma warning restore
1379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr 
1389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
1581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC
1602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint16_t boundary_value);
1746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return (global_ptr->GLOBRES);
1790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event",
1869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT ==
1870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event",
1893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT ==
1894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
1947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
1965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG = (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHSCF
1967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various step configurations.
1973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the stepper sequence for the converter.<BR>\n
1978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The stepper sequence is configured using this API.
1980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t *config)
1986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
1987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
1989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t *)NULL))
1991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
1994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
1996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return bool returns true if the analog converter is operable
2000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *              returns false if the analog converter is powered down
2001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the converter status.<BR>\n
2004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ANRDY bit field of the SHSCFG register.
2005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
2010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL
2012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
2014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
2033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
2049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num,
2069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint8_t sst_value);
2070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
2082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
2090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t max_calibration_time)
2135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
2138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num);
2158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num);
2173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num,
2190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num,
2208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint8_t offset_calibration_value);
2210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num,
2230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_LOOP_CH_t loop_select,
2231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint8_t ch_num);
2232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_LOOP_CH_t loop_select)
2248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
2251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0) || (loop_select == XMC_VADC_SHS_LOOP_CH_1))
2253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_LOOP_CH_t loop_select)
2272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
2275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0) || (loop_select == XMC_VADC_SHS_LOOP_CH_1))
2277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_POWERMODE_t Current power mode
2375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the power mode of a VADC group.
2378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetPowerMode()<BR>
2381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE int32_t XMC_VADC_GROUP_GetPowerMode(XMC_VADC_GROUP_t *const group_ptr)
2383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_ANONS_Msk) >> VADC_G_ARBCFG_ANONS_Pos);
2385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t eval_waiting_group,
2463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t eval_origin_group);
2464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ( group_ptr->SYNCTR & eval_mask);
2490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr,
2591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0,
2592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint16_t boundary_value);
2612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
2629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t sr_num,
2630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_GROUP_IRQ_t type);
2631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
  25              	 .loc 1 2649 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 84B0     	 sub sp,sp,#16
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 24
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
  39 0008 3960     	 str r1,[r7]
2650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  40              	 .loc 1 2654 0
  41 000a 3B1C     	 mov r3,r7
  42 000c 1B78     	 ldrb r3,[r3]
  43 000e 5B07     	 lsl r3,r3,#29
  44 0010 5B0F     	 lsr r3,r3,#29
  45 0012 DBB2     	 uxtb r3,r3
  46 0014 1A1C     	 mov r2,r3
2655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  47              	 .loc 1 2655 0
  48 0016 BB1C     	 add r3,r7,#2
  49 0018 1B88     	 ldrh r3,[r3]
  50 001a 9B05     	 lsl r3,r3,#22
  51 001c 9B0D     	 lsr r3,r3,#22
  52 001e 9BB2     	 uxth r3,r3
  53 0020 1B04     	 lsl r3,r3,#16
2654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2654 0
  55 0022 1343     	 orr r3,r2
  56 0024 FB60     	 str r3,[r7,#12]
2656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2657 0
  58 0026 7A68     	 ldr r2,[r7,#4]
  59 0028 F823     	 mov r3,#248
  60 002a 5B00     	 lsl r3,r3,#1
  61 002c F968     	 ldr r1,[r7,#12]
  62 002e D150     	 str r1,[r2,r3]
2658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  63              	 .loc 1 2658 0
  64 0030 FB1C     	 add r3,r7,#3
  65 0032 1B78     	 ldrb r3,[r3]
  66 0034 DB06     	 lsl r3,r3,#27
  67 0036 DB0F     	 lsr r3,r3,#31
  68 0038 DBB2     	 uxtb r3,r3
  69 003a 1A07     	 lsl r2,r3,#28
2659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
  70              	 .loc 1 2659 0
  71 003c FB1C     	 add r3,r7,#3
  72 003e 1B78     	 ldrb r3,[r3]
  73 0040 1B07     	 lsl r3,r3,#28
  74 0042 9B0F     	 lsr r3,r3,#30
  75 0044 DBB2     	 uxtb r3,r3
  76 0046 9B06     	 lsl r3,r3,#26
2658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  77              	 .loc 1 2658 0
  78 0048 1A43     	 orr r2,r3
2660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  79              	 .loc 1 2660 0
  80 004a FB1C     	 add r3,r7,#3
  81 004c 1B78     	 ldrb r3,[r3]
  82 004e 9B06     	 lsl r3,r3,#26
  83 0050 DB0F     	 lsr r3,r3,#31
  84 0052 DBB2     	 uxtb r3,r3
  85 0054 5B07     	 lsl r3,r3,#29
2658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  86              	 .loc 1 2658 0
  87 0056 1343     	 orr r3,r2
  88 0058 FB60     	 str r3,[r7,#12]
2661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
  89              	 .loc 1 2663 0
  90 005a FB1C     	 add r3,r7,#3
  91 005c 1B78     	 ldrb r3,[r3]
  92 005e 5B06     	 lsl r3,r3,#25
  93 0060 DB0F     	 lsr r3,r3,#31
  94 0062 DBB2     	 uxtb r3,r3
  95 0064 9B07     	 lsl r3,r3,#30
  96 0066 FA68     	 ldr r2,[r7,#12]
  97 0068 1343     	 orr r3,r2
  98 006a FB60     	 str r3,[r7,#12]
2664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  99              	 .loc 1 2665 0
 100 006c 7A68     	 ldr r2,[r7,#4]
 101 006e F823     	 mov r3,#248
 102 0070 5B00     	 lsl r3,r3,#1
 103 0072 D258     	 ldr r2,[r2,r3]
 104 0074 FB68     	 ldr r3,[r7,#12]
 105 0076 1343     	 orr r3,r2
 106 0078 8022     	 mov r2,#128
 107 007a 1206     	 lsl r2,r2,#24
 108 007c 1A43     	 orr r2,r3
 109 007e 111C     	 mov r1,r2
 110 0080 7A68     	 ldr r2,[r7,#4]
 111 0082 F823     	 mov r3,#248
 112 0084 5B00     	 lsl r3,r3,#1
 113 0086 D150     	 str r1,[r2,r3]
2666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
 114              	 .loc 1 2666 0
 115 0088 BD46     	 mov sp,r7
 116 008a 04B0     	 add sp,sp,#16
 117              	 
 118 008c 80BD     	 pop {r7,pc}
 119              	 .cfi_endproc
 120              	.LFE86:
 122 008e C046     	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 123              	 .align 2
 124              	 .code 16
 125              	 .thumb_func
 127              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 128              	.LFB89:
2667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint8_t boundary_flag_num,
2689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_BOUNDARY_NODE_t node);
2690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_CHANNEL_CONV_t conv_class)
2725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected",
2729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 129              	 .loc 1 2778 0
 130              	 .cfi_startproc
 131 0000 80B5     	 push {r7,lr}
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134              	 .cfi_offset 7,-8
 135              	 .cfi_offset 14,-4
 136 0002 82B0     	 sub sp,sp,#8
 137              	.LCFI4:
 138              	 .cfi_def_cfa_offset 16
 139 0004 00AF     	 add r7,sp,#0
 140              	.LCFI5:
 141              	 .cfi_def_cfa_register 7
 142 0006 7860     	 str r0,[r7,#4]
2779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 143              	 .loc 1 2780 0
 144 0008 7B68     	 ldr r3,[r7,#4]
 145 000a 8422     	 mov r2,#132
 146 000c 9B58     	 ldr r3,[r3,r2]
 147 000e 8022     	 mov r2,#128
 148 0010 9204     	 lsl r2,r2,#18
 149 0012 1A43     	 orr r2,r3
 150 0014 7B68     	 ldr r3,[r7,#4]
 151 0016 8421     	 mov r1,#132
 152 0018 5A50     	 str r2,[r3,r1]
2781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
 153              	 .loc 1 2781 0
 154 001a BD46     	 mov sp,r7
 155 001c 02B0     	 add sp,sp,#8
 156              	 
 157 001e 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE89:
 161              	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 167              	.LFB90:
2782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 168              	 .loc 1 2799 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI6:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI7:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI8:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
2800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 182              	 .loc 1 2801 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 8422     	 mov r2,#132
 185 000c 9B58     	 ldr r3,[r3,r2]
 186 000e 044A     	 ldr r2,.L4
 187 0010 1A40     	 and r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 8421     	 mov r1,#132
 190 0016 5A50     	 str r2,[r3,r1]
2802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
 191              	 .loc 1 2802 0
 192 0018 BD46     	 mov sp,r7
 193 001a 02B0     	 add sp,sp,#8
 194              	 
 195 001c 80BD     	 pop {r7,pc}
 196              	.L5:
 197 001e C046     	 .align 2
 198              	.L4:
 199 0020 FFFFFFFD 	 .word -33554433
 200              	 .cfi_endproc
 201              	.LFE90:
 203              	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 204              	 .align 2
 205              	 .code 16
 206              	 .thumb_func
 208              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 209              	.LFB106:
2803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
2970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
2973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
2991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
3000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
3001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
3003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
3006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
3008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
3010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number",
3011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
3013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
3021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
3030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
3033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
3035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
3037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
3038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
3049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
3053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
3056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
3058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
3062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
3064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
3068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
3069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
3071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
3074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
3078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
3081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
3083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
3092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
3102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 210              	 .loc 1 3299 0
 211              	 .cfi_startproc
 212 0000 80B5     	 push {r7,lr}
 213              	.LCFI9:
 214              	 .cfi_def_cfa_offset 8
 215              	 .cfi_offset 7,-8
 216              	 .cfi_offset 14,-4
 217 0002 82B0     	 sub sp,sp,#8
 218              	.LCFI10:
 219              	 .cfi_def_cfa_offset 16
 220 0004 00AF     	 add r7,sp,#0
 221              	.LCFI11:
 222              	 .cfi_def_cfa_register 7
 223 0006 7860     	 str r0,[r7,#4]
3300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 224              	 .loc 1 3301 0
 225 0008 7B68     	 ldr r3,[r7,#4]
 226 000a 8422     	 mov r2,#132
 227 000c 9B58     	 ldr r3,[r3,r2]
 228 000e 8022     	 mov r2,#128
 229 0010 D204     	 lsl r2,r2,#19
 230 0012 1A43     	 orr r2,r3
 231 0014 7B68     	 ldr r3,[r7,#4]
 232 0016 8421     	 mov r1,#132
 233 0018 5A50     	 str r2,[r3,r1]
3302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
 234              	 .loc 1 3302 0
 235 001a BD46     	 mov sp,r7
 236 001c 02B0     	 add sp,sp,#8
 237              	 
 238 001e 80BD     	 pop {r7,pc}
 239              	 .cfi_endproc
 240              	.LFE106:
 242              	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 243              	 .align 2
 244              	 .code 16
 245              	 .thumb_func
 247              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 248              	.LFB107:
3303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 249              	 .loc 1 3321 0
 250              	 .cfi_startproc
 251 0000 80B5     	 push {r7,lr}
 252              	.LCFI12:
 253              	 .cfi_def_cfa_offset 8
 254              	 .cfi_offset 7,-8
 255              	 .cfi_offset 14,-4
 256 0002 82B0     	 sub sp,sp,#8
 257              	.LCFI13:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI14:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
3322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 263              	 .loc 1 3323 0
 264 0008 7B68     	 ldr r3,[r7,#4]
 265 000a 8422     	 mov r2,#132
 266 000c 9B58     	 ldr r3,[r3,r2]
 267 000e 044A     	 ldr r2,.L8
 268 0010 1A40     	 and r2,r3
 269 0012 7B68     	 ldr r3,[r7,#4]
 270 0014 8421     	 mov r1,#132
 271 0016 5A50     	 str r2,[r3,r1]
3324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
 272              	 .loc 1 3324 0
 273 0018 BD46     	 mov sp,r7
 274 001a 02B0     	 add sp,sp,#8
 275              	 
 276 001c 80BD     	 pop {r7,pc}
 277              	.L9:
 278 001e C046     	 .align 2
 279              	.L8:
 280 0020 FFFFFFFB 	 .word -67108865
 281              	 .cfi_endproc
 282              	.LFE107:
 284              	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 285              	 .align 2
 286              	 .code 16
 287              	 .thumb_func
 289              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 290              	.LFB124:
3325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GATEMODE_t mode_sel)
3403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num)
3519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_
3522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_mask)
3551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num)
3578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_
3581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_mask)
3610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num)
3637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 291              	 .loc 1 3848 0
 292              	 .cfi_startproc
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI15:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI16:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI17:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
3849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 305              	 .loc 1 3850 0
 306 0008 7B68     	 ldr r3,[r7,#4]
 307 000a 8422     	 mov r2,#132
 308 000c 9B58     	 ldr r3,[r3,r2]
 309 000e 8022     	 mov r2,#128
 310 0010 5204     	 lsl r2,r2,#17
 311 0012 1A43     	 orr r2,r3
 312 0014 7B68     	 ldr r3,[r7,#4]
 313 0016 8421     	 mov r1,#132
 314 0018 5A50     	 str r2,[r3,r1]
3851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
 315              	 .loc 1 3851 0
 316 001a BD46     	 mov sp,r7
 317 001c 02B0     	 add sp,sp,#8
 318              	 
 319 001e 80BD     	 pop {r7,pc}
 320              	 .cfi_endproc
 321              	.LFE124:
 323              	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 324              	 .align 2
 325              	 .code 16
 326              	 .thumb_func
 328              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 329              	.LFB125:
3852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 330              	 .loc 1 3869 0
 331              	 .cfi_startproc
 332 0000 80B5     	 push {r7,lr}
 333              	.LCFI18:
 334              	 .cfi_def_cfa_offset 8
 335              	 .cfi_offset 7,-8
 336              	 .cfi_offset 14,-4
 337 0002 82B0     	 sub sp,sp,#8
 338              	.LCFI19:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI20:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
3870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 344              	 .loc 1 3871 0
 345 0008 7B68     	 ldr r3,[r7,#4]
 346 000a 8422     	 mov r2,#132
 347 000c 9B58     	 ldr r3,[r3,r2]
 348 000e 044A     	 ldr r2,.L12
 349 0010 1A40     	 and r2,r3
 350 0012 7B68     	 ldr r3,[r7,#4]
 351 0014 8421     	 mov r1,#132
 352 0016 5A50     	 str r2,[r3,r1]
3872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
 353              	 .loc 1 3872 0
 354 0018 BD46     	 mov sp,r7
 355 001a 02B0     	 add sp,sp,#8
 356              	 
 357 001c 80BD     	 pop {r7,pc}
 358              	.L13:
 359 001e C046     	 .align 2
 360              	.L12:
 361 0020 FFFFFFFE 	 .word -16777217
 362              	 .cfi_endproc
 363              	.LFE125:
 365              	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 366              	 .align 2
 367              	 .code 16
 368              	 .thumb_func
 370              	XMC_VADC_GROUP_QueueFlushEntries:
 371              	.LFB129:
3873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
3915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
3972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
3980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
3982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
4000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
4001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
4004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
4006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
4007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
4008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
4009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
4010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
4011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
4015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
4016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
4019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
4020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
4021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
4022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
4023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
4024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
4027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
4029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
4030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
4037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
4038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
4040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
4041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
4044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
4046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
4047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
4054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
4055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
4057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
4058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
4061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
4063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** {
 372              	 .loc 1 4063 0
 373              	 .cfi_startproc
 374 0000 80B5     	 push {r7,lr}
 375              	.LCFI21:
 376              	 .cfi_def_cfa_offset 8
 377              	 .cfi_offset 7,-8
 378              	 .cfi_offset 14,-4
 379 0002 82B0     	 sub sp,sp,#8
 380              	.LCFI22:
 381              	 .cfi_def_cfa_offset 16
 382 0004 00AF     	 add r7,sp,#0
 383              	.LCFI23:
 384              	 .cfi_def_cfa_register 7
 385 0006 7860     	 str r0,[r7,#4]
4064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
4065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 386              	 .loc 1 4065 0
 387 0008 7A68     	 ldr r2,[r7,#4]
 388 000a 8223     	 mov r3,#130
 389 000c 5B00     	 lsl r3,r3,#1
 390 000e D358     	 ldr r3,[r2,r3]
 391 0010 8022     	 mov r2,#128
 392 0012 D200     	 lsl r2,r2,#3
 393 0014 1A43     	 orr r2,r3
 394 0016 111C     	 mov r1,r2
 395 0018 7A68     	 ldr r2,[r7,#4]
 396 001a 8223     	 mov r3,#130
 397 001c 5B00     	 lsl r3,r3,#1
 398 001e D150     	 str r1,[r2,r3]
4066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** 
4067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   while ( !((group_ptr->QSR0) & (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 399              	 .loc 1 4067 0
 400 0020 C046     	 mov r8,r8
 401              	.L15:
 402              	 .loc 1 4067 0 is_stmt 0 discriminator 1
 403 0022 7A68     	 ldr r2,[r7,#4]
 404 0024 8423     	 mov r3,#132
 405 0026 5B00     	 lsl r3,r3,#1
 406 0028 D358     	 ldr r3,[r2,r3]
 407 002a 2022     	 mov r2,#32
 408 002c 1340     	 and r3,r2
 409 002e F8D0     	 beq .L15
4068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   {
4069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
4070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h ****   }
4071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_vadc.h **** }
 410              	 .loc 1 4071 0 is_stmt 1
 411 0030 BD46     	 mov sp,r7
 412 0032 02B0     	 add sp,sp,#8
 413              	 
 414 0034 80BD     	 pop {r7,pc}
 415              	 .cfi_endproc
 416              	.LFE129:
 418 0036 C046     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 419              	 .align 2
 422              	g_xmc_vadc_group_array:
 423 0000 00040348 	 .word 1208157184
 424 0004 00080348 	 .word 1208158208
 425              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 426              	 .align 2
 427              	 .global XMC_VADC_GLOBAL_EnableModule
 428              	 .code 16
 429              	 .thumb_func
 431              	XMC_VADC_GLOBAL_EnableModule:
 432              	.LFB153:
 433              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2019-12-16
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c ****  *****************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  * Permission is hereby granted, free of charge, to any person or organization
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * obtaining a copy of the software and accompanying documentation covered by
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * do so, all subject to the following:
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * The copyright notices in the Software and this entire statement, including
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * the above license grant, this restriction and the following disclaimer,
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  * must be included in all copies of the Software, in whole or in part, and
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * all derivative works of the Software, unless such copies or derivative
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * works are solely in the form of machine-executable object code generated by
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * a source language processor.
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  * DEALINGS IN THE SOFTWARE.
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  * at XMCSupport@infineon.com.
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  *****************************************************************************
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  77:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  78:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2016-06-17:
  81:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  82:../Libraries/XMCLib/src/xmc_vadc.c ****  *       and XMC_VADC_SYNCTR_START_LOCATION
  83:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the EVAL configuration in API XMC_VADC_GROUP_CheckSlaveReadiness and XMC_VADC_GROUP_
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs added are:
  86:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  87:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
  88:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
  89:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultRegPriority
  90:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
  91:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetResultRegPriority
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  94:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2017-01-11:
  95:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fix assertion in XMC_VADC_GROUP_CheckSlaveReadiness() and XMC_VADC_GROUP_IgnoreSlaveReadin
  96:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2018-06-26:
  98:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed XMC_VADC_GLOBAL_StartupCalibration(), added wait until calibration is started
  99:../Libraries/XMCLib/src/xmc_vadc.c ****  *
 100:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2019-03-30:
 101:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
 102:../Libraries/XMCLib/src/xmc_vadc.c ****  *
 103:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2019-05-07:
 104:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fix compilation warnings
 105:../Libraries/XMCLib/src/xmc_vadc.c ****  *
 106:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2019-10-18:
 107:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Changed XMC_VADC_GLOBAL_StartupCalibration() to ensure calibration has started
 108:../Libraries/XMCLib/src/xmc_vadc.c ****  *
 109:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2019-12-16:
 110:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fix including files following the convention: angle brackets are used for standard include
 111:../Libraries/XMCLib/src/xmc_vadc.c ****  *
 112:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2020-03-18:
 113:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Changed XMC_VADC_GLOBAL_Init() setting ADC clock to 48MHz for XMC1400 series
 114:../Libraries/XMCLib/src/xmc_vadc.c ****  *
 115:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond
 116:../Libraries/XMCLib/src/xmc_vadc.c ****  *
 117:../Libraries/XMCLib/src/xmc_vadc.c ****  */
 118:../Libraries/XMCLib/src/xmc_vadc.c **** 
 119:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 120:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
 121:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 122:../Libraries/XMCLib/src/xmc_vadc.c **** #include "xmc_vadc.h"
 123:../Libraries/XMCLib/src/xmc_vadc.c **** 
 124:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 125:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
 126:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 127:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
 128:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
 129:../Libraries/XMCLib/src/xmc_vadc.c **** 
 130:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
 131:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
 132:../Libraries/XMCLib/src/xmc_vadc.c **** 
 133:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_SYNCTR_START_LOCATION (3U)  /**< Defines the location in SYNCTR needed for calcula
 134:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 135:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
 136:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 137:../Libraries/XMCLib/src/xmc_vadc.c **** 
 138:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 139:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
 140:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 141:../Libraries/XMCLib/src/xmc_vadc.c **** 
 142:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 143:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 144:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 145:../Libraries/XMCLib/src/xmc_vadc.c **** 
 146:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 147:../Libraries/XMCLib/src/xmc_vadc.c **** 
 148:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 149:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 150:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 151:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 152:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 153:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                    };
 154:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 155:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 156:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 157:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                    };
 158:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 159:../Libraries/XMCLib/src/xmc_vadc.c **** 
 160:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 161:../Libraries/XMCLib/src/xmc_vadc.c **** 
 162:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 163:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 164:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 165:../Libraries/XMCLib/src/xmc_vadc.c **** 
 166:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 167:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 168:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 169:../Libraries/XMCLib/src/xmc_vadc.c **** 
 170:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 171:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 172:../Libraries/XMCLib/src/xmc_vadc.c **** {
 434              	 .loc 2 172 0
 435              	 .cfi_startproc
 436 0000 80B5     	 push {r7,lr}
 437              	.LCFI24:
 438              	 .cfi_def_cfa_offset 8
 439              	 .cfi_offset 7,-8
 440              	 .cfi_offset 14,-4
 441 0002 00AF     	 add r7,sp,#0
 442              	.LCFI25:
 443              	 .cfi_def_cfa_register 7
 173:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 174:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 175:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 176:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 177:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 178:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 179:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 180:../Libraries/XMCLib/src/xmc_vadc.c **** 
 181:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 182:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 444              	 .loc 2 182 0
 445 0004 034B     	 ldr r3,.L17
 446 0006 FF22     	 mov r2,#255
 447 0008 1A60     	 str r2,[r3]
 183:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 184:../Libraries/XMCLib/src/xmc_vadc.c **** 
 185:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 186:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 448              	 .loc 2 186 0
 449 000a 0120     	 mov r0,#1
 450 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 187:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 188:../Libraries/XMCLib/src/xmc_vadc.c **** 
 189:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 190:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 191:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 192:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 193:../Libraries/XMCLib/src/xmc_vadc.c **** }
 451              	 .loc 2 193 0
 452 0010 BD46     	 mov sp,r7
 453              	 
 454 0012 80BD     	 pop {r7,pc}
 455              	.L18:
 456              	 .align 2
 457              	.L17:
 458 0014 00050140 	 .word 1073808640
 459              	 .cfi_endproc
 460              	.LFE153:
 462              	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 463              	 .align 2
 464              	 .global XMC_VADC_GLOBAL_DisableModule
 465              	 .code 16
 466              	 .thumb_func
 468              	XMC_VADC_GLOBAL_DisableModule:
 469              	.LFB154:
 194:../Libraries/XMCLib/src/xmc_vadc.c **** 
 195:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 196:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 197:../Libraries/XMCLib/src/xmc_vadc.c **** {
 470              	 .loc 2 197 0
 471              	 .cfi_startproc
 472 0000 80B5     	 push {r7,lr}
 473              	.LCFI26:
 474              	 .cfi_def_cfa_offset 8
 475              	 .cfi_offset 7,-8
 476              	 .cfi_offset 14,-4
 477 0002 00AF     	 add r7,sp,#0
 478              	.LCFI27:
 479              	 .cfi_def_cfa_register 7
 198:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 199:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 200:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 201:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 202:../Libraries/XMCLib/src/xmc_vadc.c **** 
 203:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 480              	 .loc 2 204 0
 481 0004 0120     	 mov r0,#1
 482 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 205:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 206:../Libraries/XMCLib/src/xmc_vadc.c **** 
 207:../Libraries/XMCLib/src/xmc_vadc.c **** }
 483              	 .loc 2 207 0
 484 000a BD46     	 mov sp,r7
 485              	 
 486 000c 80BD     	 pop {r7,pc}
 487              	 .cfi_endproc
 488              	.LFE154:
 490 000e C046     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 491              	 .align 2
 492              	 .global XMC_VADC_GLOBAL_Init
 493              	 .code 16
 494              	 .thumb_func
 496              	XMC_VADC_GLOBAL_Init:
 497              	.LFB155:
 208:../Libraries/XMCLib/src/xmc_vadc.c **** 
 209:../Libraries/XMCLib/src/xmc_vadc.c **** 
 210:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 211:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 212:../Libraries/XMCLib/src/xmc_vadc.c **** {
 498              	 .loc 2 212 0
 499              	 .cfi_startproc
 500 0000 80B5     	 push {r7,lr}
 501              	.LCFI28:
 502              	 .cfi_def_cfa_offset 8
 503              	 .cfi_offset 7,-8
 504              	 .cfi_offset 14,-4
 505 0002 82B0     	 sub sp,sp,#8
 506              	.LCFI29:
 507              	 .cfi_def_cfa_offset 16
 508 0004 00AF     	 add r7,sp,#0
 509              	.LCFI30:
 510              	 .cfi_def_cfa_register 7
 511 0006 7860     	 str r0,[r7,#4]
 512 0008 3960     	 str r1,[r7]
 213:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 214:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 215:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 216:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 217:../Libraries/XMCLib/src/xmc_vadc.c **** 
 218:../Libraries/XMCLib/src/xmc_vadc.c **** #if (UC_SERIES == XMC14)
 219:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
 513              	 .loc 2 219 0
 514 000a 0020     	 mov r0,#0
 515 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_SetAdcClockSrc
 220:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 221:../Libraries/XMCLib/src/xmc_vadc.c **** 
 222:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 223:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 516              	 .loc 2 223 0
 517 0010 FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 224:../Libraries/XMCLib/src/xmc_vadc.c **** 
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 518              	 .loc 2 225 0
 519 0014 3B68     	 ldr r3,[r7]
 520 0016 5A69     	 ldr r2,[r3,#20]
 521 0018 7B68     	 ldr r3,[r7,#4]
 522 001a 1A60     	 str r2,[r3]
 226:../Libraries/XMCLib/src/xmc_vadc.c **** 
 227:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 228:../Libraries/XMCLib/src/xmc_vadc.c **** 
 229:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 230:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 523              	 .loc 2 230 0
 524 001c 3B68     	 ldr r3,[r7]
 525 001e 5B68     	 ldr r3,[r3,#4]
 526 0020 8022     	 mov r2,#128
 527 0022 1202     	 lsl r2,r2,#8
 528 0024 1A43     	 orr r2,r3
 529 0026 7B68     	 ldr r3,[r7,#4]
 530 0028 8021     	 mov r1,#128
 531 002a 5A50     	 str r2,[r3,r1]
 231:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 232:../Libraries/XMCLib/src/xmc_vadc.c **** 
 233:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 234:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 532              	 .loc 2 234 0
 533 002c 3B68     	 ldr r3,[r7]
 534 002e 9A68     	 ldr r2,[r3,#8]
 535 0030 7B68     	 ldr r3,[r7,#4]
 536 0032 A021     	 mov r1,#160
 537 0034 5A50     	 str r2,[r3,r1]
 235:../Libraries/XMCLib/src/xmc_vadc.c **** 
 236:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 237:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 538              	 .loc 2 237 0
 539 0036 3B68     	 ldr r3,[r7]
 540 0038 DA68     	 ldr r2,[r3,#12]
 541 003a 7B68     	 ldr r3,[r7,#4]
 542 003c A421     	 mov r1,#164
 543 003e 5A50     	 str r2,[r3,r1]
 238:../Libraries/XMCLib/src/xmc_vadc.c **** 
 239:../Libraries/XMCLib/src/xmc_vadc.c **** 
 240:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 241:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 544              	 .loc 2 241 0
 545 0040 3B68     	 ldr r3,[r7]
 546 0042 1969     	 ldr r1,[r3,#16]
 547 0044 7A68     	 ldr r2,[r7,#4]
 548 0046 A023     	 mov r3,#160
 549 0048 9B00     	 lsl r3,r3,#2
 550 004a D150     	 str r1,[r2,r3]
 242:../Libraries/XMCLib/src/xmc_vadc.c **** 
 243:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 244:../Libraries/XMCLib/src/xmc_vadc.c **** 
 245:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 246:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 551              	 .loc 2 246 0
 552 004c 3B68     	 ldr r3,[r7]
 553 004e 1A68     	 ldr r2,[r3]
 554 0050 7B68     	 ldr r3,[r7,#4]
 555 0052 B821     	 mov r1,#184
 556 0054 5A50     	 str r2,[r3,r1]
 247:../Libraries/XMCLib/src/xmc_vadc.c **** 
 248:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 249:../Libraries/XMCLib/src/xmc_vadc.c **** 
 250:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 251:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 252:../Libraries/XMCLib/src/xmc_vadc.c **** 
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 255:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 256:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 257:../Libraries/XMCLib/src/xmc_vadc.c **** 
 258:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 259:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 260:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 261:../Libraries/XMCLib/src/xmc_vadc.c **** 
 262:../Libraries/XMCLib/src/xmc_vadc.c **** }
 557              	 .loc 2 262 0
 558 0056 BD46     	 mov sp,r7
 559 0058 02B0     	 add sp,sp,#8
 560              	 
 561 005a 80BD     	 pop {r7,pc}
 562              	 .cfi_endproc
 563              	.LFE155:
 565              	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 566              	 .align 2
 567              	 .global XMC_VADC_GLOBAL_InputClassInit
 568              	 .code 16
 569              	 .thumb_func
 571              	XMC_VADC_GLOBAL_InputClassInit:
 572              	.LFB156:
 263:../Libraries/XMCLib/src/xmc_vadc.c **** 
 264:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 265:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 266:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
 267:../Libraries/XMCLib/src/xmc_vadc.c **** {
 573              	 .loc 2 267 0
 574              	 .cfi_startproc
 575 0000 80B5     	 push {r7,lr}
 576              	.LCFI31:
 577              	 .cfi_def_cfa_offset 8
 578              	 .cfi_offset 7,-8
 579              	 .cfi_offset 14,-4
 580 0002 84B0     	 sub sp,sp,#16
 581              	.LCFI32:
 582              	 .cfi_def_cfa_offset 24
 583 0004 00AF     	 add r7,sp,#0
 584              	.LCFI33:
 585              	 .cfi_def_cfa_register 7
 586 0006 F860     	 str r0,[r7,#12]
 587 0008 B960     	 str r1,[r7,#8]
 588 000a 3B60     	 str r3,[r7]
 589 000c FB1D     	 add r3,r7,#7
 590 000e 1A70     	 strb r2,[r3]
 268:../Libraries/XMCLib/src/xmc_vadc.c **** 
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 270:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 271:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 272:../Libraries/XMCLib/src/xmc_vadc.c **** 
 273:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 274:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 591              	 .loc 2 274 0
 592 0010 FB1D     	 add r3,r7,#7
 593 0012 1B78     	 ldrb r3,[r3]
 594 0014 002B     	 cmp r3,#0
 595 0016 09D1     	 bne .L22
 275:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 276:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 277:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_UNUSED_ARG(conv_type);
 278:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 596              	 .loc 2 278 0
 597 0018 BB68     	 ldr r3,[r7,#8]
 598 001a 0A4A     	 ldr r2,.L24
 599 001c 1340     	 and r3,r2
 600 001e 191C     	 mov r1,r3
 601 0020 FB68     	 ldr r3,[r7,#12]
 602 0022 3A68     	 ldr r2,[r7]
 603 0024 2832     	 add r2,r2,#40
 604 0026 9200     	 lsl r2,r2,#2
 605 0028 D150     	 str r1,[r2,r3]
 606 002a 08E0     	 b .L21
 607              	.L22:
 279:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 280:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 281:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 282:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 284:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 608              	 .loc 2 284 0
 609 002c BB68     	 ldr r3,[r7,#8]
 610 002e 064A     	 ldr r2,.L24+4
 611 0030 1340     	 and r3,r2
 612 0032 191C     	 mov r1,r3
 613 0034 FB68     	 ldr r3,[r7,#12]
 614 0036 3A68     	 ldr r2,[r7]
 615 0038 2832     	 add r2,r2,#40
 616 003a 9200     	 lsl r2,r2,#2
 617 003c D150     	 str r1,[r2,r3]
 618              	.L21:
 285:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 286:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 287:../Libraries/XMCLib/src/xmc_vadc.c **** }
 619              	 .loc 2 287 0
 620 003e BD46     	 mov sp,r7
 621 0040 04B0     	 add sp,sp,#16
 622              	 
 623 0042 80BD     	 pop {r7,pc}
 624              	.L25:
 625              	 .align 2
 626              	.L24:
 627 0044 1F070000 	 .word 1823
 628 0048 00001F07 	 .word 119472128
 629              	 .cfi_endproc
 630              	.LFE156:
 632              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 633              	 .align 2
 634              	 .global XMC_VADC_GLOBAL_StartupCalibration
 635              	 .code 16
 636              	 .thumb_func
 638              	XMC_VADC_GLOBAL_StartupCalibration:
 639              	.LFB157:
 288:../Libraries/XMCLib/src/xmc_vadc.c **** 
 289:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 290:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 291:../Libraries/XMCLib/src/xmc_vadc.c **** {
 640              	 .loc 2 291 0
 641              	 .cfi_startproc
 642 0000 80B5     	 push {r7,lr}
 643              	.LCFI34:
 644              	 .cfi_def_cfa_offset 8
 645              	 .cfi_offset 7,-8
 646              	 .cfi_offset 14,-4
 647 0002 84B0     	 sub sp,sp,#16
 648              	.LCFI35:
 649              	 .cfi_def_cfa_offset 24
 650 0004 00AF     	 add r7,sp,#0
 651              	.LCFI36:
 652              	 .cfi_def_cfa_register 7
 653 0006 7860     	 str r0,[r7,#4]
 292:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 293:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 294:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 295:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 296:../Libraries/XMCLib/src/xmc_vadc.c **** 
 297:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 298:../Libraries/XMCLib/src/xmc_vadc.c **** 
 299:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 654              	 .loc 2 299 0
 655 0008 7B68     	 ldr r3,[r7,#4]
 656 000a 8022     	 mov r2,#128
 657 000c 9B58     	 ldr r3,[r3,r2]
 658 000e 8022     	 mov r2,#128
 659 0010 1206     	 lsl r2,r2,#24
 660 0012 1A43     	 orr r2,r3
 661 0014 7B68     	 ldr r3,[r7,#4]
 662 0016 8021     	 mov r1,#128
 663 0018 5A50     	 str r2,[r3,r1]
 300:../Libraries/XMCLib/src/xmc_vadc.c **** 
 301:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 302:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 664              	 .loc 2 303 0
 665 001a 0F23     	 mov r3,#15
 666 001c FB18     	 add r3,r7,r3
 667 001e 0022     	 mov r2,#0
 668 0020 1A70     	 strb r2,[r3]
 669 0022 26E0     	 b .L27
 670              	.L33:
 304:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 305:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 671              	 .loc 2 305 0
 672 0024 0F23     	 mov r3,#15
 673 0026 FB18     	 add r3,r7,r3
 674 0028 1A78     	 ldrb r2,[r3]
 675 002a 164B     	 ldr r3,.L34
 676 002c 9200     	 lsl r2,r2,#2
 677 002e D358     	 ldr r3,[r2,r3]
 678 0030 BB60     	 str r3,[r7,#8]
 306:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 679              	 .loc 2 306 0
 680 0032 BB68     	 ldr r3,[r7,#8]
 681 0034 8022     	 mov r2,#128
 682 0036 9A58     	 ldr r2,[r3,r2]
 683 0038 C023     	 mov r3,#192
 684 003a 9B02     	 lsl r3,r3,#10
 685 003c 1340     	 and r3,r2
 686 003e 11D0     	 beq .L28
 307:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 308:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 309:../Libraries/XMCLib/src/xmc_vadc.c **** #if UC_FAMILY == XMC1
 310:../Libraries/XMCLib/src/xmc_vadc.c ****       // wait until calibration is started
 311:../Libraries/XMCLib/src/xmc_vadc.c ****       while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
 687              	 .loc 2 311 0
 688 0040 00E0     	 b .L29
 689              	.L30:
 312:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 313:../Libraries/XMCLib/src/xmc_vadc.c ****         __NOP();
 690              	 .loc 2 313 0
 691              	
 692 0042 C046     	 nop
 693              	
 694              	 .code 16
 695              	.L29:
 311:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 696              	 .loc 2 311 0
 697 0044 BB68     	 ldr r3,[r7,#8]
 698 0046 8022     	 mov r2,#128
 699 0048 9A58     	 ldr r2,[r3,r2]
 700 004a 8023     	 mov r3,#128
 701 004c 9B05     	 lsl r3,r3,#22
 702 004e 1340     	 and r3,r2
 703 0050 F7D0     	 beq .L30
 314:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 315:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 316:../Libraries/XMCLib/src/xmc_vadc.c ****       while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 704              	 .loc 2 316 0
 705 0052 00E0     	 b .L31
 706              	.L32:
 317:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 318:../Libraries/XMCLib/src/xmc_vadc.c ****         __NOP();
 707              	 .loc 2 318 0
 708              	
 709 0054 C046     	 nop
 710              	
 711              	 .code 16
 712              	.L31:
 316:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 713              	 .loc 2 316 0
 714 0056 BB68     	 ldr r3,[r7,#8]
 715 0058 8022     	 mov r2,#128
 716 005a 9A58     	 ldr r2,[r3,r2]
 717 005c 8023     	 mov r3,#128
 718 005e 5B05     	 lsl r3,r3,#21
 719 0060 1340     	 and r3,r2
 720 0062 F7D1     	 bne .L32
 721              	.L28:
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 722              	 .loc 2 303 0 discriminator 2
 723 0064 0F23     	 mov r3,#15
 724 0066 FB18     	 add r3,r7,r3
 725 0068 1A78     	 ldrb r2,[r3]
 726 006a 0F23     	 mov r3,#15
 727 006c FB18     	 add r3,r7,r3
 728 006e 0132     	 add r2,r2,#1
 729 0070 1A70     	 strb r2,[r3]
 730              	.L27:
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 731              	 .loc 2 303 0 is_stmt 0 discriminator 1
 732 0072 0F23     	 mov r3,#15
 733 0074 FB18     	 add r3,r7,r3
 734 0076 1B78     	 ldrb r3,[r3]
 735 0078 012B     	 cmp r3,#1
 736 007a D3D9     	 bls .L33
 319:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 320:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 321:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 322:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 323:../Libraries/XMCLib/src/xmc_vadc.c **** 
 324:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until calibration is started */
 325:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) !=
 326:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
 327:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 328:../Libraries/XMCLib/src/xmc_vadc.c ****     __NOP();
 329:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 330:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 331:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 332:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 333:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 334:../Libraries/XMCLib/src/xmc_vadc.c ****     __NOP();
 335:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 336:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 337:../Libraries/XMCLib/src/xmc_vadc.c **** }
 737              	 .loc 2 337 0 is_stmt 1
 738 007c BD46     	 mov sp,r7
 739 007e 04B0     	 add sp,sp,#16
 740              	 
 741 0080 80BD     	 pop {r7,pc}
 742              	.L35:
 743 0082 C046     	 .align 2
 744              	.L34:
 745 0084 00000000 	 .word g_xmc_vadc_group_array
 746              	 .cfi_endproc
 747              	.LFE157:
 749              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 750              	 .align 2
 751              	 .global XMC_VADC_GLOBAL_SetBoundaries
 752              	 .code 16
 753              	 .thumb_func
 755              	XMC_VADC_GLOBAL_SetBoundaries:
 756              	.LFB158:
 338:../Libraries/XMCLib/src/xmc_vadc.c **** 
 339:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 340:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 341:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 342:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 343:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 344:../Libraries/XMCLib/src/xmc_vadc.c **** {
 757              	 .loc 2 344 0
 758              	 .cfi_startproc
 759 0000 80B5     	 push {r7,lr}
 760              	.LCFI37:
 761              	 .cfi_def_cfa_offset 8
 762              	 .cfi_offset 7,-8
 763              	 .cfi_offset 14,-4
 764 0002 86B0     	 sub sp,sp,#24
 765              	.LCFI38:
 766              	 .cfi_def_cfa_offset 32
 767 0004 00AF     	 add r7,sp,#0
 768              	.LCFI39:
 769              	 .cfi_def_cfa_register 7
 770 0006 F860     	 str r0,[r7,#12]
 771 0008 B960     	 str r1,[r7,#8]
 772 000a 7A60     	 str r2,[r7,#4]
 345:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 346:../Libraries/XMCLib/src/xmc_vadc.c **** 
 347:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 348:../Libraries/XMCLib/src/xmc_vadc.c **** 
 349:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 773              	 .loc 2 349 0
 774 000c 0023     	 mov r3,#0
 775 000e 7B61     	 str r3,[r7,#20]
 350:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 776              	 .loc 2 350 0
 777 0010 7A69     	 ldr r2,[r7,#20]
 778 0012 BB68     	 ldr r3,[r7,#8]
 779 0014 1343     	 orr r3,r2
 780 0016 7B61     	 str r3,[r7,#20]
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 781              	 .loc 2 351 0
 782 0018 7B68     	 ldr r3,[r7,#4]
 783 001a 1B04     	 lsl r3,r3,#16
 784 001c 7A69     	 ldr r2,[r7,#20]
 785 001e 1343     	 orr r3,r2
 786 0020 7B61     	 str r3,[r7,#20]
 352:../Libraries/XMCLib/src/xmc_vadc.c **** 
 353:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 787              	 .loc 2 353 0
 788 0022 FB68     	 ldr r3,[r7,#12]
 789 0024 B821     	 mov r1,#184
 790 0026 7A69     	 ldr r2,[r7,#20]
 791 0028 5A50     	 str r2,[r3,r1]
 354:../Libraries/XMCLib/src/xmc_vadc.c **** }
 792              	 .loc 2 354 0
 793 002a BD46     	 mov sp,r7
 794 002c 06B0     	 add sp,sp,#24
 795              	 
 796 002e 80BD     	 pop {r7,pc}
 797              	 .cfi_endproc
 798              	.LFE158:
 800              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 801              	 .align 2
 802              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 803              	 .code 16
 804              	 .thumb_func
 806              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 807              	.LFB159:
 355:../Libraries/XMCLib/src/xmc_vadc.c **** 
 356:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 357:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 358:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 359:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint16_t boundary_value)
 360:../Libraries/XMCLib/src/xmc_vadc.c **** {
 808              	 .loc 2 360 0
 809              	 .cfi_startproc
 810 0000 80B5     	 push {r7,lr}
 811              	.LCFI40:
 812              	 .cfi_def_cfa_offset 8
 813              	 .cfi_offset 7,-8
 814              	 .cfi_offset 14,-4
 815 0002 84B0     	 sub sp,sp,#16
 816              	.LCFI41:
 817              	 .cfi_def_cfa_offset 24
 818 0004 00AF     	 add r7,sp,#0
 819              	.LCFI42:
 820              	 .cfi_def_cfa_register 7
 821 0006 7860     	 str r0,[r7,#4]
 822 0008 081C     	 mov r0,r1
 823 000a 111C     	 mov r1,r2
 824 000c FB1C     	 add r3,r7,#3
 825 000e 021C     	 add r2,r0,#0
 826 0010 1A70     	 strb r2,[r3]
 827 0012 3B1C     	 mov r3,r7
 828 0014 0A1C     	 add r2,r1,#0
 829 0016 1A80     	 strh r2,[r3]
 361:../Libraries/XMCLib/src/xmc_vadc.c **** 
 362:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 363:../Libraries/XMCLib/src/xmc_vadc.c **** 
 364:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 365:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 366:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 367:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 368:../Libraries/XMCLib/src/xmc_vadc.c **** 
 369:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 830              	 .loc 2 370 0
 831 0018 7B68     	 ldr r3,[r7,#4]
 832 001a B822     	 mov r2,#184
 833 001c 9B58     	 ldr r3,[r3,r2]
 834 001e FB60     	 str r3,[r7,#12]
 371:../Libraries/XMCLib/src/xmc_vadc.c **** 
 372:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 835              	 .loc 2 372 0
 836 0020 FB1C     	 add r3,r7,#3
 837 0022 1B78     	 ldrb r3,[r3]
 838 0024 022B     	 cmp r3,#2
 839 0026 09D1     	 bne .L38
 373:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 374:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 840              	 .loc 2 374 0
 841 0028 FB68     	 ldr r3,[r7,#12]
 842 002a 1B0B     	 lsr r3,r3,#12
 843 002c 1B03     	 lsl r3,r3,#12
 844 002e FB60     	 str r3,[r7,#12]
 375:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 845              	 .loc 2 375 0
 846 0030 3B1C     	 mov r3,r7
 847 0032 1B88     	 ldrh r3,[r3]
 848 0034 FA68     	 ldr r2,[r7,#12]
 849 0036 1343     	 orr r3,r2
 850 0038 FB60     	 str r3,[r7,#12]
 851 003a 0DE0     	 b .L39
 852              	.L38:
 376:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 377:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 853              	 .loc 2 377 0
 854 003c FB1C     	 add r3,r7,#3
 855 003e 1B78     	 ldrb r3,[r3]
 856 0040 032B     	 cmp r3,#3
 857 0042 09D1     	 bne .L39
 378:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 379:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 858              	 .loc 2 379 0
 859 0044 FB68     	 ldr r3,[r7,#12]
 860 0046 084A     	 ldr r2,.L40
 861 0048 1340     	 and r3,r2
 862 004a FB60     	 str r3,[r7,#12]
 380:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 863              	 .loc 2 380 0
 864 004c 3B1C     	 mov r3,r7
 865 004e 1B88     	 ldrh r3,[r3]
 866 0050 1B04     	 lsl r3,r3,#16
 867 0052 FA68     	 ldr r2,[r7,#12]
 868 0054 1343     	 orr r3,r2
 869 0056 FB60     	 str r3,[r7,#12]
 870              	.L39:
 381:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 382:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 383:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 384:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 385:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 386:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 871              	 .loc 2 386 0
 872 0058 7B68     	 ldr r3,[r7,#4]
 873 005a B821     	 mov r1,#184
 874 005c FA68     	 ldr r2,[r7,#12]
 875 005e 5A50     	 str r2,[r3,r1]
 387:../Libraries/XMCLib/src/xmc_vadc.c **** 
 388:../Libraries/XMCLib/src/xmc_vadc.c **** }
 876              	 .loc 2 388 0
 877 0060 BD46     	 mov sp,r7
 878 0062 04B0     	 add sp,sp,#16
 879              	 
 880 0064 80BD     	 pop {r7,pc}
 881              	.L41:
 882 0066 C046     	 .align 2
 883              	.L40:
 884 0068 FFFF00F0 	 .word -268369921
 885              	 .cfi_endproc
 886              	.LFE159:
 888              	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 889              	 .align 2
 890              	 .global XMC_VADC_GLOBAL_SetCompareValue
 891              	 .code 16
 892              	 .thumb_func
 894              	XMC_VADC_GLOBAL_SetCompareValue:
 895              	.LFB160:
 389:../Libraries/XMCLib/src/xmc_vadc.c **** 
 390:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 391:../Libraries/XMCLib/src/xmc_vadc.c **** 
 392:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 393:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 394:../Libraries/XMCLib/src/xmc_vadc.c **** {
 896              	 .loc 2 394 0
 897              	 .cfi_startproc
 898 0000 80B5     	 push {r7,lr}
 899              	.LCFI43:
 900              	 .cfi_def_cfa_offset 8
 901              	 .cfi_offset 7,-8
 902              	 .cfi_offset 14,-4
 903 0002 82B0     	 sub sp,sp,#8
 904              	.LCFI44:
 905              	 .cfi_def_cfa_offset 16
 906 0004 00AF     	 add r7,sp,#0
 907              	.LCFI45:
 908              	 .cfi_def_cfa_register 7
 909 0006 7860     	 str r0,[r7,#4]
 910 0008 0A1C     	 mov r2,r1
 911 000a BB1C     	 add r3,r7,#2
 912 000c 1A80     	 strh r2,[r3]
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 396:../Libraries/XMCLib/src/xmc_vadc.c **** 
 397:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 913              	 .loc 2 397 0
 914 000e 7A68     	 ldr r2,[r7,#4]
 915 0010 C023     	 mov r3,#192
 916 0012 9B00     	 lsl r3,r3,#2
 917 0014 D358     	 ldr r3,[r2,r3]
 918 0016 1B0C     	 lsr r3,r3,#16
 919 0018 1904     	 lsl r1,r3,#16
 920 001a 7A68     	 ldr r2,[r7,#4]
 921 001c C023     	 mov r3,#192
 922 001e 9B00     	 lsl r3,r3,#2
 923 0020 D150     	 str r1,[r2,r3]
 398:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 924              	 .loc 2 398 0
 925 0022 7A68     	 ldr r2,[r7,#4]
 926 0024 C023     	 mov r3,#192
 927 0026 9B00     	 lsl r3,r3,#2
 928 0028 D258     	 ldr r2,[r2,r3]
 929 002a BB1C     	 add r3,r7,#2
 930 002c 1B88     	 ldrh r3,[r3]
 931 002e 9B00     	 lsl r3,r3,#2
 932 0030 1A43     	 orr r2,r3
 933 0032 111C     	 mov r1,r2
 934 0034 7A68     	 ldr r2,[r7,#4]
 935 0036 C023     	 mov r3,#192
 936 0038 9B00     	 lsl r3,r3,#2
 937 003a D150     	 str r1,[r2,r3]
 399:../Libraries/XMCLib/src/xmc_vadc.c **** }
 938              	 .loc 2 399 0
 939 003c BD46     	 mov sp,r7
 940 003e 02B0     	 add sp,sp,#8
 941              	 
 942 0040 80BD     	 pop {r7,pc}
 943              	 .cfi_endproc
 944              	.LFE160:
 946 0042 C046     	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 947              	 .align 2
 948              	 .global XMC_VADC_GLOBAL_GetCompareResult
 949              	 .code 16
 950              	 .thumb_func
 952              	XMC_VADC_GLOBAL_GetCompareResult:
 953              	.LFB161:
 400:../Libraries/XMCLib/src/xmc_vadc.c **** 
 401:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 402:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 403:../Libraries/XMCLib/src/xmc_vadc.c **** {
 954              	 .loc 2 403 0
 955              	 .cfi_startproc
 956 0000 80B5     	 push {r7,lr}
 957              	.LCFI46:
 958              	 .cfi_def_cfa_offset 8
 959              	 .cfi_offset 7,-8
 960              	 .cfi_offset 14,-4
 961 0002 84B0     	 sub sp,sp,#16
 962              	.LCFI47:
 963              	 .cfi_def_cfa_offset 24
 964 0004 00AF     	 add r7,sp,#0
 965              	.LCFI48:
 966              	 .cfi_def_cfa_register 7
 967 0006 7860     	 str r0,[r7,#4]
 404:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 405:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 406:../Libraries/XMCLib/src/xmc_vadc.c **** 
 407:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 408:../Libraries/XMCLib/src/xmc_vadc.c **** 
 409:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 968              	 .loc 2 409 0
 969 0008 7A68     	 ldr r2,[r7,#4]
 970 000a C023     	 mov r3,#192
 971 000c 9B00     	 lsl r3,r3,#2
 972 000e D358     	 ldr r3,[r2,r3]
 973 0010 BB60     	 str r3,[r7,#8]
 410:../Libraries/XMCLib/src/xmc_vadc.c **** 
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 974              	 .loc 2 411 0
 975 0012 BB68     	 ldr r3,[r7,#8]
 976 0014 002B     	 cmp r3,#0
 977 0016 08DA     	 bge .L44
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 413:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 978              	 .loc 2 413 0
 979 0018 BB68     	 ldr r3,[r7,#8]
 980 001a 9B0F     	 lsr r3,r3,#30
 981 001c DAB2     	 uxtb r2,r3
 982 001e 0F23     	 mov r3,#15
 983 0020 FB18     	 add r3,r7,r3
 984 0022 0121     	 mov r1,#1
 985 0024 0A40     	 and r2,r1
 986 0026 1A70     	 strb r2,[r3]
 987 0028 03E0     	 b .L45
 988              	.L44:
 414:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 417:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 989              	 .loc 2 417 0
 990 002a 0F23     	 mov r3,#15
 991 002c FB18     	 add r3,r7,r3
 992 002e 0222     	 mov r2,#2
 993 0030 1A70     	 strb r2,[r3]
 994              	.L45:
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 419:../Libraries/XMCLib/src/xmc_vadc.c **** 
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 995              	 .loc 2 420 0
 996 0032 0F23     	 mov r3,#15
 997 0034 FB18     	 add r3,r7,r3
 998 0036 1B78     	 ldrb r3,[r3]
 421:../Libraries/XMCLib/src/xmc_vadc.c **** }
 999              	 .loc 2 421 0
 1000 0038 181C     	 mov r0,r3
 1001 003a BD46     	 mov sp,r7
 1002 003c 04B0     	 add sp,sp,#16
 1003              	 
 1004 003e 80BD     	 pop {r7,pc}
 1005              	 .cfi_endproc
 1006              	.LFE161:
 1008              	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 1009              	 .align 2
 1010              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 1011              	 .code 16
 1012              	 .thumb_func
 1014              	XMC_VADC_GLOBAL_BindGroupToEMux:
 1015              	.LFB162:
 422:../Libraries/XMCLib/src/xmc_vadc.c **** 
 423:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 424:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 425:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 426:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1016              	 .loc 2 426 0
 1017              	 .cfi_startproc
 1018 0000 80B5     	 push {r7,lr}
 1019              	.LCFI49:
 1020              	 .cfi_def_cfa_offset 8
 1021              	 .cfi_offset 7,-8
 1022              	 .cfi_offset 14,-4
 1023 0002 86B0     	 sub sp,sp,#24
 1024              	.LCFI50:
 1025              	 .cfi_def_cfa_offset 32
 1026 0004 00AF     	 add r7,sp,#0
 1027              	.LCFI51:
 1028              	 .cfi_def_cfa_register 7
 1029 0006 F860     	 str r0,[r7,#12]
 1030 0008 B960     	 str r1,[r7,#8]
 1031 000a 7A60     	 str r2,[r7,#4]
 427:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 428:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 429:../Libraries/XMCLib/src/xmc_vadc.c **** 
 430:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 431:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 433:../Libraries/XMCLib/src/xmc_vadc.c **** 
 434:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1032              	 .loc 2 434 0
 1033 000c BB68     	 ldr r3,[r7,#8]
 1034 000e 002B     	 cmp r3,#0
 1035 0010 04D1     	 bne .L48
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 436:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1036              	 .loc 2 436 0
 1037 0012 0023     	 mov r3,#0
 1038 0014 3B61     	 str r3,[r7,#16]
 437:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1039              	 .loc 2 437 0
 1040 0016 0F23     	 mov r3,#15
 1041 0018 7B61     	 str r3,[r7,#20]
 1042 001a 03E0     	 b .L49
 1043              	.L48:
 438:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 439:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 440:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 441:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1044              	 .loc 2 441 0
 1045 001c 0423     	 mov r3,#4
 1046 001e 3B61     	 str r3,[r7,#16]
 442:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1047              	 .loc 2 442 0
 1048 0020 F023     	 mov r3,#240
 1049 0022 7B61     	 str r3,[r7,#20]
 1050              	.L49:
 443:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 444:../Libraries/XMCLib/src/xmc_vadc.c **** 
 445:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1051              	 .loc 2 445 0
 1052 0024 FA68     	 ldr r2,[r7,#12]
 1053 0026 FC23     	 mov r3,#252
 1054 0028 9B00     	 lsl r3,r3,#2
 1055 002a D358     	 ldr r3,[r2,r3]
 1056 002c 7A69     	 ldr r2,[r7,#20]
 1057 002e D243     	 mvn r2,r2
 1058 0030 1A40     	 and r2,r3
 1059 0032 111C     	 mov r1,r2
 1060 0034 FA68     	 ldr r2,[r7,#12]
 1061 0036 FC23     	 mov r3,#252
 1062 0038 9B00     	 lsl r3,r3,#2
 1063 003a D150     	 str r1,[r2,r3]
 446:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1064              	 .loc 2 446 0
 1065 003c FA68     	 ldr r2,[r7,#12]
 1066 003e FC23     	 mov r3,#252
 1067 0040 9B00     	 lsl r3,r3,#2
 1068 0042 D258     	 ldr r2,[r2,r3]
 1069 0044 3B69     	 ldr r3,[r7,#16]
 1070 0046 7968     	 ldr r1,[r7,#4]
 1071 0048 9940     	 lsl r1,r1,r3
 1072 004a 0B1C     	 mov r3,r1
 1073 004c 1A43     	 orr r2,r3
 1074 004e 111C     	 mov r1,r2
 1075 0050 FA68     	 ldr r2,[r7,#12]
 1076 0052 FC23     	 mov r3,#252
 1077 0054 9B00     	 lsl r3,r3,#2
 1078 0056 D150     	 str r1,[r2,r3]
 447:../Libraries/XMCLib/src/xmc_vadc.c **** 
 448:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1079              	 .loc 2 448 0
 1080 0058 BD46     	 mov sp,r7
 1081 005a 06B0     	 add sp,sp,#24
 1082              	 
 1083 005c 80BD     	 pop {r7,pc}
 1084              	 .cfi_endproc
 1085              	.LFE162:
 1087 005e C046     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1088              	 .align 2
 1089              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1090              	 .code 16
 1091              	 .thumb_func
 1093              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1094              	.LFB163:
 449:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 450:../Libraries/XMCLib/src/xmc_vadc.c **** 
 451:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 452:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 453:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1095              	 .loc 2 453 0
 1096              	 .cfi_startproc
 1097 0000 80B5     	 push {r7,lr}
 1098              	.LCFI52:
 1099              	 .cfi_def_cfa_offset 8
 1100              	 .cfi_offset 7,-8
 1101              	 .cfi_offset 14,-4
 1102 0002 84B0     	 sub sp,sp,#16
 1103              	.LCFI53:
 1104              	 .cfi_def_cfa_offset 24
 1105 0004 00AF     	 add r7,sp,#0
 1106              	.LCFI54:
 1107              	 .cfi_def_cfa_register 7
 1108 0006 7860     	 str r0,[r7,#4]
 1109 0008 0A1C     	 mov r2,r1
 1110 000a FB1C     	 add r3,r7,#3
 1111 000c 1A70     	 strb r2,[r3]
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 455:../Libraries/XMCLib/src/xmc_vadc.c **** 
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 457:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 458:../Libraries/XMCLib/src/xmc_vadc.c **** 
 459:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1112              	 .loc 2 459 0
 1113 000e FB1C     	 add r3,r7,#3
 1114 0010 1B78     	 ldrb r3,[r3]
 1115 0012 032B     	 cmp r3,#3
 1116 0014 04D9     	 bls .L51
 460:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 461:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1117              	 .loc 2 461 0
 1118 0016 FB1C     	 add r3,r7,#3
 1119 0018 1B78     	 ldrb r3,[r3]
 1120 001a 043B     	 sub r3,r3,#4
 1121 001c FB60     	 str r3,[r7,#12]
 1122 001e 02E0     	 b .L52
 1123              	.L51:
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 463:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 464:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 465:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1124              	 .loc 2 465 0
 1125 0020 FB1C     	 add r3,r7,#3
 1126 0022 1B78     	 ldrb r3,[r3]
 1127 0024 FB60     	 str r3,[r7,#12]
 1128              	.L52:
 466:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 467:../Libraries/XMCLib/src/xmc_vadc.c **** 
 468:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1129              	 .loc 2 468 0
 1130 0026 7A68     	 ldr r2,[r7,#4]
 1131 0028 A023     	 mov r3,#160
 1132 002a 5B00     	 lsl r3,r3,#1
 1133 002c D358     	 ldr r3,[r2,r3]
 1134 002e 0B4A     	 ldr r2,.L53
 1135 0030 1340     	 and r3,r2
 1136 0032 191C     	 mov r1,r3
 1137 0034 7A68     	 ldr r2,[r7,#4]
 1138 0036 A023     	 mov r3,#160
 1139 0038 5B00     	 lsl r3,r3,#1
 1140 003a D150     	 str r1,[r2,r3]
 469:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1141              	 .loc 2 469 0
 1142 003c 7A68     	 ldr r2,[r7,#4]
 1143 003e A023     	 mov r3,#160
 1144 0040 5B00     	 lsl r3,r3,#1
 1145 0042 D258     	 ldr r2,[r2,r3]
 1146 0044 FB68     	 ldr r3,[r7,#12]
 1147 0046 1B04     	 lsl r3,r3,#16
 1148 0048 1A43     	 orr r2,r3
 1149 004a 111C     	 mov r1,r2
 1150 004c 7A68     	 ldr r2,[r7,#4]
 1151 004e A023     	 mov r3,#160
 1152 0050 5B00     	 lsl r3,r3,#1
 1153 0052 D150     	 str r1,[r2,r3]
 470:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1154              	 .loc 2 470 0
 1155 0054 BD46     	 mov sp,r7
 1156 0056 04B0     	 add sp,sp,#16
 1157              	 
 1158 0058 80BD     	 pop {r7,pc}
 1159              	.L54:
 1160 005a C046     	 .align 2
 1161              	.L53:
 1162 005c FFFFF0FF 	 .word -983041
 1163              	 .cfi_endproc
 1164              	.LFE163:
 1166              	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1167              	 .align 2
 1168              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1169              	 .code 16
 1170              	 .thumb_func
 1172              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1173              	.LFB164:
 471:../Libraries/XMCLib/src/xmc_vadc.c **** 
 472:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 473:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 474:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1174              	 .loc 2 474 0
 1175              	 .cfi_startproc
 1176 0000 80B5     	 push {r7,lr}
 1177              	.LCFI55:
 1178              	 .cfi_def_cfa_offset 8
 1179              	 .cfi_offset 7,-8
 1180              	 .cfi_offset 14,-4
 1181 0002 84B0     	 sub sp,sp,#16
 1182              	.LCFI56:
 1183              	 .cfi_def_cfa_offset 24
 1184 0004 00AF     	 add r7,sp,#0
 1185              	.LCFI57:
 1186              	 .cfi_def_cfa_register 7
 1187 0006 7860     	 str r0,[r7,#4]
 1188 0008 0A1C     	 mov r2,r1
 1189 000a FB1C     	 add r3,r7,#3
 1190 000c 1A70     	 strb r2,[r3]
 475:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 476:../Libraries/XMCLib/src/xmc_vadc.c **** 
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 478:../Libraries/XMCLib/src/xmc_vadc.c **** 
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1191              	 .loc 2 479 0
 1192 000e FB1C     	 add r3,r7,#3
 1193 0010 1B78     	 ldrb r3,[r3]
 1194 0012 032B     	 cmp r3,#3
 1195 0014 04D9     	 bls .L56
 480:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 481:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1196              	 .loc 2 481 0
 1197 0016 FB1C     	 add r3,r7,#3
 1198 0018 1B78     	 ldrb r3,[r3]
 1199 001a 043B     	 sub r3,r3,#4
 1200 001c FB60     	 str r3,[r7,#12]
 1201 001e 02E0     	 b .L57
 1202              	.L56:
 482:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 483:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 484:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 485:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1203              	 .loc 2 485 0
 1204 0020 FB1C     	 add r3,r7,#3
 1205 0022 1B78     	 ldrb r3,[r3]
 1206 0024 FB60     	 str r3,[r7,#12]
 1207              	.L57:
 486:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 487:../Libraries/XMCLib/src/xmc_vadc.c **** 
 488:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1208              	 .loc 2 488 0
 1209 0026 7A68     	 ldr r2,[r7,#4]
 1210 0028 A023     	 mov r3,#160
 1211 002a 5B00     	 lsl r3,r3,#1
 1212 002c D358     	 ldr r3,[r2,r3]
 1213 002e 0F22     	 mov r2,#15
 1214 0030 9343     	 bic r3,r2
 1215 0032 191C     	 mov r1,r3
 1216 0034 7A68     	 ldr r2,[r7,#4]
 1217 0036 A023     	 mov r3,#160
 1218 0038 5B00     	 lsl r3,r3,#1
 1219 003a D150     	 str r1,[r2,r3]
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1220              	 .loc 2 489 0
 1221 003c 7A68     	 ldr r2,[r7,#4]
 1222 003e A023     	 mov r3,#160
 1223 0040 5B00     	 lsl r3,r3,#1
 1224 0042 D258     	 ldr r2,[r2,r3]
 1225 0044 FB68     	 ldr r3,[r7,#12]
 1226 0046 1A43     	 orr r2,r3
 1227 0048 111C     	 mov r1,r2
 1228 004a 7A68     	 ldr r2,[r7,#4]
 1229 004c A023     	 mov r3,#160
 1230 004e 5B00     	 lsl r3,r3,#1
 1231 0050 D150     	 str r1,[r2,r3]
 490:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1232              	 .loc 2 490 0
 1233 0052 BD46     	 mov sp,r7
 1234 0054 04B0     	 add sp,sp,#16
 1235              	 
 1236 0056 80BD     	 pop {r7,pc}
 1237              	 .cfi_endproc
 1238              	.LFE164:
 1240              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1241              	 .align 2
 1242              	 .global XMC_VADC_GROUP_Init
 1243              	 .code 16
 1244              	 .thumb_func
 1246              	XMC_VADC_GROUP_Init:
 1247              	.LFB165:
 491:../Libraries/XMCLib/src/xmc_vadc.c **** 
 492:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 493:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 494:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 495:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1248              	 .loc 2 495 0
 1249              	 .cfi_startproc
 1250 0000 80B5     	 push {r7,lr}
 1251              	.LCFI58:
 1252              	 .cfi_def_cfa_offset 8
 1253              	 .cfi_offset 7,-8
 1254              	 .cfi_offset 14,-4
 1255 0002 82B0     	 sub sp,sp,#8
 1256              	.LCFI59:
 1257              	 .cfi_def_cfa_offset 16
 1258 0004 00AF     	 add r7,sp,#0
 1259              	.LCFI60:
 1260              	 .cfi_def_cfa_register 7
 1261 0006 7860     	 str r0,[r7,#4]
 1262 0008 3960     	 str r1,[r7]
 496:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 497:../Libraries/XMCLib/src/xmc_vadc.c **** 
 498:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 499:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1263              	 .loc 2 499 0
 1264 000a 7A68     	 ldr r2,[r7,#4]
 1265 000c 3B68     	 ldr r3,[r7]
 1266 000e 5B68     	 ldr r3,[r3,#4]
 1267 0010 101C     	 mov r0,r2
 1268 0012 191C     	 mov r1,r3
 1269 0014 0022     	 mov r2,#0
 1270 0016 0023     	 mov r3,#0
 1271 0018 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 500:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1272              	 .loc 2 500 0
 1273 001c 7A68     	 ldr r2,[r7,#4]
 1274 001e 3B68     	 ldr r3,[r7]
 1275 0020 5B68     	 ldr r3,[r3,#4]
 1276 0022 101C     	 mov r0,r2
 1277 0024 191C     	 mov r1,r3
 1278 0026 0122     	 mov r2,#1
 1279 0028 0023     	 mov r3,#0
 1280 002a FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 501:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1281              	 .loc 2 501 0
 1282 002e 7A68     	 ldr r2,[r7,#4]
 1283 0030 3B68     	 ldr r3,[r7]
 1284 0032 9B68     	 ldr r3,[r3,#8]
 1285 0034 101C     	 mov r0,r2
 1286 0036 191C     	 mov r1,r3
 1287 0038 0022     	 mov r2,#0
 1288 003a 0123     	 mov r3,#1
 1289 003c FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 502:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1290              	 .loc 2 502 0
 1291 0040 7A68     	 ldr r2,[r7,#4]
 1292 0042 3B68     	 ldr r3,[r7]
 1293 0044 9B68     	 ldr r3,[r3,#8]
 1294 0046 101C     	 mov r0,r2
 1295 0048 191C     	 mov r1,r3
 1296 004a 0122     	 mov r2,#1
 1297 004c 0123     	 mov r3,#1
 1298 004e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 503:../Libraries/XMCLib/src/xmc_vadc.c **** 
 504:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1299              	 .loc 2 504 0
 1300 0052 3B68     	 ldr r3,[r7]
 1301 0054 1A69     	 ldr r2,[r3,#16]
 1302 0056 7B68     	 ldr r3,[r7,#4]
 1303 0058 8021     	 mov r1,#128
 1304 005a 5A50     	 str r2,[r3,r1]
 505:../Libraries/XMCLib/src/xmc_vadc.c **** 
 506:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1305              	 .loc 2 506 0
 1306 005c 3B68     	 ldr r3,[r7]
 1307 005e DA68     	 ldr r2,[r3,#12]
 1308 0060 7B68     	 ldr r3,[r7,#4]
 1309 0062 B821     	 mov r1,#184
 1310 0064 5A50     	 str r2,[r3,r1]
 507:../Libraries/XMCLib/src/xmc_vadc.c **** 
 508:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 1311              	 .loc 2 509 0
 1312 0066 7A68     	 ldr r2,[r7,#4]
 1313 0068 3B68     	 ldr r3,[r7]
 1314 006a 1B68     	 ldr r3,[r3]
 1315 006c 101C     	 mov r0,r2
 1316 006e 191C     	 mov r1,r3
 1317 0070 FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 510:../Libraries/XMCLib/src/xmc_vadc.c **** 
 511:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1318              	 .loc 2 511 0
 1319 0074 BD46     	 mov sp,r7
 1320 0076 02B0     	 add sp,sp,#8
 1321              	 
 1322 0078 80BD     	 pop {r7,pc}
 1323              	 .cfi_endproc
 1324              	.LFE165:
 1326 007a C046     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1327              	 .align 2
 1328              	 .global XMC_VADC_GROUP_InputClassInit
 1329              	 .code 16
 1330              	 .thumb_func
 1332              	XMC_VADC_GROUP_InputClassInit:
 1333              	.LFB166:
 512:../Libraries/XMCLib/src/xmc_vadc.c **** 
 513:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 514:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 515:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
 516:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1334              	 .loc 2 516 0
 1335              	 .cfi_startproc
 1336 0000 80B5     	 push {r7,lr}
 1337              	.LCFI61:
 1338              	 .cfi_def_cfa_offset 8
 1339              	 .cfi_offset 7,-8
 1340              	 .cfi_offset 14,-4
 1341 0002 8CB0     	 sub sp,sp,#48
 1342              	.LCFI62:
 1343              	 .cfi_def_cfa_offset 56
 1344 0004 00AF     	 add r7,sp,#0
 1345              	.LCFI63:
 1346              	 .cfi_def_cfa_register 7
 1347 0006 F860     	 str r0,[r7,#12]
 1348 0008 B960     	 str r1,[r7,#8]
 1349 000a 3B60     	 str r3,[r7]
 1350 000c FB1D     	 add r3,r7,#7
 1351 000e 1A70     	 strb r2,[r3]
 517:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 518:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 519:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 520:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 521:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 522:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 524:../Libraries/XMCLib/src/xmc_vadc.c **** 
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 527:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 528:../Libraries/XMCLib/src/xmc_vadc.c **** 
 529:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 530:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 531:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 532:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 533:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1352              	 .loc 2 533 0
 1353 0010 FB1D     	 add r3,r7,#7
 1354 0012 1B78     	 ldrb r3,[r3]
 1355 0014 002B     	 cmp r3,#0
 1356 0016 19D1     	 bne .L60
 534:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 535:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1357              	 .loc 2 535 0
 1358 0018 0823     	 mov r3,#8
 1359 001a FB62     	 str r3,[r7,#44]
 536:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1360              	 .loc 2 536 0
 1361 001c E023     	 mov r3,#224
 1362 001e DB00     	 lsl r3,r3,#3
 1363 0020 7B62     	 str r3,[r7,#36]
 537:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1364              	 .loc 2 537 0
 1365 0022 0023     	 mov r3,#0
 1366 0024 BB62     	 str r3,[r7,#40]
 538:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1367              	 .loc 2 538 0
 1368 0026 1F23     	 mov r3,#31
 1369 0028 3B62     	 str r3,[r7,#32]
 539:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1370              	 .loc 2 539 0
 1371 002a 0823     	 mov r3,#8
 1372 002c FB18     	 add r3,r7,r3
 1373 002e 1B78     	 ldrb r3,[r3]
 1374 0030 DB06     	 lsl r3,r3,#27
 1375 0032 DB0E     	 lsr r3,r3,#27
 1376 0034 DBB2     	 uxtb r3,r3
 1377 0036 FB61     	 str r3,[r7,#28]
 540:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1378              	 .loc 2 540 0
 1379 0038 0923     	 mov r3,#9
 1380 003a FB18     	 add r3,r7,r3
 1381 003c 1B78     	 ldrb r3,[r3]
 1382 003e 5B07     	 lsl r3,r3,#29
 1383 0040 5B0F     	 lsr r3,r3,#29
 1384 0042 DAB2     	 uxtb r2,r3
 1385 0044 1B23     	 mov r3,#27
 1386 0046 FB18     	 add r3,r7,r3
 1387 0048 1A70     	 strb r2,[r3]
 1388 004a 19E0     	 b .L61
 1389              	.L60:
 541:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 543:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 544:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1390              	 .loc 2 544 0
 1391 004c 1823     	 mov r3,#24
 1392 004e FB62     	 str r3,[r7,#44]
 545:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1393              	 .loc 2 545 0
 1394 0050 E023     	 mov r3,#224
 1395 0052 DB04     	 lsl r3,r3,#19
 1396 0054 7B62     	 str r3,[r7,#36]
 546:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1397              	 .loc 2 546 0
 1398 0056 1023     	 mov r3,#16
 1399 0058 BB62     	 str r3,[r7,#40]
 547:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1400              	 .loc 2 547 0
 1401 005a F823     	 mov r3,#248
 1402 005c 5B03     	 lsl r3,r3,#13
 1403 005e 3B62     	 str r3,[r7,#32]
 548:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1404              	 .loc 2 548 0
 1405 0060 0A23     	 mov r3,#10
 1406 0062 FB18     	 add r3,r7,r3
 1407 0064 1B78     	 ldrb r3,[r3]
 1408 0066 DB06     	 lsl r3,r3,#27
 1409 0068 DB0E     	 lsr r3,r3,#27
 1410 006a DBB2     	 uxtb r3,r3
 1411 006c FB61     	 str r3,[r7,#28]
 549:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1412              	 .loc 2 549 0
 1413 006e 0B23     	 mov r3,#11
 1414 0070 FB18     	 add r3,r7,r3
 1415 0072 1B78     	 ldrb r3,[r3]
 1416 0074 5B07     	 lsl r3,r3,#29
 1417 0076 5B0F     	 lsr r3,r3,#29
 1418 0078 DAB2     	 uxtb r2,r3
 1419 007a 1B23     	 mov r3,#27
 1420 007c FB18     	 add r3,r7,r3
 1421 007e 1A70     	 strb r2,[r3]
 1422              	.L61:
 550:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 551:../Libraries/XMCLib/src/xmc_vadc.c **** 
 552:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 553:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1423              	 .loc 2 553 0
 1424 0080 FB68     	 ldr r3,[r7,#12]
 1425 0082 3A68     	 ldr r2,[r7]
 1426 0084 2832     	 add r2,r2,#40
 1427 0086 9200     	 lsl r2,r2,#2
 1428 0088 D358     	 ldr r3,[r2,r3]
 1429 008a 7B61     	 str r3,[r7,#20]
 554:../Libraries/XMCLib/src/xmc_vadc.c **** 
 555:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 556:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1430              	 .loc 2 556 0
 1431 008c 7B6A     	 ldr r3,[r7,#36]
 1432 008e DA43     	 mvn r2,r3
 1433 0090 7B69     	 ldr r3,[r7,#20]
 1434 0092 1340     	 and r3,r2
 1435 0094 7B61     	 str r3,[r7,#20]
 557:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1436              	 .loc 2 557 0
 1437 0096 1B23     	 mov r3,#27
 1438 0098 FB18     	 add r3,r7,r3
 1439 009a 1A78     	 ldrb r2,[r3]
 1440 009c FB6A     	 ldr r3,[r7,#44]
 1441 009e 9A40     	 lsl r2,r2,r3
 1442 00a0 131C     	 mov r3,r2
 1443 00a2 7A69     	 ldr r2,[r7,#20]
 1444 00a4 1343     	 orr r3,r2
 1445 00a6 7B61     	 str r3,[r7,#20]
 558:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1446              	 .loc 2 558 0
 1447 00a8 3B6A     	 ldr r3,[r7,#32]
 1448 00aa DA43     	 mvn r2,r3
 1449 00ac 7B69     	 ldr r3,[r7,#20]
 1450 00ae 1340     	 and r3,r2
 1451 00b0 7B61     	 str r3,[r7,#20]
 559:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1452              	 .loc 2 559 0
 1453 00b2 BB6A     	 ldr r3,[r7,#40]
 1454 00b4 FA69     	 ldr r2,[r7,#28]
 1455 00b6 9A40     	 lsl r2,r2,r3
 1456 00b8 131C     	 mov r3,r2
 1457 00ba 7A69     	 ldr r2,[r7,#20]
 1458 00bc 1343     	 orr r3,r2
 1459 00be 7B61     	 str r3,[r7,#20]
 560:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1460              	 .loc 2 560 0
 1461 00c0 FB68     	 ldr r3,[r7,#12]
 1462 00c2 3A68     	 ldr r2,[r7]
 1463 00c4 2832     	 add r2,r2,#40
 1464 00c6 9200     	 lsl r2,r2,#2
 1465 00c8 7969     	 ldr r1,[r7,#20]
 1466 00ca D150     	 str r1,[r2,r3]
 561:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1467              	 .loc 2 561 0
 1468 00cc BD46     	 mov sp,r7
 1469 00ce 0CB0     	 add sp,sp,#48
 1470              	 
 1471 00d0 80BD     	 pop {r7,pc}
 1472              	 .cfi_endproc
 1473              	.LFE166:
 1475 00d2 C046     	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1476              	 .align 2
 1477              	 .global XMC_VADC_GROUP_SetPowerMode
 1478              	 .code 16
 1479              	 .thumb_func
 1481              	XMC_VADC_GROUP_SetPowerMode:
 1482              	.LFB167:
 562:../Libraries/XMCLib/src/xmc_vadc.c **** 
 563:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 564:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 565:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1483              	 .loc 2 565 0
 1484              	 .cfi_startproc
 1485 0000 80B5     	 push {r7,lr}
 1486              	.LCFI64:
 1487              	 .cfi_def_cfa_offset 8
 1488              	 .cfi_offset 7,-8
 1489              	 .cfi_offset 14,-4
 1490 0002 84B0     	 sub sp,sp,#16
 1491              	.LCFI65:
 1492              	 .cfi_def_cfa_offset 24
 1493 0004 00AF     	 add r7,sp,#0
 1494              	.LCFI66:
 1495              	 .cfi_def_cfa_register 7
 1496 0006 7860     	 str r0,[r7,#4]
 1497 0008 0A1C     	 mov r2,r1
 1498 000a FB1C     	 add r3,r7,#3
 1499 000c 1A70     	 strb r2,[r3]
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 567:../Libraries/XMCLib/src/xmc_vadc.c **** 
 568:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 569:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 570:../Libraries/XMCLib/src/xmc_vadc.c **** 
 571:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1500              	 .loc 2 571 0
 1501 000e 7B68     	 ldr r3,[r7,#4]
 1502 0010 8022     	 mov r2,#128
 1503 0012 9B58     	 ldr r3,[r3,r2]
 1504 0014 FB60     	 str r3,[r7,#12]
 572:../Libraries/XMCLib/src/xmc_vadc.c **** 
 573:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1505              	 .loc 2 573 0
 1506 0016 FB68     	 ldr r3,[r7,#12]
 1507 0018 0322     	 mov r2,#3
 1508 001a 9343     	 bic r3,r2
 1509 001c FB60     	 str r3,[r7,#12]
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1510              	 .loc 2 574 0
 1511 001e FB1C     	 add r3,r7,#3
 1512 0020 1B78     	 ldrb r3,[r3]
 1513 0022 FA68     	 ldr r2,[r7,#12]
 1514 0024 1343     	 orr r3,r2
 1515 0026 FB60     	 str r3,[r7,#12]
 575:../Libraries/XMCLib/src/xmc_vadc.c **** 
 576:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1516              	 .loc 2 576 0
 1517 0028 7B68     	 ldr r3,[r7,#4]
 1518 002a 8021     	 mov r1,#128
 1519 002c FA68     	 ldr r2,[r7,#12]
 1520 002e 5A50     	 str r2,[r3,r1]
 577:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1521              	 .loc 2 577 0
 1522 0030 BD46     	 mov sp,r7
 1523 0032 04B0     	 add sp,sp,#16
 1524              	 
 1525 0034 80BD     	 pop {r7,pc}
 1526              	 .cfi_endproc
 1527              	.LFE167:
 1529 0036 C046     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1530              	 .align 2
 1531              	 .global XMC_VADC_GROUP_SetSyncSlave
 1532              	 .code 16
 1533              	 .thumb_func
 1535              	XMC_VADC_GROUP_SetSyncSlave:
 1536              	.LFB168:
 578:../Libraries/XMCLib/src/xmc_vadc.c **** 
 579:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 580:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 581:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1537              	 .loc 2 581 0
 1538              	 .cfi_startproc
 1539 0000 80B5     	 push {r7,lr}
 1540              	.LCFI67:
 1541              	 .cfi_def_cfa_offset 8
 1542              	 .cfi_offset 7,-8
 1543              	 .cfi_offset 14,-4
 1544 0002 86B0     	 sub sp,sp,#24
 1545              	.LCFI68:
 1546              	 .cfi_def_cfa_offset 32
 1547 0004 00AF     	 add r7,sp,#0
 1548              	.LCFI69:
 1549              	 .cfi_def_cfa_register 7
 1550 0006 F860     	 str r0,[r7,#12]
 1551 0008 B960     	 str r1,[r7,#8]
 1552 000a 7A60     	 str r2,[r7,#4]
 582:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 583:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 584:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 585:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 586:../Libraries/XMCLib/src/xmc_vadc.c **** 
 587:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 588:../Libraries/XMCLib/src/xmc_vadc.c **** 
 589:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 590:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1553              	 .loc 2 590 0
 1554 000c 7A68     	 ldr r2,[r7,#4]
 1555 000e BB68     	 ldr r3,[r7,#8]
 1556 0010 9A42     	 cmp r2,r3
 1557 0012 02D9     	 bls .L64
 591:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 592:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1558              	 .loc 2 592 0
 1559 0014 BB68     	 ldr r3,[r7,#8]
 1560 0016 0133     	 add r3,r3,#1
 1561 0018 BB60     	 str r3,[r7,#8]
 1562              	.L64:
 593:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 594:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 595:../Libraries/XMCLib/src/xmc_vadc.c **** 
 596:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 597:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1563              	 .loc 2 597 0
 1564 001a FB68     	 ldr r3,[r7,#12]
 1565 001c C022     	 mov r2,#192
 1566 001e 9B58     	 ldr r3,[r3,r2]
 1567 0020 7B61     	 str r3,[r7,#20]
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1568              	 .loc 2 598 0
 1569 0022 7B69     	 ldr r3,[r7,#20]
 1570 0024 0322     	 mov r2,#3
 1571 0026 9343     	 bic r3,r2
 1572 0028 7B61     	 str r3,[r7,#20]
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1573              	 .loc 2 599 0
 1574 002a 7A69     	 ldr r2,[r7,#20]
 1575 002c BB68     	 ldr r3,[r7,#8]
 1576 002e 1343     	 orr r3,r2
 1577 0030 7B61     	 str r3,[r7,#20]
 600:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1578              	 .loc 2 600 0
 1579 0032 FB68     	 ldr r3,[r7,#12]
 1580 0034 C021     	 mov r1,#192
 1581 0036 7A69     	 ldr r2,[r7,#20]
 1582 0038 5A50     	 str r2,[r3,r1]
 601:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1583              	 .loc 2 601 0
 1584 003a BD46     	 mov sp,r7
 1585 003c 06B0     	 add sp,sp,#24
 1586              	 
 1587 003e 80BD     	 pop {r7,pc}
 1588              	 .cfi_endproc
 1589              	.LFE168:
 1591              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1592              	 .align 2
 1593              	 .global XMC_VADC_GROUP_SetSyncMaster
 1594              	 .code 16
 1595              	 .thumb_func
 1597              	XMC_VADC_GROUP_SetSyncMaster:
 1598              	.LFB169:
 602:../Libraries/XMCLib/src/xmc_vadc.c **** 
 603:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 604:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 605:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1599              	 .loc 2 605 0
 1600              	 .cfi_startproc
 1601 0000 80B5     	 push {r7,lr}
 1602              	.LCFI70:
 1603              	 .cfi_def_cfa_offset 8
 1604              	 .cfi_offset 7,-8
 1605              	 .cfi_offset 14,-4
 1606 0002 84B0     	 sub sp,sp,#16
 1607              	.LCFI71:
 1608              	 .cfi_def_cfa_offset 24
 1609 0004 00AF     	 add r7,sp,#0
 1610              	.LCFI72:
 1611              	 .cfi_def_cfa_register 7
 1612 0006 7860     	 str r0,[r7,#4]
 606:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 607:../Libraries/XMCLib/src/xmc_vadc.c **** 
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 609:../Libraries/XMCLib/src/xmc_vadc.c **** 
 610:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1613              	 .loc 2 610 0
 1614 0008 7B68     	 ldr r3,[r7,#4]
 1615 000a C022     	 mov r2,#192
 1616 000c 9B58     	 ldr r3,[r3,r2]
 1617 000e FB60     	 str r3,[r7,#12]
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1618              	 .loc 2 611 0
 1619 0010 FB68     	 ldr r3,[r7,#12]
 1620 0012 0322     	 mov r2,#3
 1621 0014 9343     	 bic r3,r2
 1622 0016 FB60     	 str r3,[r7,#12]
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1623              	 .loc 2 612 0
 1624 0018 7B68     	 ldr r3,[r7,#4]
 1625 001a C021     	 mov r1,#192
 1626 001c FA68     	 ldr r2,[r7,#12]
 1627 001e 5A50     	 str r2,[r3,r1]
 613:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1628              	 .loc 2 613 0
 1629 0020 BD46     	 mov sp,r7
 1630 0022 04B0     	 add sp,sp,#16
 1631              	 
 1632 0024 80BD     	 pop {r7,pc}
 1633              	 .cfi_endproc
 1634              	.LFE169:
 1636 0026 C046     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1637              	 .align 2
 1638              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1639              	 .code 16
 1640              	 .thumb_func
 1642              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1643              	.LFB170:
 614:../Libraries/XMCLib/src/xmc_vadc.c **** 
 615:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 616:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 617:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1644              	 .loc 2 617 0
 1645              	 .cfi_startproc
 1646 0000 80B5     	 push {r7,lr}
 1647              	.LCFI73:
 1648              	 .cfi_def_cfa_offset 8
 1649              	 .cfi_offset 7,-8
 1650              	 .cfi_offset 14,-4
 1651 0002 84B0     	 sub sp,sp,#16
 1652              	.LCFI74:
 1653              	 .cfi_def_cfa_offset 24
 1654 0004 00AF     	 add r7,sp,#0
 1655              	.LCFI75:
 1656              	 .cfi_def_cfa_register 7
 1657 0006 7860     	 str r0,[r7,#4]
 1658 0008 3960     	 str r1,[r7]
 618:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i, master_grp_num;
 619:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAXI
 621:../Libraries/XMCLib/src/xmc_vadc.c **** 
 622:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num = 0;
 1659              	 .loc 2 622 0
 1660 000a 0023     	 mov r3,#0
 1661 000c BB60     	 str r3,[r7,#8]
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = 0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1662              	 .loc 2 623 0
 1663 000e 0023     	 mov r3,#0
 1664 0010 FB60     	 str r3,[r7,#12]
 1665 0012 0BE0     	 b .L67
 1666              	.L69:
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 625:../Libraries/XMCLib/src/xmc_vadc.c ****     if (g_xmc_vadc_group_array[i] == group_ptr)
 1667              	 .loc 2 625 0
 1668 0014 124B     	 ldr r3,.L71
 1669 0016 FA68     	 ldr r2,[r7,#12]
 1670 0018 9200     	 lsl r2,r2,#2
 1671 001a D258     	 ldr r2,[r2,r3]
 1672 001c 7B68     	 ldr r3,[r7,#4]
 1673 001e 9A42     	 cmp r2,r3
 1674 0020 01D1     	 bne .L68
 626:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 627:../Libraries/XMCLib/src/xmc_vadc.c ****       master_grp_num = i;
 1675              	 .loc 2 627 0
 1676 0022 FB68     	 ldr r3,[r7,#12]
 1677 0024 BB60     	 str r3,[r7,#8]
 1678              	.L68:
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1679              	 .loc 2 623 0 discriminator 2
 1680 0026 FB68     	 ldr r3,[r7,#12]
 1681 0028 0133     	 add r3,r3,#1
 1682 002a FB60     	 str r3,[r7,#12]
 1683              	.L67:
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1684              	 .loc 2 623 0 is_stmt 0 discriminator 1
 1685 002c FB68     	 ldr r3,[r7,#12]
 1686 002e 012B     	 cmp r3,#1
 1687 0030 F0D9     	 bls .L69
 628:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 629:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 630:../Libraries/XMCLib/src/xmc_vadc.c **** 
 631:../Libraries/XMCLib/src/xmc_vadc.c **** 
 632:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_group < master_grp_num)
 1688              	 .loc 2 632 0 is_stmt 1
 1689 0032 3A68     	 ldr r2,[r7]
 1690 0034 BB68     	 ldr r3,[r7,#8]
 1691 0036 9A42     	 cmp r2,r3
 1692 0038 02D2     	 bcs .L70
 633:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 634:../Libraries/XMCLib/src/xmc_vadc.c ****     slave_group++;
 1693              	 .loc 2 634 0
 1694 003a 3B68     	 ldr r3,[r7]
 1695 003c 0133     	 add r3,r3,#1
 1696 003e 3B60     	 str r3,[r7]
 1697              	.L70:
 635:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 636:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1698              	 .loc 2 636 0
 1699 0040 7B68     	 ldr r3,[r7,#4]
 1700 0042 C022     	 mov r2,#192
 1701 0044 9A58     	 ldr r2,[r3,r2]
 1702 0046 3B68     	 ldr r3,[r7]
 1703 0048 0333     	 add r3,r3,#3
 1704 004a 191C     	 mov r1,r3
 1705 004c 0123     	 mov r3,#1
 1706 004e 8B40     	 lsl r3,r3,r1
 1707 0050 1A43     	 orr r2,r3
 1708 0052 7B68     	 ldr r3,[r7,#4]
 1709 0054 C021     	 mov r1,#192
 1710 0056 5A50     	 str r2,[r3,r1]
 637:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1711              	 .loc 2 637 0
 1712 0058 BD46     	 mov sp,r7
 1713 005a 04B0     	 add sp,sp,#16
 1714              	 
 1715 005c 80BD     	 pop {r7,pc}
 1716              	.L72:
 1717 005e C046     	 .align 2
 1718              	.L71:
 1719 0060 00000000 	 .word g_xmc_vadc_group_array
 1720              	 .cfi_endproc
 1721              	.LFE170:
 1723              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1724              	 .align 2
 1725              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1726              	 .code 16
 1727              	 .thumb_func
 1729              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1730              	.LFB171:
 638:../Libraries/XMCLib/src/xmc_vadc.c **** 
 639:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 640:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 641:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1731              	 .loc 2 641 0
 1732              	 .cfi_startproc
 1733 0000 80B5     	 push {r7,lr}
 1734              	.LCFI76:
 1735              	 .cfi_def_cfa_offset 8
 1736              	 .cfi_offset 7,-8
 1737              	 .cfi_offset 14,-4
 1738 0002 84B0     	 sub sp,sp,#16
 1739              	.LCFI77:
 1740              	 .cfi_def_cfa_offset 24
 1741 0004 00AF     	 add r7,sp,#0
 1742              	.LCFI78:
 1743              	 .cfi_def_cfa_register 7
 1744 0006 7860     	 str r0,[r7,#4]
 1745 0008 3960     	 str r1,[r7]
 642:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i, master_grp_num;
 643:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 644:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAX
 645:../Libraries/XMCLib/src/xmc_vadc.c **** 
 646:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num = 0;
 1746              	 .loc 2 646 0
 1747 000a 0023     	 mov r3,#0
 1748 000c BB60     	 str r3,[r7,#8]
 647:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = 0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1749              	 .loc 2 647 0
 1750 000e 0023     	 mov r3,#0
 1751 0010 FB60     	 str r3,[r7,#12]
 1752 0012 0BE0     	 b .L74
 1753              	.L76:
 648:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 649:../Libraries/XMCLib/src/xmc_vadc.c ****     if (g_xmc_vadc_group_array[i] == group_ptr)
 1754              	 .loc 2 649 0
 1755 0014 124B     	 ldr r3,.L78
 1756 0016 FA68     	 ldr r2,[r7,#12]
 1757 0018 9200     	 lsl r2,r2,#2
 1758 001a D258     	 ldr r2,[r2,r3]
 1759 001c 7B68     	 ldr r3,[r7,#4]
 1760 001e 9A42     	 cmp r2,r3
 1761 0020 01D1     	 bne .L75
 650:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 651:../Libraries/XMCLib/src/xmc_vadc.c ****       master_grp_num = i;
 1762              	 .loc 2 651 0
 1763 0022 FB68     	 ldr r3,[r7,#12]
 1764 0024 BB60     	 str r3,[r7,#8]
 1765              	.L75:
 647:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1766              	 .loc 2 647 0 discriminator 2
 1767 0026 FB68     	 ldr r3,[r7,#12]
 1768 0028 0133     	 add r3,r3,#1
 1769 002a FB60     	 str r3,[r7,#12]
 1770              	.L74:
 647:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1771              	 .loc 2 647 0 is_stmt 0 discriminator 1
 1772 002c FB68     	 ldr r3,[r7,#12]
 1773 002e 012B     	 cmp r3,#1
 1774 0030 F0D9     	 bls .L76
 652:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 653:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 654:../Libraries/XMCLib/src/xmc_vadc.c **** 
 655:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_group < master_grp_num)
 1775              	 .loc 2 655 0 is_stmt 1
 1776 0032 3A68     	 ldr r2,[r7]
 1777 0034 BB68     	 ldr r3,[r7,#8]
 1778 0036 9A42     	 cmp r2,r3
 1779 0038 02D2     	 bcs .L77
 656:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 657:../Libraries/XMCLib/src/xmc_vadc.c ****     slave_group++;
 1780              	 .loc 2 657 0
 1781 003a 3B68     	 ldr r3,[r7]
 1782 003c 0133     	 add r3,r3,#1
 1783 003e 3B60     	 str r3,[r7]
 1784              	.L77:
 658:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 659:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1785              	 .loc 2 659 0
 1786 0040 7B68     	 ldr r3,[r7,#4]
 1787 0042 C022     	 mov r2,#192
 1788 0044 9B58     	 ldr r3,[r3,r2]
 1789 0046 3A68     	 ldr r2,[r7]
 1790 0048 0332     	 add r2,r2,#3
 1791 004a 111C     	 mov r1,r2
 1792 004c 0122     	 mov r2,#1
 1793 004e 8A40     	 lsl r2,r2,r1
 1794 0050 D243     	 mvn r2,r2
 1795 0052 1A40     	 and r2,r3
 1796 0054 7B68     	 ldr r3,[r7,#4]
 1797 0056 C021     	 mov r1,#192
 1798 0058 5A50     	 str r2,[r3,r1]
 660:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1799              	 .loc 2 660 0
 1800 005a BD46     	 mov sp,r7
 1801 005c 04B0     	 add sp,sp,#16
 1802              	 
 1803 005e 80BD     	 pop {r7,pc}
 1804              	.L79:
 1805              	 .align 2
 1806              	.L78:
 1807 0060 00000000 	 .word g_xmc_vadc_group_array
 1808              	 .cfi_endproc
 1809              	.LFE171:
 1811              	 .section .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal,"ax",%progbits
 1812              	 .align 2
 1813              	 .global XMC_VADC_GROUP_SetSyncSlaveReadySignal
 1814              	 .code 16
 1815              	 .thumb_func
 1817              	XMC_VADC_GROUP_SetSyncSlaveReadySignal:
 1818              	.LFB172:
 661:../Libraries/XMCLib/src/xmc_vadc.c **** 
 662:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure EVAL bit in the slave groups*/
 663:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
 664:../Libraries/XMCLib/src/xmc_vadc.c ****     uint32_t eval_waiting_group,
 665:../Libraries/XMCLib/src/xmc_vadc.c ****     uint32_t eval_origin_group)
 666:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1819              	 .loc 2 666 0
 1820              	 .cfi_startproc
 1821 0000 80B5     	 push {r7,lr}
 1822              	.LCFI79:
 1823              	 .cfi_def_cfa_offset 8
 1824              	 .cfi_offset 7,-8
 1825              	 .cfi_offset 14,-4
 1826 0002 84B0     	 sub sp,sp,#16
 1827              	.LCFI80:
 1828              	 .cfi_def_cfa_offset 24
 1829 0004 00AF     	 add r7,sp,#0
 1830              	.LCFI81:
 1831              	 .cfi_def_cfa_register 7
 1832 0006 F860     	 str r0,[r7,#12]
 1833 0008 B960     	 str r1,[r7,#8]
 1834 000a 7A60     	 str r2,[r7,#4]
 667:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
 668:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group != e
 669:../Libraries/XMCLib/src/xmc_vadc.c **** 
 670:../Libraries/XMCLib/src/xmc_vadc.c ****   if (eval_origin_group < eval_waiting_group)
 1835              	 .loc 2 670 0
 1836 000c 7A68     	 ldr r2,[r7,#4]
 1837 000e BB68     	 ldr r3,[r7,#8]
 1838 0010 9A42     	 cmp r2,r3
 1839 0012 02D2     	 bcs .L81
 671:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 672:../Libraries/XMCLib/src/xmc_vadc.c ****     eval_origin_group++;
 1840              	 .loc 2 672 0
 1841 0014 7B68     	 ldr r3,[r7,#4]
 1842 0016 0133     	 add r3,r3,#1
 1843 0018 7B60     	 str r3,[r7,#4]
 1844              	.L81:
 673:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 1845              	 .loc 2 674 0
 1846 001a FB68     	 ldr r3,[r7,#12]
 1847 001c C022     	 mov r2,#192
 1848 001e 9A58     	 ldr r2,[r3,r2]
 1849 0020 7B68     	 ldr r3,[r7,#4]
 1850 0022 0333     	 add r3,r3,#3
 1851 0024 191C     	 mov r1,r3
 1852 0026 0123     	 mov r3,#1
 1853 0028 8B40     	 lsl r3,r3,r1
 1854 002a 1A43     	 orr r2,r3
 1855 002c FB68     	 ldr r3,[r7,#12]
 1856 002e C021     	 mov r1,#192
 1857 0030 5A50     	 str r2,[r3,r1]
 675:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1858              	 .loc 2 675 0
 1859 0032 BD46     	 mov sp,r7
 1860 0034 04B0     	 add sp,sp,#16
 1861              	 
 1862 0036 80BD     	 pop {r7,pc}
 1863              	 .cfi_endproc
 1864              	.LFE172:
 1866              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1867              	 .align 2
 1868              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1869              	 .code 16
 1870              	 .thumb_func
 1872              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1873              	.LFB173:
 676:../Libraries/XMCLib/src/xmc_vadc.c **** 
 677:../Libraries/XMCLib/src/xmc_vadc.c **** 
 678:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 679:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 680:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1874              	 .loc 2 680 0
 1875              	 .cfi_startproc
 1876 0000 80B5     	 push {r7,lr}
 1877              	.LCFI82:
 1878              	 .cfi_def_cfa_offset 8
 1879              	 .cfi_offset 7,-8
 1880              	 .cfi_offset 14,-4
 1881 0002 84B0     	 sub sp,sp,#16
 1882              	.LCFI83:
 1883              	 .cfi_def_cfa_offset 24
 1884 0004 00AF     	 add r7,sp,#0
 1885              	.LCFI84:
 1886              	 .cfi_def_cfa_register 7
 1887 0006 7860     	 str r0,[r7,#4]
 1888 0008 3960     	 str r1,[r7]
 681:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 682:../Libraries/XMCLib/src/xmc_vadc.c **** 
 683:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 684:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 685:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 686:../Libraries/XMCLib/src/xmc_vadc.c **** 
 687:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1889              	 .loc 2 687 0
 1890 000a 7B68     	 ldr r3,[r7,#4]
 1891 000c C022     	 mov r2,#192
 1892 000e 9B58     	 ldr r3,[r3,r2]
 1893 0010 FB60     	 str r3,[r7,#12]
 688:../Libraries/XMCLib/src/xmc_vadc.c **** 
 689:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1894              	 .loc 2 689 0
 1895 0012 FB68     	 ldr r3,[r7,#12]
 1896 0014 0322     	 mov r2,#3
 1897 0016 1340     	 and r3,r2
 1898 0018 0DD1     	 bne .L82
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 691:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1899              	 .loc 2 691 0
 1900 001a 7B68     	 ldr r3,[r7,#4]
 1901 001c 3A68     	 ldr r2,[r7]
 1902 001e 8032     	 add r2,r2,#128
 1903 0020 9200     	 lsl r2,r2,#2
 1904 0022 D358     	 ldr r3,[r2,r3]
 1905 0024 8022     	 mov r2,#128
 1906 0026 D200     	 lsl r2,r2,#3
 1907 0028 1A43     	 orr r2,r3
 1908 002a 111C     	 mov r1,r2
 1909 002c 7B68     	 ldr r3,[r7,#4]
 1910 002e 3A68     	 ldr r2,[r7]
 1911 0030 8032     	 add r2,r2,#128
 1912 0032 9200     	 lsl r2,r2,#2
 1913 0034 D150     	 str r1,[r2,r3]
 1914              	.L82:
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 693:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1915              	 .loc 2 693 0
 1916 0036 BD46     	 mov sp,r7
 1917 0038 04B0     	 add sp,sp,#16
 1918              	 
 1919 003a 80BD     	 pop {r7,pc}
 1920              	 .cfi_endproc
 1921              	.LFE173:
 1923              	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1924              	 .align 2
 1925              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1926              	 .code 16
 1927              	 .thumb_func
 1929              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1930              	.LFB174:
 694:../Libraries/XMCLib/src/xmc_vadc.c **** 
 695:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 696:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 697:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1931              	 .loc 2 697 0
 1932              	 .cfi_startproc
 1933 0000 80B5     	 push {r7,lr}
 1934              	.LCFI85:
 1935              	 .cfi_def_cfa_offset 8
 1936              	 .cfi_offset 7,-8
 1937              	 .cfi_offset 14,-4
 1938 0002 84B0     	 sub sp,sp,#16
 1939              	.LCFI86:
 1940              	 .cfi_def_cfa_offset 24
 1941 0004 00AF     	 add r7,sp,#0
 1942              	.LCFI87:
 1943              	 .cfi_def_cfa_register 7
 1944 0006 7860     	 str r0,[r7,#4]
 1945 0008 3960     	 str r1,[r7]
 698:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 699:../Libraries/XMCLib/src/xmc_vadc.c **** 
 700:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 701:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 702:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 703:../Libraries/XMCLib/src/xmc_vadc.c **** 
 704:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1946              	 .loc 2 704 0
 1947 000a 7B68     	 ldr r3,[r7,#4]
 1948 000c C022     	 mov r2,#192
 1949 000e 9B58     	 ldr r3,[r3,r2]
 1950 0010 FB60     	 str r3,[r7,#12]
 705:../Libraries/XMCLib/src/xmc_vadc.c **** 
 706:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1951              	 .loc 2 706 0
 1952 0012 FB68     	 ldr r3,[r7,#12]
 1953 0014 0322     	 mov r2,#3
 1954 0016 1340     	 and r3,r2
 1955 0018 0CD0     	 beq .L84
 707:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 708:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1956              	 .loc 2 708 0
 1957 001a 7B68     	 ldr r3,[r7,#4]
 1958 001c 3A68     	 ldr r2,[r7]
 1959 001e 8032     	 add r2,r2,#128
 1960 0020 9200     	 lsl r2,r2,#2
 1961 0022 D358     	 ldr r3,[r2,r3]
 1962 0024 054A     	 ldr r2,.L86
 1963 0026 1340     	 and r3,r2
 1964 0028 191C     	 mov r1,r3
 1965 002a 7B68     	 ldr r3,[r7,#4]
 1966 002c 3A68     	 ldr r2,[r7]
 1967 002e 8032     	 add r2,r2,#128
 1968 0030 9200     	 lsl r2,r2,#2
 1969 0032 D150     	 str r1,[r2,r3]
 1970              	.L84:
 709:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 710:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1971              	 .loc 2 710 0
 1972 0034 BD46     	 mov sp,r7
 1973 0036 04B0     	 add sp,sp,#16
 1974              	 
 1975 0038 80BD     	 pop {r7,pc}
 1976              	.L87:
 1977 003a C046     	 .align 2
 1978              	.L86:
 1979 003c FFFBFFFF 	 .word -1025
 1980              	 .cfi_endproc
 1981              	.LFE174:
 1983              	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1984              	 .align 2
 1985              	 .global XMC_VADC_GROUP_IsConverterBusy
 1986              	 .code 16
 1987              	 .thumb_func
 1989              	XMC_VADC_GROUP_IsConverterBusy:
 1990              	.LFB175:
 711:../Libraries/XMCLib/src/xmc_vadc.c **** 
 712:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */
 713:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 714:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1991              	 .loc 2 714 0
 1992              	 .cfi_startproc
 1993 0000 80B5     	 push {r7,lr}
 1994              	.LCFI88:
 1995              	 .cfi_def_cfa_offset 8
 1996              	 .cfi_offset 7,-8
 1997              	 .cfi_offset 14,-4
 1998 0002 84B0     	 sub sp,sp,#16
 1999              	.LCFI89:
 2000              	 .cfi_def_cfa_offset 24
 2001 0004 00AF     	 add r7,sp,#0
 2002              	.LCFI90:
 2003              	 .cfi_def_cfa_register 7
 2004 0006 7860     	 str r0,[r7,#4]
 715:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 716:../Libraries/XMCLib/src/xmc_vadc.c **** 
 717:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 718:../Libraries/XMCLib/src/xmc_vadc.c **** 
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 2005              	 .loc 2 719 0
 2006 0008 7B68     	 ldr r3,[r7,#4]
 2007 000a 8022     	 mov r2,#128
 2008 000c 9B58     	 ldr r3,[r3,r2]
 2009 000e FB60     	 str r3,[r7,#12]
 720:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 2010              	 .loc 2 720 0
 2011 0010 FA68     	 ldr r2,[r7,#12]
 2012 0012 8023     	 mov r3,#128
 2013 0014 DB05     	 lsl r3,r3,#23
 2014 0016 1340     	 and r3,r2
 2015 0018 FB60     	 str r3,[r7,#12]
 721:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 2016              	 .loc 2 721 0
 2017 001a FB68     	 ldr r3,[r7,#12]
 2018 001c 9B0F     	 lsr r3,r3,#30
 2019 001e FB60     	 str r3,[r7,#12]
 722:../Libraries/XMCLib/src/xmc_vadc.c **** 
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   return ( (XMC_VADC_GROUP_STATE_t)arbcfg);
 2020              	 .loc 2 723 0
 2021 0020 FB68     	 ldr r3,[r7,#12]
 2022 0022 DBB2     	 uxtb r3,r3
 724:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2023              	 .loc 2 724 0
 2024 0024 181C     	 mov r0,r3
 2025 0026 BD46     	 mov sp,r7
 2026 0028 04B0     	 add sp,sp,#16
 2027              	 
 2028 002a 80BD     	 pop {r7,pc}
 2029              	 .cfi_endproc
 2030              	.LFE175:
 2032              	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 2033              	 .align 2
 2034              	 .global XMC_VADC_GROUP_SetBoundaries
 2035              	 .code 16
 2036              	 .thumb_func
 2038              	XMC_VADC_GROUP_SetBoundaries:
 2039              	.LFB176:
 725:../Libraries/XMCLib/src/xmc_vadc.c **** 
 726:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 727:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 728:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2040              	 .loc 2 728 0
 2041              	 .cfi_startproc
 2042 0000 80B5     	 push {r7,lr}
 2043              	.LCFI91:
 2044              	 .cfi_def_cfa_offset 8
 2045              	 .cfi_offset 7,-8
 2046              	 .cfi_offset 14,-4
 2047 0002 86B0     	 sub sp,sp,#24
 2048              	.LCFI92:
 2049              	 .cfi_def_cfa_offset 32
 2050 0004 00AF     	 add r7,sp,#0
 2051              	.LCFI93:
 2052              	 .cfi_def_cfa_register 7
 2053 0006 F860     	 str r0,[r7,#12]
 2054 0008 B960     	 str r1,[r7,#8]
 2055 000a 7A60     	 str r2,[r7,#4]
 729:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 730:../Libraries/XMCLib/src/xmc_vadc.c **** 
 731:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 732:../Libraries/XMCLib/src/xmc_vadc.c **** 
 733:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 734:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2056              	 .loc 2 734 0
 2057 000c FB68     	 ldr r3,[r7,#12]
 2058 000e B822     	 mov r2,#184
 2059 0010 9B58     	 ldr r3,[r3,r2]
 2060 0012 7B61     	 str r3,[r7,#20]
 735:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2061              	 .loc 2 735 0
 2062 0014 7B69     	 ldr r3,[r7,#20]
 2063 0016 1B0B     	 lsr r3,r3,#12
 2064 0018 1B03     	 lsl r3,r3,#12
 2065 001a 7B61     	 str r3,[r7,#20]
 736:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2066              	 .loc 2 736 0
 2067 001c 7B69     	 ldr r3,[r7,#20]
 2068 001e 094A     	 ldr r2,.L91
 2069 0020 1340     	 and r3,r2
 2070 0022 7B61     	 str r3,[r7,#20]
 737:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 2071              	 .loc 2 737 0
 2072 0024 7A69     	 ldr r2,[r7,#20]
 2073 0026 BB68     	 ldr r3,[r7,#8]
 2074 0028 1343     	 orr r3,r2
 2075 002a 7B61     	 str r3,[r7,#20]
 738:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 2076              	 .loc 2 738 0
 2077 002c 7B68     	 ldr r3,[r7,#4]
 2078 002e 1B04     	 lsl r3,r3,#16
 2079 0030 7A69     	 ldr r2,[r7,#20]
 2080 0032 1343     	 orr r3,r2
 2081 0034 7B61     	 str r3,[r7,#20]
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2082              	 .loc 2 739 0
 2083 0036 FB68     	 ldr r3,[r7,#12]
 2084 0038 B821     	 mov r1,#184
 2085 003a 7A69     	 ldr r2,[r7,#20]
 2086 003c 5A50     	 str r2,[r3,r1]
 740:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2087              	 .loc 2 740 0
 2088 003e BD46     	 mov sp,r7
 2089 0040 06B0     	 add sp,sp,#24
 2090              	 
 2091 0042 80BD     	 pop {r7,pc}
 2092              	.L92:
 2093              	 .align 2
 2094              	.L91:
 2095 0044 FFFF00F0 	 .word -268369921
 2096              	 .cfi_endproc
 2097              	.LFE176:
 2099              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2100              	 .align 2
 2101              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2102              	 .code 16
 2103              	 .thumb_func
 2105              	XMC_VADC_GROUP_SetIndividualBoundary:
 2106              	.LFB177:
 741:../Libraries/XMCLib/src/xmc_vadc.c **** 
 742:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 743:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 744:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 745:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint16_t boundary_value)
 746:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2107              	 .loc 2 746 0
 2108              	 .cfi_startproc
 2109 0000 80B5     	 push {r7,lr}
 2110              	.LCFI94:
 2111              	 .cfi_def_cfa_offset 8
 2112              	 .cfi_offset 7,-8
 2113              	 .cfi_offset 14,-4
 2114 0002 84B0     	 sub sp,sp,#16
 2115              	.LCFI95:
 2116              	 .cfi_def_cfa_offset 24
 2117 0004 00AF     	 add r7,sp,#0
 2118              	.LCFI96:
 2119              	 .cfi_def_cfa_register 7
 2120 0006 7860     	 str r0,[r7,#4]
 2121 0008 081C     	 mov r0,r1
 2122 000a 111C     	 mov r1,r2
 2123 000c FB1C     	 add r3,r7,#3
 2124 000e 021C     	 add r2,r0,#0
 2125 0010 1A70     	 strb r2,[r3]
 2126 0012 3B1C     	 mov r3,r7
 2127 0014 0A1C     	 add r2,r1,#0
 2128 0016 1A80     	 strh r2,[r3]
 747:../Libraries/XMCLib/src/xmc_vadc.c **** 
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 749:../Libraries/XMCLib/src/xmc_vadc.c **** 
 750:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 751:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 752:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 753:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 754:../Libraries/XMCLib/src/xmc_vadc.c **** 
 755:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 756:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2129              	 .loc 2 756 0
 2130 0018 7B68     	 ldr r3,[r7,#4]
 2131 001a B822     	 mov r2,#184
 2132 001c 9B58     	 ldr r3,[r3,r2]
 2133 001e FB60     	 str r3,[r7,#12]
 757:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2134              	 .loc 2 757 0
 2135 0020 FB1C     	 add r3,r7,#3
 2136 0022 1B78     	 ldrb r3,[r3]
 2137 0024 002B     	 cmp r3,#0
 2138 0026 09D1     	 bne .L94
 758:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 759:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2139              	 .loc 2 759 0
 2140 0028 FB68     	 ldr r3,[r7,#12]
 2141 002a 1B0B     	 lsr r3,r3,#12
 2142 002c 1B03     	 lsl r3,r3,#12
 2143 002e FB60     	 str r3,[r7,#12]
 760:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2144              	 .loc 2 760 0
 2145 0030 3B1C     	 mov r3,r7
 2146 0032 1B88     	 ldrh r3,[r3]
 2147 0034 FA68     	 ldr r2,[r7,#12]
 2148 0036 1343     	 orr r3,r2
 2149 0038 FB60     	 str r3,[r7,#12]
 2150 003a 0DE0     	 b .L95
 2151              	.L94:
 761:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 762:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2152              	 .loc 2 762 0
 2153 003c FB1C     	 add r3,r7,#3
 2154 003e 1B78     	 ldrb r3,[r3]
 2155 0040 012B     	 cmp r3,#1
 2156 0042 09D1     	 bne .L95
 763:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 764:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2157              	 .loc 2 764 0
 2158 0044 FB68     	 ldr r3,[r7,#12]
 2159 0046 084A     	 ldr r2,.L96
 2160 0048 1340     	 and r3,r2
 2161 004a FB60     	 str r3,[r7,#12]
 765:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2162              	 .loc 2 765 0
 2163 004c 3B1C     	 mov r3,r7
 2164 004e 1B88     	 ldrh r3,[r3]
 2165 0050 1B04     	 lsl r3,r3,#16
 2166 0052 FA68     	 ldr r2,[r7,#12]
 2167 0054 1343     	 orr r3,r2
 2168 0056 FB60     	 str r3,[r7,#12]
 2169              	.L95:
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 767:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 768:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 769:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 770:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 771:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2170              	 .loc 2 771 0
 2171 0058 7B68     	 ldr r3,[r7,#4]
 2172 005a B821     	 mov r1,#184
 2173 005c FA68     	 ldr r2,[r7,#12]
 2174 005e 5A50     	 str r2,[r3,r1]
 772:../Libraries/XMCLib/src/xmc_vadc.c **** 
 773:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2175              	 .loc 2 773 0
 2176 0060 BD46     	 mov sp,r7
 2177 0062 04B0     	 add sp,sp,#16
 2178              	 
 2179 0064 80BD     	 pop {r7,pc}
 2180              	.L97:
 2181 0066 C046     	 .align 2
 2182              	.L96:
 2183 0068 FFFF00F0 	 .word -268369921
 2184              	 .cfi_endproc
 2185              	.LFE177:
 2187              	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2188              	 .align 2
 2189              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2190              	 .code 16
 2191              	 .thumb_func
 2193              	XMC_VADC_GROUP_TriggerServiceRequest:
 2194              	.LFB178:
 774:../Libraries/XMCLib/src/xmc_vadc.c **** 
 775:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 776:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 777:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t sr_num,
 778:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_GROUP_IRQ_t type)
 779:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2195              	 .loc 2 779 0
 2196              	 .cfi_startproc
 2197 0000 80B5     	 push {r7,lr}
 2198              	.LCFI97:
 2199              	 .cfi_def_cfa_offset 8
 2200              	 .cfi_offset 7,-8
 2201              	 .cfi_offset 14,-4
 2202 0002 86B0     	 sub sp,sp,#24
 2203              	.LCFI98:
 2204              	 .cfi_def_cfa_offset 32
 2205 0004 00AF     	 add r7,sp,#0
 2206              	.LCFI99:
 2207              	 .cfi_def_cfa_register 7
 2208 0006 F860     	 str r0,[r7,#12]
 2209 0008 B960     	 str r1,[r7,#8]
 2210 000a FB1D     	 add r3,r7,#7
 2211 000c 1A70     	 strb r2,[r3]
 780:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 781:../Libraries/XMCLib/src/xmc_vadc.c **** 
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 784:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type) <= XMC_VADC_GROUP_IRQ_SH
 785:../Libraries/XMCLib/src/xmc_vadc.c **** 
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2212              	 .loc 2 786 0
 2213 000e FA68     	 ldr r2,[r7,#12]
 2214 0010 E423     	 mov r3,#228
 2215 0012 5B00     	 lsl r3,r3,#1
 2216 0014 D358     	 ldr r3,[r2,r3]
 2217 0016 7B61     	 str r3,[r7,#20]
 787:../Libraries/XMCLib/src/xmc_vadc.c **** 
 788:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2218              	 .loc 2 788 0
 2219 0018 FB1D     	 add r3,r7,#7
 2220 001a 1B78     	 ldrb r3,[r3]
 2221 001c 002B     	 cmp r3,#0
 2222 001e 07D1     	 bne .L99
 789:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 790:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2223              	 .loc 2 790 0
 2224 0020 BB68     	 ldr r3,[r7,#8]
 2225 0022 0122     	 mov r2,#1
 2226 0024 9A40     	 lsl r2,r2,r3
 2227 0026 131C     	 mov r3,r2
 2228 0028 7A69     	 ldr r2,[r7,#20]
 2229 002a 1343     	 orr r3,r2
 2230 002c 7B61     	 str r3,[r7,#20]
 2231 002e 07E0     	 b .L100
 2232              	.L99:
 791:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 792:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 793:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 794:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2233              	 .loc 2 794 0
 2234 0030 BB68     	 ldr r3,[r7,#8]
 2235 0032 0833     	 add r3,r3,#8
 2236 0034 1A1C     	 mov r2,r3
 2237 0036 0123     	 mov r3,#1
 2238 0038 9340     	 lsl r3,r3,r2
 2239 003a 7A69     	 ldr r2,[r7,#20]
 2240 003c 1343     	 orr r3,r2
 2241 003e 7B61     	 str r3,[r7,#20]
 2242              	.L100:
 795:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 796:../Libraries/XMCLib/src/xmc_vadc.c **** 
 797:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2243              	 .loc 2 797 0
 2244 0040 FA68     	 ldr r2,[r7,#12]
 2245 0042 E423     	 mov r3,#228
 2246 0044 5B00     	 lsl r3,r3,#1
 2247 0046 7969     	 ldr r1,[r7,#20]
 2248 0048 D150     	 str r1,[r2,r3]
 798:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2249              	 .loc 2 798 0
 2250 004a BD46     	 mov sp,r7
 2251 004c 06B0     	 add sp,sp,#24
 2252              	 
 2253 004e 80BD     	 pop {r7,pc}
 2254              	 .cfi_endproc
 2255              	.LFE178:
 2257              	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 2258              	 .align 2
 2259              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 2260              	 .code 16
 2261              	 .thumb_func
 2263              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 2264              	.LFB179:
 799:../Libraries/XMCLib/src/xmc_vadc.c **** 
 800:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 801:../Libraries/XMCLib/src/xmc_vadc.c **** 
 802:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 803:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 804:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint8_t boundary_flag_num,
 805:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_BOUNDARY_NODE_t sr)
 806:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2265              	 .loc 2 806 0
 2266              	 .cfi_startproc
 2267 0000 80B5     	 push {r7,lr}
 2268              	.LCFI100:
 2269              	 .cfi_def_cfa_offset 8
 2270              	 .cfi_offset 7,-8
 2271              	 .cfi_offset 14,-4
 2272 0002 84B0     	 sub sp,sp,#16
 2273              	.LCFI101:
 2274              	 .cfi_def_cfa_offset 24
 2275 0004 00AF     	 add r7,sp,#0
 2276              	.LCFI102:
 2277              	 .cfi_def_cfa_register 7
 2278 0006 7860     	 str r0,[r7,#4]
 2279 0008 081C     	 mov r0,r1
 2280 000a 111C     	 mov r1,r2
 2281 000c FB1C     	 add r3,r7,#3
 2282 000e 021C     	 add r2,r0,#0
 2283 0010 1A70     	 strb r2,[r3]
 2284 0012 BB1C     	 add r3,r7,#2
 2285 0014 0A1C     	 add r2,r1,#0
 2286 0016 1A70     	 strb r2,[r3]
 807:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 809:../Libraries/XMCLib/src/xmc_vadc.c **** 
 810:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 811:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 2287              	 .loc 2 811 0
 2288 0018 FB1C     	 add r3,r7,#3
 2289 001a 1B78     	 ldrb r3,[r3]
 2290 001c 9B00     	 lsl r3,r3,#2
 2291 001e FB60     	 str r3,[r7,#12]
 812:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 2292              	 .loc 2 812 0
 2293 0020 7B68     	 ldr r3,[r7,#4]
 2294 0022 D422     	 mov r2,#212
 2295 0024 9B58     	 ldr r3,[r3,r2]
 2296 0026 FA68     	 ldr r2,[r7,#12]
 2297 0028 0F21     	 mov r1,#15
 2298 002a 9140     	 lsl r1,r1,r2
 2299 002c 0A1C     	 mov r2,r1
 2300 002e D243     	 mvn r2,r2
 2301 0030 1A40     	 and r2,r3
 2302 0032 7B68     	 ldr r3,[r7,#4]
 2303 0034 D421     	 mov r1,#212
 2304 0036 5A50     	 str r2,[r3,r1]
 813:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 2305              	 .loc 2 813 0
 2306 0038 7B68     	 ldr r3,[r7,#4]
 2307 003a D422     	 mov r2,#212
 2308 003c 9A58     	 ldr r2,[r3,r2]
 2309 003e BB1C     	 add r3,r7,#2
 2310 0040 1978     	 ldrb r1,[r3]
 2311 0042 FB68     	 ldr r3,[r7,#12]
 2312 0044 9940     	 lsl r1,r1,r3
 2313 0046 0B1C     	 mov r3,r1
 2314 0048 1A43     	 orr r2,r3
 2315 004a 7B68     	 ldr r3,[r7,#4]
 2316 004c D421     	 mov r1,#212
 2317 004e 5A50     	 str r2,[r3,r1]
 814:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2318              	 .loc 2 814 0
 2319 0050 BD46     	 mov sp,r7
 2320 0052 04B0     	 add sp,sp,#16
 2321              	 
 2322 0054 80BD     	 pop {r7,pc}
 2323              	 .cfi_endproc
 2324              	.LFE179:
 2326 0056 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_Init,"ax",%progbits
 2327              	 .align 2
 2328              	 .global XMC_VADC_GLOBAL_SHS_Init
 2329              	 .code 16
 2330              	 .thumb_func
 2332              	XMC_VADC_GLOBAL_SHS_Init:
 2333              	.LFB180:
 815:../Libraries/XMCLib/src/xmc_vadc.c **** 
 816:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 817:../Libraries/XMCLib/src/xmc_vadc.c **** 
 818:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 819:../Libraries/XMCLib/src/xmc_vadc.c **** 
 820:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 821:../Libraries/XMCLib/src/xmc_vadc.c **** 
 822:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 823:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 824:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2334              	 .loc 2 824 0
 2335              	 .cfi_startproc
 2336 0000 80B5     	 push {r7,lr}
 2337              	.LCFI103:
 2338              	 .cfi_def_cfa_offset 8
 2339              	 .cfi_offset 7,-8
 2340              	 .cfi_offset 14,-4
 2341 0002 82B0     	 sub sp,sp,#8
 2342              	.LCFI104:
 2343              	 .cfi_def_cfa_offset 16
 2344 0004 00AF     	 add r7,sp,#0
 2345              	.LCFI105:
 2346              	 .cfi_def_cfa_register 7
 2347 0006 7860     	 str r0,[r7,#4]
 2348 0008 3960     	 str r1,[r7]
 825:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(vo
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number", (config == (XMC_VADC_GLOBAL_SHS_CONFIG_
 827:../Libraries/XMCLib/src/xmc_vadc.c **** 
 828:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 829:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 2349              	 .loc 2 829 0
 2350 000a 3B68     	 ldr r3,[r7]
 2351 000c 1B68     	 ldr r3,[r3]
 2352 000e 8022     	 mov r2,#128
 2353 0010 1202     	 lsl r2,r2,#8
 2354 0012 1A43     	 orr r2,r3
 2355 0014 7B68     	 ldr r3,[r7,#4]
 2356 0016 1A64     	 str r2,[r3,#64]
 830:../Libraries/XMCLib/src/xmc_vadc.c **** 
 831:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 832:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 833:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 2357              	 .loc 2 833 0
 2358 0018 7B68     	 ldr r3,[r7,#4]
 2359 001a BC22     	 mov r2,#188
 2360 001c 9B58     	 ldr r3,[r3,r2]
 2361 001e 0122     	 mov r2,#1
 2362 0020 9343     	 bic r3,r2
 2363 0022 1A1C     	 mov r2,r3
 2364 0024 7B68     	 ldr r3,[r7,#4]
 2365 0026 BC21     	 mov r1,#188
 2366 0028 5A50     	 str r2,[r3,r1]
 834:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 2367              	 .loc 2 834 0
 2368 002a 7B68     	 ldr r3,[r7,#4]
 2369 002c BC22     	 mov r2,#188
 2370 002e 9B58     	 ldr r3,[r3,r2]
 2371 0030 3A68     	 ldr r2,[r7]
 2372 0032 1279     	 ldrb r2,[r2,#4]
 2373 0034 1A43     	 orr r2,r3
 2374 0036 7B68     	 ldr r3,[r7,#4]
 2375 0038 BC21     	 mov r1,#188
 2376 003a 5A50     	 str r2,[r3,r1]
 835:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 836:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2377              	 .loc 2 836 0
 2378 003c BD46     	 mov sp,r7
 2379 003e 02B0     	 add sp,sp,#8
 2380              	 
 2381 0040 80BD     	 pop {r7,pc}
 2382              	 .cfi_endproc
 2383              	.LFE180:
 2385 0042 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode,"ax",%progbits
 2386              	 .align 2
 2387              	 .global XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
 2388              	 .code 16
 2389              	 .thumb_func
 2391              	XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:
 2392              	.LFB181:
 837:../Libraries/XMCLib/src/xmc_vadc.c **** 
 838:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 839:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 840:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 841:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2393              	 .loc 2 841 0
 2394              	 .cfi_startproc
 2395 0000 80B5     	 push {r7,lr}
 2396              	.LCFI106:
 2397              	 .cfi_def_cfa_offset 8
 2398              	 .cfi_offset 7,-8
 2399              	 .cfi_offset 14,-4
 2400 0002 82B0     	 sub sp,sp,#8
 2401              	.LCFI107:
 2402              	 .cfi_def_cfa_offset 16
 2403 0004 00AF     	 add r7,sp,#0
 2404              	.LCFI108:
 2405              	 .cfi_def_cfa_register 7
 2406 0006 7860     	 str r0,[r7,#4]
 2407 0008 0A1C     	 mov r2,r1
 2408 000a FB1C     	 add r3,r7,#3
 2409 000c 1A70     	 strb r2,[r3]
 842:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 843:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number", (group_num <= XMC_VADC
 845:../Libraries/XMCLib/src/xmc_vadc.c **** 
 846:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2410              	 .loc 2 847 0
 2411 000e FB1C     	 add r3,r7,#3
 2412 0010 1B78     	 ldrb r3,[r3]
 2413 0012 002B     	 cmp r3,#0
 2414 0014 08D1     	 bne .L104
 848:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 849:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 2415              	 .loc 2 849 0
 2416 0016 7B68     	 ldr r3,[r7,#4]
 2417 0018 8022     	 mov r2,#128
 2418 001a 9B58     	 ldr r3,[r3,r2]
 2419 001c 0122     	 mov r2,#1
 2420 001e 1A43     	 orr r2,r3
 2421 0020 7B68     	 ldr r3,[r7,#4]
 2422 0022 8021     	 mov r1,#128
 2423 0024 5A50     	 str r2,[r3,r1]
 2424 0026 0BE0     	 b .L103
 2425              	.L104:
 850:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 851:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2426              	 .loc 2 851 0
 2427 0028 FB1C     	 add r3,r7,#3
 2428 002a 1B78     	 ldrb r3,[r3]
 2429 002c 012B     	 cmp r3,#1
 2430 002e 07D1     	 bne .L103
 852:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 853:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 2431              	 .loc 2 853 0
 2432 0030 7B68     	 ldr r3,[r7,#4]
 2433 0032 8422     	 mov r2,#132
 2434 0034 9B58     	 ldr r3,[r3,r2]
 2435 0036 0122     	 mov r2,#1
 2436 0038 1A43     	 orr r2,r3
 2437 003a 7B68     	 ldr r3,[r7,#4]
 2438 003c 8421     	 mov r1,#132
 2439 003e 5A50     	 str r2,[r3,r1]
 2440              	.L103:
 854:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 855:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 856:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 857:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 859:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2441              	 .loc 2 859 0
 2442 0040 BD46     	 mov sp,r7
 2443 0042 02B0     	 add sp,sp,#8
 2444              	 
 2445 0044 80BD     	 pop {r7,pc}
 2446              	 .cfi_endproc
 2447              	.LFE181:
 2449 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode,"ax",%progbits
 2450              	 .align 2
 2451              	 .global XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
 2452              	 .code 16
 2453              	 .thumb_func
 2455              	XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:
 2456              	.LFB182:
 860:../Libraries/XMCLib/src/xmc_vadc.c **** 
 861:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 862:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 863:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2457              	 .loc 2 863 0
 2458              	 .cfi_startproc
 2459 0000 80B5     	 push {r7,lr}
 2460              	.LCFI109:
 2461              	 .cfi_def_cfa_offset 8
 2462              	 .cfi_offset 7,-8
 2463              	 .cfi_offset 14,-4
 2464 0002 82B0     	 sub sp,sp,#8
 2465              	.LCFI110:
 2466              	 .cfi_def_cfa_offset 16
 2467 0004 00AF     	 add r7,sp,#0
 2468              	.LCFI111:
 2469              	 .cfi_def_cfa_register 7
 2470 0006 7860     	 str r0,[r7,#4]
 2471 0008 0A1C     	 mov r2,r1
 2472 000a FB1C     	 add r3,r7,#3
 2473 000c 1A70     	 strb r2,[r3]
 864:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 865:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
 866:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number", (group_num <= XMC_VAD
 867:../Libraries/XMCLib/src/xmc_vadc.c **** 
 868:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 869:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2474              	 .loc 2 869 0
 2475 000e FB1C     	 add r3,r7,#3
 2476 0010 1B78     	 ldrb r3,[r3]
 2477 0012 002B     	 cmp r3,#0
 2478 0014 09D1     	 bne .L107
 870:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 871:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 2479              	 .loc 2 871 0
 2480 0016 7B68     	 ldr r3,[r7,#4]
 2481 0018 8022     	 mov r2,#128
 2482 001a 9B58     	 ldr r3,[r3,r2]
 2483 001c 0122     	 mov r2,#1
 2484 001e 9343     	 bic r3,r2
 2485 0020 1A1C     	 mov r2,r3
 2486 0022 7B68     	 ldr r3,[r7,#4]
 2487 0024 8021     	 mov r1,#128
 2488 0026 5A50     	 str r2,[r3,r1]
 2489 0028 0CE0     	 b .L106
 2490              	.L107:
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2491              	 .loc 2 873 0
 2492 002a FB1C     	 add r3,r7,#3
 2493 002c 1B78     	 ldrb r3,[r3]
 2494 002e 012B     	 cmp r3,#1
 2495 0030 08D1     	 bne .L106
 874:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 875:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 2496              	 .loc 2 875 0
 2497 0032 7B68     	 ldr r3,[r7,#4]
 2498 0034 8422     	 mov r2,#132
 2499 0036 9B58     	 ldr r3,[r3,r2]
 2500 0038 0122     	 mov r2,#1
 2501 003a 9343     	 bic r3,r2
 2502 003c 1A1C     	 mov r2,r3
 2503 003e 7B68     	 ldr r3,[r7,#4]
 2504 0040 8421     	 mov r1,#132
 2505 0042 5A50     	 str r2,[r3,r1]
 2506              	.L106:
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 877:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 879:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 880:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 881:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2507              	 .loc 2 881 0
 2508 0044 BD46     	 mov sp,r7
 2509 0046 02B0     	 add sp,sp,#8
 2510              	 
 2511 0048 80BD     	 pop {r7,pc}
 2512              	 .cfi_endproc
 2513              	.LFE182:
 2515 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime,"ax",%progbits
 2516              	 .align 2
 2517              	 .global XMC_VADC_GLOBAL_SHS_SetShortSampleTime
 2518              	 .code 16
 2519              	 .thumb_func
 2521              	XMC_VADC_GLOBAL_SHS_SetShortSampleTime:
 2522              	.LFB183:
 882:../Libraries/XMCLib/src/xmc_vadc.c **** 
 883:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 884:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 885:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_INDEX_t group_num,
 886:../Libraries/XMCLib/src/xmc_vadc.c ****     uint8_t sst_value)
 887:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2523              	 .loc 2 887 0
 2524              	 .cfi_startproc
 2525 0000 80B5     	 push {r7,lr}
 2526              	.LCFI112:
 2527              	 .cfi_def_cfa_offset 8
 2528              	 .cfi_offset 7,-8
 2529              	 .cfi_offset 14,-4
 2530 0002 82B0     	 sub sp,sp,#8
 2531              	.LCFI113:
 2532              	 .cfi_def_cfa_offset 16
 2533 0004 00AF     	 add r7,sp,#0
 2534              	.LCFI114:
 2535              	 .cfi_def_cfa_register 7
 2536 0006 7860     	 str r0,[r7,#4]
 2537 0008 081C     	 mov r0,r1
 2538 000a 111C     	 mov r1,r2
 2539 000c FB1C     	 add r3,r7,#3
 2540 000e 021C     	 add r2,r0,#0
 2541 0010 1A70     	 strb r2,[r3]
 2542 0012 BB1C     	 add r3,r7,#2
 2543 0014 0A1C     	 add r2,r1,#0
 2544 0016 1A70     	 strb r2,[r3]
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 889:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number", (group_num <= XMC_VADC_GR
 891:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value", (sst_value < 64U))
 892:../Libraries/XMCLib/src/xmc_vadc.c **** 
 893:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 894:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2545              	 .loc 2 894 0
 2546 0018 FB1C     	 add r3,r7,#3
 2547 001a 1B78     	 ldrb r3,[r3]
 2548 001c 002B     	 cmp r3,#0
 2549 001e 12D1     	 bne .L110
 895:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 896:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 2550              	 .loc 2 896 0
 2551 0020 7B68     	 ldr r3,[r7,#4]
 2552 0022 8022     	 mov r2,#128
 2553 0024 9B58     	 ldr r3,[r3,r2]
 2554 0026 144A     	 ldr r2,.L112
 2555 0028 1A40     	 and r2,r3
 2556 002a 7B68     	 ldr r3,[r7,#4]
 2557 002c 8021     	 mov r1,#128
 2558 002e 5A50     	 str r2,[r3,r1]
 897:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 2559              	 .loc 2 897 0
 2560 0030 7B68     	 ldr r3,[r7,#4]
 2561 0032 8022     	 mov r2,#128
 2562 0034 9A58     	 ldr r2,[r3,r2]
 2563 0036 BB1C     	 add r3,r7,#2
 2564 0038 1B78     	 ldrb r3,[r3]
 2565 003a 1B02     	 lsl r3,r3,#8
 2566 003c 1A43     	 orr r2,r3
 2567 003e 7B68     	 ldr r3,[r7,#4]
 2568 0040 8021     	 mov r1,#128
 2569 0042 5A50     	 str r2,[r3,r1]
 2570 0044 15E0     	 b .L109
 2571              	.L110:
 898:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 899:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2572              	 .loc 2 899 0
 2573 0046 FB1C     	 add r3,r7,#3
 2574 0048 1B78     	 ldrb r3,[r3]
 2575 004a 012B     	 cmp r3,#1
 2576 004c 11D1     	 bne .L109
 900:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 901:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 2577              	 .loc 2 901 0
 2578 004e 7B68     	 ldr r3,[r7,#4]
 2579 0050 8422     	 mov r2,#132
 2580 0052 9B58     	 ldr r3,[r3,r2]
 2581 0054 084A     	 ldr r2,.L112
 2582 0056 1A40     	 and r2,r3
 2583 0058 7B68     	 ldr r3,[r7,#4]
 2584 005a 8421     	 mov r1,#132
 2585 005c 5A50     	 str r2,[r3,r1]
 902:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 2586              	 .loc 2 902 0
 2587 005e 7B68     	 ldr r3,[r7,#4]
 2588 0060 8422     	 mov r2,#132
 2589 0062 9A58     	 ldr r2,[r3,r2]
 2590 0064 BB1C     	 add r3,r7,#2
 2591 0066 1B78     	 ldrb r3,[r3]
 2592 0068 1B02     	 lsl r3,r3,#8
 2593 006a 1A43     	 orr r2,r3
 2594 006c 7B68     	 ldr r3,[r7,#4]
 2595 006e 8421     	 mov r1,#132
 2596 0070 5A50     	 str r2,[r3,r1]
 2597              	.L109:
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 904:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 905:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 906:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 908:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2598              	 .loc 2 908 0
 2599 0072 BD46     	 mov sp,r7
 2600 0074 02B0     	 add sp,sp,#8
 2601              	 
 2602 0076 80BD     	 pop {r7,pc}
 2603              	.L113:
 2604              	 .align 2
 2605              	.L112:
 2606 0078 FFC0FFFF 	 .word -16129
 2607              	 .cfi_endproc
 2608              	.LFE183:
 2610              	 .section .text.XMC_VADC_GLOBAL_SHS_SetGainFactor,"ax",%progbits
 2611              	 .align 2
 2612              	 .global XMC_VADC_GLOBAL_SHS_SetGainFactor
 2613              	 .code 16
 2614              	 .thumb_func
 2616              	XMC_VADC_GLOBAL_SHS_SetGainFactor:
 2617              	.LFB184:
 909:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 910:../Libraries/XMCLib/src/xmc_vadc.c **** 
 911:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 912:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 913:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 914:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 915:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 916:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2618              	 .loc 2 916 0
 2619              	 .cfi_startproc
 2620 0000 90B5     	 push {r4,r7,lr}
 2621              	.LCFI115:
 2622              	 .cfi_def_cfa_offset 12
 2623              	 .cfi_offset 4,-12
 2624              	 .cfi_offset 7,-8
 2625              	 .cfi_offset 14,-4
 2626 0002 85B0     	 sub sp,sp,#20
 2627              	.LCFI116:
 2628              	 .cfi_def_cfa_offset 32
 2629 0004 00AF     	 add r7,sp,#0
 2630              	.LCFI117:
 2631              	 .cfi_def_cfa_register 7
 2632 0006 7860     	 str r0,[r7,#4]
 2633 0008 0C1C     	 mov r4,r1
 2634 000a 101C     	 mov r0,r2
 2635 000c 191C     	 mov r1,r3
 2636 000e FB1C     	 add r3,r7,#3
 2637 0010 221C     	 add r2,r4,#0
 2638 0012 1A70     	 strb r2,[r3]
 2639 0014 BB1C     	 add r3,r7,#2
 2640 0016 021C     	 add r2,r0,#0
 2641 0018 1A70     	 strb r2,[r3]
 2642 001a 7B1C     	 add r3,r7,#1
 2643 001c 0A1C     	 add r2,r1,#0
 2644 001e 1A70     	 strb r2,[r3]
 917:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 918:../Libraries/XMCLib/src/xmc_vadc.c **** 
 919:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 920:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number", (group_num <= XMC_VADC_GROUP_I
 921:../Libraries/XMCLib/src/xmc_vadc.c **** 
 922:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 923:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 2645              	 .loc 2 923 0
 2646 0020 7B1C     	 add r3,r7,#1
 2647 0022 1B78     	 ldrb r3,[r3]
 2648 0024 9B00     	 lsl r3,r3,#2
 2649 0026 FB60     	 str r3,[r7,#12]
 924:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2650              	 .loc 2 924 0
 2651 0028 BB1C     	 add r3,r7,#2
 2652 002a 1B78     	 ldrb r3,[r3]
 2653 002c 002B     	 cmp r3,#0
 2654 002e 1ED1     	 bne .L115
 925:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 926:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 2655              	 .loc 2 926 0
 2656 0030 7A68     	 ldr r2,[r7,#4]
 2657 0032 C023     	 mov r3,#192
 2658 0034 5B00     	 lsl r3,r3,#1
 2659 0036 D358     	 ldr r3,[r2,r3]
 2660 0038 FA68     	 ldr r2,[r7,#12]
 2661 003a 0F21     	 mov r1,#15
 2662 003c 9140     	 lsl r1,r1,r2
 2663 003e 0A1C     	 mov r2,r1
 2664 0040 D243     	 mvn r2,r2
 2665 0042 1A40     	 and r2,r3
 2666 0044 111C     	 mov r1,r2
 2667 0046 7A68     	 ldr r2,[r7,#4]
 2668 0048 C023     	 mov r3,#192
 2669 004a 5B00     	 lsl r3,r3,#1
 2670 004c D150     	 str r1,[r2,r3]
 927:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 2671              	 .loc 2 927 0
 2672 004e 7A68     	 ldr r2,[r7,#4]
 2673 0050 C023     	 mov r3,#192
 2674 0052 5B00     	 lsl r3,r3,#1
 2675 0054 D258     	 ldr r2,[r2,r3]
 2676 0056 FB1C     	 add r3,r7,#3
 2677 0058 1978     	 ldrb r1,[r3]
 2678 005a FB68     	 ldr r3,[r7,#12]
 2679 005c 9940     	 lsl r1,r1,r3
 2680 005e 0B1C     	 mov r3,r1
 2681 0060 1A43     	 orr r2,r3
 2682 0062 111C     	 mov r1,r2
 2683 0064 7A68     	 ldr r2,[r7,#4]
 2684 0066 C023     	 mov r3,#192
 2685 0068 5B00     	 lsl r3,r3,#1
 2686 006a D150     	 str r1,[r2,r3]
 2687 006c 21E0     	 b .L114
 2688              	.L115:
 928:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 929:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2689              	 .loc 2 929 0
 2690 006e BB1C     	 add r3,r7,#2
 2691 0070 1B78     	 ldrb r3,[r3]
 2692 0072 012B     	 cmp r3,#1
 2693 0074 1DD1     	 bne .L114
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 931:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 2694              	 .loc 2 931 0
 2695 0076 7A68     	 ldr r2,[r7,#4]
 2696 0078 C823     	 mov r3,#200
 2697 007a 5B00     	 lsl r3,r3,#1
 2698 007c D358     	 ldr r3,[r2,r3]
 2699 007e FA68     	 ldr r2,[r7,#12]
 2700 0080 0F21     	 mov r1,#15
 2701 0082 9140     	 lsl r1,r1,r2
 2702 0084 0A1C     	 mov r2,r1
 2703 0086 D243     	 mvn r2,r2
 2704 0088 1A40     	 and r2,r3
 2705 008a 111C     	 mov r1,r2
 2706 008c 7A68     	 ldr r2,[r7,#4]
 2707 008e C823     	 mov r3,#200
 2708 0090 5B00     	 lsl r3,r3,#1
 2709 0092 D150     	 str r1,[r2,r3]
 932:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2710              	 .loc 2 932 0
 2711 0094 7A68     	 ldr r2,[r7,#4]
 2712 0096 C823     	 mov r3,#200
 2713 0098 5B00     	 lsl r3,r3,#1
 2714 009a D258     	 ldr r2,[r2,r3]
 2715 009c FB1C     	 add r3,r7,#3
 2716 009e 1978     	 ldrb r1,[r3]
 2717 00a0 FB68     	 ldr r3,[r7,#12]
 2718 00a2 9940     	 lsl r1,r1,r3
 2719 00a4 0B1C     	 mov r3,r1
 2720 00a6 1A43     	 orr r2,r3
 2721 00a8 111C     	 mov r1,r2
 2722 00aa 7A68     	 ldr r2,[r7,#4]
 2723 00ac C823     	 mov r3,#200
 2724 00ae 5B00     	 lsl r3,r3,#1
 2725 00b0 D150     	 str r1,[r2,r3]
 2726              	.L114:
 933:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 936:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 937:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 938:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2727              	 .loc 2 938 0
 2728 00b2 BD46     	 mov sp,r7
 2729 00b4 05B0     	 add sp,sp,#20
 2730              	 
 2731 00b6 90BD     	 pop {r4,r7,pc}
 2732              	 .cfi_endproc
 2733              	.LFE184:
 2735              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations,"ax",%progbits
 2736              	 .align 2
 2737              	 .global XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
 2738              	 .code 16
 2739              	 .thumb_func
 2741              	XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:
 2742              	.LFB185:
 939:../Libraries/XMCLib/src/xmc_vadc.c **** 
 940:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 941:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 942:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 943:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_INDEX_t group_num)
 944:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2743              	 .loc 2 944 0
 2744              	 .cfi_startproc
 2745 0000 80B5     	 push {r7,lr}
 2746              	.LCFI118:
 2747              	 .cfi_def_cfa_offset 8
 2748              	 .cfi_offset 7,-8
 2749              	 .cfi_offset 14,-4
 2750 0002 82B0     	 sub sp,sp,#8
 2751              	.LCFI119:
 2752              	 .cfi_def_cfa_offset 16
 2753 0004 00AF     	 add r7,sp,#0
 2754              	.LCFI120:
 2755              	 .cfi_def_cfa_register 7
 2756 0006 7860     	 str r0,[r7,#4]
 2757 0008 0A1C     	 mov r2,r1
 2758 000a FB1C     	 add r3,r7,#3
 2759 000c 1A70     	 strb r2,[r3]
 945:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 946:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
 947:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 948:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 949:../Libraries/XMCLib/src/xmc_vadc.c **** 
 950:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 951:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2760              	 .loc 2 951 0
 2761 000e FB1C     	 add r3,r7,#3
 2762 0010 1B78     	 ldrb r3,[r3]
 2763 0012 002B     	 cmp r3,#0
 2764 0014 08D1     	 bne .L118
 952:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 953:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 2765              	 .loc 2 953 0
 2766 0016 7B68     	 ldr r3,[r7,#4]
 2767 0018 E022     	 mov r2,#224
 2768 001a 9B58     	 ldr r3,[r3,r2]
 2769 001c 5B00     	 lsl r3,r3,#1
 2770 001e 5A08     	 lsr r2,r3,#1
 2771 0020 7B68     	 ldr r3,[r7,#4]
 2772 0022 E021     	 mov r1,#224
 2773 0024 5A50     	 str r2,[r3,r1]
 2774 0026 0BE0     	 b .L117
 2775              	.L118:
 954:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 955:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2776              	 .loc 2 955 0
 2777 0028 FB1C     	 add r3,r7,#3
 2778 002a 1B78     	 ldrb r3,[r3]
 2779 002c 012B     	 cmp r3,#1
 2780 002e 07D1     	 bne .L117
 956:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 957:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 2781              	 .loc 2 957 0
 2782 0030 7B68     	 ldr r3,[r7,#4]
 2783 0032 E422     	 mov r2,#228
 2784 0034 9B58     	 ldr r3,[r3,r2]
 2785 0036 5B00     	 lsl r3,r3,#1
 2786 0038 5A08     	 lsr r2,r3,#1
 2787 003a 7B68     	 ldr r3,[r7,#4]
 2788 003c E421     	 mov r1,#228
 2789 003e 5A50     	 str r2,[r3,r1]
 2790              	.L117:
 958:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 961:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 962:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 963:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2791              	 .loc 2 963 0
 2792 0040 BD46     	 mov sp,r7
 2793 0042 02B0     	 add sp,sp,#8
 2794              	 
 2795 0044 80BD     	 pop {r7,pc}
 2796              	 .cfi_endproc
 2797              	.LFE185:
 2799 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations,"ax",%progbits
 2800              	 .align 2
 2801              	 .global XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
 2802              	 .code 16
 2803              	 .thumb_func
 2805              	XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:
 2806              	.LFB186:
 964:../Libraries/XMCLib/src/xmc_vadc.c **** 
 965:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 966:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 967:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_INDEX_t group_num)
 968:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2807              	 .loc 2 968 0
 2808              	 .cfi_startproc
 2809 0000 80B5     	 push {r7,lr}
 2810              	.LCFI121:
 2811              	 .cfi_def_cfa_offset 8
 2812              	 .cfi_offset 7,-8
 2813              	 .cfi_offset 14,-4
 2814 0002 82B0     	 sub sp,sp,#8
 2815              	.LCFI122:
 2816              	 .cfi_def_cfa_offset 16
 2817 0004 00AF     	 add r7,sp,#0
 2818              	.LCFI123:
 2819              	 .cfi_def_cfa_register 7
 2820 0006 7860     	 str r0,[r7,#4]
 2821 0008 0A1C     	 mov r2,r1
 2822 000a FB1C     	 add r3,r7,#3
 2823 000c 1A70     	 strb r2,[r3]
 969:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 970:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
 971:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 972:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 973:../Libraries/XMCLib/src/xmc_vadc.c **** 
 974:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2824              	 .loc 2 974 0
 2825 000e FB1C     	 add r3,r7,#3
 2826 0010 1B78     	 ldrb r3,[r3]
 2827 0012 002B     	 cmp r3,#0
 2828 0014 09D1     	 bne .L121
 975:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 976:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 2829              	 .loc 2 976 0
 2830 0016 7B68     	 ldr r3,[r7,#4]
 2831 0018 E022     	 mov r2,#224
 2832 001a 9B58     	 ldr r3,[r3,r2]
 2833 001c 8022     	 mov r2,#128
 2834 001e 1206     	 lsl r2,r2,#24
 2835 0020 1A43     	 orr r2,r3
 2836 0022 7B68     	 ldr r3,[r7,#4]
 2837 0024 E021     	 mov r1,#224
 2838 0026 5A50     	 str r2,[r3,r1]
 2839 0028 0CE0     	 b .L120
 2840              	.L121:
 977:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 978:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2841              	 .loc 2 978 0
 2842 002a FB1C     	 add r3,r7,#3
 2843 002c 1B78     	 ldrb r3,[r3]
 2844 002e 012B     	 cmp r3,#1
 2845 0030 08D1     	 bne .L120
 979:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 980:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 2846              	 .loc 2 980 0
 2847 0032 7B68     	 ldr r3,[r7,#4]
 2848 0034 E422     	 mov r2,#228
 2849 0036 9B58     	 ldr r3,[r3,r2]
 2850 0038 8022     	 mov r2,#128
 2851 003a 1206     	 lsl r2,r2,#24
 2852 003c 1A43     	 orr r2,r3
 2853 003e 7B68     	 ldr r3,[r7,#4]
 2854 0040 E421     	 mov r1,#228
 2855 0042 5A50     	 str r2,[r3,r1]
 2856              	.L120:
 981:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 982:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 983:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 984:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 985:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 986:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2857              	 .loc 2 986 0
 2858 0044 BD46     	 mov sp,r7
 2859 0046 02B0     	 add sp,sp,#8
 2860              	 
 2861 0048 80BD     	 pop {r7,pc}
 2862              	 .cfi_endproc
 2863              	.LFE186:
 2865 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue,"ax",%progbits
 2866              	 .align 2
 2867              	 .global XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
 2868              	 .code 16
 2869              	 .thumb_func
 2871              	XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:
 2872              	.LFB187:
 987:../Libraries/XMCLib/src/xmc_vadc.c **** 
 988:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 989:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 990:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_INDEX_t group_num,
 991:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 992:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2873              	 .loc 2 992 0
 2874              	 .cfi_startproc
 2875 0000 80B5     	 push {r7,lr}
 2876              	.LCFI124:
 2877              	 .cfi_def_cfa_offset 8
 2878              	 .cfi_offset 7,-8
 2879              	 .cfi_offset 14,-4
 2880 0002 84B0     	 sub sp,sp,#16
 2881              	.LCFI125:
 2882              	 .cfi_def_cfa_offset 24
 2883 0004 00AF     	 add r7,sp,#0
 2884              	.LCFI126:
 2885              	 .cfi_def_cfa_register 7
 2886 0006 7860     	 str r0,[r7,#4]
 2887 0008 081C     	 mov r0,r1
 2888 000a 111C     	 mov r1,r2
 2889 000c FB1C     	 add r3,r7,#3
 2890 000e 021C     	 add r2,r0,#0
 2891 0010 1A70     	 strb r2,[r3]
 2892 0012 BB1C     	 add r3,r7,#2
 2893 0014 0A1C     	 add r2,r1,#0
 2894 0016 1A70     	 strb r2,[r3]
 993:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 994:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 995:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
 996:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 997:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0) || (group_num == XMC_VADC_GROUP_INDEX_1))
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 999:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0) || (gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)
1000:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2) || (gain_level == XMC_VADC_SHS_GAIN_LEVEL_3)
1001:../Libraries/XMCLib/src/xmc_vadc.c **** 
1002:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 2895              	 .loc 2 1002 0
 2896 0018 0023     	 mov r3,#0
 2897 001a FB60     	 str r3,[r7,#12]
1003:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2898              	 .loc 2 1003 0
 2899 001c FB1C     	 add r3,r7,#3
 2900 001e 1B78     	 ldrb r3,[r3]
 2901 0020 002B     	 cmp r3,#0
 2902 0022 0AD1     	 bne .L124
1004:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1005:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 2903              	 .loc 2 1005 0
 2904 0024 7B68     	 ldr r3,[r7,#4]
 2905 0026 E022     	 mov r2,#224
 2906 0028 9A58     	 ldr r2,[r3,r2]
 2907 002a BB1C     	 add r3,r7,#2
 2908 002c 1B78     	 ldrb r3,[r3]
 2909 002e DA40     	 lsr r2,r2,r3
 2910 0030 131C     	 mov r3,r2
 2911 0032 7F22     	 mov r2,#127
 2912 0034 1340     	 and r3,r2
 2913 0036 FB60     	 str r3,[r7,#12]
 2914 0038 0DE0     	 b .L125
 2915              	.L124:
1006:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1007:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2916              	 .loc 2 1007 0
 2917 003a FB1C     	 add r3,r7,#3
 2918 003c 1B78     	 ldrb r3,[r3]
 2919 003e 012B     	 cmp r3,#1
 2920 0040 09D1     	 bne .L125
1008:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1009:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 2921              	 .loc 2 1009 0
 2922 0042 7B68     	 ldr r3,[r7,#4]
 2923 0044 E422     	 mov r2,#228
 2924 0046 9A58     	 ldr r2,[r3,r2]
 2925 0048 BB1C     	 add r3,r7,#2
 2926 004a 1B78     	 ldrb r3,[r3]
 2927 004c DA40     	 lsr r2,r2,r3
 2928 004e 131C     	 mov r3,r2
 2929 0050 7F22     	 mov r2,#127
 2930 0052 1340     	 and r3,r2
 2931 0054 FB60     	 str r3,[r7,#12]
 2932              	.L125:
1010:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1011:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1012:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1013:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
1014:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1015:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 2933              	 .loc 2 1015 0
 2934 0056 FB68     	 ldr r3,[r7,#12]
 2935 0058 DBB2     	 uxtb r3,r3
1016:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2936              	 .loc 2 1016 0
 2937 005a 181C     	 mov r0,r3
 2938 005c BD46     	 mov sp,r7
 2939 005e 04B0     	 add sp,sp,#16
 2940              	 
 2941 0060 80BD     	 pop {r7,pc}
 2942              	 .cfi_endproc
 2943              	.LFE187:
 2945 0062 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue,"ax",%progbits
 2946              	 .align 2
 2947              	 .global XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
 2948              	 .code 16
 2949              	 .thumb_func
 2951              	XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:
 2952              	.LFB188:
1017:../Libraries/XMCLib/src/xmc_vadc.c **** 
1018:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
1019:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1020:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_INDEX_t group_num,
1021:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
1022:../Libraries/XMCLib/src/xmc_vadc.c ****     uint8_t offset_calibration_value)
1023:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2953              	 .loc 2 1023 0
 2954              	 .cfi_startproc
 2955 0000 90B5     	 push {r4,r7,lr}
 2956              	.LCFI127:
 2957              	 .cfi_def_cfa_offset 12
 2958              	 .cfi_offset 4,-12
 2959              	 .cfi_offset 7,-8
 2960              	 .cfi_offset 14,-4
 2961 0002 83B0     	 sub sp,sp,#12
 2962              	.LCFI128:
 2963              	 .cfi_def_cfa_offset 24
 2964 0004 00AF     	 add r7,sp,#0
 2965              	.LCFI129:
 2966              	 .cfi_def_cfa_register 7
 2967 0006 7860     	 str r0,[r7,#4]
 2968 0008 0C1C     	 mov r4,r1
 2969 000a 101C     	 mov r0,r2
 2970 000c 191C     	 mov r1,r3
 2971 000e FB1C     	 add r3,r7,#3
 2972 0010 221C     	 add r2,r4,#0
 2973 0012 1A70     	 strb r2,[r3]
 2974 0014 BB1C     	 add r3,r7,#2
 2975 0016 021C     	 add r2,r0,#0
 2976 0018 1A70     	 strb r2,[r3]
 2977 001a 7B1C     	 add r3,r7,#1
 2978 001c 0A1C     	 add r2,r1,#0
 2979 001e 1A70     	 strb r2,[r3]
1024:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
1025:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
1026:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
1027:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0) || (group_num == XMC_VADC_GROUP_INDEX_1))
1028:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
1029:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0) || (gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)
1030:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2) || (gain_level == XMC_VADC_SHS_GAIN_LEVEL_3)
1031:../Libraries/XMCLib/src/xmc_vadc.c **** 
1032:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2980              	 .loc 2 1032 0
 2981 0020 FB1C     	 add r3,r7,#3
 2982 0022 1B78     	 ldrb r3,[r3]
 2983 0024 002B     	 cmp r3,#0
 2984 0026 20D1     	 bne .L128
1033:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1034:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 2985              	 .loc 2 1034 0
 2986 0028 7B68     	 ldr r3,[r7,#4]
 2987 002a E022     	 mov r2,#224
 2988 002c 9B58     	 ldr r3,[r3,r2]
 2989 002e BA1C     	 add r2,r7,#2
 2990 0030 1278     	 ldrb r2,[r2]
 2991 0032 7F21     	 mov r1,#127
 2992 0034 9140     	 lsl r1,r1,r2
 2993 0036 0A1C     	 mov r2,r1
 2994 0038 D243     	 mvn r2,r2
 2995 003a 1340     	 and r3,r2
 2996 003c 8022     	 mov r2,#128
 2997 003e 1202     	 lsl r2,r2,#8
 2998 0040 1A43     	 orr r2,r3
 2999 0042 7B68     	 ldr r3,[r7,#4]
 3000 0044 E021     	 mov r1,#224
 3001 0046 5A50     	 str r2,[r3,r1]
1035:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
1036:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 3002              	 .loc 2 1036 0
 3003 0048 7B68     	 ldr r3,[r7,#4]
 3004 004a E022     	 mov r2,#224
 3005 004c 9A58     	 ldr r2,[r3,r2]
 3006 004e 7B1C     	 add r3,r7,#1
 3007 0050 1978     	 ldrb r1,[r3]
 3008 0052 BB1C     	 add r3,r7,#2
 3009 0054 1B78     	 ldrb r3,[r3]
 3010 0056 9940     	 lsl r1,r1,r3
 3011 0058 0B1C     	 mov r3,r1
 3012 005a 1343     	 orr r3,r2
 3013 005c 8022     	 mov r2,#128
 3014 005e 1202     	 lsl r2,r2,#8
 3015 0060 1A43     	 orr r2,r3
 3016 0062 7B68     	 ldr r3,[r7,#4]
 3017 0064 E021     	 mov r1,#224
 3018 0066 5A50     	 str r2,[r3,r1]
 3019 0068 23E0     	 b .L127
 3020              	.L128:
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1038:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 3021              	 .loc 2 1038 0
 3022 006a FB1C     	 add r3,r7,#3
 3023 006c 1B78     	 ldrb r3,[r3]
 3024 006e 012B     	 cmp r3,#1
 3025 0070 1FD1     	 bne .L127
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1040:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 3026              	 .loc 2 1040 0
 3027 0072 7B68     	 ldr r3,[r7,#4]
 3028 0074 E422     	 mov r2,#228
 3029 0076 9B58     	 ldr r3,[r3,r2]
 3030 0078 BA1C     	 add r2,r7,#2
 3031 007a 1278     	 ldrb r2,[r2]
 3032 007c 7F21     	 mov r1,#127
 3033 007e 9140     	 lsl r1,r1,r2
 3034 0080 0A1C     	 mov r2,r1
 3035 0082 D243     	 mvn r2,r2
 3036 0084 1340     	 and r3,r2
 3037 0086 8022     	 mov r2,#128
 3038 0088 1202     	 lsl r2,r2,#8
 3039 008a 1A43     	 orr r2,r3
 3040 008c 7B68     	 ldr r3,[r7,#4]
 3041 008e E421     	 mov r1,#228
 3042 0090 5A50     	 str r2,[r3,r1]
1041:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
1042:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 3043              	 .loc 2 1042 0
 3044 0092 7B68     	 ldr r3,[r7,#4]
 3045 0094 E422     	 mov r2,#228
 3046 0096 9A58     	 ldr r2,[r3,r2]
 3047 0098 7B1C     	 add r3,r7,#1
 3048 009a 1978     	 ldrb r1,[r3]
 3049 009c BB1C     	 add r3,r7,#2
 3050 009e 1B78     	 ldrb r3,[r3]
 3051 00a0 9940     	 lsl r1,r1,r3
 3052 00a2 0B1C     	 mov r3,r1
 3053 00a4 1343     	 orr r3,r2
 3054 00a6 8022     	 mov r2,#128
 3055 00a8 1202     	 lsl r2,r2,#8
 3056 00aa 1A43     	 orr r2,r3
 3057 00ac 7B68     	 ldr r3,[r7,#4]
 3058 00ae E421     	 mov r1,#228
 3059 00b0 5A50     	 str r2,[r3,r1]
 3060              	.L127:
1043:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1045:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1046:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
1047:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1048:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3061              	 .loc 2 1048 0
 3062 00b2 BD46     	 mov sp,r7
 3063 00b4 03B0     	 add sp,sp,#12
 3064              	 
 3065 00b6 90BD     	 pop {r4,r7,pc}
 3066              	 .cfi_endproc
 3067              	.LFE188:
 3069              	 .section .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop,"ax",%progbits
 3070              	 .align 2
 3071              	 .global XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
 3072              	 .code 16
 3073              	 .thumb_func
 3075              	XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:
 3076              	.LFB189:
1049:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1050:../Libraries/XMCLib/src/xmc_vadc.c **** 
1051:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1052:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1053:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_INDEX_t group_num,
1054:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_SHS_LOOP_CH_t loop_select,
1055:../Libraries/XMCLib/src/xmc_vadc.c ****     uint8_t ch_num)
1056:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3077              	 .loc 2 1056 0
 3078              	 .cfi_startproc
 3079 0000 90B5     	 push {r4,r7,lr}
 3080              	.LCFI130:
 3081              	 .cfi_def_cfa_offset 12
 3082              	 .cfi_offset 4,-12
 3083              	 .cfi_offset 7,-8
 3084              	 .cfi_offset 14,-4
 3085 0002 83B0     	 sub sp,sp,#12
 3086              	.LCFI131:
 3087              	 .cfi_def_cfa_offset 24
 3088 0004 00AF     	 add r7,sp,#0
 3089              	.LCFI132:
 3090              	 .cfi_def_cfa_register 7
 3091 0006 7860     	 str r0,[r7,#4]
 3092 0008 0C1C     	 mov r4,r1
 3093 000a 101C     	 mov r0,r2
 3094 000c 191C     	 mov r1,r3
 3095 000e FB1C     	 add r3,r7,#3
 3096 0010 221C     	 add r2,r4,#0
 3097 0012 1A70     	 strb r2,[r3]
 3098 0014 BB1C     	 add r3,r7,#2
 3099 0016 021C     	 add r2,r0,#0
 3100 0018 1A70     	 strb r2,[r3]
 3101 001a 7B1C     	 add r3,r7,#1
 3102 001c 0A1C     	 add r2,r1,#0
 3103 001e 1A70     	 strb r2,[r3]
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1058:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1060:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0) || (group_num == XMC_VADC_GROUP_INDEX_1))
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1062:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0) || (loop_select == XMC_VADC_SHS_LOOP_CH_1))
1063:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1064:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1065:../Libraries/XMCLib/src/xmc_vadc.c **** 
1066:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
 3104              	 .loc 2 1066 0
 3105 0020 7B68     	 ldr r3,[r7,#4]
 3106 0022 1B6D     	 ldr r3,[r3,#80]
1067:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3107              	 .loc 2 1067 0
 3108 0024 BA1C     	 add r2,r7,#2
 3109 0026 1278     	 ldrb r2,[r2]
 3110 0028 0C49     	 ldr r1,.L131
 3111 002a 9140     	 lsl r1,r1,r2
 3112 002c 0A1C     	 mov r2,r1
1066:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3113              	 .loc 2 1066 0
 3114 002e D243     	 mvn r2,r2
 3115 0030 1A40     	 and r2,r3
 3116 0032 7B68     	 ldr r3,[r7,#4]
 3117 0034 1A65     	 str r2,[r3,#80]
1068:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
 3118              	 .loc 2 1068 0
 3119 0036 7B68     	 ldr r3,[r7,#4]
 3120 0038 1A6D     	 ldr r2,[r3,#80]
 3121 003a 7B1C     	 add r3,r7,#1
 3122 003c 1978     	 ldrb r1,[r3]
 3123 003e FB1C     	 add r3,r7,#3
 3124 0040 1B78     	 ldrb r3,[r3]
 3125 0042 1B02     	 lsl r3,r3,#8
 3126 0044 1943     	 orr r1,r3
 3127 0046 BB1C     	 add r3,r7,#2
 3128 0048 1B78     	 ldrb r3,[r3]
 3129 004a 9940     	 lsl r1,r1,r3
 3130 004c 0B1C     	 mov r3,r1
 3131 004e 1A43     	 orr r2,r3
 3132 0050 7B68     	 ldr r3,[r7,#4]
 3133 0052 1A65     	 str r2,[r3,#80]
1069:../Libraries/XMCLib/src/xmc_vadc.c **** 
1070:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3134              	 .loc 2 1070 0
 3135 0054 BD46     	 mov sp,r7
 3136 0056 03B0     	 add sp,sp,#12
 3137              	 
 3138 0058 90BD     	 pop {r4,r7,pc}
 3139              	.L132:
 3140 005a C046     	 .align 2
 3141              	.L131:
 3142 005c 1F810000 	 .word 33055
 3143              	 .cfi_endproc
 3144              	.LFE189:
 3146              	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 3147              	 .align 2
 3148              	 .global XMC_VADC_GROUP_ScanInit
 3149              	 .code 16
 3150              	 .thumb_func
 3152              	XMC_VADC_GROUP_ScanInit:
 3153              	.LFB190:
1071:../Libraries/XMCLib/src/xmc_vadc.c **** 
1072:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1073:../Libraries/XMCLib/src/xmc_vadc.c **** 
1074:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
1075:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1076:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1077:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3154              	 .loc 2 1077 0
 3155              	 .cfi_startproc
 3156 0000 80B5     	 push {r7,lr}
 3157              	.LCFI133:
 3158              	 .cfi_def_cfa_offset 8
 3159              	 .cfi_offset 7,-8
 3160              	 .cfi_offset 14,-4
 3161 0002 84B0     	 sub sp,sp,#16
 3162              	.LCFI134:
 3163              	 .cfi_def_cfa_offset 24
 3164 0004 00AF     	 add r7,sp,#0
 3165              	.LCFI135:
 3166              	 .cfi_def_cfa_register 7
 3167 0006 7860     	 str r0,[r7,#4]
 3168 0008 3960     	 str r1,[r7]
1078:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1079:../Libraries/XMCLib/src/xmc_vadc.c **** 
1080:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1081:../Libraries/XMCLib/src/xmc_vadc.c **** 
1082:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1083:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3169              	 .loc 2 1083 0
 3170 000a 7B68     	 ldr r3,[r7,#4]
 3171 000c 181C     	 mov r0,r3
 3172 000e FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1084:../Libraries/XMCLib/src/xmc_vadc.c **** 
1085:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3173              	 .loc 2 1086 0
 3174 0012 7B68     	 ldr r3,[r7,#4]
 3175 0014 8422     	 mov r2,#132
 3176 0016 9B58     	 ldr r3,[r3,r2]
 3177 0018 FB60     	 str r3,[r7,#12]
1087:../Libraries/XMCLib/src/xmc_vadc.c **** 
1088:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 3178              	 .loc 2 1089 0
 3179 001a FB68     	 ldr r3,[r7,#12]
 3180 001c 3022     	 mov r2,#48
 3181 001e 9343     	 bic r3,r2
 3182 0020 FB60     	 str r3,[r7,#12]
1090:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 3183              	 .loc 2 1090 0
 3184 0022 3B68     	 ldr r3,[r7]
 3185 0024 1B78     	 ldrb r3,[r3]
 3186 0026 1B07     	 lsl r3,r3,#28
 3187 0028 9B0F     	 lsr r3,r3,#30
 3188 002a DBB2     	 uxtb r3,r3
 3189 002c 1B01     	 lsl r3,r3,#4
 3190 002e FA68     	 ldr r2,[r7,#12]
 3191 0030 1343     	 orr r3,r2
 3192 0032 FB60     	 str r3,[r7,#12]
1091:../Libraries/XMCLib/src/xmc_vadc.c **** 
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1093:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3193              	 .loc 2 1093 0
 3194 0034 3B68     	 ldr r3,[r7]
 3195 0036 1B78     	 ldrb r3,[r3]
 3196 0038 0322     	 mov r2,#3
 3197 003a 1340     	 and r3,r2
 3198 003c DBB2     	 uxtb r3,r3
 3199 003e 002B     	 cmp r3,#0
 3200 0040 03D0     	 beq .L134
1094:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1095:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 3201              	 .loc 2 1095 0
 3202 0042 FB68     	 ldr r3,[r7,#12]
 3203 0044 8022     	 mov r2,#128
 3204 0046 1343     	 orr r3,r2
 3205 0048 FB60     	 str r3,[r7,#12]
 3206              	.L134:
1096:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1097:../Libraries/XMCLib/src/xmc_vadc.c **** 
1098:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3207              	 .loc 2 1098 0
 3208 004a 7B68     	 ldr r3,[r7,#4]
 3209 004c 8421     	 mov r1,#132
 3210 004e FA68     	 ldr r2,[r7,#12]
 3211 0050 5A50     	 str r2,[r3,r1]
1099:../Libraries/XMCLib/src/xmc_vadc.c **** 
1100:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl | (VADC_G_ASCTRL_XTWC_Msk) | (VADC_G_ASCTRL_GTWC_Ms
 3212              	 .loc 2 1100 0
 3213 0052 3B68     	 ldr r3,[r7]
 3214 0054 5B68     	 ldr r3,[r3,#4]
 3215 0056 154A     	 ldr r2,.L136
 3216 0058 1A43     	 orr r2,r3
 3217 005a 111C     	 mov r1,r2
 3218 005c 7A68     	 ldr r2,[r7,#4]
 3219 005e 9023     	 mov r3,#144
 3220 0060 5B00     	 lsl r3,r3,#1
 3221 0062 D150     	 str r1,[r2,r3]
1101:../Libraries/XMCLib/src/xmc_vadc.c ****                                  (VADC_G_ASCTRL_TMWC_Msk));
1102:../Libraries/XMCLib/src/xmc_vadc.c **** 
1103:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 3222              	 .loc 2 1103 0
 3223 0064 3B68     	 ldr r3,[r7]
 3224 0066 9B68     	 ldr r3,[r3,#8]
 3225 0068 0122     	 mov r2,#1
 3226 006a 1A43     	 orr r2,r3
 3227 006c 111C     	 mov r1,r2
 3228 006e 7A68     	 ldr r2,[r7,#4]
 3229 0070 9223     	 mov r3,#146
 3230 0072 5B00     	 lsl r3,r3,#1
 3231 0074 D150     	 str r1,[r2,r3]
1104:../Libraries/XMCLib/src/xmc_vadc.c **** 
1105:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3232              	 .loc 2 1105 0
 3233 0076 3B68     	 ldr r3,[r7]
 3234 0078 1B78     	 ldrb r3,[r3]
 3235 007a 0322     	 mov r2,#3
 3236 007c 1340     	 and r3,r2
 3237 007e DBB2     	 uxtb r3,r3
 3238 0080 022B     	 cmp r3,#2
 3239 0082 0BD1     	 bne .L135
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1107:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 3240              	 .loc 2 1107 0
 3241 0084 7A68     	 ldr r2,[r7,#4]
 3242 0086 9223     	 mov r3,#146
 3243 0088 5B00     	 lsl r3,r3,#1
 3244 008a D358     	 ldr r3,[r2,r3]
 3245 008c 8022     	 mov r2,#128
 3246 008e 5202     	 lsl r2,r2,#9
 3247 0090 1A43     	 orr r2,r3
 3248 0092 111C     	 mov r1,r2
 3249 0094 7A68     	 ldr r2,[r7,#4]
 3250 0096 9223     	 mov r3,#146
 3251 0098 5B00     	 lsl r3,r3,#1
 3252 009a D150     	 str r1,[r2,r3]
 3253              	.L135:
1108:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1109:../Libraries/XMCLib/src/xmc_vadc.c **** 
1110:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1111:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 3254              	 .loc 2 1111 0
 3255 009c 7B68     	 ldr r3,[r7,#4]
 3256 009e 181C     	 mov r0,r3
 3257 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1112:../Libraries/XMCLib/src/xmc_vadc.c **** 
1113:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3258              	 .loc 2 1113 0
 3259 00a4 BD46     	 mov sp,r7
 3260 00a6 04B0     	 add sp,sp,#16
 3261              	 
 3262 00a8 80BD     	 pop {r7,pc}
 3263              	.L137:
 3264 00aa C046     	 .align 2
 3265              	.L136:
 3266 00ac 00808080 	 .word -2139062272
 3267              	 .cfi_endproc
 3268              	.LFE190:
 3270              	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 3271              	 .align 2
 3272              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 3273              	 .code 16
 3274              	 .thumb_func
 3276              	XMC_VADC_GROUP_ScanSelectTrigger:
 3277              	.LFB191:
1114:../Libraries/XMCLib/src/xmc_vadc.c **** 
1115:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1116:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1117:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3278              	 .loc 2 1117 0
 3279              	 .cfi_startproc
 3280 0000 80B5     	 push {r7,lr}
 3281              	.LCFI136:
 3282              	 .cfi_def_cfa_offset 8
 3283              	 .cfi_offset 7,-8
 3284              	 .cfi_offset 14,-4
 3285 0002 84B0     	 sub sp,sp,#16
 3286              	.LCFI137:
 3287              	 .cfi_def_cfa_offset 24
 3288 0004 00AF     	 add r7,sp,#0
 3289              	.LCFI138:
 3290              	 .cfi_def_cfa_register 7
 3291 0006 7860     	 str r0,[r7,#4]
 3292 0008 0A1C     	 mov r2,r1
 3293 000a FB1C     	 add r3,r7,#3
 3294 000c 1A70     	 strb r2,[r3]
1118:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1119:../Libraries/XMCLib/src/xmc_vadc.c **** 
1120:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1121:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input) < XMC_VADC_NUM
1122:../Libraries/XMCLib/src/xmc_vadc.c **** 
1123:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3295              	 .loc 2 1123 0
 3296 000e 7A68     	 ldr r2,[r7,#4]
 3297 0010 9023     	 mov r3,#144
 3298 0012 5B00     	 lsl r3,r3,#1
 3299 0014 D358     	 ldr r3,[r2,r3]
 3300 0016 FB60     	 str r3,[r7,#12]
1124:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3301              	 .loc 2 1124 0
 3302 0018 FB68     	 ldr r3,[r7,#12]
 3303 001a 8022     	 mov r2,#128
 3304 001c 1202     	 lsl r2,r2,#8
 3305 001e 1343     	 orr r3,r2
 3306 0020 FB60     	 str r3,[r7,#12]
1125:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 3307              	 .loc 2 1125 0
 3308 0022 FB68     	 ldr r3,[r7,#12]
 3309 0024 084A     	 ldr r2,.L139
 3310 0026 1340     	 and r3,r2
 3311 0028 FB60     	 str r3,[r7,#12]
1126:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 3312              	 .loc 2 1126 0
 3313 002a FB1C     	 add r3,r7,#3
 3314 002c 1B78     	 ldrb r3,[r3]
 3315 002e 1B02     	 lsl r3,r3,#8
 3316 0030 FA68     	 ldr r2,[r7,#12]
 3317 0032 1343     	 orr r3,r2
 3318 0034 FB60     	 str r3,[r7,#12]
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3319              	 .loc 2 1127 0
 3320 0036 7A68     	 ldr r2,[r7,#4]
 3321 0038 9023     	 mov r3,#144
 3322 003a 5B00     	 lsl r3,r3,#1
 3323 003c F968     	 ldr r1,[r7,#12]
 3324 003e D150     	 str r1,[r2,r3]
1128:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3325              	 .loc 2 1128 0
 3326 0040 BD46     	 mov sp,r7
 3327 0042 04B0     	 add sp,sp,#16
 3328              	 
 3329 0044 80BD     	 pop {r7,pc}
 3330              	.L140:
 3331 0046 C046     	 .align 2
 3332              	.L139:
 3333 0048 FFF0FFFF 	 .word -3841
 3334              	 .cfi_endproc
 3335              	.LFE191:
 3337              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 3338              	 .align 2
 3339              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 3340              	 .code 16
 3341              	 .thumb_func
 3343              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 3344              	.LFB192:
1129:../Libraries/XMCLib/src/xmc_vadc.c **** 
1130:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1131:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1132:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3345              	 .loc 2 1132 0
 3346              	 .cfi_startproc
 3347 0000 80B5     	 push {r7,lr}
 3348              	.LCFI139:
 3349              	 .cfi_def_cfa_offset 8
 3350              	 .cfi_offset 7,-8
 3351              	 .cfi_offset 14,-4
 3352 0002 84B0     	 sub sp,sp,#16
 3353              	.LCFI140:
 3354              	 .cfi_def_cfa_offset 24
 3355 0004 00AF     	 add r7,sp,#0
 3356              	.LCFI141:
 3357              	 .cfi_def_cfa_register 7
 3358 0006 7860     	 str r0,[r7,#4]
 3359 0008 0A1C     	 mov r2,r1
 3360 000a FB1C     	 add r3,r7,#3
 3361 000c 1A70     	 strb r2,[r3]
1133:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1134:../Libraries/XMCLib/src/xmc_vadc.c **** 
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1136:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge) <= XMC_VADC
1137:../Libraries/XMCLib/src/xmc_vadc.c **** 
1138:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3362              	 .loc 2 1138 0
 3363 000e 7A68     	 ldr r2,[r7,#4]
 3364 0010 9023     	 mov r3,#144
 3365 0012 5B00     	 lsl r3,r3,#1
 3366 0014 D358     	 ldr r3,[r2,r3]
 3367 0016 FB60     	 str r3,[r7,#12]
1139:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3368              	 .loc 2 1139 0
 3369 0018 FB68     	 ldr r3,[r7,#12]
 3370 001a 8022     	 mov r2,#128
 3371 001c 1202     	 lsl r2,r2,#8
 3372 001e 1343     	 orr r3,r2
 3373 0020 FB60     	 str r3,[r7,#12]
1140:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 3374              	 .loc 2 1140 0
 3375 0022 FB68     	 ldr r3,[r7,#12]
 3376 0024 084A     	 ldr r2,.L142
 3377 0026 1340     	 and r3,r2
 3378 0028 FB60     	 str r3,[r7,#12]
1141:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 3379              	 .loc 2 1141 0
 3380 002a FB1C     	 add r3,r7,#3
 3381 002c 1B78     	 ldrb r3,[r3]
 3382 002e 5B03     	 lsl r3,r3,#13
 3383 0030 FA68     	 ldr r2,[r7,#12]
 3384 0032 1343     	 orr r3,r2
 3385 0034 FB60     	 str r3,[r7,#12]
1142:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3386              	 .loc 2 1142 0
 3387 0036 7A68     	 ldr r2,[r7,#4]
 3388 0038 9023     	 mov r3,#144
 3389 003a 5B00     	 lsl r3,r3,#1
 3390 003c F968     	 ldr r1,[r7,#12]
 3391 003e D150     	 str r1,[r2,r3]
1143:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3392              	 .loc 2 1143 0
 3393 0040 BD46     	 mov sp,r7
 3394 0042 04B0     	 add sp,sp,#16
 3395              	 
 3396 0044 80BD     	 pop {r7,pc}
 3397              	.L143:
 3398 0046 C046     	 .align 2
 3399              	.L142:
 3400 0048 FF9FFFFF 	 .word -24577
 3401              	 .cfi_endproc
 3402              	.LFE192:
 3404              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 3405              	 .align 2
 3406              	 .global XMC_VADC_GROUP_ScanSelectGating
 3407              	 .code 16
 3408              	 .thumb_func
 3410              	XMC_VADC_GROUP_ScanSelectGating:
 3411              	.LFB193:
1144:../Libraries/XMCLib/src/xmc_vadc.c **** 
1145:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1146:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1147:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3412              	 .loc 2 1147 0
 3413              	 .cfi_startproc
 3414 0000 80B5     	 push {r7,lr}
 3415              	.LCFI142:
 3416              	 .cfi_def_cfa_offset 8
 3417              	 .cfi_offset 7,-8
 3418              	 .cfi_offset 14,-4
 3419 0002 84B0     	 sub sp,sp,#16
 3420              	.LCFI143:
 3421              	 .cfi_def_cfa_offset 24
 3422 0004 00AF     	 add r7,sp,#0
 3423              	.LCFI144:
 3424              	 .cfi_def_cfa_register 7
 3425 0006 7860     	 str r0,[r7,#4]
 3426 0008 0A1C     	 mov r2,r1
 3427 000a FB1C     	 add r3,r7,#3
 3428 000c 1A70     	 strb r2,[r3]
1148:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1149:../Libraries/XMCLib/src/xmc_vadc.c **** 
1150:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1151:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input) < XMC_VADC_NUM_PO
1152:../Libraries/XMCLib/src/xmc_vadc.c **** 
1153:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3429              	 .loc 2 1153 0
 3430 000e 7A68     	 ldr r2,[r7,#4]
 3431 0010 9023     	 mov r3,#144
 3432 0012 5B00     	 lsl r3,r3,#1
 3433 0014 D358     	 ldr r3,[r2,r3]
 3434 0016 FB60     	 str r3,[r7,#12]
1154:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 3435              	 .loc 2 1154 0
 3436 0018 FB68     	 ldr r3,[r7,#12]
 3437 001a 8022     	 mov r2,#128
 3438 001c 1204     	 lsl r2,r2,#16
 3439 001e 1343     	 orr r3,r2
 3440 0020 FB60     	 str r3,[r7,#12]
1155:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 3441              	 .loc 2 1155 0
 3442 0022 FB68     	 ldr r3,[r7,#12]
 3443 0024 084A     	 ldr r2,.L145
 3444 0026 1340     	 and r3,r2
 3445 0028 FB60     	 str r3,[r7,#12]
1156:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 3446              	 .loc 2 1156 0
 3447 002a FB1C     	 add r3,r7,#3
 3448 002c 1B78     	 ldrb r3,[r3]
 3449 002e 1B04     	 lsl r3,r3,#16
 3450 0030 FA68     	 ldr r2,[r7,#12]
 3451 0032 1343     	 orr r3,r2
 3452 0034 FB60     	 str r3,[r7,#12]
1157:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3453              	 .loc 2 1157 0
 3454 0036 7A68     	 ldr r2,[r7,#4]
 3455 0038 9023     	 mov r3,#144
 3456 003a 5B00     	 lsl r3,r3,#1
 3457 003c F968     	 ldr r1,[r7,#12]
 3458 003e D150     	 str r1,[r2,r3]
1158:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3459              	 .loc 2 1158 0
 3460 0040 BD46     	 mov sp,r7
 3461 0042 04B0     	 add sp,sp,#16
 3462              	 
 3463 0044 80BD     	 pop {r7,pc}
 3464              	.L146:
 3465 0046 C046     	 .align 2
 3466              	.L145:
 3467 0048 FFFFF0FF 	 .word -983041
 3468              	 .cfi_endproc
 3469              	.LFE193:
 3471              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 3472              	 .align 2
 3473              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 3474              	 .code 16
 3475              	 .thumb_func
 3477              	XMC_VADC_GROUP_ScanSequenceAbort:
 3478              	.LFB194:
1159:../Libraries/XMCLib/src/xmc_vadc.c **** 
1160:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1161:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1162:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3479              	 .loc 2 1162 0
 3480              	 .cfi_startproc
 3481 0000 80B5     	 push {r7,lr}
 3482              	.LCFI145:
 3483              	 .cfi_def_cfa_offset 8
 3484              	 .cfi_offset 7,-8
 3485              	 .cfi_offset 14,-4
 3486 0002 84B0     	 sub sp,sp,#16
 3487              	.LCFI146:
 3488              	 .cfi_def_cfa_offset 24
 3489 0004 00AF     	 add r7,sp,#0
 3490              	.LCFI147:
 3491              	 .cfi_def_cfa_register 7
 3492 0006 7860     	 str r0,[r7,#4]
1163:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1164:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1165:../Libraries/XMCLib/src/xmc_vadc.c **** 
1166:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1167:../Libraries/XMCLib/src/xmc_vadc.c **** 
1168:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1169:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 3493              	 .loc 2 1169 0
 3494 0008 7A68     	 ldr r2,[r7,#4]
 3495 000a 9023     	 mov r3,#144
 3496 000c 5B00     	 lsl r3,r3,#1
 3497 000e D358     	 ldr r3,[r2,r3]
 3498 0010 FB60     	 str r3,[r7,#12]
1170:../Libraries/XMCLib/src/xmc_vadc.c **** 
1171:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 3499              	 .loc 2 1171 0
 3500 0012 7A68     	 ldr r2,[r7,#4]
 3501 0014 9023     	 mov r3,#144
 3502 0016 5B00     	 lsl r3,r3,#1
 3503 0018 1E49     	 ldr r1,.L148
 3504 001a D150     	 str r1,[r2,r3]
1172:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_Msk );
1173:../Libraries/XMCLib/src/xmc_vadc.c **** 
1174:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 3505              	 .loc 2 1175 0
 3506 001c 7B68     	 ldr r3,[r7,#4]
 3507 001e 8422     	 mov r2,#132
 3508 0020 9B58     	 ldr r3,[r3,r2]
 3509 0022 5B0E     	 lsr r3,r3,#25
 3510 0024 0122     	 mov r2,#1
 3511 0026 1A40     	 and r2,r3
 3512 0028 0B23     	 mov r3,#11
 3513 002a FB18     	 add r3,r7,r3
 3514 002c 511E     	 sub r1,r2,#1
 3515 002e 8A41     	 sbc r2,r2,r1
 3516 0030 1A70     	 strb r2,[r3]
1176:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3517              	 .loc 2 1176 0
 3518 0032 7B68     	 ldr r3,[r7,#4]
 3519 0034 181C     	 mov r0,r3
 3520 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1177:../Libraries/XMCLib/src/xmc_vadc.c **** 
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 3521              	 .loc 2 1178 0
 3522 003a 7A68     	 ldr r2,[r7,#4]
 3523 003c 9223     	 mov r3,#146
 3524 003e 5B00     	 lsl r3,r3,#1
 3525 0040 D358     	 ldr r3,[r2,r3]
 3526 0042 0322     	 mov r2,#3
 3527 0044 9343     	 bic r3,r2
 3528 0046 191C     	 mov r1,r3
 3529 0048 7A68     	 ldr r2,[r7,#4]
 3530 004a 9223     	 mov r3,#146
 3531 004c 5B00     	 lsl r3,r3,#1
 3532 004e D150     	 str r1,[r2,r3]
1179:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 3533              	 .loc 2 1179 0
 3534 0050 7A68     	 ldr r2,[r7,#4]
 3535 0052 9223     	 mov r3,#146
 3536 0054 5B00     	 lsl r3,r3,#1
 3537 0056 D358     	 ldr r3,[r2,r3]
 3538 0058 8022     	 mov r2,#128
 3539 005a 5200     	 lsl r2,r2,#1
 3540 005c 1A43     	 orr r2,r3
 3541 005e 111C     	 mov r1,r2
 3542 0060 7A68     	 ldr r2,[r7,#4]
 3543 0062 9223     	 mov r3,#146
 3544 0064 5B00     	 lsl r3,r3,#1
 3545 0066 D150     	 str r1,[r2,r3]
1180:../Libraries/XMCLib/src/xmc_vadc.c **** 
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 1*/
1182:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 3546              	 .loc 2 1182 0
 3547 0068 7B68     	 ldr r3,[r7,#4]
 3548 006a 8422     	 mov r2,#132
 3549 006c 9A58     	 ldr r2,[r3,r2]
 3550 006e 0B23     	 mov r3,#11
 3551 0070 FB18     	 add r3,r7,r3
 3552 0072 1B78     	 ldrb r3,[r3]
 3553 0074 5B06     	 lsl r3,r3,#25
 3554 0076 1A43     	 orr r2,r3
 3555 0078 7B68     	 ldr r3,[r7,#4]
 3556 007a 8421     	 mov r1,#132
 3557 007c 5A50     	 str r2,[r3,r1]
1183:../Libraries/XMCLib/src/xmc_vadc.c **** 
1184:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1185:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1186:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_Msk );
 3558              	 .loc 2 1186 0
 3559 007e FB68     	 ldr r3,[r7,#12]
 3560 0080 044A     	 ldr r2,.L148
 3561 0082 1A43     	 orr r2,r3
 3562 0084 111C     	 mov r1,r2
1185:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_Msk );
 3563              	 .loc 2 1185 0
 3564 0086 7A68     	 ldr r2,[r7,#4]
 3565 0088 9023     	 mov r3,#144
 3566 008a 5B00     	 lsl r3,r3,#1
 3567 008c D150     	 str r1,[r2,r3]
1187:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3568              	 .loc 2 1187 0
 3569 008e BD46     	 mov sp,r7
 3570 0090 04B0     	 add sp,sp,#16
 3571              	 
 3572 0092 80BD     	 pop {r7,pc}
 3573              	.L149:
 3574              	 .align 2
 3575              	.L148:
 3576 0094 00808080 	 .word -2139062272
 3577              	 .cfi_endproc
 3578              	.LFE194:
 3580              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 3581              	 .align 2
 3582              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 3583              	 .code 16
 3584              	 .thumb_func
 3586              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 3587              	.LFB195:
1188:../Libraries/XMCLib/src/xmc_vadc.c **** 
1189:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1190:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1191:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3588              	 .loc 2 1191 0
 3589              	 .cfi_startproc
 3590 0000 80B5     	 push {r7,lr}
 3591              	.LCFI148:
 3592              	 .cfi_def_cfa_offset 8
 3593              	 .cfi_offset 7,-8
 3594              	 .cfi_offset 14,-4
 3595 0002 86B0     	 sub sp,sp,#24
 3596              	.LCFI149:
 3597              	 .cfi_def_cfa_offset 32
 3598 0004 00AF     	 add r7,sp,#0
 3599              	.LCFI150:
 3600              	 .cfi_def_cfa_register 7
 3601 0006 7860     	 str r0,[r7,#4]
1192:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1193:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1195:../Libraries/XMCLib/src/xmc_vadc.c **** 
1196:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1197:../Libraries/XMCLib/src/xmc_vadc.c **** 
1198:../Libraries/XMCLib/src/xmc_vadc.c **** 
1199:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3602              	 .loc 2 1199 0
 3603 0008 0023     	 mov r3,#0
 3604 000a FB60     	 str r3,[r7,#12]
1200:../Libraries/XMCLib/src/xmc_vadc.c **** 
1201:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 3605              	 .loc 2 1201 0
 3606 000c 7A68     	 ldr r2,[r7,#4]
 3607 000e 9623     	 mov r3,#150
 3608 0010 5B00     	 lsl r3,r3,#1
 3609 0012 D358     	 ldr r3,[r2,r3]
 3610 0014 002B     	 cmp r3,#0
 3611 0016 17D0     	 beq .L151
1202:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1203:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 3612              	 .loc 2 1203 0
 3613 0018 7A68     	 ldr r2,[r7,#4]
 3614 001a 9623     	 mov r3,#150
 3615 001c 5B00     	 lsl r3,r3,#1
 3616 001e D358     	 ldr r3,[r2,r3]
 3617 0020 7B61     	 str r3,[r7,#20]
1204:../Libraries/XMCLib/src/xmc_vadc.c **** 
1205:../Libraries/XMCLib/src/xmc_vadc.c ****     for (i = 0U; i < XMC_VADC_NUM_CHANNELS_PER_GROUP; i++)
 3618              	 .loc 2 1205 0
 3619 0022 0023     	 mov r3,#0
 3620 0024 3B61     	 str r3,[r7,#16]
 3621 0026 0CE0     	 b .L152
 3622              	.L154:
1206:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1207:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 3623              	 .loc 2 1207 0
 3624 0028 7B69     	 ldr r3,[r7,#20]
 3625 002a 0122     	 mov r2,#1
 3626 002c 1340     	 and r3,r2
 3627 002e 02D0     	 beq .L153
1208:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1209:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 3628              	 .loc 2 1209 0
 3629 0030 FB68     	 ldr r3,[r7,#12]
 3630 0032 0133     	 add r3,r3,#1
 3631 0034 FB60     	 str r3,[r7,#12]
 3632              	.L153:
1210:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1211:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 3633              	 .loc 2 1211 0 discriminator 2
 3634 0036 7B69     	 ldr r3,[r7,#20]
 3635 0038 5B08     	 lsr r3,r3,#1
 3636 003a 7B61     	 str r3,[r7,#20]
1205:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3637              	 .loc 2 1205 0 discriminator 2
 3638 003c 3B69     	 ldr r3,[r7,#16]
 3639 003e 0133     	 add r3,r3,#1
 3640 0040 3B61     	 str r3,[r7,#16]
 3641              	.L152:
1205:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3642              	 .loc 2 1205 0 is_stmt 0 discriminator 1
 3643 0042 3B69     	 ldr r3,[r7,#16]
 3644 0044 072B     	 cmp r3,#7
 3645 0046 EFD9     	 bls .L154
 3646              	.L151:
1212:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1214:../Libraries/XMCLib/src/xmc_vadc.c **** 
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3647              	 .loc 2 1215 0 is_stmt 1
 3648 0048 FB68     	 ldr r3,[r7,#12]
1216:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3649              	 .loc 2 1216 0
 3650 004a 181C     	 mov r0,r3
 3651 004c BD46     	 mov sp,r7
 3652 004e 06B0     	 add sp,sp,#24
 3653              	 
 3654 0050 80BD     	 pop {r7,pc}
 3655              	 .cfi_endproc
 3656              	.LFE195:
 3658 0052 C046     	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 3659              	 .align 2
 3660              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 3661              	 .code 16
 3662              	 .thumb_func
 3664              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 3665              	.LFB196:
1217:../Libraries/XMCLib/src/xmc_vadc.c **** 
1218:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1219:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1220:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3666              	 .loc 2 1220 0
 3667              	 .cfi_startproc
 3668 0000 80B5     	 push {r7,lr}
 3669              	.LCFI151:
 3670              	 .cfi_def_cfa_offset 8
 3671              	 .cfi_offset 7,-8
 3672              	 .cfi_offset 14,-4
 3673 0002 84B0     	 sub sp,sp,#16
 3674              	.LCFI152:
 3675              	 .cfi_def_cfa_offset 24
 3676 0004 00AF     	 add r7,sp,#0
 3677              	.LCFI153:
 3678              	 .cfi_def_cfa_register 7
 3679 0006 7860     	 str r0,[r7,#4]
 3680 0008 0A1C     	 mov r2,r1
 3681 000a FB1C     	 add r3,r7,#3
 3682 000c 1A70     	 strb r2,[r3]
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 3683              	 .loc 2 1222 0
 3684 000e 7A68     	 ldr r2,[r7,#4]
 3685 0010 E023     	 mov r3,#224
 3686 0012 5B00     	 lsl r3,r3,#1
 3687 0014 D358     	 ldr r3,[r2,r3]
 3688 0016 FB60     	 str r3,[r7,#12]
1223:../Libraries/XMCLib/src/xmc_vadc.c **** 
1224:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1226:../Libraries/XMCLib/src/xmc_vadc.c **** 
1227:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 3689              	 .loc 2 1227 0
 3690 0018 FB68     	 ldr r3,[r7,#12]
 3691 001a F022     	 mov r2,#240
 3692 001c 9343     	 bic r3,r2
 3693 001e FB60     	 str r3,[r7,#12]
1228:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 3694              	 .loc 2 1228 0
 3695 0020 FB1C     	 add r3,r7,#3
 3696 0022 1B78     	 ldrb r3,[r3]
 3697 0024 1B01     	 lsl r3,r3,#4
 3698 0026 FA68     	 ldr r2,[r7,#12]
 3699 0028 1343     	 orr r3,r2
 3700 002a FB60     	 str r3,[r7,#12]
1229:../Libraries/XMCLib/src/xmc_vadc.c **** 
1230:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 3701              	 .loc 2 1230 0
 3702 002c 7A68     	 ldr r2,[r7,#4]
 3703 002e E023     	 mov r3,#224
 3704 0030 5B00     	 lsl r3,r3,#1
 3705 0032 F968     	 ldr r1,[r7,#12]
 3706 0034 D150     	 str r1,[r2,r3]
1231:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3707              	 .loc 2 1231 0
 3708 0036 BD46     	 mov sp,r7
 3709 0038 04B0     	 add sp,sp,#16
 3710              	 
 3711 003a 80BD     	 pop {r7,pc}
 3712              	 .cfi_endproc
 3713              	.LFE196:
 3715              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 3716              	 .align 2
 3717              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 3718              	 .code 16
 3719              	 .thumb_func
 3721              	XMC_VADC_GROUP_ScanRemoveChannel:
 3722              	.LFB197:
1232:../Libraries/XMCLib/src/xmc_vadc.c **** 
1233:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1234:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1235:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3723              	 .loc 2 1235 0
 3724              	 .cfi_startproc
 3725 0000 80B5     	 push {r7,lr}
 3726              	.LCFI154:
 3727              	 .cfi_def_cfa_offset 8
 3728              	 .cfi_offset 7,-8
 3729              	 .cfi_offset 14,-4
 3730 0002 84B0     	 sub sp,sp,#16
 3731              	.LCFI155:
 3732              	 .cfi_def_cfa_offset 24
 3733 0004 00AF     	 add r7,sp,#0
 3734              	.LCFI156:
 3735              	 .cfi_def_cfa_register 7
 3736 0006 7860     	 str r0,[r7,#4]
 3737 0008 3960     	 str r1,[r7]
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1237:../Libraries/XMCLib/src/xmc_vadc.c **** 
1238:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1239:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num) < XMC_VADC_NUM
1240:../Libraries/XMCLib/src/xmc_vadc.c **** 
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL;
 3738              	 .loc 2 1241 0
 3739 000a 7A68     	 ldr r2,[r7,#4]
 3740 000c 9423     	 mov r3,#148
 3741 000e 5B00     	 lsl r3,r3,#1
 3742 0010 D358     	 ldr r3,[r2,r3]
 3743 0012 FB60     	 str r3,[r7,#12]
1242:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 3744              	 .loc 2 1242 0
 3745 0014 3B68     	 ldr r3,[r7]
 3746 0016 0122     	 mov r2,#1
 3747 0018 9A40     	 lsl r2,r2,r3
 3748 001a 131C     	 mov r3,r2
 3749 001c DB43     	 mvn r3,r3
 3750 001e 1A1C     	 mov r2,r3
 3751 0020 FB68     	 ldr r3,[r7,#12]
 3752 0022 1340     	 and r3,r2
 3753 0024 FB60     	 str r3,[r7,#12]
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 3754              	 .loc 2 1243 0
 3755 0026 7A68     	 ldr r2,[r7,#4]
 3756 0028 9423     	 mov r3,#148
 3757 002a 5B00     	 lsl r3,r3,#1
 3758 002c F968     	 ldr r1,[r7,#12]
 3759 002e D150     	 str r1,[r2,r3]
1244:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3760              	 .loc 2 1244 0
 3761 0030 BD46     	 mov sp,r7
 3762 0032 04B0     	 add sp,sp,#16
 3763              	 
 3764 0034 80BD     	 pop {r7,pc}
 3765              	 .cfi_endproc
 3766              	.LFE197:
 3768 0036 C046     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 3769              	 .align 2
 3770              	 .global XMC_VADC_GLOBAL_BackgroundInit
 3771              	 .code 16
 3772              	 .thumb_func
 3774              	XMC_VADC_GLOBAL_BackgroundInit:
 3775              	.LFB198:
1245:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1246:../Libraries/XMCLib/src/xmc_vadc.c **** 
1247:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1248:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1249:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3776              	 .loc 2 1249 0
 3777              	 .cfi_startproc
 3778 0000 80B5     	 push {r7,lr}
 3779              	.LCFI157:
 3780              	 .cfi_def_cfa_offset 8
 3781              	 .cfi_offset 7,-8
 3782              	 .cfi_offset 14,-4
 3783 0002 86B0     	 sub sp,sp,#24
 3784              	.LCFI158:
 3785              	 .cfi_def_cfa_offset 32
 3786 0004 00AF     	 add r7,sp,#0
 3787              	.LCFI159:
 3788              	 .cfi_def_cfa_register 7
 3789 0006 7860     	 str r0,[r7,#4]
 3790 0008 3960     	 str r1,[r7]
1250:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1251:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1254:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1255:../Libraries/XMCLib/src/xmc_vadc.c **** 
1256:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1257:../Libraries/XMCLib/src/xmc_vadc.c **** 
1258:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1259:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3791              	 .loc 2 1259 0
 3792 000a 1723     	 mov r3,#23
 3793 000c FB18     	 add r3,r7,r3
 3794 000e 0022     	 mov r2,#0
 3795 0010 1A70     	 strb r2,[r3]
 3796 0012 0FE0     	 b .L159
 3797              	.L160:
1260:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1261:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3798              	 .loc 2 1261 0 discriminator 3
 3799 0014 1723     	 mov r3,#23
 3800 0016 FB18     	 add r3,r7,r3
 3801 0018 1A78     	 ldrb r2,[r3]
 3802 001a 4A4B     	 ldr r3,.L167
 3803 001c 9200     	 lsl r2,r2,#2
 3804 001e D358     	 ldr r3,[r2,r3]
 3805 0020 181C     	 mov r0,r3
 3806 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1259:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3807              	 .loc 2 1259 0 discriminator 3
 3808 0026 1723     	 mov r3,#23
 3809 0028 FB18     	 add r3,r7,r3
 3810 002a 1A78     	 ldrb r2,[r3]
 3811 002c 1723     	 mov r3,#23
 3812 002e FB18     	 add r3,r7,r3
 3813 0030 0132     	 add r2,r2,#1
 3814 0032 1A70     	 strb r2,[r3]
 3815              	.L159:
1259:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3816              	 .loc 2 1259 0 is_stmt 0 discriminator 1
 3817 0034 1723     	 mov r3,#23
 3818 0036 FB18     	 add r3,r7,r3
 3819 0038 1B78     	 ldrb r3,[r3]
 3820 003a 012B     	 cmp r3,#1
 3821 003c EAD9     	 bls .L160
1262:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1263:../Libraries/XMCLib/src/xmc_vadc.c **** 
1264:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 3822              	 .loc 2 1264 0 is_stmt 1
 3823 003e 0023     	 mov r3,#0
 3824 0040 3B61     	 str r3,[r7,#16]
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3825              	 .loc 2 1265 0
 3826 0042 3B68     	 ldr r3,[r7]
 3827 0044 1B78     	 ldrb r3,[r3]
 3828 0046 0322     	 mov r2,#3
 3829 0048 1340     	 and r3,r2
 3830 004a DBB2     	 uxtb r3,r3
 3831 004c 002B     	 cmp r3,#0
 3832 004e 02D0     	 beq .L161
1266:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1267:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 3833              	 .loc 2 1267 0
 3834 0050 8023     	 mov r3,#128
 3835 0052 1B01     	 lsl r3,r3,#4
 3836 0054 3B61     	 str r3,[r7,#16]
 3837              	.L161:
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1269:../Libraries/XMCLib/src/xmc_vadc.c **** 
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3838              	 .loc 2 1270 0
 3839 0056 1723     	 mov r3,#23
 3840 0058 FB18     	 add r3,r7,r3
 3841 005a 0022     	 mov r2,#0
 3842 005c 1A70     	 strb r2,[r3]
 3843 005e 29E0     	 b .L162
 3844              	.L163:
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1272:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 3845              	 .loc 2 1272 0 discriminator 3
 3846 0060 1723     	 mov r3,#23
 3847 0062 FB18     	 add r3,r7,r3
 3848 0064 1A78     	 ldrb r2,[r3]
 3849 0066 374B     	 ldr r3,.L167
 3850 0068 9200     	 lsl r2,r2,#2
 3851 006a D358     	 ldr r3,[r2,r3]
 3852 006c 8422     	 mov r2,#132
 3853 006e 9B58     	 ldr r3,[r3,r2]
 3854 0070 FB60     	 str r3,[r7,#12]
1273:../Libraries/XMCLib/src/xmc_vadc.c **** 
1274:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 3855              	 .loc 2 1274 0 discriminator 3
 3856 0072 FB68     	 ldr r3,[r7,#12]
 3857 0074 344A     	 ldr r2,.L167+4
 3858 0076 1340     	 and r3,r2
 3859 0078 FB60     	 str r3,[r7,#12]
1275:../Libraries/XMCLib/src/xmc_vadc.c **** 
1276:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1277:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 3860              	 .loc 2 1277 0 discriminator 3
 3861 007a 3B68     	 ldr r3,[r7]
 3862 007c 1B78     	 ldrb r3,[r3]
 3863 007e 1B07     	 lsl r3,r3,#28
 3864 0080 9B0F     	 lsr r3,r3,#30
 3865 0082 DBB2     	 uxtb r3,r3
 3866 0084 1B02     	 lsl r3,r3,#8
 3867 0086 FA68     	 ldr r2,[r7,#12]
 3868 0088 1343     	 orr r3,r2
 3869 008a FB60     	 str r3,[r7,#12]
1278:../Libraries/XMCLib/src/xmc_vadc.c **** 
1279:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1280:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 3870              	 .loc 2 1280 0 discriminator 3
 3871 008c FA68     	 ldr r2,[r7,#12]
 3872 008e 3B69     	 ldr r3,[r7,#16]
 3873 0090 1343     	 orr r3,r2
 3874 0092 FB60     	 str r3,[r7,#12]
1281:../Libraries/XMCLib/src/xmc_vadc.c **** 
1282:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 3875              	 .loc 2 1282 0 discriminator 3
 3876 0094 1723     	 mov r3,#23
 3877 0096 FB18     	 add r3,r7,r3
 3878 0098 1A78     	 ldrb r2,[r3]
 3879 009a 2A4B     	 ldr r3,.L167
 3880 009c 9200     	 lsl r2,r2,#2
 3881 009e D358     	 ldr r3,[r2,r3]
 3882 00a0 8421     	 mov r1,#132
 3883 00a2 FA68     	 ldr r2,[r7,#12]
 3884 00a4 5A50     	 str r2,[r3,r1]
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3885              	 .loc 2 1270 0 discriminator 3
 3886 00a6 1723     	 mov r3,#23
 3887 00a8 FB18     	 add r3,r7,r3
 3888 00aa 1A78     	 ldrb r2,[r3]
 3889 00ac 1723     	 mov r3,#23
 3890 00ae FB18     	 add r3,r7,r3
 3891 00b0 0132     	 add r2,r2,#1
 3892 00b2 1A70     	 strb r2,[r3]
 3893              	.L162:
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3894              	 .loc 2 1270 0 is_stmt 0 discriminator 1
 3895 00b4 1723     	 mov r3,#23
 3896 00b6 FB18     	 add r3,r7,r3
 3897 00b8 1B78     	 ldrb r3,[r3]
 3898 00ba 012B     	 cmp r3,#1
 3899 00bc D0D9     	 bls .L163
1283:../Libraries/XMCLib/src/xmc_vadc.c **** 
1284:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1285:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1286:../Libraries/XMCLib/src/xmc_vadc.c **** 
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 3900              	 .loc 2 1288 0 is_stmt 1
 3901 00be 3B68     	 ldr r3,[r7]
 3902 00c0 5B68     	 ldr r3,[r3,#4]
 3903 00c2 224A     	 ldr r2,.L167+8
 3904 00c4 1A43     	 orr r2,r3
 3905 00c6 111C     	 mov r1,r2
 3906 00c8 7A68     	 ldr r2,[r7,#4]
 3907 00ca 8023     	 mov r3,#128
 3908 00cc 9B00     	 lsl r3,r3,#2
 3909 00ce D150     	 str r1,[r2,r3]
1289:../Libraries/XMCLib/src/xmc_vadc.c **** 
1290:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1291:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << 
 3910              	 .loc 2 1291 0
 3911 00d0 3B68     	 ldr r3,[r7]
 3912 00d2 9B68     	 ldr r3,[r3,#8]
 3913 00d4 0122     	 mov r2,#1
 3914 00d6 1A43     	 orr r2,r3
 3915 00d8 111C     	 mov r1,r2
 3916 00da 7A68     	 ldr r2,[r7,#4]
 3917 00dc 8123     	 mov r3,#129
 3918 00de 9B00     	 lsl r3,r3,#2
 3919 00e0 D150     	 str r1,[r2,r3]
1292:../Libraries/XMCLib/src/xmc_vadc.c **** 
1293:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1294:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3920              	 .loc 2 1294 0
 3921 00e2 3B68     	 ldr r3,[r7]
 3922 00e4 1B78     	 ldrb r3,[r3]
 3923 00e6 0322     	 mov r2,#3
 3924 00e8 1340     	 and r3,r2
 3925 00ea DBB2     	 uxtb r3,r3
 3926 00ec 022B     	 cmp r3,#2
 3927 00ee 0BD1     	 bne .L164
1295:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1296:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 3928              	 .loc 2 1296 0
 3929 00f0 7A68     	 ldr r2,[r7,#4]
 3930 00f2 8123     	 mov r3,#129
 3931 00f4 9B00     	 lsl r3,r3,#2
 3932 00f6 D358     	 ldr r3,[r2,r3]
 3933 00f8 8022     	 mov r2,#128
 3934 00fa 5202     	 lsl r2,r2,#9
 3935 00fc 1A43     	 orr r2,r3
 3936 00fe 111C     	 mov r1,r2
 3937 0100 7A68     	 ldr r2,[r7,#4]
 3938 0102 8123     	 mov r3,#129
 3939 0104 9B00     	 lsl r3,r3,#2
 3940 0106 D150     	 str r1,[r2,r3]
 3941              	.L164:
1297:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1298:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1299:../Libraries/XMCLib/src/xmc_vadc.c **** 
1300:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1301:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3942              	 .loc 2 1301 0
 3943 0108 1723     	 mov r3,#23
 3944 010a FB18     	 add r3,r7,r3
 3945 010c 0022     	 mov r2,#0
 3946 010e 1A70     	 strb r2,[r3]
 3947 0110 0FE0     	 b .L165
 3948              	.L166:
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1303:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3949              	 .loc 2 1303 0 discriminator 3
 3950 0112 1723     	 mov r3,#23
 3951 0114 FB18     	 add r3,r7,r3
 3952 0116 1A78     	 ldrb r2,[r3]
 3953 0118 0A4B     	 ldr r3,.L167
 3954 011a 9200     	 lsl r2,r2,#2
 3955 011c D358     	 ldr r3,[r2,r3]
 3956 011e 181C     	 mov r0,r3
 3957 0120 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1301:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3958              	 .loc 2 1301 0 discriminator 3
 3959 0124 1723     	 mov r3,#23
 3960 0126 FB18     	 add r3,r7,r3
 3961 0128 1A78     	 ldrb r2,[r3]
 3962 012a 1723     	 mov r3,#23
 3963 012c FB18     	 add r3,r7,r3
 3964 012e 0132     	 add r2,r2,#1
 3965 0130 1A70     	 strb r2,[r3]
 3966              	.L165:
1301:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3967              	 .loc 2 1301 0 is_stmt 0 discriminator 1
 3968 0132 1723     	 mov r3,#23
 3969 0134 FB18     	 add r3,r7,r3
 3970 0136 1B78     	 ldrb r3,[r3]
 3971 0138 012B     	 cmp r3,#1
 3972 013a EAD9     	 bls .L166
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1305:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1306:../Libraries/XMCLib/src/xmc_vadc.c **** 
1307:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3973              	 .loc 2 1307 0 is_stmt 1
 3974 013c BD46     	 mov sp,r7
 3975 013e 06B0     	 add sp,sp,#24
 3976              	 
 3977 0140 80BD     	 pop {r7,pc}
 3978              	.L168:
 3979 0142 C046     	 .align 2
 3980              	.L167:
 3981 0144 00000000 	 .word g_xmc_vadc_group_array
 3982 0148 FFFCFFFF 	 .word -769
 3983 014c 00808000 	 .word 8421376
 3984              	 .cfi_endproc
 3985              	.LFE198:
 3987              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 3988              	 .align 2
 3989              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 3990              	 .code 16
 3991              	 .thumb_func
 3993              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 3994              	.LFB199:
1308:../Libraries/XMCLib/src/xmc_vadc.c **** 
1309:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1310:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1311:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3995              	 .loc 2 1311 0
 3996              	 .cfi_startproc
 3997 0000 80B5     	 push {r7,lr}
 3998              	.LCFI160:
 3999              	 .cfi_def_cfa_offset 8
 4000              	 .cfi_offset 7,-8
 4001              	 .cfi_offset 14,-4
 4002 0002 84B0     	 sub sp,sp,#16
 4003              	.LCFI161:
 4004              	 .cfi_def_cfa_offset 24
 4005 0004 00AF     	 add r7,sp,#0
 4006              	.LCFI162:
 4007              	 .cfi_def_cfa_register 7
 4008 0006 7860     	 str r0,[r7,#4]
 4009 0008 3960     	 str r1,[r7]
1312:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1313:../Libraries/XMCLib/src/xmc_vadc.c **** 
1314:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1315:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num) < XMC_VADC_
1316:../Libraries/XMCLib/src/xmc_vadc.c **** 
1317:../Libraries/XMCLib/src/xmc_vadc.c **** 
1318:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 4010              	 .loc 2 1318 0
 4011 000a 7A68     	 ldr r2,[r7,#4]
 4012 000c 8023     	 mov r3,#128
 4013 000e 9B00     	 lsl r3,r3,#2
 4014 0010 D358     	 ldr r3,[r2,r3]
 4015 0012 FB60     	 str r3,[r7,#12]
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 4016              	 .loc 2 1319 0
 4017 0014 FB68     	 ldr r3,[r7,#12]
 4018 0016 8022     	 mov r2,#128
 4019 0018 1202     	 lsl r2,r2,#8
 4020 001a 1343     	 orr r3,r2
 4021 001c FB60     	 str r3,[r7,#12]
1320:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 4022              	 .loc 2 1320 0
 4023 001e FB68     	 ldr r3,[r7,#12]
 4024 0020 074A     	 ldr r2,.L170
 4025 0022 1340     	 and r3,r2
 4026 0024 FB60     	 str r3,[r7,#12]
1321:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 4027              	 .loc 2 1321 0
 4028 0026 3B68     	 ldr r3,[r7]
 4029 0028 1B02     	 lsl r3,r3,#8
 4030 002a FA68     	 ldr r2,[r7,#12]
 4031 002c 1343     	 orr r3,r2
 4032 002e FB60     	 str r3,[r7,#12]
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4033              	 .loc 2 1322 0
 4034 0030 7A68     	 ldr r2,[r7,#4]
 4035 0032 8023     	 mov r3,#128
 4036 0034 9B00     	 lsl r3,r3,#2
 4037 0036 F968     	 ldr r1,[r7,#12]
 4038 0038 D150     	 str r1,[r2,r3]
1323:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4039              	 .loc 2 1323 0
 4040 003a BD46     	 mov sp,r7
 4041 003c 04B0     	 add sp,sp,#16
 4042              	 
 4043 003e 80BD     	 pop {r7,pc}
 4044              	.L171:
 4045              	 .align 2
 4046              	.L170:
 4047 0040 FFF0FFFF 	 .word -3841
 4048              	 .cfi_endproc
 4049              	.LFE199:
 4051              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 4052              	 .align 2
 4053              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 4054              	 .code 16
 4055              	 .thumb_func
 4057              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 4058              	.LFB200:
1324:../Libraries/XMCLib/src/xmc_vadc.c **** 
1325:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1326:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1327:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1328:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4059              	 .loc 2 1328 0
 4060              	 .cfi_startproc
 4061 0000 80B5     	 push {r7,lr}
 4062              	.LCFI163:
 4063              	 .cfi_def_cfa_offset 8
 4064              	 .cfi_offset 7,-8
 4065              	 .cfi_offset 14,-4
 4066 0002 84B0     	 sub sp,sp,#16
 4067              	.LCFI164:
 4068              	 .cfi_def_cfa_offset 24
 4069 0004 00AF     	 add r7,sp,#0
 4070              	.LCFI165:
 4071              	 .cfi_def_cfa_register 7
 4072 0006 7860     	 str r0,[r7,#4]
 4073 0008 0A1C     	 mov r2,r1
 4074 000a FB1C     	 add r3,r7,#3
 4075 000c 1A70     	 strb r2,[r3]
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1330:../Libraries/XMCLib/src/xmc_vadc.c **** 
1331:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1333:../Libraries/XMCLib/src/xmc_vadc.c ****              ((trigger_edge) <= XMC_VADC_TRIGGER_EDGE_ANY))
1334:../Libraries/XMCLib/src/xmc_vadc.c **** 
1335:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 4076              	 .loc 2 1335 0
 4077 000e 7A68     	 ldr r2,[r7,#4]
 4078 0010 8023     	 mov r3,#128
 4079 0012 9B00     	 lsl r3,r3,#2
 4080 0014 D358     	 ldr r3,[r2,r3]
 4081 0016 FB60     	 str r3,[r7,#12]
1336:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 4082              	 .loc 2 1336 0
 4083 0018 FB68     	 ldr r3,[r7,#12]
 4084 001a 8022     	 mov r2,#128
 4085 001c 1202     	 lsl r2,r2,#8
 4086 001e 1343     	 orr r3,r2
 4087 0020 FB60     	 str r3,[r7,#12]
1337:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 4088              	 .loc 2 1337 0
 4089 0022 FB68     	 ldr r3,[r7,#12]
 4090 0024 084A     	 ldr r2,.L173
 4091 0026 1340     	 and r3,r2
 4092 0028 FB60     	 str r3,[r7,#12]
1338:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 4093              	 .loc 2 1338 0
 4094 002a FB1C     	 add r3,r7,#3
 4095 002c 1B78     	 ldrb r3,[r3]
 4096 002e 5B03     	 lsl r3,r3,#13
 4097 0030 FA68     	 ldr r2,[r7,#12]
 4098 0032 1343     	 orr r3,r2
 4099 0034 FB60     	 str r3,[r7,#12]
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4100              	 .loc 2 1339 0
 4101 0036 7A68     	 ldr r2,[r7,#4]
 4102 0038 8023     	 mov r3,#128
 4103 003a 9B00     	 lsl r3,r3,#2
 4104 003c F968     	 ldr r1,[r7,#12]
 4105 003e D150     	 str r1,[r2,r3]
1340:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4106              	 .loc 2 1340 0
 4107 0040 BD46     	 mov sp,r7
 4108 0042 04B0     	 add sp,sp,#16
 4109              	 
 4110 0044 80BD     	 pop {r7,pc}
 4111              	.L174:
 4112 0046 C046     	 .align 2
 4113              	.L173:
 4114 0048 FF9FFFFF 	 .word -24577
 4115              	 .cfi_endproc
 4116              	.LFE200:
 4118              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 4119              	 .align 2
 4120              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 4121              	 .code 16
 4122              	 .thumb_func
 4124              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 4125              	.LFB201:
1341:../Libraries/XMCLib/src/xmc_vadc.c **** 
1342:../Libraries/XMCLib/src/xmc_vadc.c **** 
1343:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1344:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1345:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4126              	 .loc 2 1345 0
 4127              	 .cfi_startproc
 4128 0000 80B5     	 push {r7,lr}
 4129              	.LCFI166:
 4130              	 .cfi_def_cfa_offset 8
 4131              	 .cfi_offset 7,-8
 4132              	 .cfi_offset 14,-4
 4133 0002 84B0     	 sub sp,sp,#16
 4134              	.LCFI167:
 4135              	 .cfi_def_cfa_offset 24
 4136 0004 00AF     	 add r7,sp,#0
 4137              	.LCFI168:
 4138              	 .cfi_def_cfa_register 7
 4139 0006 7860     	 str r0,[r7,#4]
 4140 0008 3960     	 str r1,[r7]
1346:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1347:../Libraries/XMCLib/src/xmc_vadc.c **** 
1348:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1349:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num) < XMC_VADC_NU
1350:../Libraries/XMCLib/src/xmc_vadc.c **** 
1351:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 4141              	 .loc 2 1351 0
 4142 000a 7A68     	 ldr r2,[r7,#4]
 4143 000c 8023     	 mov r3,#128
 4144 000e 9B00     	 lsl r3,r3,#2
 4145 0010 D358     	 ldr r3,[r2,r3]
 4146 0012 FB60     	 str r3,[r7,#12]
1352:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 4147              	 .loc 2 1352 0
 4148 0014 FB68     	 ldr r3,[r7,#12]
 4149 0016 8022     	 mov r2,#128
 4150 0018 1204     	 lsl r2,r2,#16
 4151 001a 1343     	 orr r3,r2
 4152 001c FB60     	 str r3,[r7,#12]
1353:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 4153              	 .loc 2 1353 0
 4154 001e FB68     	 ldr r3,[r7,#12]
 4155 0020 074A     	 ldr r2,.L176
 4156 0022 1340     	 and r3,r2
 4157 0024 FB60     	 str r3,[r7,#12]
1354:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 4158              	 .loc 2 1354 0
 4159 0026 3B68     	 ldr r3,[r7]
 4160 0028 1B04     	 lsl r3,r3,#16
 4161 002a FA68     	 ldr r2,[r7,#12]
 4162 002c 1343     	 orr r3,r2
 4163 002e FB60     	 str r3,[r7,#12]
1355:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4164              	 .loc 2 1355 0
 4165 0030 7A68     	 ldr r2,[r7,#4]
 4166 0032 8023     	 mov r3,#128
 4167 0034 9B00     	 lsl r3,r3,#2
 4168 0036 F968     	 ldr r1,[r7,#12]
 4169 0038 D150     	 str r1,[r2,r3]
1356:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4170              	 .loc 2 1356 0
 4171 003a BD46     	 mov sp,r7
 4172 003c 04B0     	 add sp,sp,#16
 4173              	 
 4174 003e 80BD     	 pop {r7,pc}
 4175              	.L177:
 4176              	 .align 2
 4177              	.L176:
 4178 0040 FFFFF0FF 	 .word -983041
 4179              	 .cfi_endproc
 4180              	.LFE201:
 4182              	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 4183              	 .align 2
 4184              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 4185              	 .code 16
 4186              	 .thumb_func
 4188              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 4189              	.LFB202:
1357:../Libraries/XMCLib/src/xmc_vadc.c **** 
1358:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1359:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1360:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4190              	 .loc 2 1360 0
 4191              	 .cfi_startproc
 4192 0000 80B5     	 push {r7,lr}
 4193              	.LCFI169:
 4194              	 .cfi_def_cfa_offset 8
 4195              	 .cfi_offset 7,-8
 4196              	 .cfi_offset 14,-4
 4197 0002 86B0     	 sub sp,sp,#24
 4198              	.LCFI170:
 4199              	 .cfi_def_cfa_offset 32
 4200 0004 00AF     	 add r7,sp,#0
 4201              	.LCFI171:
 4202              	 .cfi_def_cfa_register 7
 4203 0006 7860     	 str r0,[r7,#4]
1361:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1362:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1363:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1364:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1365:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1366:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1367:../Libraries/XMCLib/src/xmc_vadc.c **** 
1368:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1369:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 4204              	 .loc 2 1369 0
 4205 0008 7A68     	 ldr r2,[r7,#4]
 4206 000a 8023     	 mov r3,#128
 4207 000c 9B00     	 lsl r3,r3,#2
 4208 000e D358     	 ldr r3,[r2,r3]
 4209 0010 3B61     	 str r3,[r7,#16]
1370:../Libraries/XMCLib/src/xmc_vadc.c **** 
1371:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 4210              	 .loc 2 1371 0
 4211 0012 7A68     	 ldr r2,[r7,#4]
 4212 0014 8023     	 mov r3,#128
 4213 0016 9B00     	 lsl r3,r3,#2
 4214 0018 2649     	 ldr r1,.L184
 4215 001a D150     	 str r1,[r2,r3]
1372:../Libraries/XMCLib/src/xmc_vadc.c **** 
1373:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1374:../Libraries/XMCLib/src/xmc_vadc.c **** 
1375:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1376:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4216              	 .loc 2 1376 0
 4217 001c 0023     	 mov r3,#0
 4218 001e 7B61     	 str r3,[r7,#20]
 4219 0020 17E0     	 b .L179
 4220              	.L180:
1377:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1378:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 4221              	 .loc 2 1378 0 discriminator 3
 4222 0022 254B     	 ldr r3,.L184+4
 4223 0024 7A69     	 ldr r2,[r7,#20]
 4224 0026 9200     	 lsl r2,r2,#2
 4225 0028 D358     	 ldr r3,[r2,r3]
 4226 002a 8422     	 mov r2,#132
 4227 002c 9B58     	 ldr r3,[r3,r2]
 4228 002e 9B0E     	 lsr r3,r3,#26
 4229 0030 D9B2     	 uxtb r1,r3
 4230 0032 0C23     	 mov r3,#12
 4231 0034 FA18     	 add r2,r7,r3
 4232 0036 7B69     	 ldr r3,[r7,#20]
 4233 0038 D318     	 add r3,r2,r3
 4234 003a 0A1C     	 add r2,r1,#0
 4235 003c 1A70     	 strb r2,[r3]
1379:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 4236              	 .loc 2 1379 0 discriminator 3
 4237 003e 1E4B     	 ldr r3,.L184+4
 4238 0040 7A69     	 ldr r2,[r7,#20]
 4239 0042 9200     	 lsl r2,r2,#2
 4240 0044 D358     	 ldr r3,[r2,r3]
 4241 0046 181C     	 mov r0,r3
 4242 0048 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1376:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4243              	 .loc 2 1376 0 discriminator 3
 4244 004c 7B69     	 ldr r3,[r7,#20]
 4245 004e 0133     	 add r3,r3,#1
 4246 0050 7B61     	 str r3,[r7,#20]
 4247              	.L179:
1376:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4248              	 .loc 2 1376 0 is_stmt 0 discriminator 1
 4249 0052 7B69     	 ldr r3,[r7,#20]
 4250 0054 012B     	 cmp r3,#1
 4251 0056 E4D9     	 bls .L180
1380:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1381:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1382:../Libraries/XMCLib/src/xmc_vadc.c **** 
1383:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1384:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 4252              	 .loc 2 1384 0 is_stmt 1
 4253 0058 7A68     	 ldr r2,[r7,#4]
 4254 005a 8123     	 mov r3,#129
 4255 005c 9B00     	 lsl r3,r3,#2
 4256 005e D358     	 ldr r3,[r2,r3]
 4257 0060 8022     	 mov r2,#128
 4258 0062 5200     	 lsl r2,r2,#1
 4259 0064 1A43     	 orr r2,r3
 4260 0066 111C     	 mov r1,r2
 4261 0068 7A68     	 ldr r2,[r7,#4]
 4262 006a 8123     	 mov r3,#129
 4263 006c 9B00     	 lsl r3,r3,#2
 4264 006e D150     	 str r1,[r2,r3]
1385:../Libraries/XMCLib/src/xmc_vadc.c **** 
1386:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1387:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1388:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4265              	 .loc 2 1388 0
 4266 0070 0023     	 mov r3,#0
 4267 0072 7B61     	 str r3,[r7,#20]
 4268 0074 10E0     	 b .L181
 4269              	.L183:
1389:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1390:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 4270              	 .loc 2 1390 0
 4271 0076 0C23     	 mov r3,#12
 4272 0078 FA18     	 add r2,r7,r3
 4273 007a 7B69     	 ldr r3,[r7,#20]
 4274 007c D318     	 add r3,r2,r3
 4275 007e 1B78     	 ldrb r3,[r3]
 4276 0080 012B     	 cmp r3,#1
 4277 0082 06D1     	 bne .L182
1391:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1392:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i])
 4278              	 .loc 2 1392 0
 4279 0084 0C4B     	 ldr r3,.L184+4
 4280 0086 7A69     	 ldr r2,[r7,#20]
 4281 0088 9200     	 lsl r2,r2,#2
 4282 008a D358     	 ldr r3,[r2,r3]
 4283 008c 181C     	 mov r0,r3
 4284 008e FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 4285              	.L182:
1388:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4286              	 .loc 2 1388 0 discriminator 2
 4287 0092 7B69     	 ldr r3,[r7,#20]
 4288 0094 0133     	 add r3,r3,#1
 4289 0096 7B61     	 str r3,[r7,#20]
 4290              	.L181:
1388:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4291              	 .loc 2 1388 0 is_stmt 0 discriminator 1
 4292 0098 7B69     	 ldr r3,[r7,#20]
 4293 009a 012B     	 cmp r3,#1
 4294 009c EBD9     	 bls .L183
1393:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1394:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1395:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1396:../Libraries/XMCLib/src/xmc_vadc.c **** 
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1398:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Ms
 4295              	 .loc 2 1398 0 is_stmt 1
 4296 009e 3B69     	 ldr r3,[r7,#16]
 4297 00a0 044A     	 ldr r2,.L184
 4298 00a2 1A43     	 orr r2,r3
 4299 00a4 111C     	 mov r1,r2
 4300 00a6 7A68     	 ldr r2,[r7,#4]
 4301 00a8 8023     	 mov r3,#128
 4302 00aa 9B00     	 lsl r3,r3,#2
 4303 00ac D150     	 str r1,[r2,r3]
1399:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4304              	 .loc 2 1399 0
 4305 00ae BD46     	 mov sp,r7
 4306 00b0 06B0     	 add sp,sp,#24
 4307              	 
 4308 00b2 80BD     	 pop {r7,pc}
 4309              	.L185:
 4310              	 .align 2
 4311              	.L184:
 4312 00b4 00808000 	 .word 8421376
 4313 00b8 00000000 	 .word g_xmc_vadc_group_array
 4314              	 .cfi_endproc
 4315              	.LFE202:
 4317              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 4318              	 .align 2
 4319              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 4320              	 .code 16
 4321              	 .thumb_func
 4323              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 4324              	.LFB203:
1400:../Libraries/XMCLib/src/xmc_vadc.c **** 
1401:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1402:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1403:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4325              	 .loc 2 1403 0
 4326              	 .cfi_startproc
 4327 0000 80B5     	 push {r7,lr}
 4328              	.LCFI172:
 4329              	 .cfi_def_cfa_offset 8
 4330              	 .cfi_offset 7,-8
 4331              	 .cfi_offset 14,-4
 4332 0002 86B0     	 sub sp,sp,#24
 4333              	.LCFI173:
 4334              	 .cfi_def_cfa_offset 32
 4335 0004 00AF     	 add r7,sp,#0
 4336              	.LCFI174:
 4337              	 .cfi_def_cfa_register 7
 4338 0006 7860     	 str r0,[r7,#4]
1404:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1406:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1407:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1408:../Libraries/XMCLib/src/xmc_vadc.c **** 
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1410:../Libraries/XMCLib/src/xmc_vadc.c **** 
1411:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 4339              	 .loc 2 1411 0
 4340 0008 0023     	 mov r3,#0
 4341 000a BB60     	 str r3,[r7,#8]
1412:../Libraries/XMCLib/src/xmc_vadc.c **** 
1413:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4342              	 .loc 2 1414 0
 4343 000c 0023     	 mov r3,#0
 4344 000e 3B61     	 str r3,[r7,#16]
 4345 0010 22E0     	 b .L187
 4346              	.L192:
1415:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1416:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 4347              	 .loc 2 1416 0
 4348 0012 7B68     	 ldr r3,[r7,#4]
 4349 0014 3A69     	 ldr r2,[r7,#16]
 4350 0016 6032     	 add r2,r2,#96
 4351 0018 9200     	 lsl r2,r2,#2
 4352 001a D358     	 ldr r3,[r2,r3]
 4353 001c 002B     	 cmp r3,#0
 4354 001e 18D0     	 beq .L188
1417:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1418:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 4355              	 .loc 2 1418 0
 4356 0020 7B68     	 ldr r3,[r7,#4]
 4357 0022 3A69     	 ldr r2,[r7,#16]
 4358 0024 7032     	 add r2,r2,#112
 4359 0026 9200     	 lsl r2,r2,#2
 4360 0028 D358     	 ldr r3,[r2,r3]
 4361 002a 7B61     	 str r3,[r7,#20]
1419:../Libraries/XMCLib/src/xmc_vadc.c **** 
1420:../Libraries/XMCLib/src/xmc_vadc.c ****       for (j = 0U; j < XMC_VADC_NUM_CHANNELS_PER_GROUP; j++)
 4362              	 .loc 2 1420 0
 4363 002c 0023     	 mov r3,#0
 4364 002e FB60     	 str r3,[r7,#12]
 4365 0030 0CE0     	 b .L189
 4366              	.L191:
1421:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1422:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 4367              	 .loc 2 1422 0
 4368 0032 7B69     	 ldr r3,[r7,#20]
 4369 0034 0122     	 mov r2,#1
 4370 0036 1340     	 and r3,r2
 4371 0038 02D0     	 beq .L190
1423:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1424:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 4372              	 .loc 2 1424 0
 4373 003a BB68     	 ldr r3,[r7,#8]
 4374 003c 0133     	 add r3,r3,#1
 4375 003e BB60     	 str r3,[r7,#8]
 4376              	.L190:
1425:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1426:../Libraries/XMCLib/src/xmc_vadc.c **** 
1427:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 4377              	 .loc 2 1427 0 discriminator 2
 4378 0040 7B69     	 ldr r3,[r7,#20]
 4379 0042 5B08     	 lsr r3,r3,#1
 4380 0044 7B61     	 str r3,[r7,#20]
1420:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4381              	 .loc 2 1420 0 discriminator 2
 4382 0046 FB68     	 ldr r3,[r7,#12]
 4383 0048 0133     	 add r3,r3,#1
 4384 004a FB60     	 str r3,[r7,#12]
 4385              	.L189:
1420:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4386              	 .loc 2 1420 0 is_stmt 0 discriminator 1
 4387 004c FB68     	 ldr r3,[r7,#12]
 4388 004e 072B     	 cmp r3,#7
 4389 0050 EFD9     	 bls .L191
 4390              	.L188:
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4391              	 .loc 2 1414 0 is_stmt 1 discriminator 2
 4392 0052 3B69     	 ldr r3,[r7,#16]
 4393 0054 0133     	 add r3,r3,#1
 4394 0056 3B61     	 str r3,[r7,#16]
 4395              	.L187:
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4396              	 .loc 2 1414 0 is_stmt 0 discriminator 1
 4397 0058 3B69     	 ldr r3,[r7,#16]
 4398 005a 012B     	 cmp r3,#1
 4399 005c D9D9     	 bls .L192
1428:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1429:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1430:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1431:../Libraries/XMCLib/src/xmc_vadc.c **** 
1432:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 4400              	 .loc 2 1432 0 is_stmt 1
 4401 005e BB68     	 ldr r3,[r7,#8]
1433:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4402              	 .loc 2 1433 0
 4403 0060 181C     	 mov r0,r3
 4404 0062 BD46     	 mov sp,r7
 4405 0064 06B0     	 add sp,sp,#24
 4406              	 
 4407 0066 80BD     	 pop {r7,pc}
 4408              	 .cfi_endproc
 4409              	.LFE203:
 4411              	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 4412              	 .align 2
 4413              	 .global XMC_VADC_GROUP_QueueInit
 4414              	 .code 16
 4415              	 .thumb_func
 4417              	XMC_VADC_GROUP_QueueInit:
 4418              	.LFB204:
1434:../Libraries/XMCLib/src/xmc_vadc.c **** 
1435:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
1436:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1437:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1438:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4419              	 .loc 2 1438 0
 4420              	 .cfi_startproc
 4421 0000 80B5     	 push {r7,lr}
 4422              	.LCFI175:
 4423              	 .cfi_def_cfa_offset 8
 4424              	 .cfi_offset 7,-8
 4425              	 .cfi_offset 14,-4
 4426 0002 84B0     	 sub sp,sp,#16
 4427              	.LCFI176:
 4428              	 .cfi_def_cfa_offset 24
 4429 0004 00AF     	 add r7,sp,#0
 4430              	.LCFI177:
 4431              	 .cfi_def_cfa_register 7
 4432 0006 7860     	 str r0,[r7,#4]
 4433 0008 3960     	 str r1,[r7]
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1440:../Libraries/XMCLib/src/xmc_vadc.c **** 
1441:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1442:../Libraries/XMCLib/src/xmc_vadc.c **** 
1443:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1444:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4434              	 .loc 2 1444 0
 4435 000a 7B68     	 ldr r3,[r7,#4]
 4436 000c 181C     	 mov r0,r3
 4437 000e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1445:../Libraries/XMCLib/src/xmc_vadc.c **** 
1446:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 4438              	 .loc 2 1446 0
 4439 0012 7B68     	 ldr r3,[r7,#4]
 4440 0014 8422     	 mov r2,#132
 4441 0016 9B58     	 ldr r3,[r3,r2]
 4442 0018 FB60     	 str r3,[r7,#12]
1447:../Libraries/XMCLib/src/xmc_vadc.c **** 
1448:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1449:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 4443              	 .loc 2 1449 0
 4444 001a FB68     	 ldr r3,[r7,#12]
 4445 001c 0322     	 mov r2,#3
 4446 001e 9343     	 bic r3,r2
 4447 0020 FB60     	 str r3,[r7,#12]
1450:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 4448              	 .loc 2 1450 0
 4449 0022 3B68     	 ldr r3,[r7]
 4450 0024 1B78     	 ldrb r3,[r3]
 4451 0026 1B07     	 lsl r3,r3,#28
 4452 0028 9B0F     	 lsr r3,r3,#30
 4453 002a DBB2     	 uxtb r3,r3
 4454 002c 1A1C     	 mov r2,r3
 4455 002e FB68     	 ldr r3,[r7,#12]
 4456 0030 1343     	 orr r3,r2
 4457 0032 FB60     	 str r3,[r7,#12]
1451:../Libraries/XMCLib/src/xmc_vadc.c **** 
1452:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1453:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 4458              	 .loc 2 1453 0
 4459 0034 3B68     	 ldr r3,[r7]
 4460 0036 1B78     	 ldrb r3,[r3]
 4461 0038 0322     	 mov r2,#3
 4462 003a 1340     	 and r3,r2
 4463 003c DBB2     	 uxtb r3,r3
 4464 003e 002B     	 cmp r3,#0
 4465 0040 03D0     	 beq .L195
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1455:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 4466              	 .loc 2 1455 0
 4467 0042 FB68     	 ldr r3,[r7,#12]
 4468 0044 0822     	 mov r2,#8
 4469 0046 1343     	 orr r3,r2
 4470 0048 FB60     	 str r3,[r7,#12]
 4471              	.L195:
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1457:../Libraries/XMCLib/src/xmc_vadc.c **** 
1458:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 4472              	 .loc 2 1458 0
 4473 004a 7B68     	 ldr r3,[r7,#4]
 4474 004c 8421     	 mov r1,#132
 4475 004e FA68     	 ldr r2,[r7,#12]
 4476 0050 5A50     	 str r2,[r3,r1]
1459:../Libraries/XMCLib/src/xmc_vadc.c **** 
1460:../Libraries/XMCLib/src/xmc_vadc.c **** 
1461:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0) | (uint32_t)(VADC_G_QCTRL0_XTWC_Msk) |
 4477              	 .loc 2 1461 0
 4478 0052 3B68     	 ldr r3,[r7]
 4479 0054 5B68     	 ldr r3,[r3,#4]
 4480 0056 154A     	 ldr r2,.L197
 4481 0058 1A43     	 orr r2,r3
 4482 005a 111C     	 mov r1,r2
 4483 005c 7A68     	 ldr r2,[r7,#4]
 4484 005e 8023     	 mov r3,#128
 4485 0060 5B00     	 lsl r3,r3,#1
 4486 0062 D150     	 str r1,[r2,r3]
1462:../Libraries/XMCLib/src/xmc_vadc.c ****                                  (uint32_t)(VADC_G_QCTRL0_TMWC_Msk) |
1463:../Libraries/XMCLib/src/xmc_vadc.c ****                                  (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1464:../Libraries/XMCLib/src/xmc_vadc.c **** 
1465:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1466:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 4487              	 .loc 2 1466 0
 4488 0064 3B68     	 ldr r3,[r7]
 4489 0066 9B68     	 ldr r3,[r3,#8]
 4490 0068 0122     	 mov r2,#1
 4491 006a 1A43     	 orr r2,r3
 4492 006c 111C     	 mov r1,r2
 4493 006e 7A68     	 ldr r2,[r7,#4]
 4494 0070 8223     	 mov r3,#130
 4495 0072 5B00     	 lsl r3,r3,#1
 4496 0074 D150     	 str r1,[r2,r3]
1467:../Libraries/XMCLib/src/xmc_vadc.c **** 
1468:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 4497              	 .loc 2 1468 0
 4498 0076 3B68     	 ldr r3,[r7]
 4499 0078 1B78     	 ldrb r3,[r3]
 4500 007a 0322     	 mov r2,#3
 4501 007c 1340     	 and r3,r2
 4502 007e DBB2     	 uxtb r3,r3
 4503 0080 022B     	 cmp r3,#2
 4504 0082 0BD1     	 bne .L196
1469:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1470:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 4505              	 .loc 2 1470 0
 4506 0084 7A68     	 ldr r2,[r7,#4]
 4507 0086 8223     	 mov r3,#130
 4508 0088 5B00     	 lsl r3,r3,#1
 4509 008a D358     	 ldr r3,[r2,r3]
 4510 008c 8022     	 mov r2,#128
 4511 008e 5202     	 lsl r2,r2,#9
 4512 0090 1A43     	 orr r2,r3
 4513 0092 111C     	 mov r1,r2
 4514 0094 7A68     	 ldr r2,[r7,#4]
 4515 0096 8223     	 mov r3,#130
 4516 0098 5B00     	 lsl r3,r3,#1
 4517 009a D150     	 str r1,[r2,r3]
 4518              	.L196:
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 4519              	 .loc 2 1473 0
 4520 009c 7B68     	 ldr r3,[r7,#4]
 4521 009e 181C     	 mov r0,r3
 4522 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1474:../Libraries/XMCLib/src/xmc_vadc.c **** 
1475:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4523              	 .loc 2 1475 0
 4524 00a4 BD46     	 mov sp,r7
 4525 00a6 04B0     	 add sp,sp,#16
 4526              	 
 4527 00a8 80BD     	 pop {r7,pc}
 4528              	.L198:
 4529 00aa C046     	 .align 2
 4530              	.L197:
 4531 00ac 00808080 	 .word -2139062272
 4532              	 .cfi_endproc
 4533              	.LFE204:
 4535              	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 4536              	 .align 2
 4537              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 4538              	 .code 16
 4539              	 .thumb_func
 4541              	XMC_VADC_GROUP_QueueSelectTrigger:
 4542              	.LFB205:
1476:../Libraries/XMCLib/src/xmc_vadc.c **** 
1477:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1478:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1479:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1480:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4543              	 .loc 2 1480 0
 4544              	 .cfi_startproc
 4545 0000 80B5     	 push {r7,lr}
 4546              	.LCFI178:
 4547              	 .cfi_def_cfa_offset 8
 4548              	 .cfi_offset 7,-8
 4549              	 .cfi_offset 14,-4
 4550 0002 84B0     	 sub sp,sp,#16
 4551              	.LCFI179:
 4552              	 .cfi_def_cfa_offset 24
 4553 0004 00AF     	 add r7,sp,#0
 4554              	.LCFI180:
 4555              	 .cfi_def_cfa_register 7
 4556 0006 7860     	 str r0,[r7,#4]
 4557 0008 0A1C     	 mov r2,r1
 4558 000a FB1C     	 add r3,r7,#3
 4559 000c 1A70     	 strb r2,[r3]
1481:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1482:../Libraries/XMCLib/src/xmc_vadc.c **** 
1483:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num) < XMC_VADC_NUM_PO
1485:../Libraries/XMCLib/src/xmc_vadc.c **** 
1486:../Libraries/XMCLib/src/xmc_vadc.c **** 
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1488:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4560              	 .loc 2 1488 0
 4561 000e 7A68     	 ldr r2,[r7,#4]
 4562 0010 8023     	 mov r3,#128
 4563 0012 5B00     	 lsl r3,r3,#1
 4564 0014 D358     	 ldr r3,[r2,r3]
 4565 0016 FB60     	 str r3,[r7,#12]
1489:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4566              	 .loc 2 1489 0
 4567 0018 FB68     	 ldr r3,[r7,#12]
 4568 001a 8022     	 mov r2,#128
 4569 001c 1202     	 lsl r2,r2,#8
 4570 001e 1343     	 orr r3,r2
 4571 0020 FB60     	 str r3,[r7,#12]
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 4572              	 .loc 2 1490 0
 4573 0022 FB68     	 ldr r3,[r7,#12]
 4574 0024 084A     	 ldr r2,.L200
 4575 0026 1340     	 and r3,r2
 4576 0028 FB60     	 str r3,[r7,#12]
1491:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 4577              	 .loc 2 1491 0
 4578 002a FB1C     	 add r3,r7,#3
 4579 002c 1B78     	 ldrb r3,[r3]
 4580 002e 1B02     	 lsl r3,r3,#8
 4581 0030 FA68     	 ldr r2,[r7,#12]
 4582 0032 1343     	 orr r3,r2
 4583 0034 FB60     	 str r3,[r7,#12]
1492:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4584              	 .loc 2 1492 0
 4585 0036 7A68     	 ldr r2,[r7,#4]
 4586 0038 8023     	 mov r3,#128
 4587 003a 5B00     	 lsl r3,r3,#1
 4588 003c F968     	 ldr r1,[r7,#12]
 4589 003e D150     	 str r1,[r2,r3]
1493:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4590              	 .loc 2 1493 0
 4591 0040 BD46     	 mov sp,r7
 4592 0042 04B0     	 add sp,sp,#16
 4593              	 
 4594 0044 80BD     	 pop {r7,pc}
 4595              	.L201:
 4596 0046 C046     	 .align 2
 4597              	.L200:
 4598 0048 FFF0FFFF 	 .word -3841
 4599              	 .cfi_endproc
 4600              	.LFE205:
 4602              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 4603              	 .align 2
 4604              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 4605              	 .code 16
 4606              	 .thumb_func
 4608              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 4609              	.LFB206:
1494:../Libraries/XMCLib/src/xmc_vadc.c **** 
1495:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1496:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1497:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4610              	 .loc 2 1497 0
 4611              	 .cfi_startproc
 4612 0000 80B5     	 push {r7,lr}
 4613              	.LCFI181:
 4614              	 .cfi_def_cfa_offset 8
 4615              	 .cfi_offset 7,-8
 4616              	 .cfi_offset 14,-4
 4617 0002 84B0     	 sub sp,sp,#16
 4618              	.LCFI182:
 4619              	 .cfi_def_cfa_offset 24
 4620 0004 00AF     	 add r7,sp,#0
 4621              	.LCFI183:
 4622              	 .cfi_def_cfa_register 7
 4623 0006 7860     	 str r0,[r7,#4]
 4624 0008 0A1C     	 mov r2,r1
 4625 000a FB1C     	 add r3,r7,#3
 4626 000c 1A70     	 strb r2,[r3]
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1499:../Libraries/XMCLib/src/xmc_vadc.c **** 
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1501:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge) <= XMC_VADC
1502:../Libraries/XMCLib/src/xmc_vadc.c **** 
1503:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4627              	 .loc 2 1504 0
 4628 000e 7A68     	 ldr r2,[r7,#4]
 4629 0010 8023     	 mov r3,#128
 4630 0012 5B00     	 lsl r3,r3,#1
 4631 0014 D358     	 ldr r3,[r2,r3]
 4632 0016 FB60     	 str r3,[r7,#12]
1505:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4633              	 .loc 2 1505 0
 4634 0018 FB68     	 ldr r3,[r7,#12]
 4635 001a 8022     	 mov r2,#128
 4636 001c 1202     	 lsl r2,r2,#8
 4637 001e 1343     	 orr r3,r2
 4638 0020 FB60     	 str r3,[r7,#12]
1506:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 4639              	 .loc 2 1506 0
 4640 0022 FB68     	 ldr r3,[r7,#12]
 4641 0024 084A     	 ldr r2,.L203
 4642 0026 1340     	 and r3,r2
 4643 0028 FB60     	 str r3,[r7,#12]
1507:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 4644              	 .loc 2 1507 0
 4645 002a FB1C     	 add r3,r7,#3
 4646 002c 1B78     	 ldrb r3,[r3]
 4647 002e 5B03     	 lsl r3,r3,#13
 4648 0030 FA68     	 ldr r2,[r7,#12]
 4649 0032 1343     	 orr r3,r2
 4650 0034 FB60     	 str r3,[r7,#12]
1508:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4651              	 .loc 2 1508 0
 4652 0036 7A68     	 ldr r2,[r7,#4]
 4653 0038 8023     	 mov r3,#128
 4654 003a 5B00     	 lsl r3,r3,#1
 4655 003c F968     	 ldr r1,[r7,#12]
 4656 003e D150     	 str r1,[r2,r3]
1509:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4657              	 .loc 2 1509 0
 4658 0040 BD46     	 mov sp,r7
 4659 0042 04B0     	 add sp,sp,#16
 4660              	 
 4661 0044 80BD     	 pop {r7,pc}
 4662              	.L204:
 4663 0046 C046     	 .align 2
 4664              	.L203:
 4665 0048 FF9FFFFF 	 .word -24577
 4666              	 .cfi_endproc
 4667              	.LFE206:
 4669              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 4670              	 .align 2
 4671              	 .global XMC_VADC_GROUP_QueueSelectGating
 4672              	 .code 16
 4673              	 .thumb_func
 4675              	XMC_VADC_GROUP_QueueSelectGating:
 4676              	.LFB207:
1510:../Libraries/XMCLib/src/xmc_vadc.c **** 
1511:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1512:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1513:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4677              	 .loc 2 1513 0
 4678              	 .cfi_startproc
 4679 0000 80B5     	 push {r7,lr}
 4680              	.LCFI184:
 4681              	 .cfi_def_cfa_offset 8
 4682              	 .cfi_offset 7,-8
 4683              	 .cfi_offset 14,-4
 4684 0002 84B0     	 sub sp,sp,#16
 4685              	.LCFI185:
 4686              	 .cfi_def_cfa_offset 24
 4687 0004 00AF     	 add r7,sp,#0
 4688              	.LCFI186:
 4689              	 .cfi_def_cfa_register 7
 4690 0006 7860     	 str r0,[r7,#4]
 4691 0008 0A1C     	 mov r2,r1
 4692 000a FB1C     	 add r3,r7,#3
 4693 000c 1A70     	 strb r2,[r3]
1514:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1515:../Libraries/XMCLib/src/xmc_vadc.c **** 
1516:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1517:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num) < XMC_VADC_NUM_PORT
1518:../Libraries/XMCLib/src/xmc_vadc.c **** 
1519:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4694              	 .loc 2 1520 0
 4695 000e 7A68     	 ldr r2,[r7,#4]
 4696 0010 8023     	 mov r3,#128
 4697 0012 5B00     	 lsl r3,r3,#1
 4698 0014 D358     	 ldr r3,[r2,r3]
 4699 0016 FB60     	 str r3,[r7,#12]
1521:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 4700              	 .loc 2 1521 0
 4701 0018 FB68     	 ldr r3,[r7,#12]
 4702 001a 8022     	 mov r2,#128
 4703 001c 1204     	 lsl r2,r2,#16
 4704 001e 1343     	 orr r3,r2
 4705 0020 FB60     	 str r3,[r7,#12]
1522:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 4706              	 .loc 2 1522 0
 4707 0022 FB68     	 ldr r3,[r7,#12]
 4708 0024 084A     	 ldr r2,.L206
 4709 0026 1340     	 and r3,r2
 4710 0028 FB60     	 str r3,[r7,#12]
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 4711              	 .loc 2 1523 0
 4712 002a FB1C     	 add r3,r7,#3
 4713 002c 1B78     	 ldrb r3,[r3]
 4714 002e 1B04     	 lsl r3,r3,#16
 4715 0030 FA68     	 ldr r2,[r7,#12]
 4716 0032 1343     	 orr r3,r2
 4717 0034 FB60     	 str r3,[r7,#12]
1524:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4718              	 .loc 2 1524 0
 4719 0036 7A68     	 ldr r2,[r7,#4]
 4720 0038 8023     	 mov r3,#128
 4721 003a 5B00     	 lsl r3,r3,#1
 4722 003c F968     	 ldr r1,[r7,#12]
 4723 003e D150     	 str r1,[r2,r3]
1525:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4724              	 .loc 2 1525 0
 4725 0040 BD46     	 mov sp,r7
 4726 0042 04B0     	 add sp,sp,#16
 4727              	 
 4728 0044 80BD     	 pop {r7,pc}
 4729              	.L207:
 4730 0046 C046     	 .align 2
 4731              	.L206:
 4732 0048 FFFFF0FF 	 .word -983041
 4733              	 .cfi_endproc
 4734              	.LFE207:
 4736              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 4737              	 .align 2
 4738              	 .global XMC_VADC_GROUP_QueueGetLength
 4739              	 .code 16
 4740              	 .thumb_func
 4742              	XMC_VADC_GROUP_QueueGetLength:
 4743              	.LFB208:
1526:../Libraries/XMCLib/src/xmc_vadc.c **** 
1527:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1528:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1529:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4744              	 .loc 2 1529 0
 4745              	 .cfi_startproc
 4746 0000 80B5     	 push {r7,lr}
 4747              	.LCFI187:
 4748              	 .cfi_def_cfa_offset 8
 4749              	 .cfi_offset 7,-8
 4750              	 .cfi_offset 14,-4
 4751 0002 86B0     	 sub sp,sp,#24
 4752              	.LCFI188:
 4753              	 .cfi_def_cfa_offset 32
 4754 0004 00AF     	 add r7,sp,#0
 4755              	.LCFI189:
 4756              	 .cfi_def_cfa_register 7
 4757 0006 7860     	 str r0,[r7,#4]
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1533:../Libraries/XMCLib/src/xmc_vadc.c **** 
1534:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1535:../Libraries/XMCLib/src/xmc_vadc.c **** 
1536:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 4758              	 .loc 2 1536 0
 4759 0008 7A68     	 ldr r2,[r7,#4]
 4760 000a 8423     	 mov r3,#132
 4761 000c 5B00     	 lsl r3,r3,#1
 4762 000e D358     	 ldr r3,[r2,r3]
 4763 0010 3B61     	 str r3,[r7,#16]
1537:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 4764              	 .loc 2 1537 0
 4765 0012 7A68     	 ldr r2,[r7,#4]
 4766 0014 8823     	 mov r3,#136
 4767 0016 5B00     	 lsl r3,r3,#1
 4768 0018 D358     	 ldr r3,[r2,r3]
 4769 001a FB60     	 str r3,[r7,#12]
1538:../Libraries/XMCLib/src/xmc_vadc.c **** 
1539:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 4770              	 .loc 2 1539 0
 4771 001c 3B69     	 ldr r3,[r7,#16]
 4772 001e 2022     	 mov r2,#32
 4773 0020 1340     	 and r3,r2
 4774 0022 02D0     	 beq .L209
1540:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1541:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 4775              	 .loc 2 1541 0
 4776 0024 0023     	 mov r3,#0
 4777 0026 7B61     	 str r3,[r7,#20]
 4778 0028 04E0     	 b .L210
 4779              	.L209:
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1543:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1545:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 4780              	 .loc 2 1545 0
 4781 002a 3B69     	 ldr r3,[r7,#16]
 4782 002c 0F22     	 mov r2,#15
 4783 002e 1340     	 and r3,r2
 4784 0030 0133     	 add r3,r3,#1
 4785 0032 7B61     	 str r3,[r7,#20]
 4786              	.L210:
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1547:../Libraries/XMCLib/src/xmc_vadc.c **** 
1548:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 4787              	 .loc 2 1548 0
 4788 0034 FA68     	 ldr r2,[r7,#12]
 4789 0036 8023     	 mov r3,#128
 4790 0038 5B00     	 lsl r3,r3,#1
 4791 003a 1340     	 and r3,r2
 4792 003c 02D0     	 beq .L211
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1550:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 4793              	 .loc 2 1550 0
 4794 003e 7B69     	 ldr r3,[r7,#20]
 4795 0040 0133     	 add r3,r3,#1
 4796 0042 7B61     	 str r3,[r7,#20]
 4797              	.L211:
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1552:../Libraries/XMCLib/src/xmc_vadc.c **** 
1553:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 4798              	 .loc 2 1553 0
 4799 0044 7B69     	 ldr r3,[r7,#20]
1554:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4800              	 .loc 2 1554 0
 4801 0046 181C     	 mov r0,r3
 4802 0048 BD46     	 mov sp,r7
 4803 004a 06B0     	 add sp,sp,#24
 4804              	 
 4805 004c 80BD     	 pop {r7,pc}
 4806              	 .cfi_endproc
 4807              	.LFE208:
 4809 004e C046     	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 4810              	 .align 2
 4811              	 .global XMC_VADC_GROUP_QueueAbortSequence
 4812              	 .code 16
 4813              	 .thumb_func
 4815              	XMC_VADC_GROUP_QueueAbortSequence:
 4816              	.LFB209:
1555:../Libraries/XMCLib/src/xmc_vadc.c **** 
1556:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1557:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1558:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4817              	 .loc 2 1558 0
 4818              	 .cfi_startproc
 4819 0000 80B5     	 push {r7,lr}
 4820              	.LCFI190:
 4821              	 .cfi_def_cfa_offset 8
 4822              	 .cfi_offset 7,-8
 4823              	 .cfi_offset 14,-4
 4824 0002 84B0     	 sub sp,sp,#16
 4825              	.LCFI191:
 4826              	 .cfi_def_cfa_offset 24
 4827 0004 00AF     	 add r7,sp,#0
 4828              	.LCFI192:
 4829              	 .cfi_def_cfa_register 7
 4830 0006 7860     	 str r0,[r7,#4]
1559:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1560:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1561:../Libraries/XMCLib/src/xmc_vadc.c **** 
1562:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1563:../Libraries/XMCLib/src/xmc_vadc.c **** 
1564:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1565:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 4831              	 .loc 2 1565 0
 4832 0008 7A68     	 ldr r2,[r7,#4]
 4833 000a 8023     	 mov r3,#128
 4834 000c 5B00     	 lsl r3,r3,#1
 4835 000e D358     	 ldr r3,[r2,r3]
 4836 0010 FB60     	 str r3,[r7,#12]
1566:../Libraries/XMCLib/src/xmc_vadc.c **** 
1567:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4837              	 .loc 2 1567 0
 4838 0012 7A68     	 ldr r2,[r7,#4]
 4839 0014 8023     	 mov r3,#128
 4840 0016 5B00     	 lsl r3,r3,#1
 4841 0018 1549     	 ldr r1,.L214
 4842 001a D150     	 str r1,[r2,r3]
1568:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
1569:../Libraries/XMCLib/src/xmc_vadc.c **** 
1570:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1571:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4843              	 .loc 2 1571 0
 4844 001c 7B68     	 ldr r3,[r7,#4]
 4845 001e 8422     	 mov r2,#132
 4846 0020 9B58     	 ldr r3,[r3,r2]
 4847 0022 1B0E     	 lsr r3,r3,#24
 4848 0024 0122     	 mov r2,#1
 4849 0026 1A40     	 and r2,r3
 4850 0028 0B23     	 mov r3,#11
 4851 002a FB18     	 add r3,r7,r3
 4852 002c 511E     	 sub r1,r2,#1
 4853 002e 8A41     	 sbc r2,r2,r1
 4854 0030 1A70     	 strb r2,[r3]
1572:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4855              	 .loc 2 1572 0
 4856 0032 7B68     	 ldr r3,[r7,#4]
 4857 0034 181C     	 mov r0,r3
 4858 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1573:../Libraries/XMCLib/src/xmc_vadc.c **** 
1574:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 4859              	 .loc 2 1575 0
 4860 003a 7B68     	 ldr r3,[r7,#4]
 4861 003c 181C     	 mov r0,r3
 4862 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1576:../Libraries/XMCLib/src/xmc_vadc.c **** 
1577:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1578:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4863              	 .loc 2 1578 0
 4864 0042 7B68     	 ldr r3,[r7,#4]
 4865 0044 8422     	 mov r2,#132
 4866 0046 9A58     	 ldr r2,[r3,r2]
 4867 0048 0B23     	 mov r3,#11
 4868 004a FB18     	 add r3,r7,r3
 4869 004c 1B78     	 ldrb r3,[r3]
 4870 004e 1B06     	 lsl r3,r3,#24
 4871 0050 1A43     	 orr r2,r3
 4872 0052 7B68     	 ldr r3,[r7,#4]
 4873 0054 8421     	 mov r1,#132
 4874 0056 5A50     	 str r2,[r3,r1]
1579:../Libraries/XMCLib/src/xmc_vadc.c **** 
1580:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1581:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1582:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
 4875              	 .loc 2 1582 0
 4876 0058 FB68     	 ldr r3,[r7,#12]
 4877 005a 054A     	 ldr r2,.L214
 4878 005c 1A43     	 orr r2,r3
 4879 005e 111C     	 mov r1,r2
1581:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
 4880              	 .loc 2 1581 0
 4881 0060 7A68     	 ldr r2,[r7,#4]
 4882 0062 8023     	 mov r3,#128
 4883 0064 5B00     	 lsl r3,r3,#1
 4884 0066 D150     	 str r1,[r2,r3]
1583:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4885              	 .loc 2 1583 0
 4886 0068 BD46     	 mov sp,r7
 4887 006a 04B0     	 add sp,sp,#16
 4888              	 
 4889 006c 80BD     	 pop {r7,pc}
 4890              	.L215:
 4891 006e C046     	 .align 2
 4892              	.L214:
 4893 0070 00808080 	 .word -2139062272
 4894              	 .cfi_endproc
 4895              	.LFE209:
 4897              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 4898              	 .align 2
 4899              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 4900              	 .code 16
 4901              	 .thumb_func
 4903              	XMC_VADC_GROUP_QueueRemoveChannel:
 4904              	.LFB210:
1584:../Libraries/XMCLib/src/xmc_vadc.c **** 
1585:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1586:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1587:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4905              	 .loc 2 1587 0
 4906              	 .cfi_startproc
 4907 0000 80B5     	 push {r7,lr}
 4908              	.LCFI193:
 4909              	 .cfi_def_cfa_offset 8
 4910              	 .cfi_offset 7,-8
 4911              	 .cfi_offset 14,-4
 4912 0002 86B0     	 sub sp,sp,#24
 4913              	.LCFI194:
 4914              	 .cfi_def_cfa_offset 32
 4915 0004 00AF     	 add r7,sp,#0
 4916              	.LCFI195:
 4917              	 .cfi_def_cfa_register 7
 4918 0006 7860     	 str r0,[r7,#4]
1588:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1589:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1590:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1591:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1592:../Libraries/XMCLib/src/xmc_vadc.c **** 
1593:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1594:../Libraries/XMCLib/src/xmc_vadc.c **** 
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1596:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 4919              	 .loc 2 1596 0
 4920 0008 7A68     	 ldr r2,[r7,#4]
 4921 000a 8023     	 mov r3,#128
 4922 000c 5B00     	 lsl r3,r3,#1
 4923 000e D358     	 ldr r3,[r2,r3]
 4924 0010 3B61     	 str r3,[r7,#16]
1597:../Libraries/XMCLib/src/xmc_vadc.c **** 
1598:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4925              	 .loc 2 1598 0
 4926 0012 7A68     	 ldr r2,[r7,#4]
 4927 0014 8023     	 mov r3,#128
 4928 0016 5B00     	 lsl r3,r3,#1
 4929 0018 2649     	 ldr r1,.L220
 4930 001a D150     	 str r1,[r2,r3]
1599:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
1600:../Libraries/XMCLib/src/xmc_vadc.c **** 
1601:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1602:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4931              	 .loc 2 1602 0
 4932 001c 7B68     	 ldr r3,[r7,#4]
 4933 001e 8422     	 mov r2,#132
 4934 0020 9B58     	 ldr r3,[r3,r2]
 4935 0022 1B0E     	 lsr r3,r3,#24
 4936 0024 0122     	 mov r2,#1
 4937 0026 1A40     	 and r2,r3
 4938 0028 0F23     	 mov r3,#15
 4939 002a FB18     	 add r3,r7,r3
 4940 002c 511E     	 sub r1,r2,#1
 4941 002e 8A41     	 sbc r2,r2,r1
 4942 0030 1A70     	 strb r2,[r3]
1603:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4943              	 .loc 2 1603 0
 4944 0032 7B68     	 ldr r3,[r7,#4]
 4945 0034 181C     	 mov r0,r3
 4946 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1604:../Libraries/XMCLib/src/xmc_vadc.c **** 
1605:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4947              	 .loc 2 1605 0
 4948 003a 7B68     	 ldr r3,[r7,#4]
 4949 003c 181C     	 mov r0,r3
 4950 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4951 0042 031C     	 mov r3,r0
 4952 0044 BB60     	 str r3,[r7,#8]
1606:../Libraries/XMCLib/src/xmc_vadc.c **** 
1607:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 4953              	 .loc 2 1607 0
 4954 0046 BB68     	 ldr r3,[r7,#8]
 4955 0048 002B     	 cmp r3,#0
 4956 004a 1CD0     	 beq .L217
1608:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1609:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1610:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 4957              	 .loc 2 1610 0
 4958 004c 7A68     	 ldr r2,[r7,#4]
 4959 004e 8223     	 mov r3,#130
 4960 0050 5B00     	 lsl r3,r3,#1
 4961 0052 D358     	 ldr r3,[r2,r3]
 4962 0054 8022     	 mov r2,#128
 4963 0056 5200     	 lsl r2,r2,#1
 4964 0058 1A43     	 orr r2,r3
 4965 005a 111C     	 mov r1,r2
 4966 005c 7A68     	 ldr r2,[r7,#4]
 4967 005e 8223     	 mov r3,#130
 4968 0060 5B00     	 lsl r3,r3,#1
 4969 0062 D150     	 str r1,[r2,r3]
1611:../Libraries/XMCLib/src/xmc_vadc.c **** 
1612:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4970              	 .loc 2 1612 0
 4971 0064 7B68     	 ldr r3,[r7,#4]
 4972 0066 181C     	 mov r0,r3
 4973 0068 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4974 006c 031C     	 mov r3,r0
 4975 006e 7B61     	 str r3,[r7,#20]
1613:../Libraries/XMCLib/src/xmc_vadc.c **** 
1614:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1615:../Libraries/XMCLib/src/xmc_vadc.c ****     while (length_after_abort == length_before_abort)
 4976              	 .loc 2 1615 0
 4977 0070 05E0     	 b .L218
 4978              	.L219:
1616:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1617:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4979              	 .loc 2 1617 0
 4980 0072 7B68     	 ldr r3,[r7,#4]
 4981 0074 181C     	 mov r0,r3
 4982 0076 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4983 007a 031C     	 mov r3,r0
 4984 007c 7B61     	 str r3,[r7,#20]
 4985              	.L218:
1615:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4986              	 .loc 2 1615 0
 4987 007e 7A69     	 ldr r2,[r7,#20]
 4988 0080 BB68     	 ldr r3,[r7,#8]
 4989 0082 9A42     	 cmp r2,r3
 4990 0084 F5D0     	 beq .L219
 4991              	.L217:
1618:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1620:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1621:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4992              	 .loc 2 1621 0
 4993 0086 7B68     	 ldr r3,[r7,#4]
 4994 0088 8422     	 mov r2,#132
 4995 008a 9A58     	 ldr r2,[r3,r2]
 4996 008c 0F23     	 mov r3,#15
 4997 008e FB18     	 add r3,r7,r3
 4998 0090 1B78     	 ldrb r3,[r3]
 4999 0092 1B06     	 lsl r3,r3,#24
 5000 0094 1A43     	 orr r2,r3
 5001 0096 7B68     	 ldr r3,[r7,#4]
 5002 0098 8421     	 mov r1,#132
 5003 009a 5A50     	 str r2,[r3,r1]
1622:../Libraries/XMCLib/src/xmc_vadc.c **** 
1623:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1625:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
 5004              	 .loc 2 1625 0
 5005 009c 3B69     	 ldr r3,[r7,#16]
 5006 009e 054A     	 ldr r2,.L220
 5007 00a0 1A43     	 orr r2,r3
 5008 00a2 111C     	 mov r1,r2
1624:../Libraries/XMCLib/src/xmc_vadc.c ****                        (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
 5009              	 .loc 2 1624 0
 5010 00a4 7A68     	 ldr r2,[r7,#4]
 5011 00a6 8023     	 mov r3,#128
 5012 00a8 5B00     	 lsl r3,r3,#1
 5013 00aa D150     	 str r1,[r2,r3]
1626:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5014              	 .loc 2 1626 0
 5015 00ac BD46     	 mov sp,r7
 5016 00ae 06B0     	 add sp,sp,#24
 5017              	 
 5018 00b0 80BD     	 pop {r7,pc}
 5019              	.L221:
 5020 00b2 C046     	 .align 2
 5021              	.L220:
 5022 00b4 00808080 	 .word -2139062272
 5023              	 .cfi_endproc
 5024              	.LFE210:
 5026              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 5027              	 .align 2
 5028              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 5029              	 .code 16
 5030              	 .thumb_func
 5032              	XMC_VADC_GROUP_QueueGetNextChannel:
 5033              	.LFB211:
1627:../Libraries/XMCLib/src/xmc_vadc.c **** 
1628:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1629:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1630:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5034              	 .loc 2 1630 0
 5035              	 .cfi_startproc
 5036 0000 80B5     	 push {r7,lr}
 5037              	.LCFI196:
 5038              	 .cfi_def_cfa_offset 8
 5039              	 .cfi_offset 7,-8
 5040              	 .cfi_offset 14,-4
 5041 0002 84B0     	 sub sp,sp,#16
 5042              	.LCFI197:
 5043              	 .cfi_def_cfa_offset 24
 5044 0004 00AF     	 add r7,sp,#0
 5045              	.LCFI198:
 5046              	 .cfi_def_cfa_register 7
 5047 0006 7860     	 str r0,[r7,#4]
1631:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1632:../Libraries/XMCLib/src/xmc_vadc.c **** 
1633:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1634:../Libraries/XMCLib/src/xmc_vadc.c **** 
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1636:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1637:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1638:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1639:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5048              	 .loc 2 1639 0
 5049 0008 7A68     	 ldr r2,[r7,#4]
 5050 000a 8823     	 mov r3,#136
 5051 000c 5B00     	 lsl r3,r3,#1
 5052 000e D258     	 ldr r2,[r2,r3]
 5053 0010 8023     	 mov r3,#128
 5054 0012 5B00     	 lsl r3,r3,#1
 5055 0014 1340     	 and r3,r2
 5056 0016 08D0     	 beq .L223
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1641:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5057              	 .loc 2 1641 0
 5058 0018 7A68     	 ldr r2,[r7,#4]
 5059 001a 8823     	 mov r3,#136
 5060 001c 5B00     	 lsl r3,r3,#1
 5061 001e D358     	 ldr r3,[r2,r3]
 5062 0020 1A1C     	 mov r2,r3
 5063 0022 1F23     	 mov r3,#31
 5064 0024 1340     	 and r3,r2
 5065 0026 FB60     	 str r3,[r7,#12]
 5066 0028 13E0     	 b .L224
 5067              	.L223:
1642:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1643:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 5068              	 .loc 2 1643 0
 5069 002a 7A68     	 ldr r2,[r7,#4]
 5070 002c 8623     	 mov r3,#134
 5071 002e 5B00     	 lsl r3,r3,#1
 5072 0030 D258     	 ldr r2,[r2,r3]
 5073 0032 8023     	 mov r3,#128
 5074 0034 5B00     	 lsl r3,r3,#1
 5075 0036 1340     	 and r3,r2
 5076 0038 08D0     	 beq .L225
1644:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1645:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 5077              	 .loc 2 1645 0
 5078 003a 7A68     	 ldr r2,[r7,#4]
 5079 003c 8623     	 mov r3,#134
 5080 003e 5B00     	 lsl r3,r3,#1
 5081 0040 D358     	 ldr r3,[r2,r3]
 5082 0042 1A1C     	 mov r2,r3
 5083 0044 1F23     	 mov r3,#31
 5084 0046 1340     	 and r3,r2
 5085 0048 FB60     	 str r3,[r7,#12]
 5086 004a 02E0     	 b .L224
 5087              	.L225:
1646:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1647:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1648:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1649:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1650:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5088              	 .loc 2 1650 0
 5089 004c 0123     	 mov r3,#1
 5090 004e 5B42     	 neg r3,r3
 5091 0050 FB60     	 str r3,[r7,#12]
 5092              	.L224:
1651:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1652:../Libraries/XMCLib/src/xmc_vadc.c **** 
1653:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5093              	 .loc 2 1653 0
 5094 0052 FB68     	 ldr r3,[r7,#12]
1654:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5095              	 .loc 2 1654 0
 5096 0054 181C     	 mov r0,r3
 5097 0056 BD46     	 mov sp,r7
 5098 0058 04B0     	 add sp,sp,#16
 5099              	 
 5100 005a 80BD     	 pop {r7,pc}
 5101              	 .cfi_endproc
 5102              	.LFE211:
 5104              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 5105              	 .align 2
 5106              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 5107              	 .code 16
 5108              	 .thumb_func
 5110              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 5111              	.LFB212:
1655:../Libraries/XMCLib/src/xmc_vadc.c **** 
1656:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1657:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1658:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5112              	 .loc 2 1658 0
 5113              	 .cfi_startproc
 5114 0000 80B5     	 push {r7,lr}
 5115              	.LCFI199:
 5116              	 .cfi_def_cfa_offset 8
 5117              	 .cfi_offset 7,-8
 5118              	 .cfi_offset 14,-4
 5119 0002 84B0     	 sub sp,sp,#16
 5120              	.LCFI200:
 5121              	 .cfi_def_cfa_offset 24
 5122 0004 00AF     	 add r7,sp,#0
 5123              	.LCFI201:
 5124              	 .cfi_def_cfa_register 7
 5125 0006 7860     	 str r0,[r7,#4]
1659:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1660:../Libraries/XMCLib/src/xmc_vadc.c **** 
1661:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1662:../Libraries/XMCLib/src/xmc_vadc.c **** 
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5126              	 .loc 2 1663 0
 5127 0008 7A68     	 ldr r2,[r7,#4]
 5128 000a 8823     	 mov r3,#136
 5129 000c 5B00     	 lsl r3,r3,#1
 5130 000e D258     	 ldr r2,[r2,r3]
 5131 0010 8023     	 mov r3,#128
 5132 0012 5B00     	 lsl r3,r3,#1
 5133 0014 1340     	 and r3,r2
 5134 0016 08D0     	 beq .L228
1664:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1665:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5135              	 .loc 2 1665 0
 5136 0018 7A68     	 ldr r2,[r7,#4]
 5137 001a 8823     	 mov r3,#136
 5138 001c 5B00     	 lsl r3,r3,#1
 5139 001e D358     	 ldr r3,[r2,r3]
 5140 0020 1A1C     	 mov r2,r3
 5141 0022 1F23     	 mov r3,#31
 5142 0024 1340     	 and r3,r2
 5143 0026 FB60     	 str r3,[r7,#12]
 5144 0028 02E0     	 b .L229
 5145              	.L228:
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1667:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1668:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1669:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1670:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5146              	 .loc 2 1670 0
 5147 002a 0123     	 mov r3,#1
 5148 002c 5B42     	 neg r3,r3
 5149 002e FB60     	 str r3,[r7,#12]
 5150              	.L229:
1671:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1672:../Libraries/XMCLib/src/xmc_vadc.c **** 
1673:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5151              	 .loc 2 1673 0
 5152 0030 FB68     	 ldr r3,[r7,#12]
1674:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5153              	 .loc 2 1674 0
 5154 0032 181C     	 mov r0,r3
 5155 0034 BD46     	 mov sp,r7
 5156 0036 04B0     	 add sp,sp,#16
 5157              	 
 5158 0038 80BD     	 pop {r7,pc}
 5159              	 .cfi_endproc
 5160              	.LFE212:
 5162 003a C046     	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 5163              	 .align 2
 5164              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 5165              	 .code 16
 5166              	 .thumb_func
 5168              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 5169              	.LFB213:
1675:../Libraries/XMCLib/src/xmc_vadc.c **** 
1676:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1677:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1678:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5170              	 .loc 2 1678 0
 5171              	 .cfi_startproc
 5172 0000 80B5     	 push {r7,lr}
 5173              	.LCFI202:
 5174              	 .cfi_def_cfa_offset 8
 5175              	 .cfi_offset 7,-8
 5176              	 .cfi_offset 14,-4
 5177 0002 84B0     	 sub sp,sp,#16
 5178              	.LCFI203:
 5179              	 .cfi_def_cfa_offset 24
 5180 0004 00AF     	 add r7,sp,#0
 5181              	.LCFI204:
 5182              	 .cfi_def_cfa_register 7
 5183 0006 7860     	 str r0,[r7,#4]
 5184 0008 0A1C     	 mov r2,r1
 5185 000a FB1C     	 add r3,r7,#3
 5186 000c 1A70     	 strb r2,[r3]
1679:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1680:../Libraries/XMCLib/src/xmc_vadc.c **** 
1681:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1682:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1683:../Libraries/XMCLib/src/xmc_vadc.c **** 
1684:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 5187              	 .loc 2 1684 0
 5188 000e 7A68     	 ldr r2,[r7,#4]
 5189 0010 E023     	 mov r3,#224
 5190 0012 5B00     	 lsl r3,r3,#1
 5191 0014 D358     	 ldr r3,[r2,r3]
 5192 0016 FB60     	 str r3,[r7,#12]
1685:../Libraries/XMCLib/src/xmc_vadc.c **** 
1686:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 5193              	 .loc 2 1686 0
 5194 0018 FB68     	 ldr r3,[r7,#12]
 5195 001a 0F22     	 mov r2,#15
 5196 001c 9343     	 bic r3,r2
 5197 001e FB60     	 str r3,[r7,#12]
1687:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 5198              	 .loc 2 1687 0
 5199 0020 FB1C     	 add r3,r7,#3
 5200 0022 1B78     	 ldrb r3,[r3]
 5201 0024 FA68     	 ldr r2,[r7,#12]
 5202 0026 1343     	 orr r3,r2
 5203 0028 FB60     	 str r3,[r7,#12]
1688:../Libraries/XMCLib/src/xmc_vadc.c **** 
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 5204              	 .loc 2 1689 0
 5205 002a 7A68     	 ldr r2,[r7,#4]
 5206 002c E023     	 mov r3,#224
 5207 002e 5B00     	 lsl r3,r3,#1
 5208 0030 F968     	 ldr r1,[r7,#12]
 5209 0032 D150     	 str r1,[r2,r3]
1690:../Libraries/XMCLib/src/xmc_vadc.c **** 
1691:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5210              	 .loc 2 1691 0
 5211 0034 BD46     	 mov sp,r7
 5212 0036 04B0     	 add sp,sp,#16
 5213              	 
 5214 0038 80BD     	 pop {r7,pc}
 5215              	 .cfi_endproc
 5216              	.LFE213:
 5218 003a C046     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 5219              	 .align 2
 5220              	 .global XMC_VADC_GROUP_ChannelInit
 5221              	 .code 16
 5222              	 .thumb_func
 5224              	XMC_VADC_GROUP_ChannelInit:
 5225              	.LFB214:
1692:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1693:../Libraries/XMCLib/src/xmc_vadc.c **** 
1694:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1695:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1696:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1697:../Libraries/XMCLib/src/xmc_vadc.c ****                                 const XMC_VADC_CHANNEL_CONFIG_t *config)
1698:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5226              	 .loc 2 1698 0
 5227              	 .cfi_startproc
 5228 0000 80B5     	 push {r7,lr}
 5229              	.LCFI205:
 5230              	 .cfi_def_cfa_offset 8
 5231              	 .cfi_offset 7,-8
 5232              	 .cfi_offset 14,-4
 5233 0002 88B0     	 sub sp,sp,#32
 5234              	.LCFI206:
 5235              	 .cfi_def_cfa_offset 40
 5236 0004 00AF     	 add r7,sp,#0
 5237              	.LCFI207:
 5238              	 .cfi_def_cfa_register 7
 5239 0006 F860     	 str r0,[r7,#12]
 5240 0008 B960     	 str r1,[r7,#8]
 5241 000a 7A60     	 str r2,[r7,#4]
1699:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1700:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1701:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1702:../Libraries/XMCLib/src/xmc_vadc.c **** 
1703:../Libraries/XMCLib/src/xmc_vadc.c **** 
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1706:../Libraries/XMCLib/src/xmc_vadc.c **** 
1707:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 5242              	 .loc 2 1707 0
 5243 000c 7B68     	 ldr r3,[r7,#4]
 5244 000e 1B7B     	 ldrb r3,[r3,#12]
 5245 0010 BB61     	 str r3,[r7,#24]
1708:../Libraries/XMCLib/src/xmc_vadc.c **** 
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1710:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 5246              	 .loc 2 1710 0
 5247 0012 FB68     	 ldr r3,[r7,#12]
 5248 0014 8822     	 mov r2,#136
 5249 0016 9B58     	 ldr r3,[r3,r2]
 5250 0018 7B61     	 str r3,[r7,#20]
1711:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 5251              	 .loc 2 1711 0
 5252 001a BB68     	 ldr r3,[r7,#8]
 5253 001c 0122     	 mov r2,#1
 5254 001e 9A40     	 lsl r2,r2,r3
 5255 0020 131C     	 mov r3,r2
 5256 0022 DA43     	 mvn r2,r3
 5257 0024 7B69     	 ldr r3,[r7,#20]
 5258 0026 1340     	 and r3,r2
 5259 0028 7B61     	 str r3,[r7,#20]
1712:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 5260              	 .loc 2 1712 0
 5261 002a BB68     	 ldr r3,[r7,#8]
 5262 002c BA69     	 ldr r2,[r7,#24]
 5263 002e 9A40     	 lsl r2,r2,r3
 5264 0030 131C     	 mov r3,r2
 5265 0032 7A69     	 ldr r2,[r7,#20]
 5266 0034 1343     	 orr r3,r2
 5267 0036 7B61     	 str r3,[r7,#20]
1713:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 5268              	 .loc 2 1713 0
 5269 0038 FB68     	 ldr r3,[r7,#12]
 5270 003a 8821     	 mov r1,#136
 5271 003c 7A69     	 ldr r2,[r7,#20]
 5272 003e 5A50     	 str r2,[r3,r1]
1714:../Libraries/XMCLib/src/xmc_vadc.c **** 
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1716:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 5273              	 .loc 2 1716 0
 5274 0040 7B68     	 ldr r3,[r7,#4]
 5275 0042 5B7B     	 ldrb r3,[r3,#13]
 5276 0044 5BB2     	 sxtb r3,r3
 5277 0046 002B     	 cmp r3,#0
 5278 0048 2ADB     	 blt .L233
1717:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1718:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 5279              	 .loc 2 1718 0
 5280 004a 0023     	 mov r3,#0
 5281 004c FB61     	 str r3,[r7,#28]
1719:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 5282              	 .loc 2 1719 0
 5283 004e BB68     	 ldr r3,[r7,#8]
 5284 0050 012B     	 cmp r3,#1
 5285 0052 0AD1     	 bne .L234
1720:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1721:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 5286              	 .loc 2 1721 0
 5287 0054 0823     	 mov r3,#8
 5288 0056 FB61     	 str r3,[r7,#28]
1722:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 5289              	 .loc 2 1722 0
 5290 0058 FB68     	 ldr r3,[r7,#12]
 5291 005a B022     	 mov r2,#176
 5292 005c 9B58     	 ldr r3,[r3,r2]
 5293 005e 1E4A     	 ldr r2,.L236
 5294 0060 1A40     	 and r2,r3
 5295 0062 FB68     	 ldr r3,[r7,#12]
 5296 0064 B021     	 mov r1,#176
 5297 0066 5A50     	 str r2,[r3,r1]
 5298 0068 0DE0     	 b .L235
 5299              	.L234:
1723:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1724:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 5300              	 .loc 2 1724 0
 5301 006a BB68     	 ldr r3,[r7,#8]
 5302 006c 002B     	 cmp r3,#0
 5303 006e 0AD1     	 bne .L235
1725:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1726:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 5304              	 .loc 2 1726 0
 5305 0070 0023     	 mov r3,#0
 5306 0072 FB61     	 str r3,[r7,#28]
1727:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 5307              	 .loc 2 1727 0
 5308 0074 FB68     	 ldr r3,[r7,#12]
 5309 0076 B022     	 mov r2,#176
 5310 0078 9B58     	 ldr r3,[r3,r2]
 5311 007a 1F22     	 mov r2,#31
 5312 007c 9343     	 bic r3,r2
 5313 007e 1A1C     	 mov r2,r3
 5314 0080 FB68     	 ldr r3,[r7,#12]
 5315 0082 B021     	 mov r1,#176
 5316 0084 5A50     	 str r2,[r3,r1]
 5317              	.L235:
1728:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1729:../Libraries/XMCLib/src/xmc_vadc.c **** 
1730:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 5318              	 .loc 2 1730 0
 5319 0086 FB68     	 ldr r3,[r7,#12]
 5320 0088 B022     	 mov r2,#176
 5321 008a 9B58     	 ldr r3,[r3,r2]
 5322 008c 7A68     	 ldr r2,[r7,#4]
 5323 008e 527B     	 ldrb r2,[r2,#13]
 5324 0090 51B2     	 sxtb r1,r2
 5325 0092 FA69     	 ldr r2,[r7,#28]
 5326 0094 9140     	 lsl r1,r1,r2
 5327 0096 0A1C     	 mov r2,r1
 5328 0098 1A43     	 orr r2,r3
 5329 009a FB68     	 ldr r3,[r7,#12]
 5330 009c B021     	 mov r1,#176
 5331 009e 5A50     	 str r2,[r3,r1]
 5332              	.L233:
1731:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1732:../Libraries/XMCLib/src/xmc_vadc.c **** 
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 5333              	 .loc 2 1733 0
 5334 00a0 FB68     	 ldr r3,[r7,#12]
 5335 00a2 C822     	 mov r2,#200
 5336 00a4 9A58     	 ldr r2,[r3,r2]
 5337 00a6 7B68     	 ldr r3,[r7,#4]
 5338 00a8 5B68     	 ldr r3,[r3,#4]
 5339 00aa 1A43     	 orr r2,r3
 5340 00ac FB68     	 ldr r3,[r7,#12]
 5341 00ae C821     	 mov r1,#200
 5342 00b0 5A50     	 str r2,[r3,r1]
1734:../Libraries/XMCLib/src/xmc_vadc.c **** 
1735:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1736:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
 5343              	 .loc 2 1736 0
 5344 00b2 FB68     	 ldr r3,[r7,#12]
 5345 00b4 D022     	 mov r2,#208
 5346 00b6 9A58     	 ldr r2,[r3,r2]
 5347 00b8 7B68     	 ldr r3,[r7,#4]
 5348 00ba 9B68     	 ldr r3,[r3,#8]
 5349 00bc 1A43     	 orr r2,r3
 5350 00be FB68     	 ldr r3,[r7,#12]
 5351 00c0 D021     	 mov r1,#208
 5352 00c2 5A50     	 str r2,[r3,r1]
1737:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1738:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1739:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 5353              	 .loc 2 1739 0
 5354 00c4 7B68     	 ldr r3,[r7,#4]
 5355 00c6 1968     	 ldr r1,[r3]
 5356 00c8 FB68     	 ldr r3,[r7,#12]
 5357 00ca BA68     	 ldr r2,[r7,#8]
 5358 00cc 8032     	 add r2,r2,#128
 5359 00ce 9200     	 lsl r2,r2,#2
 5360 00d0 D150     	 str r1,[r2,r3]
1740:../Libraries/XMCLib/src/xmc_vadc.c **** 
1741:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5361              	 .loc 2 1741 0
 5362 00d2 BD46     	 mov sp,r7
 5363 00d4 08B0     	 add sp,sp,#32
 5364              	 
 5365 00d6 80BD     	 pop {r7,pc}
 5366              	.L237:
 5367              	 .align 2
 5368              	.L236:
 5369 00d8 FFE0FFFF 	 .word -7937
 5370              	 .cfi_endproc
 5371              	.LFE214:
 5373              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 5374              	 .align 2
 5375              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 5376              	 .code 16
 5377              	 .thumb_func
 5379              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 5380              	.LFB215:
1742:../Libraries/XMCLib/src/xmc_vadc.c **** 
1743:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1744:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1745:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5381              	 .loc 2 1745 0
 5382              	 .cfi_startproc
 5383 0000 80B5     	 push {r7,lr}
 5384              	.LCFI208:
 5385              	 .cfi_def_cfa_offset 8
 5386              	 .cfi_offset 7,-8
 5387              	 .cfi_offset 14,-4
 5388 0002 86B0     	 sub sp,sp,#24
 5389              	.LCFI209:
 5390              	 .cfi_def_cfa_offset 32
 5391 0004 00AF     	 add r7,sp,#0
 5392              	.LCFI210:
 5393              	 .cfi_def_cfa_register 7
 5394 0006 7860     	 str r0,[r7,#4]
 5395 0008 3960     	 str r1,[r7]
1746:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1748:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1749:../Libraries/XMCLib/src/xmc_vadc.c **** 
1750:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1751:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1752:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1753:../Libraries/XMCLib/src/xmc_vadc.c **** 
1754:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 5396              	 .loc 2 1754 0
 5397 000a 1723     	 mov r3,#23
 5398 000c FB18     	 add r3,r7,r3
 5399 000e 0022     	 mov r2,#0
 5400 0010 1A70     	 strb r2,[r3]
1755:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1756:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1757:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1758:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1759:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1760:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5401              	 .loc 2 1760 0
 5402 0012 7B68     	 ldr r3,[r7,#4]
 5403 0014 3A68     	 ldr r2,[r7]
 5404 0016 8032     	 add r2,r2,#128
 5405 0018 9200     	 lsl r2,r2,#2
 5406 001a D358     	 ldr r3,[r2,r3]
 5407 001c 3B61     	 str r3,[r7,#16]
1761:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos) & (uint32_t)0x3;
 5408              	 .loc 2 1761 0
 5409 001e 3B69     	 ldr r3,[r7,#16]
 5410 0020 1B0A     	 lsr r3,r3,#8
 5411 0022 0322     	 mov r2,#3
 5412 0024 1340     	 and r3,r2
 5413 0026 3B61     	 str r3,[r7,#16]
1762:../Libraries/XMCLib/src/xmc_vadc.c **** 
1763:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1764:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 5414              	 .loc 2 1764 0
 5415 0028 7A68     	 ldr r2,[r7,#4]
 5416 002a C023     	 mov r3,#192
 5417 002c 5B00     	 lsl r3,r3,#1
 5418 002e D358     	 ldr r3,[r2,r3]
 5419 0030 FB60     	 str r3,[r7,#12]
1765:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 5420              	 .loc 2 1765 0
 5421 0032 3B68     	 ldr r3,[r7]
 5422 0034 0122     	 mov r2,#1
 5423 0036 9A40     	 lsl r2,r2,r3
 5424 0038 FB68     	 ldr r3,[r7,#12]
 5425 003a 1340     	 and r3,r2
 5426 003c FB60     	 str r3,[r7,#12]
1766:../Libraries/XMCLib/src/xmc_vadc.c **** 
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1768:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 5427              	 .loc 2 1768 0
 5428 003e 3B69     	 ldr r3,[r7,#16]
 5429 0040 012B     	 cmp r3,#1
 5430 0042 02D0     	 beq .L239
1769:../Libraries/XMCLib/src/xmc_vadc.c ****         || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 5431              	 .loc 2 1769 0
 5432 0044 3B69     	 ldr r3,[r7,#16]
 5433 0046 022B     	 cmp r3,#2
 5434 0048 06D1     	 bne .L240
 5435              	.L239:
 5436              	 .loc 2 1769 0 is_stmt 0 discriminator 1
 5437 004a FB68     	 ldr r3,[r7,#12]
 5438 004c 002B     	 cmp r3,#0
 5439 004e 03D0     	 beq .L240
1770:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1771:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 5440              	 .loc 2 1771 0 is_stmt 1
 5441 0050 1723     	 mov r3,#23
 5442 0052 FB18     	 add r3,r7,r3
 5443 0054 0122     	 mov r2,#1
 5444 0056 1A70     	 strb r2,[r3]
 5445              	.L240:
1772:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1773:../Libraries/XMCLib/src/xmc_vadc.c **** 
1774:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 5446              	 .loc 2 1774 0
 5447 0058 1723     	 mov r3,#23
 5448 005a FB18     	 add r3,r7,r3
 5449 005c 1B78     	 ldrb r3,[r3]
1775:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5450              	 .loc 2 1775 0
 5451 005e 181C     	 mov r0,r3
 5452 0060 BD46     	 mov sp,r7
 5453 0062 06B0     	 add sp,sp,#24
 5454              	 
 5455 0064 80BD     	 pop {r7,pc}
 5456              	 .cfi_endproc
 5457              	.LFE215:
 5459 0066 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 5460              	 .align 2
 5461              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 5462              	 .code 16
 5463              	 .thumb_func
 5465              	XMC_VADC_GROUP_ChannelSetInputReference:
 5466              	.LFB216:
1776:../Libraries/XMCLib/src/xmc_vadc.c **** 
1777:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1778:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1779:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t ch_num,
1780:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_CHANNEL_REF_t ref)
1781:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5467              	 .loc 2 1781 0
 5468              	 .cfi_startproc
 5469 0000 80B5     	 push {r7,lr}
 5470              	.LCFI211:
 5471              	 .cfi_def_cfa_offset 8
 5472              	 .cfi_offset 7,-8
 5473              	 .cfi_offset 14,-4
 5474 0002 86B0     	 sub sp,sp,#24
 5475              	.LCFI212:
 5476              	 .cfi_def_cfa_offset 32
 5477 0004 00AF     	 add r7,sp,#0
 5478              	.LCFI213:
 5479              	 .cfi_def_cfa_register 7
 5480 0006 F860     	 str r0,[r7,#12]
 5481 0008 B960     	 str r1,[r7,#8]
 5482 000a FB1D     	 add r3,r7,#7
 5483 000c 1A70     	 strb r2,[r3]
1782:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1784:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1785:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref) <= XMC_VADC_
1786:../Libraries/XMCLib/src/xmc_vadc.c **** 
1787:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5484              	 .loc 2 1787 0
 5485 000e FB68     	 ldr r3,[r7,#12]
 5486 0010 BA68     	 ldr r2,[r7,#8]
 5487 0012 8032     	 add r2,r2,#128
 5488 0014 9200     	 lsl r2,r2,#2
 5489 0016 D358     	 ldr r3,[r2,r3]
 5490 0018 7B61     	 str r3,[r7,#20]
1788:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 5491              	 .loc 2 1788 0
 5492 001a 7B69     	 ldr r3,[r7,#20]
 5493 001c 084A     	 ldr r2,.L243
 5494 001e 1340     	 and r3,r2
 5495 0020 7B61     	 str r3,[r7,#20]
1789:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 5496              	 .loc 2 1789 0
 5497 0022 FB1D     	 add r3,r7,#7
 5498 0024 1B78     	 ldrb r3,[r3]
 5499 0026 DB02     	 lsl r3,r3,#11
 5500 0028 7A69     	 ldr r2,[r7,#20]
 5501 002a 1343     	 orr r3,r2
 5502 002c 7B61     	 str r3,[r7,#20]
1790:../Libraries/XMCLib/src/xmc_vadc.c **** 
1791:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5503              	 .loc 2 1791 0
 5504 002e FB68     	 ldr r3,[r7,#12]
 5505 0030 BA68     	 ldr r2,[r7,#8]
 5506 0032 8032     	 add r2,r2,#128
 5507 0034 9200     	 lsl r2,r2,#2
 5508 0036 7969     	 ldr r1,[r7,#20]
 5509 0038 D150     	 str r1,[r2,r3]
1792:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5510              	 .loc 2 1792 0
 5511 003a BD46     	 mov sp,r7
 5512 003c 06B0     	 add sp,sp,#24
 5513              	 
 5514 003e 80BD     	 pop {r7,pc}
 5515              	.L244:
 5516              	 .align 2
 5517              	.L243:
 5518 0040 FFF7FFFF 	 .word -2049
 5519              	 .cfi_endproc
 5520              	.LFE216:
 5522              	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 5523              	 .align 2
 5524              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 5525              	 .code 16
 5526              	 .thumb_func
 5528              	XMC_VADC_GROUP_ChannelSetResultRegister:
 5529              	.LFB217:
1793:../Libraries/XMCLib/src/xmc_vadc.c **** 
1794:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1795:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1796:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t ch_num,
1797:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t result_reg_num)
1798:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5530              	 .loc 2 1798 0
 5531              	 .cfi_startproc
 5532 0000 80B5     	 push {r7,lr}
 5533              	.LCFI214:
 5534              	 .cfi_def_cfa_offset 8
 5535              	 .cfi_offset 7,-8
 5536              	 .cfi_offset 14,-4
 5537 0002 86B0     	 sub sp,sp,#24
 5538              	.LCFI215:
 5539              	 .cfi_def_cfa_offset 32
 5540 0004 00AF     	 add r7,sp,#0
 5541              	.LCFI216:
 5542              	 .cfi_def_cfa_register 7
 5543 0006 F860     	 str r0,[r7,#12]
 5544 0008 B960     	 str r1,[r7,#8]
 5545 000a 7A60     	 str r2,[r7,#4]
1799:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1800:../Libraries/XMCLib/src/xmc_vadc.c **** 
1801:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1802:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1803:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1804:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1805:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1806:../Libraries/XMCLib/src/xmc_vadc.c **** 
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5546              	 .loc 2 1807 0
 5547 000c FB68     	 ldr r3,[r7,#12]
 5548 000e BA68     	 ldr r2,[r7,#8]
 5549 0010 8032     	 add r2,r2,#128
 5550 0012 9200     	 lsl r2,r2,#2
 5551 0014 D358     	 ldr r3,[r2,r3]
 5552 0016 7B61     	 str r3,[r7,#20]
1808:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 5553              	 .loc 2 1808 0
 5554 0018 7B69     	 ldr r3,[r7,#20]
 5555 001a 084A     	 ldr r2,.L246
 5556 001c 1340     	 and r3,r2
 5557 001e 7B61     	 str r3,[r7,#20]
1809:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 5558              	 .loc 2 1809 0
 5559 0020 7B68     	 ldr r3,[r7,#4]
 5560 0022 1B04     	 lsl r3,r3,#16
 5561 0024 7A69     	 ldr r2,[r7,#20]
 5562 0026 1343     	 orr r3,r2
 5563 0028 7B61     	 str r3,[r7,#20]
1810:../Libraries/XMCLib/src/xmc_vadc.c **** 
1811:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5564              	 .loc 2 1811 0
 5565 002a FB68     	 ldr r3,[r7,#12]
 5566 002c BA68     	 ldr r2,[r7,#8]
 5567 002e 8032     	 add r2,r2,#128
 5568 0030 9200     	 lsl r2,r2,#2
 5569 0032 7969     	 ldr r1,[r7,#20]
 5570 0034 D150     	 str r1,[r2,r3]
1812:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5571              	 .loc 2 1812 0
 5572 0036 BD46     	 mov sp,r7
 5573 0038 06B0     	 add sp,sp,#24
 5574              	 
 5575 003a 80BD     	 pop {r7,pc}
 5576              	.L247:
 5577              	 .align 2
 5578              	.L246:
 5579 003c FFFFF0FF 	 .word -983041
 5580              	 .cfi_endproc
 5581              	.LFE217:
 5583              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 5584              	 .align 2
 5585              	 .global XMC_VADC_GROUP_ChannelSetIclass
 5586              	 .code 16
 5587              	 .thumb_func
 5589              	XMC_VADC_GROUP_ChannelSetIclass:
 5590              	.LFB218:
1813:../Libraries/XMCLib/src/xmc_vadc.c **** 
1814:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1815:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1816:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1817:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1818:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5591              	 .loc 2 1818 0
 5592              	 .cfi_startproc
 5593 0000 80B5     	 push {r7,lr}
 5594              	.LCFI217:
 5595              	 .cfi_def_cfa_offset 8
 5596              	 .cfi_offset 7,-8
 5597              	 .cfi_offset 14,-4
 5598 0002 86B0     	 sub sp,sp,#24
 5599              	.LCFI218:
 5600              	 .cfi_def_cfa_offset 32
 5601 0004 00AF     	 add r7,sp,#0
 5602              	.LCFI219:
 5603              	 .cfi_def_cfa_register 7
 5604 0006 F860     	 str r0,[r7,#12]
 5605 0008 B960     	 str r1,[r7,#8]
 5606 000a FB1D     	 add r3,r7,#7
 5607 000c 1A70     	 strb r2,[r3]
1819:../Libraries/XMCLib/src/xmc_vadc.c **** 
1820:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1821:../Libraries/XMCLib/src/xmc_vadc.c **** 
1822:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1823:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1824:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1825:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1826:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1827:../Libraries/XMCLib/src/xmc_vadc.c **** 
1828:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5608              	 .loc 2 1828 0
 5609 000e FB68     	 ldr r3,[r7,#12]
 5610 0010 BA68     	 ldr r2,[r7,#8]
 5611 0012 8032     	 add r2,r2,#128
 5612 0014 9200     	 lsl r2,r2,#2
 5613 0016 D358     	 ldr r3,[r2,r3]
 5614 0018 7B61     	 str r3,[r7,#20]
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 5615              	 .loc 2 1829 0
 5616 001a 7B69     	 ldr r3,[r7,#20]
 5617 001c 0322     	 mov r2,#3
 5618 001e 9343     	 bic r3,r2
 5619 0020 7B61     	 str r3,[r7,#20]
1830:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 5620              	 .loc 2 1830 0
 5621 0022 FB1D     	 add r3,r7,#7
 5622 0024 1B78     	 ldrb r3,[r3]
 5623 0026 7A69     	 ldr r2,[r7,#20]
 5624 0028 1343     	 orr r3,r2
 5625 002a 7B61     	 str r3,[r7,#20]
1831:../Libraries/XMCLib/src/xmc_vadc.c **** 
1832:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5626              	 .loc 2 1832 0
 5627 002c FB68     	 ldr r3,[r7,#12]
 5628 002e BA68     	 ldr r2,[r7,#8]
 5629 0030 8032     	 add r2,r2,#128
 5630 0032 9200     	 lsl r2,r2,#2
 5631 0034 7969     	 ldr r1,[r7,#20]
 5632 0036 D150     	 str r1,[r2,r3]
1833:../Libraries/XMCLib/src/xmc_vadc.c **** 
1834:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5633              	 .loc 2 1834 0
 5634 0038 BD46     	 mov sp,r7
 5635 003a 06B0     	 add sp,sp,#24
 5636              	 
 5637 003c 80BD     	 pop {r7,pc}
 5638              	 .cfi_endproc
 5639              	.LFE218:
 5641 003e C046     	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 5642              	 .align 2
 5643              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 5644              	 .code 16
 5645              	 .thumb_func
 5647              	XMC_VADC_GROUP_ChannelGetResultRegister:
 5648              	.LFB219:
1835:../Libraries/XMCLib/src/xmc_vadc.c **** 
1836:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1837:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1838:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5649              	 .loc 2 1838 0
 5650              	 .cfi_startproc
 5651 0000 80B5     	 push {r7,lr}
 5652              	.LCFI220:
 5653              	 .cfi_def_cfa_offset 8
 5654              	 .cfi_offset 7,-8
 5655              	 .cfi_offset 14,-4
 5656 0002 84B0     	 sub sp,sp,#16
 5657              	.LCFI221:
 5658              	 .cfi_def_cfa_offset 24
 5659 0004 00AF     	 add r7,sp,#0
 5660              	.LCFI222:
 5661              	 .cfi_def_cfa_register 7
 5662 0006 7860     	 str r0,[r7,#4]
 5663 0008 3960     	 str r1,[r7]
1839:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1840:../Libraries/XMCLib/src/xmc_vadc.c **** 
1841:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1843:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1844:../Libraries/XMCLib/src/xmc_vadc.c **** 
1845:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 5664              	 .loc 2 1845 0
 5665 000a 7B68     	 ldr r3,[r7,#4]
 5666 000c 3A68     	 ldr r2,[r7]
 5667 000e 8032     	 add r2,r2,#128
 5668 0010 9200     	 lsl r2,r2,#2
 5669 0012 D258     	 ldr r2,[r2,r3]
 5670 0014 F023     	 mov r3,#240
 5671 0016 1B03     	 lsl r3,r3,#12
 5672 0018 1340     	 and r3,r2
 5673 001a 1A0C     	 lsr r2,r3,#16
 5674 001c 0F23     	 mov r3,#15
 5675 001e FB18     	 add r3,r7,r3
 5676 0020 1A70     	 strb r2,[r3]
1846:../Libraries/XMCLib/src/xmc_vadc.c **** 
1847:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 5677              	 .loc 2 1847 0
 5678 0022 0F23     	 mov r3,#15
 5679 0024 FB18     	 add r3,r7,r3
 5680 0026 1B78     	 ldrb r3,[r3]
1848:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5681              	 .loc 2 1848 0
 5682 0028 181C     	 mov r0,r3
 5683 002a BD46     	 mov sp,r7
 5684 002c 04B0     	 add sp,sp,#16
 5685              	 
 5686 002e 80BD     	 pop {r7,pc}
 5687              	 .cfi_endproc
 5688              	.LFE219:
 5690              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 5691              	 .align 2
 5692              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 5693              	 .code 16
 5694              	 .thumb_func
 5696              	XMC_VADC_GROUP_ChannelTriggerEvent:
 5697              	.LFB220:
1849:../Libraries/XMCLib/src/xmc_vadc.c **** 
1850:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1851:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1852:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5698              	 .loc 2 1852 0
 5699              	 .cfi_startproc
 5700 0000 80B5     	 push {r7,lr}
 5701              	.LCFI223:
 5702              	 .cfi_def_cfa_offset 8
 5703              	 .cfi_offset 7,-8
 5704              	 .cfi_offset 14,-4
 5705 0002 84B0     	 sub sp,sp,#16
 5706              	.LCFI224:
 5707              	 .cfi_def_cfa_offset 24
 5708 0004 00AF     	 add r7,sp,#0
 5709              	.LCFI225:
 5710              	 .cfi_def_cfa_register 7
 5711 0006 7860     	 str r0,[r7,#4]
 5712 0008 3960     	 str r1,[r7]
1853:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1854:../Libraries/XMCLib/src/xmc_vadc.c **** 
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1856:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1857:../Libraries/XMCLib/src/xmc_vadc.c **** 
1858:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 5713              	 .loc 2 1858 0
 5714 000a 7A68     	 ldr r2,[r7,#4]
 5715 000c C023     	 mov r3,#192
 5716 000e 5B00     	 lsl r3,r3,#1
 5717 0010 D358     	 ldr r3,[r2,r3]
 5718 0012 FB60     	 str r3,[r7,#12]
1859:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 5719              	 .loc 2 1859 0
 5720 0014 3B68     	 ldr r3,[r7]
 5721 0016 0122     	 mov r2,#1
 5722 0018 9A40     	 lsl r2,r2,r3
 5723 001a 131C     	 mov r3,r2
 5724 001c FA68     	 ldr r2,[r7,#12]
 5725 001e 1343     	 orr r3,r2
 5726 0020 FB60     	 str r3,[r7,#12]
1860:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 5727              	 .loc 2 1860 0
 5728 0022 7A68     	 ldr r2,[r7,#4]
 5729 0024 C023     	 mov r3,#192
 5730 0026 5B00     	 lsl r3,r3,#1
 5731 0028 F968     	 ldr r1,[r7,#12]
 5732 002a D150     	 str r1,[r2,r3]
1861:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5733              	 .loc 2 1861 0
 5734 002c BD46     	 mov sp,r7
 5735 002e 04B0     	 add sp,sp,#16
 5736              	 
 5737 0030 80BD     	 pop {r7,pc}
 5738              	 .cfi_endproc
 5739              	.LFE220:
 5741 0032 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 5742              	 .align 2
 5743              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 5744              	 .code 16
 5745              	 .thumb_func
 5747              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 5748              	.LFB221:
1862:../Libraries/XMCLib/src/xmc_vadc.c **** 
1863:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1864:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1865:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t ch_num,
1866:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_SR_t sr)
1867:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5749              	 .loc 2 1867 0
 5750              	 .cfi_startproc
 5751 0000 80B5     	 push {r7,lr}
 5752              	.LCFI226:
 5753              	 .cfi_def_cfa_offset 8
 5754              	 .cfi_offset 7,-8
 5755              	 .cfi_offset 14,-4
 5756 0002 86B0     	 sub sp,sp,#24
 5757              	.LCFI227:
 5758              	 .cfi_def_cfa_offset 32
 5759 0004 00AF     	 add r7,sp,#0
 5760              	.LCFI228:
 5761              	 .cfi_def_cfa_register 7
 5762 0006 F860     	 str r0,[r7,#12]
 5763 0008 B960     	 str r1,[r7,#8]
 5764 000a FB1D     	 add r3,r7,#7
 5765 000c 1A70     	 strb r2,[r3]
1868:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1869:../Libraries/XMCLib/src/xmc_vadc.c **** 
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1871:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1872:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1874:../Libraries/XMCLib/src/xmc_vadc.c **** 
1875:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 5766              	 .loc 2 1875 0
 5767 000e FA68     	 ldr r2,[r7,#12]
 5768 0010 D023     	 mov r3,#208
 5769 0012 5B00     	 lsl r3,r3,#1
 5770 0014 D358     	 ldr r3,[r2,r3]
 5771 0016 7B61     	 str r3,[r7,#20]
1876:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 5772              	 .loc 2 1876 0
 5773 0018 BB68     	 ldr r3,[r7,#8]
 5774 001a 9B00     	 lsl r3,r3,#2
 5775 001c 1A1C     	 mov r2,r3
 5776 001e 0F23     	 mov r3,#15
 5777 0020 9340     	 lsl r3,r3,r2
 5778 0022 DA43     	 mvn r2,r3
 5779 0024 7B69     	 ldr r3,[r7,#20]
 5780 0026 1340     	 and r3,r2
 5781 0028 7B61     	 str r3,[r7,#20]
1877:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 5782              	 .loc 2 1877 0
 5783 002a FB1D     	 add r3,r7,#7
 5784 002c 1B78     	 ldrb r3,[r3]
 5785 002e BA68     	 ldr r2,[r7,#8]
 5786 0030 9200     	 lsl r2,r2,#2
 5787 0032 9340     	 lsl r3,r3,r2
 5788 0034 7A69     	 ldr r2,[r7,#20]
 5789 0036 1343     	 orr r3,r2
 5790 0038 7B61     	 str r3,[r7,#20]
1878:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 5791              	 .loc 2 1878 0
 5792 003a FA68     	 ldr r2,[r7,#12]
 5793 003c D023     	 mov r3,#208
 5794 003e 5B00     	 lsl r3,r3,#1
 5795 0040 7969     	 ldr r1,[r7,#20]
 5796 0042 D150     	 str r1,[r2,r3]
1879:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5797              	 .loc 2 1879 0
 5798 0044 BD46     	 mov sp,r7
 5799 0046 06B0     	 add sp,sp,#24
 5800              	 
 5801 0048 80BD     	 pop {r7,pc}
 5802              	 .cfi_endproc
 5803              	.LFE221:
 5805 004a C046     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 5806              	 .align 2
 5807              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 5808              	 .code 16
 5809              	 .thumb_func
 5811              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 5812              	.LFB222:
1880:../Libraries/XMCLib/src/xmc_vadc.c **** 
1881:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1882:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1883:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t ch_num,
1884:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_CHANNEL_EVGEN_t criteria)
1885:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5813              	 .loc 2 1885 0
 5814              	 .cfi_startproc
 5815 0000 80B5     	 push {r7,lr}
 5816              	.LCFI229:
 5817              	 .cfi_def_cfa_offset 8
 5818              	 .cfi_offset 7,-8
 5819              	 .cfi_offset 14,-4
 5820 0002 86B0     	 sub sp,sp,#24
 5821              	.LCFI230:
 5822              	 .cfi_def_cfa_offset 32
 5823 0004 00AF     	 add r7,sp,#0
 5824              	.LCFI231:
 5825              	 .cfi_def_cfa_register 7
 5826 0006 F860     	 str r0,[r7,#12]
 5827 0008 B960     	 str r1,[r7,#8]
 5828 000a FB1D     	 add r3,r7,#7
 5829 000c 1A70     	 strb r2,[r3]
1886:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1887:../Libraries/XMCLib/src/xmc_vadc.c **** 
1888:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1889:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1890:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1891:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1892:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1893:../Libraries/XMCLib/src/xmc_vadc.c **** 
1894:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5830              	 .loc 2 1894 0
 5831 000e FB68     	 ldr r3,[r7,#12]
 5832 0010 BA68     	 ldr r2,[r7,#8]
 5833 0012 8032     	 add r2,r2,#128
 5834 0014 9200     	 lsl r2,r2,#2
 5835 0016 D358     	 ldr r3,[r2,r3]
 5836 0018 7B61     	 str r3,[r7,#20]
1895:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 5837              	 .loc 2 1895 0
 5838 001a 7B69     	 ldr r3,[r7,#20]
 5839 001c 084A     	 ldr r2,.L254
 5840 001e 1340     	 and r3,r2
 5841 0020 7B61     	 str r3,[r7,#20]
1896:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 5842              	 .loc 2 1896 0
 5843 0022 FB1D     	 add r3,r7,#7
 5844 0024 1B78     	 ldrb r3,[r3]
 5845 0026 1B02     	 lsl r3,r3,#8
 5846 0028 7A69     	 ldr r2,[r7,#20]
 5847 002a 1343     	 orr r3,r2
 5848 002c 7B61     	 str r3,[r7,#20]
1897:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5849              	 .loc 2 1897 0
 5850 002e FB68     	 ldr r3,[r7,#12]
 5851 0030 BA68     	 ldr r2,[r7,#8]
 5852 0032 8032     	 add r2,r2,#128
 5853 0034 9200     	 lsl r2,r2,#2
 5854 0036 7969     	 ldr r1,[r7,#20]
 5855 0038 D150     	 str r1,[r2,r3]
1898:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5856              	 .loc 2 1898 0
 5857 003a BD46     	 mov sp,r7
 5858 003c 06B0     	 add sp,sp,#24
 5859              	 
 5860 003e 80BD     	 pop {r7,pc}
 5861              	.L255:
 5862              	 .align 2
 5863              	.L254:
 5864 0040 FFFCFFFF 	 .word -769
 5865              	 .cfi_endproc
 5866              	.LFE222:
 5868              	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 5869              	 .align 2
 5870              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 5871              	 .code 16
 5872              	 .thumb_func
 5874              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 5875              	.LFB223:
1899:../Libraries/XMCLib/src/xmc_vadc.c **** 
1900:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1901:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1902:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t ch_num,
1903:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1904:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_CHANNEL_BOUNDARY_t selection)
1905:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5876              	 .loc 2 1905 0
 5877              	 .cfi_startproc
 5878 0000 80B5     	 push {r7,lr}
 5879              	.LCFI232:
 5880              	 .cfi_def_cfa_offset 8
 5881              	 .cfi_offset 7,-8
 5882              	 .cfi_offset 14,-4
 5883 0002 84B0     	 sub sp,sp,#16
 5884              	.LCFI233:
 5885              	 .cfi_def_cfa_offset 24
 5886 0004 00AF     	 add r7,sp,#0
 5887              	.LCFI234:
 5888              	 .cfi_def_cfa_register 7
 5889 0006 F860     	 str r0,[r7,#12]
 5890 0008 B960     	 str r1,[r7,#8]
 5891 000a 191C     	 mov r1,r3
 5892 000c FB1D     	 add r3,r7,#7
 5893 000e 1A70     	 strb r2,[r3]
 5894 0010 BB1D     	 add r3,r7,#6
 5895 0012 0A1C     	 add r2,r1,#0
 5896 0014 1A70     	 strb r2,[r3]
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1908:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1909:../Libraries/XMCLib/src/xmc_vadc.c **** 
1910:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 5897              	 .loc 2 1910 0
 5898 0016 FB68     	 ldr r3,[r7,#12]
 5899 0018 BA68     	 ldr r2,[r7,#8]
 5900 001a 8032     	 add r2,r2,#128
 5901 001c 9200     	 lsl r2,r2,#2
 5902 001e D358     	 ldr r3,[r2,r3]
 5903 0020 FA1D     	 add r2,r7,#7
 5904 0022 1278     	 ldrb r2,[r2]
 5905 0024 3021     	 mov r1,#48
 5906 0026 9140     	 lsl r1,r1,r2
 5907 0028 0A1C     	 mov r2,r1
 5908 002a D243     	 mvn r2,r2
 5909 002c 1A40     	 and r2,r3
 5910 002e 111C     	 mov r1,r2
 5911 0030 FB68     	 ldr r3,[r7,#12]
 5912 0032 BA68     	 ldr r2,[r7,#8]
 5913 0034 8032     	 add r2,r2,#128
 5914 0036 9200     	 lsl r2,r2,#2
 5915 0038 D150     	 str r1,[r2,r3]
1911:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection << ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundar
 5916              	 .loc 2 1911 0
 5917 003a FB68     	 ldr r3,[r7,#12]
 5918 003c BA68     	 ldr r2,[r7,#8]
 5919 003e 8032     	 add r2,r2,#128
 5920 0040 9200     	 lsl r2,r2,#2
 5921 0042 D358     	 ldr r3,[r2,r3]
 5922 0044 BA1D     	 add r2,r7,#6
 5923 0046 1278     	 ldrb r2,[r2]
 5924 0048 F91D     	 add r1,r7,#7
 5925 004a 0978     	 ldrb r1,[r1]
 5926 004c 0431     	 add r1,r1,#4
 5927 004e 8A40     	 lsl r2,r2,r1
 5928 0050 1343     	 orr r3,r2
 5929 0052 191C     	 mov r1,r3
 5930 0054 FB68     	 ldr r3,[r7,#12]
 5931 0056 BA68     	 ldr r2,[r7,#8]
 5932 0058 8032     	 add r2,r2,#128
 5933 005a 9200     	 lsl r2,r2,#2
 5934 005c D150     	 str r1,[r2,r3]
1912:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5935              	 .loc 2 1912 0
 5936 005e BD46     	 mov sp,r7
 5937 0060 04B0     	 add sp,sp,#16
 5938              	 
 5939 0062 80BD     	 pop {r7,pc}
 5940              	 .cfi_endproc
 5941              	.LFE223:
 5943              	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 5944              	 .align 2
 5945              	 .global XMC_VADC_GROUP_AddResultToFifo
 5946              	 .code 16
 5947              	 .thumb_func
 5949              	XMC_VADC_GROUP_AddResultToFifo:
 5950              	.LFB224:
1913:../Libraries/XMCLib/src/xmc_vadc.c **** 
1914:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */
1915:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1916:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5951              	 .loc 2 1916 0
 5952              	 .cfi_startproc
 5953 0000 80B5     	 push {r7,lr}
 5954              	.LCFI235:
 5955              	 .cfi_def_cfa_offset 8
 5956              	 .cfi_offset 7,-8
 5957              	 .cfi_offset 14,-4
 5958 0002 84B0     	 sub sp,sp,#16
 5959              	.LCFI236:
 5960              	 .cfi_def_cfa_offset 24
 5961 0004 00AF     	 add r7,sp,#0
 5962              	.LCFI237:
 5963              	 .cfi_def_cfa_register 7
 5964 0006 7860     	 str r0,[r7,#4]
 5965 0008 3960     	 str r1,[r7]
1917:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1918:../Libraries/XMCLib/src/xmc_vadc.c **** 
1919:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1920:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1921:../Libraries/XMCLib/src/xmc_vadc.c **** 
1922:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1923:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 5966              	 .loc 2 1923 0
 5967 000a 7B68     	 ldr r3,[r7,#4]
 5968 000c 3A68     	 ldr r2,[r7]
 5969 000e A032     	 add r2,r2,#160
 5970 0010 9200     	 lsl r2,r2,#2
 5971 0012 D358     	 ldr r3,[r2,r3]
 5972 0014 FB60     	 str r3,[r7,#12]
1924:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 5973              	 .loc 2 1924 0
 5974 0016 FB68     	 ldr r3,[r7,#12]
 5975 0018 084A     	 ldr r2,.L258
 5976 001a 1340     	 and r3,r2
 5977 001c FB60     	 str r3,[r7,#12]
1925:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 5978              	 .loc 2 1926 0
 5979 001e FB68     	 ldr r3,[r7,#12]
 5980 0020 8022     	 mov r2,#128
 5981 0022 9204     	 lsl r2,r2,#18
 5982 0024 1343     	 orr r3,r2
 5983 0026 FB60     	 str r3,[r7,#12]
1927:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 5984              	 .loc 2 1927 0
 5985 0028 7B68     	 ldr r3,[r7,#4]
 5986 002a 3A68     	 ldr r2,[r7]
 5987 002c A032     	 add r2,r2,#160
 5988 002e 9200     	 lsl r2,r2,#2
 5989 0030 F968     	 ldr r1,[r7,#12]
 5990 0032 D150     	 str r1,[r2,r3]
1928:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5991              	 .loc 2 1928 0
 5992 0034 BD46     	 mov sp,r7
 5993 0036 04B0     	 add sp,sp,#16
 5994              	 
 5995 0038 80BD     	 pop {r7,pc}
 5996              	.L259:
 5997 003a C046     	 .align 2
 5998              	.L258:
 5999 003c FFFFFFF9 	 .word -100663297
 6000              	 .cfi_endproc
 6001              	.LFE224:
 6003              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 6004              	 .align 2
 6005              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 6006              	 .code 16
 6007              	 .thumb_func
 6009              	XMC_VADC_GROUP_SetResultFastCompareValue:
 6010              	.LFB225:
1929:../Libraries/XMCLib/src/xmc_vadc.c **** 
1930:../Libraries/XMCLib/src/xmc_vadc.c **** 
1931:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1932:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1933:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t res_reg,
1934:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_RESULT_SIZE_t compare_val)
1935:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6011              	 .loc 2 1935 0
 6012              	 .cfi_startproc
 6013 0000 80B5     	 push {r7,lr}
 6014              	.LCFI238:
 6015              	 .cfi_def_cfa_offset 8
 6016              	 .cfi_offset 7,-8
 6017              	 .cfi_offset 14,-4
 6018 0002 86B0     	 sub sp,sp,#24
 6019              	.LCFI239:
 6020              	 .cfi_def_cfa_offset 32
 6021 0004 00AF     	 add r7,sp,#0
 6022              	.LCFI240:
 6023              	 .cfi_def_cfa_register 7
 6024 0006 F860     	 str r0,[r7,#12]
 6025 0008 B960     	 str r1,[r7,#8]
 6026 000a BB1D     	 add r3,r7,#6
 6027 000c 1A80     	 strh r2,[r3]
1936:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 6028              	 .loc 2 1936 0
 6029 000e FB68     	 ldr r3,[r7,#12]
 6030 0010 BA68     	 ldr r2,[r7,#8]
 6031 0012 C032     	 add r2,r2,#192
 6032 0014 9200     	 lsl r2,r2,#2
 6033 0016 D358     	 ldr r3,[r2,r3]
 6034 0018 7B61     	 str r3,[r7,#20]
1937:../Libraries/XMCLib/src/xmc_vadc.c **** 
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1939:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1940:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1941:../Libraries/XMCLib/src/xmc_vadc.c **** 
1942:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6035              	 .loc 2 1942 0
 6036 001a 7B69     	 ldr r3,[r7,#20]
 6037 001c 1B0C     	 lsr r3,r3,#16
 6038 001e 1B04     	 lsl r3,r3,#16
 6039 0020 7B61     	 str r3,[r7,#20]
1943:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 6040              	 .loc 2 1943 0
 6041 0022 BB1D     	 add r3,r7,#6
 6042 0024 1B88     	 ldrh r3,[r3]
 6043 0026 9B00     	 lsl r3,r3,#2
 6044 0028 7A69     	 ldr r2,[r7,#20]
 6045 002a 1343     	 orr r3,r2
 6046 002c 7B61     	 str r3,[r7,#20]
1944:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 6047              	 .loc 2 1944 0
 6048 002e FB68     	 ldr r3,[r7,#12]
 6049 0030 BA68     	 ldr r2,[r7,#8]
 6050 0032 C032     	 add r2,r2,#192
 6051 0034 9200     	 lsl r2,r2,#2
 6052 0036 7969     	 ldr r1,[r7,#20]
 6053 0038 D150     	 str r1,[r2,r3]
1945:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6054              	 .loc 2 1945 0
 6055 003a BD46     	 mov sp,r7
 6056 003c 06B0     	 add sp,sp,#24
 6057              	 
 6058 003e 80BD     	 pop {r7,pc}
 6059              	 .cfi_endproc
 6060              	.LFE225:
 6062              	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 6063              	 .align 2
 6064              	 .global XMC_VADC_GROUP_GetFastCompareResult
 6065              	 .code 16
 6066              	 .thumb_func
 6068              	XMC_VADC_GROUP_GetFastCompareResult:
 6069              	.LFB226:
1946:../Libraries/XMCLib/src/xmc_vadc.c **** 
1947:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1948:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1949:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6070              	 .loc 2 1949 0
 6071              	 .cfi_startproc
 6072 0000 80B5     	 push {r7,lr}
 6073              	.LCFI241:
 6074              	 .cfi_def_cfa_offset 8
 6075              	 .cfi_offset 7,-8
 6076              	 .cfi_offset 14,-4
 6077 0002 84B0     	 sub sp,sp,#16
 6078              	.LCFI242:
 6079              	 .cfi_def_cfa_offset 24
 6080 0004 00AF     	 add r7,sp,#0
 6081              	.LCFI243:
 6082              	 .cfi_def_cfa_register 7
 6083 0006 7860     	 str r0,[r7,#4]
 6084 0008 3960     	 str r1,[r7]
1950:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1951:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1952:../Libraries/XMCLib/src/xmc_vadc.c **** 
1953:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1954:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1955:../Libraries/XMCLib/src/xmc_vadc.c **** 
1956:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 6085              	 .loc 2 1956 0
 6086 000a 7B68     	 ldr r3,[r7,#4]
 6087 000c 3A68     	 ldr r2,[r7]
 6088 000e C032     	 add r2,r2,#192
 6089 0010 9200     	 lsl r2,r2,#2
 6090 0012 D358     	 ldr r3,[r2,r3]
 6091 0014 BB60     	 str r3,[r7,#8]
1957:../Libraries/XMCLib/src/xmc_vadc.c **** 
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 6092              	 .loc 2 1958 0
 6093 0016 BB68     	 ldr r3,[r7,#8]
 6094 0018 002B     	 cmp r3,#0
 6095 001a 08DA     	 bge .L262
1959:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1960:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 6096              	 .loc 2 1960 0
 6097 001c BB68     	 ldr r3,[r7,#8]
 6098 001e 9B0F     	 lsr r3,r3,#30
 6099 0020 DAB2     	 uxtb r2,r3
 6100 0022 0F23     	 mov r3,#15
 6101 0024 FB18     	 add r3,r7,r3
 6102 0026 0121     	 mov r1,#1
 6103 0028 0A40     	 and r2,r1
 6104 002a 1A70     	 strb r2,[r3]
 6105 002c 03E0     	 b .L263
 6106              	.L262:
1961:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1962:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1964:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 6107              	 .loc 2 1964 0
 6108 002e 0F23     	 mov r3,#15
 6109 0030 FB18     	 add r3,r7,r3
 6110 0032 0222     	 mov r2,#2
 6111 0034 1A70     	 strb r2,[r3]
 6112              	.L263:
1965:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1966:../Libraries/XMCLib/src/xmc_vadc.c **** 
1967:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 6113              	 .loc 2 1967 0
 6114 0036 0F23     	 mov r3,#15
 6115 0038 FB18     	 add r3,r7,r3
 6116 003a 1B78     	 ldrb r3,[r3]
1968:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6117              	 .loc 2 1968 0
 6118 003c 181C     	 mov r0,r3
 6119 003e BD46     	 mov sp,r7
 6120 0040 04B0     	 add sp,sp,#16
 6121              	 
 6122 0042 80BD     	 pop {r7,pc}
 6123              	 .cfi_endproc
 6124              	.LFE226:
 6126              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 6127              	 .align 2
 6128              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 6129              	 .code 16
 6130              	 .thumb_func
 6132              	XMC_VADC_GROUP_SetResultSubtractionValue:
 6133              	.LFB227:
1969:../Libraries/XMCLib/src/xmc_vadc.c **** 
1970:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1971:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1972:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint16_t subtraction_val)
1973:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6134              	 .loc 2 1973 0
 6135              	 .cfi_startproc
 6136 0000 80B5     	 push {r7,lr}
 6137              	.LCFI244:
 6138              	 .cfi_def_cfa_offset 8
 6139              	 .cfi_offset 7,-8
 6140              	 .cfi_offset 14,-4
 6141 0002 84B0     	 sub sp,sp,#16
 6142              	.LCFI245:
 6143              	 .cfi_def_cfa_offset 24
 6144 0004 00AF     	 add r7,sp,#0
 6145              	.LCFI246:
 6146              	 .cfi_def_cfa_register 7
 6147 0006 7860     	 str r0,[r7,#4]
 6148 0008 0A1C     	 mov r2,r1
 6149 000a BB1C     	 add r3,r7,#2
 6150 000c 1A80     	 strh r2,[r3]
1974:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1975:../Libraries/XMCLib/src/xmc_vadc.c **** 
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1977:../Libraries/XMCLib/src/xmc_vadc.c **** 
1978:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 6151              	 .loc 2 1978 0
 6152 000e 7A68     	 ldr r2,[r7,#4]
 6153 0010 C023     	 mov r3,#192
 6154 0012 9B00     	 lsl r3,r3,#2
 6155 0014 D358     	 ldr r3,[r2,r3]
 6156 0016 FB60     	 str r3,[r7,#12]
1979:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6157              	 .loc 2 1979 0
 6158 0018 FB68     	 ldr r3,[r7,#12]
 6159 001a 1B0C     	 lsr r3,r3,#16
 6160 001c 1B04     	 lsl r3,r3,#16
 6161 001e FB60     	 str r3,[r7,#12]
1980:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 6162              	 .loc 2 1980 0
 6163 0020 BB1C     	 add r3,r7,#2
 6164 0022 1B88     	 ldrh r3,[r3]
 6165 0024 FA68     	 ldr r2,[r7,#12]
 6166 0026 1343     	 orr r3,r2
 6167 0028 FB60     	 str r3,[r7,#12]
1981:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 6168              	 .loc 2 1981 0
 6169 002a 7A68     	 ldr r2,[r7,#4]
 6170 002c C023     	 mov r3,#192
 6171 002e 9B00     	 lsl r3,r3,#2
 6172 0030 F968     	 ldr r1,[r7,#12]
 6173 0032 D150     	 str r1,[r2,r3]
1982:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6174              	 .loc 2 1982 0
 6175 0034 BD46     	 mov sp,r7
 6176 0036 04B0     	 add sp,sp,#16
 6177              	 
 6178 0038 80BD     	 pop {r7,pc}
 6179              	 .cfi_endproc
 6180              	.LFE227:
 6182 003a C046     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 6183              	 .align 2
 6184              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 6185              	 .code 16
 6186              	 .thumb_func
 6188              	XMC_VADC_GROUP_SetResultInterruptNode:
 6189              	.LFB228:
1983:../Libraries/XMCLib/src/xmc_vadc.c **** 
1984:../Libraries/XMCLib/src/xmc_vadc.c **** 
1985:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1986:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1987:../Libraries/XMCLib/src/xmc_vadc.c ****     const uint32_t res_reg,
1988:../Libraries/XMCLib/src/xmc_vadc.c ****     const XMC_VADC_SR_t sr)
1989:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6190              	 .loc 2 1989 0
 6191              	 .cfi_startproc
 6192 0000 80B5     	 push {r7,lr}
 6193              	.LCFI247:
 6194              	 .cfi_def_cfa_offset 8
 6195              	 .cfi_offset 7,-8
 6196              	 .cfi_offset 14,-4
 6197 0002 86B0     	 sub sp,sp,#24
 6198              	.LCFI248:
 6199              	 .cfi_def_cfa_offset 32
 6200 0004 00AF     	 add r7,sp,#0
 6201              	.LCFI249:
 6202              	 .cfi_def_cfa_register 7
 6203 0006 F860     	 str r0,[r7,#12]
 6204 0008 B960     	 str r1,[r7,#8]
 6205 000a FB1D     	 add r3,r7,#7
 6206 000c 1A70     	 strb r2,[r3]
1990:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1991:../Libraries/XMCLib/src/xmc_vadc.c **** 
1992:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1993:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1994:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1995:../Libraries/XMCLib/src/xmc_vadc.c **** 
1996:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 6207              	 .loc 2 1996 0
 6208 000e BB68     	 ldr r3,[r7,#8]
 6209 0010 072B     	 cmp r3,#7
 6210 0012 1BD8     	 bhi .L267
1997:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1998:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 6211              	 .loc 2 1998 0
 6212 0014 FA68     	 ldr r2,[r7,#12]
 6213 0016 D823     	 mov r3,#216
 6214 0018 5B00     	 lsl r3,r3,#1
 6215 001a D358     	 ldr r3,[r2,r3]
 6216 001c 7B61     	 str r3,[r7,#20]
1999:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 6217              	 .loc 2 1999 0
 6218 001e BB68     	 ldr r3,[r7,#8]
 6219 0020 9B00     	 lsl r3,r3,#2
 6220 0022 1A1C     	 mov r2,r3
 6221 0024 0F23     	 mov r3,#15
 6222 0026 9340     	 lsl r3,r3,r2
 6223 0028 DA43     	 mvn r2,r3
 6224 002a 7B69     	 ldr r3,[r7,#20]
 6225 002c 1340     	 and r3,r2
 6226 002e 7B61     	 str r3,[r7,#20]
2000:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 6227              	 .loc 2 2000 0
 6228 0030 FB1D     	 add r3,r7,#7
 6229 0032 1B78     	 ldrb r3,[r3]
 6230 0034 BA68     	 ldr r2,[r7,#8]
 6231 0036 9200     	 lsl r2,r2,#2
 6232 0038 9340     	 lsl r3,r3,r2
 6233 003a 7A69     	 ldr r2,[r7,#20]
 6234 003c 1343     	 orr r3,r2
 6235 003e 7B61     	 str r3,[r7,#20]
2001:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 6236              	 .loc 2 2001 0
 6237 0040 FA68     	 ldr r2,[r7,#12]
 6238 0042 D823     	 mov r3,#216
 6239 0044 5B00     	 lsl r3,r3,#1
 6240 0046 7969     	 ldr r1,[r7,#20]
 6241 0048 D150     	 str r1,[r2,r3]
 6242 004a 20E0     	 b .L266
 6243              	.L267:
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2003:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2004:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2005:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 6244              	 .loc 2 2005 0
 6245 004c FA68     	 ldr r2,[r7,#12]
 6246 004e DA23     	 mov r3,#218
 6247 0050 5B00     	 lsl r3,r3,#1
 6248 0052 D358     	 ldr r3,[r2,r3]
 6249 0054 7B61     	 str r3,[r7,#20]
2006:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 6250              	 .loc 2 2006 0
 6251 0056 BB68     	 ldr r3,[r7,#8]
 6252 0058 0E4A     	 ldr r2,.L269
 6253 005a 9446     	 mov ip,r2
 6254 005c 6344     	 add r3,r3,ip
 6255 005e 9B00     	 lsl r3,r3,#2
 6256 0060 1A1C     	 mov r2,r3
 6257 0062 0F23     	 mov r3,#15
 6258 0064 9340     	 lsl r3,r3,r2
 6259 0066 DA43     	 mvn r2,r3
 6260 0068 7B69     	 ldr r3,[r7,#20]
 6261 006a 1340     	 and r3,r2
 6262 006c 7B61     	 str r3,[r7,#20]
2007:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 6263              	 .loc 2 2007 0
 6264 006e FB1D     	 add r3,r7,#7
 6265 0070 1B78     	 ldrb r3,[r3]
 6266 0072 BA68     	 ldr r2,[r7,#8]
 6267 0074 0749     	 ldr r1,.L269
 6268 0076 8C46     	 mov ip,r1
 6269 0078 6244     	 add r2,r2,ip
 6270 007a 9200     	 lsl r2,r2,#2
 6271 007c 9340     	 lsl r3,r3,r2
 6272 007e 7A69     	 ldr r2,[r7,#20]
 6273 0080 1343     	 orr r3,r2
 6274 0082 7B61     	 str r3,[r7,#20]
2008:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 6275              	 .loc 2 2008 0
 6276 0084 FA68     	 ldr r2,[r7,#12]
 6277 0086 DA23     	 mov r3,#218
 6278 0088 5B00     	 lsl r3,r3,#1
 6279 008a 7969     	 ldr r1,[r7,#20]
 6280 008c D150     	 str r1,[r2,r3]
 6281              	.L266:
2009:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2010:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6282              	 .loc 2 2010 0
 6283 008e BD46     	 mov sp,r7
 6284 0090 06B0     	 add sp,sp,#24
 6285              	 
 6286 0092 80BD     	 pop {r7,pc}
 6287              	.L270:
 6288              	 .align 2
 6289              	.L269:
 6290 0094 F8FFFF3F 	 .word 1073741816
 6291              	 .cfi_endproc
 6292              	.LFE228:
 6294              	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 6295              	 .align 2
 6296              	 .global XMC_VADC_GROUP_GetResultFifoTail
 6297              	 .code 16
 6298              	 .thumb_func
 6300              	XMC_VADC_GROUP_GetResultFifoTail:
 6301              	.LFB229:
2011:../Libraries/XMCLib/src/xmc_vadc.c **** 
2012:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
2013:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
2014:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6302              	 .loc 2 2014 0
 6303              	 .cfi_startproc
 6304 0000 80B5     	 push {r7,lr}
 6305              	.LCFI250:
 6306              	 .cfi_def_cfa_offset 8
 6307              	 .cfi_offset 7,-8
 6308              	 .cfi_offset 14,-4
 6309 0002 86B0     	 sub sp,sp,#24
 6310              	.LCFI251:
 6311              	 .cfi_def_cfa_offset 32
 6312 0004 00AF     	 add r7,sp,#0
 6313              	.LCFI252:
 6314              	 .cfi_def_cfa_register 7
 6315 0006 7860     	 str r0,[r7,#4]
 6316 0008 3960     	 str r1,[r7]
2015:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
2016:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2017:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2018:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2019:../Libraries/XMCLib/src/xmc_vadc.c **** 
2020:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2021:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2022:../Libraries/XMCLib/src/xmc_vadc.c **** 
2023:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 6317              	 .loc 2 2023 0
 6318 000a 0023     	 mov r3,#0
 6319 000c 7B61     	 str r3,[r7,#20]
2024:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag = (bool)false;
 6320              	 .loc 2 2024 0
 6321 000e 0F23     	 mov r3,#15
 6322 0010 FB18     	 add r3,r7,r3
 6323 0012 0022     	 mov r2,#0
 6324 0014 1A70     	 strb r2,[r3]
2025:../Libraries/XMCLib/src/xmc_vadc.c **** 
2026:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6325              	 .loc 2 2026 0
 6326 0016 7A68     	 ldr r2,[r7,#4]
 6327 0018 3B68     	 ldr r3,[r7]
 6328 001a 101C     	 mov r0,r2
 6329 001c 191C     	 mov r1,r3
 6330 001e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6331 0022 031E     	 sub r3,r0,#0
 6332 0024 02D0     	 beq .L272
2027:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2028:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 6333              	 .loc 2 2028 0
 6334 0026 3B68     	 ldr r3,[r7]
 6335 0028 013B     	 sub r3,r3,#1
 6336 002a 3B60     	 str r3,[r7]
 6337              	.L272:
2029:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2030:../Libraries/XMCLib/src/xmc_vadc.c **** 
2031:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2032:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 6338              	 .loc 2 2032 0
 6339 002c 3B68     	 ldr r3,[r7]
 6340 002e 002B     	 cmp r3,#0
 6341 0030 02D1     	 bne .L273
2033:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2034:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 6342              	 .loc 2 2034 0
 6343 0032 0023     	 mov r3,#0
 6344 0034 7B61     	 str r3,[r7,#20]
 6345 0036 2DE0     	 b .L274
 6346              	.L273:
2035:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2036:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2037:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2038:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2039:../Libraries/XMCLib/src/xmc_vadc.c ****     for (i = (int32_t)res_reg; i >= (int32_t)0; i--)
 6347              	 .loc 2 2039 0
 6348 0038 3B68     	 ldr r3,[r7]
 6349 003a 3B61     	 str r3,[r7,#16]
 6350 003c 27E0     	 b .L275
 6351              	.L280:
2040:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2041:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 6352              	 .loc 2 2041 0
 6353 003e 7B68     	 ldr r3,[r7,#4]
 6354 0040 3A69     	 ldr r2,[r7,#16]
 6355 0042 A032     	 add r2,r2,#160
 6356 0044 9200     	 lsl r2,r2,#2
 6357 0046 D358     	 ldr r3,[r2,r3]
 6358 0048 BB60     	 str r3,[r7,#8]
2042:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6359              	 .loc 2 2042 0
 6360 004a BA68     	 ldr r2,[r7,#8]
 6361 004c C023     	 mov r3,#192
 6362 004e DB04     	 lsl r3,r3,#19
 6363 0050 1340     	 and r3,r2
 6364 0052 BB60     	 str r3,[r7,#8]
2043:../Libraries/XMCLib/src/xmc_vadc.c **** 
2044:../Libraries/XMCLib/src/xmc_vadc.c ****       if (rcr)
 6365              	 .loc 2 2044 0
 6366 0054 BB68     	 ldr r3,[r7,#8]
 6367 0056 002B     	 cmp r3,#0
 6368 0058 09D0     	 beq .L276
2045:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2046:../Libraries/XMCLib/src/xmc_vadc.c ****         if ((int32_t)0 == i)
 6369              	 .loc 2 2046 0
 6370 005a 3B69     	 ldr r3,[r7,#16]
 6371 005c 002B     	 cmp r3,#0
 6372 005e 0DD1     	 bne .L278
2047:../Libraries/XMCLib/src/xmc_vadc.c ****         {
2048:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2049:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 6373              	 .loc 2 2049 0
 6374 0060 0023     	 mov r3,#0
 6375 0062 7B61     	 str r3,[r7,#20]
2050:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 6376              	 .loc 2 2050 0
 6377 0064 0F23     	 mov r3,#15
 6378 0066 FB18     	 add r3,r7,r3
 6379 0068 0122     	 mov r2,#1
 6380 006a 1A70     	 strb r2,[r3]
 6381 006c 06E0     	 b .L278
 6382              	.L276:
2051:../Libraries/XMCLib/src/xmc_vadc.c ****         }
2052:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2053:../Libraries/XMCLib/src/xmc_vadc.c ****       else
2054:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2055:../Libraries/XMCLib/src/xmc_vadc.c ****         /* The preceding register forms the tail of the FIFO */
2056:../Libraries/XMCLib/src/xmc_vadc.c ****         tail = (uint32_t)i + (uint32_t)1;
 6383              	 .loc 2 2056 0
 6384 006e 3B69     	 ldr r3,[r7,#16]
 6385 0070 0133     	 add r3,r3,#1
 6386 0072 7B61     	 str r3,[r7,#20]
2057:../Libraries/XMCLib/src/xmc_vadc.c ****         exit_flag = (bool)true;
 6387              	 .loc 2 2057 0
 6388 0074 0F23     	 mov r3,#15
 6389 0076 FB18     	 add r3,r7,r3
 6390 0078 0122     	 mov r2,#1
 6391 007a 1A70     	 strb r2,[r3]
 6392              	.L278:
2058:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2059:../Libraries/XMCLib/src/xmc_vadc.c ****       if (exit_flag)
 6393              	 .loc 2 2059 0
 6394 007c 0F23     	 mov r3,#15
 6395 007e FB18     	 add r3,r7,r3
 6396 0080 1B78     	 ldrb r3,[r3]
 6397 0082 002B     	 cmp r3,#0
 6398 0084 00D0     	 beq .L279
2060:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2061:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 6399              	 .loc 2 2061 0
 6400 0086 05E0     	 b .L274
 6401              	.L279:
2039:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6402              	 .loc 2 2039 0 discriminator 2
 6403 0088 3B69     	 ldr r3,[r7,#16]
 6404 008a 013B     	 sub r3,r3,#1
 6405 008c 3B61     	 str r3,[r7,#16]
 6406              	.L275:
2039:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6407              	 .loc 2 2039 0 is_stmt 0 discriminator 1
 6408 008e 3B69     	 ldr r3,[r7,#16]
 6409 0090 002B     	 cmp r3,#0
 6410 0092 D4DA     	 bge .L280
 6411              	.L274:
2062:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2063:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2064:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2065:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 6412              	 .loc 2 2065 0 is_stmt 1
 6413 0094 7B69     	 ldr r3,[r7,#20]
2066:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6414              	 .loc 2 2066 0
 6415 0096 181C     	 mov r0,r3
 6416 0098 BD46     	 mov sp,r7
 6417 009a 06B0     	 add sp,sp,#24
 6418              	 
 6419 009c 80BD     	 pop {r7,pc}
 6420              	 .cfi_endproc
 6421              	.LFE229:
 6423 009e C046     	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 6424              	 .align 2
 6425              	 .global XMC_VADC_GROUP_GetResultFifoHead
 6426              	 .code 16
 6427              	 .thumb_func
 6429              	XMC_VADC_GROUP_GetResultFifoHead:
 6430              	.LFB230:
2067:../Libraries/XMCLib/src/xmc_vadc.c **** 
2068:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2069:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2070:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6431              	 .loc 2 2070 0
 6432              	 .cfi_startproc
 6433 0000 80B5     	 push {r7,lr}
 6434              	.LCFI253:
 6435              	 .cfi_def_cfa_offset 8
 6436              	 .cfi_offset 7,-8
 6437              	 .cfi_offset 14,-4
 6438 0002 86B0     	 sub sp,sp,#24
 6439              	.LCFI254:
 6440              	 .cfi_def_cfa_offset 32
 6441 0004 00AF     	 add r7,sp,#0
 6442              	.LCFI255:
 6443              	 .cfi_def_cfa_register 7
 6444 0006 7860     	 str r0,[r7,#4]
 6445 0008 3960     	 str r1,[r7]
2071:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2072:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2073:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2074:../Libraries/XMCLib/src/xmc_vadc.c **** 
2075:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2076:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2077:../Libraries/XMCLib/src/xmc_vadc.c **** 
2078:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6446              	 .loc 2 2078 0
 6447 000a 7A68     	 ldr r2,[r7,#4]
 6448 000c 3B68     	 ldr r3,[r7]
 6449 000e 101C     	 mov r0,r2
 6450 0010 191C     	 mov r1,r3
 6451 0012 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6452 0016 031E     	 sub r3,r0,#0
 6453 0018 02D0     	 beq .L283
2079:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2080:../Libraries/XMCLib/src/xmc_vadc.c ****     head = res_reg;
 6454              	 .loc 2 2080 0
 6455 001a 3B68     	 ldr r3,[r7]
 6456 001c 7B61     	 str r3,[r7,#20]
 6457 001e 1BE0     	 b .L284
 6458              	.L283:
2081:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2082:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2083:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2084:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 6459              	 .loc 2 2084 0
 6460 0020 0F23     	 mov r3,#15
 6461 0022 7B61     	 str r3,[r7,#20]
2085:../Libraries/XMCLib/src/xmc_vadc.c **** 
2086:../Libraries/XMCLib/src/xmc_vadc.c ****     for (i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 6462              	 .loc 2 2086 0
 6463 0024 3B68     	 ldr r3,[r7]
 6464 0026 3B61     	 str r3,[r7,#16]
 6465 0028 13E0     	 b .L285
 6466              	.L287:
2087:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2088:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 6467              	 .loc 2 2088 0
 6468 002a 7B68     	 ldr r3,[r7,#4]
 6469 002c 3A69     	 ldr r2,[r7,#16]
 6470 002e A032     	 add r2,r2,#160
 6471 0030 9200     	 lsl r2,r2,#2
 6472 0032 D358     	 ldr r3,[r2,r3]
 6473 0034 FB60     	 str r3,[r7,#12]
2089:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6474              	 .loc 2 2089 0
 6475 0036 FA68     	 ldr r2,[r7,#12]
 6476 0038 C023     	 mov r3,#192
 6477 003a DB04     	 lsl r3,r3,#19
 6478 003c 1340     	 and r3,r2
 6479 003e FB60     	 str r3,[r7,#12]
2090:../Libraries/XMCLib/src/xmc_vadc.c **** 
2091:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 6480              	 .loc 2 2091 0
 6481 0040 FB68     	 ldr r3,[r7,#12]
 6482 0042 002B     	 cmp r3,#0
 6483 0044 02D1     	 bne .L286
2092:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2093:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2094:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 6484              	 .loc 2 2094 0
 6485 0046 3B69     	 ldr r3,[r7,#16]
 6486 0048 7B61     	 str r3,[r7,#20]
2095:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 6487              	 .loc 2 2095 0
 6488 004a 05E0     	 b .L284
 6489              	.L286:
2086:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6490              	 .loc 2 2086 0 discriminator 2
 6491 004c 3B69     	 ldr r3,[r7,#16]
 6492 004e 0133     	 add r3,r3,#1
 6493 0050 3B61     	 str r3,[r7,#16]
 6494              	.L285:
2086:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6495              	 .loc 2 2086 0 is_stmt 0 discriminator 1
 6496 0052 3B69     	 ldr r3,[r7,#16]
 6497 0054 0F2B     	 cmp r3,#15
 6498 0056 E8D9     	 bls .L287
 6499              	.L284:
2096:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2097:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2098:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2099:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 6500              	 .loc 2 2099 0 is_stmt 1
 6501 0058 7B69     	 ldr r3,[r7,#20]
2100:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6502              	 .loc 2 2100 0
 6503 005a 181C     	 mov r0,r3
 6504 005c BD46     	 mov sp,r7
 6505 005e 06B0     	 add sp,sp,#24
 6506              	 
 6507 0060 80BD     	 pop {r7,pc}
 6508              	 .cfi_endproc
 6509              	.LFE230:
 6511 0062 C046     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 6512              	 .align 2
 6513              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 6514              	 .code 16
 6515              	 .thumb_func
 6517              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 6518              	.LFB231:
2101:../Libraries/XMCLib/src/xmc_vadc.c **** 
2102:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2103:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2104:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6519              	 .loc 2 2104 0
 6520              	 .cfi_startproc
 6521 0000 80B5     	 push {r7,lr}
 6522              	.LCFI256:
 6523              	 .cfi_def_cfa_offset 8
 6524              	 .cfi_offset 7,-8
 6525              	 .cfi_offset 14,-4
 6526 0002 86B0     	 sub sp,sp,#24
 6527              	.LCFI257:
 6528              	 .cfi_def_cfa_offset 32
 6529 0004 00AF     	 add r7,sp,#0
 6530              	.LCFI258:
 6531              	 .cfi_def_cfa_register 7
 6532 0006 7860     	 str r0,[r7,#4]
 6533 0008 3960     	 str r1,[r7]
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2106:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2107:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2108:../Libraries/XMCLib/src/xmc_vadc.c **** 
2109:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2110:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2111:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2112:../Libraries/XMCLib/src/xmc_vadc.c **** 
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 6534              	 .loc 2 2113 0
 6535 000a 7B68     	 ldr r3,[r7,#4]
 6536 000c 3A68     	 ldr r2,[r7]
 6537 000e A032     	 add r2,r2,#160
 6538 0010 9200     	 lsl r2,r2,#2
 6539 0012 D358     	 ldr r3,[r2,r3]
 6540 0014 3B61     	 str r3,[r7,#16]
2114:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6541              	 .loc 2 2114 0
 6542 0016 3A69     	 ldr r2,[r7,#16]
 6543 0018 C023     	 mov r3,#192
 6544 001a DB04     	 lsl r3,r3,#19
 6545 001c 1340     	 and r3,r2
 6546 001e 3B61     	 str r3,[r7,#16]
2115:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 6547              	 .loc 2 2115 0
 6548 0020 3B68     	 ldr r3,[r7]
 6549 0022 5A1E     	 sub r2,r3,#1
 6550 0024 7B68     	 ldr r3,[r7,#4]
 6551 0026 A032     	 add r2,r2,#160
 6552 0028 9200     	 lsl r2,r2,#2
 6553 002a D358     	 ldr r3,[r2,r3]
 6554 002c FB60     	 str r3,[r7,#12]
2116:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6555              	 .loc 2 2116 0
 6556 002e FA68     	 ldr r2,[r7,#12]
 6557 0030 C023     	 mov r3,#192
 6558 0032 DB04     	 lsl r3,r3,#19
 6559 0034 1340     	 and r3,r2
 6560 0036 FB60     	 str r3,[r7,#12]
2117:../Libraries/XMCLib/src/xmc_vadc.c **** 
2118:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 6561              	 .loc 2 2118 0
 6562 0038 3B69     	 ldr r3,[r7,#16]
 6563 003a 002B     	 cmp r3,#0
 6564 003c 04D0     	 beq .L290
2119:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2120:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6565              	 .loc 2 2120 0
 6566 003e 1723     	 mov r3,#23
 6567 0040 FB18     	 add r3,r7,r3
 6568 0042 0022     	 mov r2,#0
 6569 0044 1A70     	 strb r2,[r3]
 6570 0046 0BE0     	 b .L291
 6571              	.L290:
2121:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2122:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 6572              	 .loc 2 2122 0
 6573 0048 FB68     	 ldr r3,[r7,#12]
 6574 004a 002B     	 cmp r3,#0
 6575 004c 04D0     	 beq .L292
2123:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2124:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 6576              	 .loc 2 2124 0
 6577 004e 1723     	 mov r3,#23
 6578 0050 FB18     	 add r3,r7,r3
 6579 0052 0122     	 mov r2,#1
 6580 0054 1A70     	 strb r2,[r3]
 6581 0056 03E0     	 b .L291
 6582              	.L292:
2125:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2126:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2127:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2128:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6583              	 .loc 2 2128 0
 6584 0058 1723     	 mov r3,#23
 6585 005a FB18     	 add r3,r7,r3
 6586 005c 0022     	 mov r2,#0
 6587 005e 1A70     	 strb r2,[r3]
 6588              	.L291:
2129:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2130:../Libraries/XMCLib/src/xmc_vadc.c **** 
2131:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 6589              	 .loc 2 2131 0
 6590 0060 1723     	 mov r3,#23
 6591 0062 FB18     	 add r3,r7,r3
 6592 0064 1B78     	 ldrb r3,[r3]
2132:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6593              	 .loc 2 2132 0
 6594 0066 181C     	 mov r0,r3
 6595 0068 BD46     	 mov sp,r7
 6596 006a 06B0     	 add sp,sp,#24
 6597              	 
 6598 006c 80BD     	 pop {r7,pc}
 6599              	 .cfi_endproc
 6600              	.LFE231:
 6602 006e C046     	 .text
 6603              	.Letext0:
 6604              	 .file 3 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6605              	 .file 4 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6606              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 6607              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc1_scu.h"
 6608              	 .file 7 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include/cmsis_gcc.h"
 6609              	 .file 8 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:18     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:22     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:123    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:127    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:162    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:166    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:199    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000020 $d
    {standard input}:204    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:208    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:243    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:247    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:280    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000020 $d
    {standard input}:285    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:289    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:324    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:328    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:361    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000020 $d
    {standard input}:366    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:370    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:419    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:422    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:426    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:431    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:458    .text.XMC_VADC_GLOBAL_EnableModule:00000014 $d
    {standard input}:463    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:468    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:491    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:496    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:566    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:571    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:627    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:633    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:638    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:745    .text.XMC_VADC_GLOBAL_StartupCalibration:00000084 $d
    {standard input}:750    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:755    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:801    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:806    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:884    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000068 $d
    {standard input}:889    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:894    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:947    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:952    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:1009   .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:1014   .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1088   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1093   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1162   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:0000005c $d
    {standard input}:1167   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1172   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1241   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1246   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1332   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1327   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1476   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1481   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1530   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1535   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1592   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1597   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1637   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1642   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1719   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000060 $d
    {standard input}:1724   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1729   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1807   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000060 $d
    {standard input}:1812   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 $t
    {standard input}:1817   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 XMC_VADC_GROUP_SetSyncSlaveReadySignal
    {standard input}:1867   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1872   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1924   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1929   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1979   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:0000003c $d
    {standard input}:1984   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1989   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:2033   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:2038   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2095   .text.XMC_VADC_GROUP_SetBoundaries:00000044 $d
    {standard input}:2100   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:2105   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2183   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000068 $d
    {standard input}:2188   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2193   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2258   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 $t
    {standard input}:2263   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:2327   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 $t
    {standard input}:2332   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 XMC_VADC_GLOBAL_SHS_Init
    {standard input}:2386   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 $t
    {standard input}:2391   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
    {standard input}:2450   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 $t
    {standard input}:2455   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
    {standard input}:2516   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 $t
    {standard input}:2521   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 XMC_VADC_GLOBAL_SHS_SetShortSampleTime
    {standard input}:2606   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000078 $d
    {standard input}:2611   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 $t
    {standard input}:2616   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 XMC_VADC_GLOBAL_SHS_SetGainFactor
    {standard input}:2736   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2741   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
    {standard input}:2800   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2805   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
    {standard input}:2866   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 $t
    {standard input}:2871   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
    {standard input}:2946   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 $t
    {standard input}:2951   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
    {standard input}:3070   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 $t
    {standard input}:3075   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
    {standard input}:3142   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:0000005c $d
    {standard input}:3147   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:3152   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:3266   .text.XMC_VADC_GROUP_ScanInit:000000ac $d
    {standard input}:3271   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:3276   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:3333   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000048 $d
    {standard input}:3338   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:3343   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:3400   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000048 $d
    {standard input}:3405   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:3410   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:3467   .text.XMC_VADC_GROUP_ScanSelectGating:00000048 $d
    {standard input}:3472   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:3477   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:3576   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000094 $d
    {standard input}:3581   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:3586   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:3659   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:3664   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:3716   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:3721   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:3769   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:3774   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:3981   .text.XMC_VADC_GLOBAL_BackgroundInit:00000144 $d
    {standard input}:3988   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:3993   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:4047   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000040 $d
    {standard input}:4052   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:4057   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:4114   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000048 $d
    {standard input}:4119   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:4124   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:4178   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000040 $d
    {standard input}:4183   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:4188   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:4312   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000b4 $d
    {standard input}:4318   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:4323   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:4412   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:4417   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:4531   .text.XMC_VADC_GROUP_QueueInit:000000ac $d
    {standard input}:4536   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:4541   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:4598   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000048 $d
    {standard input}:4603   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:4608   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:4665   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000048 $d
    {standard input}:4670   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:4675   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:4732   .text.XMC_VADC_GROUP_QueueSelectGating:00000048 $d
    {standard input}:4737   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:4742   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:4810   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:4815   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:4893   .text.XMC_VADC_GROUP_QueueAbortSequence:00000070 $d
    {standard input}:4898   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:4903   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:5022   .text.XMC_VADC_GROUP_QueueRemoveChannel:000000b4 $d
    {standard input}:5027   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:5032   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:5105   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:5110   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:5163   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:5168   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:5219   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:5224   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:5369   .text.XMC_VADC_GROUP_ChannelInit:000000d8 $d
    {standard input}:5374   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:5379   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:5460   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:5465   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:5518   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000040 $d
    {standard input}:5523   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:5528   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:5579   .text.XMC_VADC_GROUP_ChannelSetResultRegister:0000003c $d
    {standard input}:5584   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:5589   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:5642   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:5647   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:5691   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:5696   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:5742   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:5747   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:5806   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:5811   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:5864   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000040 $d
    {standard input}:5869   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:5874   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:5944   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:5949   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:5999   .text.XMC_VADC_GROUP_AddResultToFifo:0000003c $d
    {standard input}:6004   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:6009   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:6063   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:6068   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:6127   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:6132   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:6183   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:6188   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:6290   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000094 $d
    {standard input}:6295   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:6300   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:6517   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:6424   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:6429   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:6512   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_SetAdcClockSrc
