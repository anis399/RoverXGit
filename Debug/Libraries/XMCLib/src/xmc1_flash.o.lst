   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc1_flash.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_FLASH_IsBusy,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_FLASH_IsBusy:
  23              	.LFB48:
  24              	 .file 1 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_flash.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @file xmc_flash.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @date 2019-05-06
   4:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
   5:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @cond
   6:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
   9:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  12:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  14:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  21:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * a source language processor.
  27:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  28:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  36:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  41:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Change History
  42:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * --------------
  43:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  44:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * 2014-12-10:
  45:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *     - Initial <br>
  46:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * 2015-02-20:
  47:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *     - Updated for Documentation related changes<br>
  48:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * 2015-06-20:
  49:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  50:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * 2019-05-06:
  51:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *     - Moved definitions of XMC_FLASH_ProgramPage() and XMC_FLASH_EraseSector() to xmc1_flash.h a
  52:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @endcond
  53:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  54:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  */
  55:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
  56:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
  57:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #ifndef XMC_FLASH_H
  58:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #define XMC_FLASH_H
  59:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
  60:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**************************************************************************************************
  61:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * HEADER FILES
  62:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  **************************************************************************************************
  63:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
  64:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #include "xmc_common.h"
  65:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
  66:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #if UC_FAMILY == XMC1
  67:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #include "xmc1_flash.h"
  68:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #endif
  69:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
  70:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #if UC_FAMILY == XMC4
  71:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #include "xmc4_flash.h"
  72:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #endif
  73:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
  74:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**
  75:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @addtogroup XMClib XMC Peripheral Library
  76:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @{
  77:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  */
  78:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
  79:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**
  80:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @addtogroup FLASH
  81:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @brief Flash driver for XMC microcontroller family.
  82:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
  83:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Flash is a non volatile memory module used to store instruction code or constant data.
  84:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * The flash low level driver provides support to the following functionalities of flash memory.<BR
  85:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * <OL>
  86:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \if XMC4
  87:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * <LI>Provides function to program a page. ( XMC_FLASH_ProgramPage() )</LI><BR>
  88:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * <LI>Provides functions to support read and write protection. ( XMC_FLASH_InstallProtection(),
  89:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * XMC_FLASH_ConfirmProtection(), XMC_FLASH_VerifyReadProtection(), XMC_FLASH_VerifyWriteProtection
  90:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * <LI>Provides function to erase sector. ( XMC_FLASH_EraseSector() ) </LI><BR>
  91:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \endif
  92:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \if XMC1
  93:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * <LI>Provides functions to program and verify pages. ( XMC_FLASH_ProgramPage(), XMC_FLASH_Program
  94:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *  XMC_FLASH_ProgramVerifyPage() )</LI><BR>
  95:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * <LI>Provides functions to write and verify blocks. ( XMC_FLASH_WriteBlocks(), XMC_FLASH_VerifyBl
  96:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * <LI>Provides functions to read data in terms of word and blocks. ( XMC_FLASH_ReadBlocks(), XMC_F
  97:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * </LI><BR>
  98:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * <LI>Provides function to erase page. ( XMC_FLASH_ErasePage() ) </LI><BR>
  99:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \endif
 100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * </OL>
 101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @{
 102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  */
 103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
 104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /*******************************************************************************
 105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * API PROTOTYPE
 106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *******************************************************************************/
 107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #ifdef __cplusplus
 108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** extern "C" {
 109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** #endif
 110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
 111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**
 112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @param None
 114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @return None
 116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Description:</b><br>
 118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \if XMC1
 119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Clears the previous error status by reseting the ECC and VERR error status bits of NVMSTATUS reg
 120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Call this API before starting any flash programming / erase related APIs to ensure all previous 
 121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \endif
 122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \if XMC4
 123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Clears the previous error status by reseting the FSR status register.\n\n  Call this API before 
 124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * programming / erase related APIs to ensure all previous errors are cleared.
 125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \endif
 126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * None
 129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  */
 131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** void XMC_FLASH_ClearStatus(void);
 132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
 133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**
 134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @param None
 136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @return uint32_t Status of the previous flash operation.
 138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Description:</b><br>
 140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \if XMC1
 141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Informs the status of flash by reading the NVMSTATUS register.\n\n  It indicates the ECC, VERR(v
 142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * WRPERR (Write protocol error) errors as well as the current flash state. After calling the flash
 143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * operation related APIs, call this API to get the verification status. The return value of this A
 144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * against the members of @ref XMC_FLASH_STATUS_t enumeration to get the relevant status.
 145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \endif
 146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \if XMC4
 147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Informs the status of flash by reading the FSR register.\n\n  It indicates the error status such
 148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * PROER, PFDBER, ORIER, VER errors as well as the current flash state. After calling the flash rea
 149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * operation related APIs, call this API to verify flash status. The return value of this API shall
 150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * the members of @ref XMC_FLASH_STATUS_t enumeration to get the relevant status.
 151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \endif
 152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * None
 155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  */
 157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** uint32_t XMC_FLASH_GetStatus(void);
 158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
 159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**
 160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @param event_msk ORed values of @ref XMC_FLASH_EVENT_t enumeration
 162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @return None
 164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Description:</b><br>
 166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Enables the particular flash events as specified in the input parameter.\n
 167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * XMC_FLASH_DisableEvent()\n\n\n
 170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  */
 172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** void XMC_FLASH_EnableEvent(const uint32_t event_msk);
 173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
 174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**
 175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @param event_msk ORed values of @ref XMC_FLASH_EVENT_t enumeration
 177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @return None
 179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Description:</b><br>
 181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Disables the particular flash events as specified in the input parameter.\n
 182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * XMC_FLASH_EnableEvent()\n\n\n
 185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  */
 187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** void XMC_FLASH_DisableEvent(const uint32_t event_msk);
 188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** 
 189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** /**
 190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @param None
 192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * @return true if flash is in busy state else returns \a false.
 194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Description:</b><br>
 196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Checks whether flash is in busy state or not.\n\n  It is checked by calling the XMC_FLASH_GetSta
 197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * Refer XMC_FLASH_GetStatus() for more details.\n
 198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  * XMC_FLASH_GetStatus()\n\n\n
 201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  *
 202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****  */
 203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** __STATIC_INLINE bool XMC_FLASH_IsBusy(void)
 204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** {
  25              	 .loc 1 204 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 00AF     	 add r7,sp,#0
  33              	.LCFI1:
  34              	 .cfi_def_cfa_register 7
 205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h ****   return (bool)(XMC_FLASH_GetStatus() & XMC_FLASH_STATUS_BUSY);
  35              	 .loc 1 205 0
  36 0004 FFF7FEFF 	 bl XMC_FLASH_GetStatus
  37 0008 021C     	 mov r2,r0
  38 000a 0123     	 mov r3,#1
  39 000c 1340     	 and r3,r2
  40 000e 5A1E     	 sub r2,r3,#1
  41 0010 9341     	 sbc r3,r3,r2
  42 0012 DBB2     	 uxtb r3,r3
 206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_flash.h **** }
  43              	 .loc 1 206 0
  44 0014 181C     	 mov r0,r3
  45 0016 BD46     	 mov sp,r7
  46              	 
  47 0018 80BD     	 pop {r7,pc}
  48              	 .cfi_endproc
  49              	.LFE48:
  51 001a C046     	 .section .text.XMC_FLASH_ClearStatus,"ax",%progbits
  52              	 .align 2
  53              	 .global XMC_FLASH_ClearStatus
  54              	 .code 16
  55              	 .thumb_func
  57              	XMC_FLASH_ClearStatus:
  58              	.LFB49:
  59              	 .file 2 "../Libraries/XMCLib/src/xmc1_flash.c"
   1:../Libraries/XMCLib/src/xmc1_flash.c **** /**
   2:../Libraries/XMCLib/src/xmc1_flash.c ****  * @file xmc1_flash.c
   3:../Libraries/XMCLib/src/xmc1_flash.c ****  * @date 2019-05-04
   4:../Libraries/XMCLib/src/xmc1_flash.c ****  *
   5:../Libraries/XMCLib/src/xmc1_flash.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_flash.c ****  *****************************************************************************
   7:../Libraries/XMCLib/src/xmc1_flash.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:../Libraries/XMCLib/src/xmc1_flash.c ****  *
   9:../Libraries/XMCLib/src/xmc1_flash.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_flash.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  12:../Libraries/XMCLib/src/xmc1_flash.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  14:../Libraries/XMCLib/src/xmc1_flash.c ****  * Permission is hereby granted, free of charge, to any person or organization
  15:../Libraries/XMCLib/src/xmc1_flash.c ****  * obtaining a copy of the software and accompanying documentation covered by
  16:../Libraries/XMCLib/src/xmc1_flash.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:../Libraries/XMCLib/src/xmc1_flash.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:../Libraries/XMCLib/src/xmc1_flash.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:../Libraries/XMCLib/src/xmc1_flash.c ****  * do so, all subject to the following:
  20:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  21:../Libraries/XMCLib/src/xmc1_flash.c ****  * The copyright notices in the Software and this entire statement, including
  22:../Libraries/XMCLib/src/xmc1_flash.c ****  * the above license grant, this restriction and the following disclaimer,
  23:../Libraries/XMCLib/src/xmc1_flash.c ****  * must be included in all copies of the Software, in whole or in part, and
  24:../Libraries/XMCLib/src/xmc1_flash.c ****  * all derivative works of the Software, unless such copies or derivative
  25:../Libraries/XMCLib/src/xmc1_flash.c ****  * works are solely in the form of machine-executable object code generated by
  26:../Libraries/XMCLib/src/xmc1_flash.c ****  * a source language processor.
  27:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  28:../Libraries/XMCLib/src/xmc1_flash.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:../Libraries/XMCLib/src/xmc1_flash.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:../Libraries/XMCLib/src/xmc1_flash.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:../Libraries/XMCLib/src/xmc1_flash.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:../Libraries/XMCLib/src/xmc1_flash.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:../Libraries/XMCLib/src/xmc1_flash.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:../Libraries/XMCLib/src/xmc1_flash.c ****  * DEALINGS IN THE SOFTWARE.
  35:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  36:../Libraries/XMCLib/src/xmc1_flash.c ****  * To improve the quality of the software, users are encouraged to share
  37:../Libraries/XMCLib/src/xmc1_flash.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:../Libraries/XMCLib/src/xmc1_flash.c ****  * at XMCSupport@infineon.com.
  39:../Libraries/XMCLib/src/xmc1_flash.c ****  *****************************************************************************
  40:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  41:../Libraries/XMCLib/src/xmc1_flash.c ****  * Change History
  42:../Libraries/XMCLib/src/xmc1_flash.c ****  * --------------
  43:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  44:../Libraries/XMCLib/src/xmc1_flash.c ****  * 2015-02-10:
  45:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - Initial <br>
  46:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  47:../Libraries/XMCLib/src/xmc1_flash.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - Removed definition of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  50:../Libraries/XMCLib/src/xmc1_flash.c ****  * 2015-10-14:
  51:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - Fixed defect in API XMC_FLASH_ErasePages, related to the errata NVM_CM.001
  52:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - NVM ROM user routine XMC1000_NvmErasePage(address) used for erase page.
  53:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  54:../Libraries/XMCLib/src/xmc1_flash.c ****  * 2019-05-04:
  55:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - Changed XMC_FLASH_ErasePage() and XMC_FLASH_ProgramVerifyPage() to return status of operat
  56:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - Changed XMC_FLASH_ErasePages(), XMC_FLASH_EraseSector() and XMC_FLASH_ProgramPage() to ret
  57:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  58:../Libraries/XMCLib/src/xmc1_flash.c ****  * @endcond
  59:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  60:../Libraries/XMCLib/src/xmc1_flash.c ****  */
  61:../Libraries/XMCLib/src/xmc1_flash.c **** 
  62:../Libraries/XMCLib/src/xmc1_flash.c **** #include "xmc_flash.h"
  63:../Libraries/XMCLib/src/xmc1_flash.c **** 
  64:../Libraries/XMCLib/src/xmc1_flash.c **** /**************************************************************************************************
  65:../Libraries/XMCLib/src/xmc1_flash.c ****  * MACROS
  66:../Libraries/XMCLib/src/xmc1_flash.c ****  **************************************************************************************************
  67:../Libraries/XMCLib/src/xmc1_flash.c **** #if UC_FAMILY == XMC1
  68:../Libraries/XMCLib/src/xmc1_flash.c **** 
  69:../Libraries/XMCLib/src/xmc1_flash.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc1_flash.c ****  * ENUMS
  71:../Libraries/XMCLib/src/xmc1_flash.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc1_flash.c **** /* FLASH programming / erase options */
  73:../Libraries/XMCLib/src/xmc1_flash.c **** typedef enum FLASH_ACTION
  74:../Libraries/XMCLib/src/xmc1_flash.c **** {
  75:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_IDLE                        =  (uint32_t)0x00,
  76:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_ONESHOT_WRITE_VERIFY        = ((uint32_t)0x51 << NVM_NVMPROG_ACTION_Pos),
  77:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_ONESHOT_WRITE               = ((uint32_t)0x91 << NVM_NVMPROG_ACTION_Pos),
  78:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_CONTINUOUS_WRITE_VERIFY     = ((uint32_t)0x61 << NVM_NVMPROG_ACTION_Pos),
  79:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_CONTINUOUS_WRITE            = ((uint32_t)0xa1 << NVM_NVMPROG_ACTION_Pos),
  80:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_ONESHOT_PAGE_ERASE          = ((uint32_t)0x92 << NVM_NVMPROG_ACTION_Pos),
  81:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_CONTINUOUS_PAGE_ERASE       = ((uint32_t)0xa2 << NVM_NVMPROG_ACTION_Pos),
  82:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_ONESHOT_VERIFY_ONLY         = ((uint32_t)0xd0 << NVM_NVMPROG_ACTION_Pos),
  83:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_CONTINUOUS_VERIFY_ONLY      = ((uint32_t)0xe0 << NVM_NVMPROG_ACTION_Pos)
  84:../Libraries/XMCLib/src/xmc1_flash.c **** } FLASH_ACTION_t;
  85:../Libraries/XMCLib/src/xmc1_flash.c **** 
  86:../Libraries/XMCLib/src/xmc1_flash.c **** 
  87:../Libraries/XMCLib/src/xmc1_flash.c **** /**************************************************************************************************
  88:../Libraries/XMCLib/src/xmc1_flash.c ****  * API IMPLEMENTATION
  89:../Libraries/XMCLib/src/xmc1_flash.c ****  **************************************************************************************************
  90:../Libraries/XMCLib/src/xmc1_flash.c **** 
  91:../Libraries/XMCLib/src/xmc1_flash.c **** /*
  92:../Libraries/XMCLib/src/xmc1_flash.c ****  * This API shall clear the ECC and VERIFICATION error status.
  93:../Libraries/XMCLib/src/xmc1_flash.c ****  */
  94:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_ClearStatus(void)
  95:../Libraries/XMCLib/src/xmc1_flash.c **** {
  60              	 .loc 2 95 0
  61              	 .cfi_startproc
  62 0000 80B5     	 push {r7,lr}
  63              	.LCFI2:
  64              	 .cfi_def_cfa_offset 8
  65              	 .cfi_offset 7,-8
  66              	 .cfi_offset 14,-4
  67 0002 00AF     	 add r7,sp,#0
  68              	.LCFI3:
  69              	 .cfi_def_cfa_register 7
  96:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG |= (uint16_t)((uint16_t)NVM_NVMPROG_RSTVERR_Msk | (uint16_t)NVM_NVMPROG_RSTECC_Msk);
  70              	 .loc 2 96 0
  71 0004 0549     	 ldr r1,.L4
  72 0006 054B     	 ldr r3,.L4
  73 0008 9B88     	 ldrh r3,[r3,#4]
  74 000a 9BB2     	 uxth r3,r3
  75 000c C022     	 mov r2,#192
  76 000e 9201     	 lsl r2,r2,#6
  77 0010 1343     	 orr r3,r2
  78 0012 9BB2     	 uxth r3,r3
  79 0014 8B80     	 strh r3,[r1,#4]
  97:../Libraries/XMCLib/src/xmc1_flash.c **** }
  80              	 .loc 2 97 0
  81 0016 BD46     	 mov sp,r7
  82              	 
  83 0018 80BD     	 pop {r7,pc}
  84              	.L5:
  85 001a C046     	 .align 2
  86              	.L4:
  87 001c 00000540 	 .word 1074069504
  88              	 .cfi_endproc
  89              	.LFE49:
  91              	 .section .text.XMC_FLASH_GetStatus,"ax",%progbits
  92              	 .align 2
  93              	 .global XMC_FLASH_GetStatus
  94              	 .code 16
  95              	 .thumb_func
  97              	XMC_FLASH_GetStatus:
  98              	.LFB50:
  98:../Libraries/XMCLib/src/xmc1_flash.c **** 
  99:../Libraries/XMCLib/src/xmc1_flash.c **** /*
 100:../Libraries/XMCLib/src/xmc1_flash.c ****  * This API shall return the status of NVM.
 101:../Libraries/XMCLib/src/xmc1_flash.c ****  */
 102:../Libraries/XMCLib/src/xmc1_flash.c **** uint32_t XMC_FLASH_GetStatus(void)
 103:../Libraries/XMCLib/src/xmc1_flash.c **** {
  99              	 .loc 2 103 0
 100              	 .cfi_startproc
 101 0000 80B5     	 push {r7,lr}
 102              	.LCFI4:
 103              	 .cfi_def_cfa_offset 8
 104              	 .cfi_offset 7,-8
 105              	 .cfi_offset 14,-4
 106 0002 00AF     	 add r7,sp,#0
 107              	.LCFI5:
 108              	 .cfi_def_cfa_register 7
 104:../Libraries/XMCLib/src/xmc1_flash.c ****   return NVM->NVMSTATUS;
 109              	 .loc 2 104 0
 110 0004 024B     	 ldr r3,.L8
 111 0006 1B88     	 ldrh r3,[r3]
 112 0008 9BB2     	 uxth r3,r3
 105:../Libraries/XMCLib/src/xmc1_flash.c **** }
 113              	 .loc 2 105 0
 114 000a 181C     	 mov r0,r3
 115 000c BD46     	 mov sp,r7
 116              	 
 117 000e 80BD     	 pop {r7,pc}
 118              	.L9:
 119              	 .align 2
 120              	.L8:
 121 0010 00000540 	 .word 1074069504
 122              	 .cfi_endproc
 123              	.LFE50:
 125              	 .section .text.XMC_FLASH_EnableEvent,"ax",%progbits
 126              	 .align 2
 127              	 .global XMC_FLASH_EnableEvent
 128              	 .code 16
 129              	 .thumb_func
 131              	XMC_FLASH_EnableEvent:
 132              	.LFB51:
 106:../Libraries/XMCLib/src/xmc1_flash.c **** 
 107:../Libraries/XMCLib/src/xmc1_flash.c **** /*
 108:../Libraries/XMCLib/src/xmc1_flash.c ****  * This API shall enable the the flash interrupt event.
 109:../Libraries/XMCLib/src/xmc1_flash.c ****  */
 110:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_EnableEvent(const uint32_t event_msk)
 111:../Libraries/XMCLib/src/xmc1_flash.c **** {
 133              	 .loc 2 111 0
 134              	 .cfi_startproc
 135 0000 80B5     	 push {r7,lr}
 136              	.LCFI6:
 137              	 .cfi_def_cfa_offset 8
 138              	 .cfi_offset 7,-8
 139              	 .cfi_offset 14,-4
 140 0002 82B0     	 sub sp,sp,#8
 141              	.LCFI7:
 142              	 .cfi_def_cfa_offset 16
 143 0004 00AF     	 add r7,sp,#0
 144              	.LCFI8:
 145              	 .cfi_def_cfa_register 7
 146 0006 7860     	 str r0,[r7,#4]
 112:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMCONF |= (uint16_t)event_msk;
 147              	 .loc 2 112 0
 148 0008 0549     	 ldr r1,.L11
 149 000a 054B     	 ldr r3,.L11
 150 000c 1B89     	 ldrh r3,[r3,#8]
 151 000e 9AB2     	 uxth r2,r3
 152 0010 7B68     	 ldr r3,[r7,#4]
 153 0012 9BB2     	 uxth r3,r3
 154 0014 1343     	 orr r3,r2
 155 0016 9BB2     	 uxth r3,r3
 156 0018 0B81     	 strh r3,[r1,#8]
 113:../Libraries/XMCLib/src/xmc1_flash.c **** }
 157              	 .loc 2 113 0
 158 001a BD46     	 mov sp,r7
 159 001c 02B0     	 add sp,sp,#8
 160              	 
 161 001e 80BD     	 pop {r7,pc}
 162              	.L12:
 163              	 .align 2
 164              	.L11:
 165 0020 00000540 	 .word 1074069504
 166              	 .cfi_endproc
 167              	.LFE51:
 169              	 .section .text.XMC_FLASH_DisableEvent,"ax",%progbits
 170              	 .align 2
 171              	 .global XMC_FLASH_DisableEvent
 172              	 .code 16
 173              	 .thumb_func
 175              	XMC_FLASH_DisableEvent:
 176              	.LFB52:
 114:../Libraries/XMCLib/src/xmc1_flash.c **** 
 115:../Libraries/XMCLib/src/xmc1_flash.c **** /*
 116:../Libraries/XMCLib/src/xmc1_flash.c ****  * This API shall disable the the flash interrupt event.
 117:../Libraries/XMCLib/src/xmc1_flash.c ****  */
 118:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_DisableEvent(const uint32_t event_msk)
 119:../Libraries/XMCLib/src/xmc1_flash.c **** {
 177              	 .loc 2 119 0
 178              	 .cfi_startproc
 179 0000 80B5     	 push {r7,lr}
 180              	.LCFI9:
 181              	 .cfi_def_cfa_offset 8
 182              	 .cfi_offset 7,-8
 183              	 .cfi_offset 14,-4
 184 0002 82B0     	 sub sp,sp,#8
 185              	.LCFI10:
 186              	 .cfi_def_cfa_offset 16
 187 0004 00AF     	 add r7,sp,#0
 188              	.LCFI11:
 189              	 .cfi_def_cfa_register 7
 190 0006 7860     	 str r0,[r7,#4]
 120:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMCONF &= (uint16_t)(~(uint16_t)event_msk);
 191              	 .loc 2 120 0
 192 0008 0649     	 ldr r1,.L14
 193 000a 064B     	 ldr r3,.L14
 194 000c 1B89     	 ldrh r3,[r3,#8]
 195 000e 9BB2     	 uxth r3,r3
 196 0010 7A68     	 ldr r2,[r7,#4]
 197 0012 92B2     	 uxth r2,r2
 198 0014 D243     	 mvn r2,r2
 199 0016 92B2     	 uxth r2,r2
 200 0018 1340     	 and r3,r2
 201 001a 9BB2     	 uxth r3,r3
 202 001c 0B81     	 strh r3,[r1,#8]
 121:../Libraries/XMCLib/src/xmc1_flash.c **** }
 203              	 .loc 2 121 0
 204 001e BD46     	 mov sp,r7
 205 0020 02B0     	 add sp,sp,#8
 206              	 
 207 0022 80BD     	 pop {r7,pc}
 208              	.L15:
 209              	 .align 2
 210              	.L14:
 211 0024 00000540 	 .word 1074069504
 212              	 .cfi_endproc
 213              	.LFE52:
 215              	 .section .text.XMC_FLASH_ErasePage,"ax",%progbits
 216              	 .align 2
 217              	 .global XMC_FLASH_ErasePage
 218              	 .code 16
 219              	 .thumb_func
 221              	XMC_FLASH_ErasePage:
 222              	.LFB53:
 122:../Libraries/XMCLib/src/xmc1_flash.c **** 
 123:../Libraries/XMCLib/src/xmc1_flash.c **** int32_t XMC_FLASH_ErasePage(uint32_t *address)
 124:../Libraries/XMCLib/src/xmc1_flash.c **** {
 223              	 .loc 2 124 0
 224              	 .cfi_startproc
 225 0000 80B5     	 push {r7,lr}
 226              	.LCFI12:
 227              	 .cfi_def_cfa_offset 8
 228              	 .cfi_offset 7,-8
 229              	 .cfi_offset 14,-4
 230 0002 82B0     	 sub sp,sp,#8
 231              	.LCFI13:
 232              	 .cfi_def_cfa_offset 16
 233 0004 00AF     	 add r7,sp,#0
 234              	.LCFI14:
 235              	 .cfi_def_cfa_register 7
 236 0006 7860     	 str r0,[r7,#4]
 125:../Libraries/XMCLib/src/xmc1_flash.c ****   return XMC1000_NvmErasePage(address);
 237              	 .loc 2 125 0
 238 0008 8023     	 mov r3,#128
 239 000a 5B00     	 lsl r3,r3,#1
 240 000c 1B68     	 ldr r3,[r3]
 241 000e 7A68     	 ldr r2,[r7,#4]
 242 0010 101C     	 mov r0,r2
 243 0012 9847     	 blx r3
 244 0014 031C     	 mov r3,r0
 126:../Libraries/XMCLib/src/xmc1_flash.c **** }
 245              	 .loc 2 126 0
 246 0016 181C     	 mov r0,r3
 247 0018 BD46     	 mov sp,r7
 248 001a 02B0     	 add sp,sp,#8
 249              	 
 250 001c 80BD     	 pop {r7,pc}
 251              	 .cfi_endproc
 252              	.LFE53:
 254 001e C046     	 .section .text.XMC_FLASH_ProgramVerifyPage,"ax",%progbits
 255              	 .align 2
 256              	 .global XMC_FLASH_ProgramVerifyPage
 257              	 .code 16
 258              	 .thumb_func
 260              	XMC_FLASH_ProgramVerifyPage:
 261              	.LFB54:
 127:../Libraries/XMCLib/src/xmc1_flash.c **** 
 128:../Libraries/XMCLib/src/xmc1_flash.c **** int32_t XMC_FLASH_ProgramVerifyPage(uint32_t *address, const uint32_t *data)
 129:../Libraries/XMCLib/src/xmc1_flash.c **** {
 262              	 .loc 2 129 0
 263              	 .cfi_startproc
 264 0000 80B5     	 push {r7,lr}
 265              	.LCFI15:
 266              	 .cfi_def_cfa_offset 8
 267              	 .cfi_offset 7,-8
 268              	 .cfi_offset 14,-4
 269 0002 82B0     	 sub sp,sp,#8
 270              	.LCFI16:
 271              	 .cfi_def_cfa_offset 16
 272 0004 00AF     	 add r7,sp,#0
 273              	.LCFI17:
 274              	 .cfi_def_cfa_register 7
 275 0006 7860     	 str r0,[r7,#4]
 276 0008 3960     	 str r1,[r7]
 130:../Libraries/XMCLib/src/xmc1_flash.c ****   return XMC1000_NvmProgVerify(data, address);
 277              	 .loc 2 130 0
 278 000a 8223     	 mov r3,#130
 279 000c 5B00     	 lsl r3,r3,#1
 280 000e 1B68     	 ldr r3,[r3]
 281 0010 3968     	 ldr r1,[r7]
 282 0012 7A68     	 ldr r2,[r7,#4]
 283 0014 081C     	 mov r0,r1
 284 0016 111C     	 mov r1,r2
 285 0018 9847     	 blx r3
 286 001a 031C     	 mov r3,r0
 131:../Libraries/XMCLib/src/xmc1_flash.c **** }
 287              	 .loc 2 131 0
 288 001c 181C     	 mov r0,r3
 289 001e BD46     	 mov sp,r7
 290 0020 02B0     	 add sp,sp,#8
 291              	 
 292 0022 80BD     	 pop {r7,pc}
 293              	 .cfi_endproc
 294              	.LFE54:
 296              	 .section .text.XMC_FLASH_WriteBlocks,"ax",%progbits
 297              	 .align 2
 298              	 .global XMC_FLASH_WriteBlocks
 299              	 .code 16
 300              	 .thumb_func
 302              	XMC_FLASH_WriteBlocks:
 303              	.LFB55:
 132:../Libraries/XMCLib/src/xmc1_flash.c **** 
 133:../Libraries/XMCLib/src/xmc1_flash.c **** /* Write blocks of data into flash*/
 134:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_WriteBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verif
 135:../Libraries/XMCLib/src/xmc1_flash.c **** {
 304              	 .loc 2 135 0
 305              	 .cfi_startproc
 306 0000 80B5     	 push {r7,lr}
 307              	.LCFI18:
 308              	 .cfi_def_cfa_offset 8
 309              	 .cfi_offset 7,-8
 310              	 .cfi_offset 14,-4
 311 0002 86B0     	 sub sp,sp,#24
 312              	.LCFI19:
 313              	 .cfi_def_cfa_offset 32
 314 0004 00AF     	 add r7,sp,#0
 315              	.LCFI20:
 316              	 .cfi_def_cfa_register 7
 317 0006 F860     	 str r0,[r7,#12]
 318 0008 B960     	 str r1,[r7,#8]
 319 000a 7A60     	 str r2,[r7,#4]
 320 000c 1A1C     	 mov r2,r3
 321 000e FB1C     	 add r3,r7,#3
 322 0010 1A70     	 strb r2,[r3]
 136:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t word;
 137:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t block;
 138:../Libraries/XMCLib/src/xmc1_flash.c **** 
 139:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_WriteBlocks: Starting address not aligned to Block",
 140:../Libraries/XMCLib/src/xmc1_flash.c ****              ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)
 141:../Libraries/XMCLib/src/xmc1_flash.c **** 
 142:../Libraries/XMCLib/src/xmc1_flash.c ****   /* Configure the continuous Write option command and reset the NVM error / verification status*/
 143:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
 323              	 .loc 2 143 0
 324 0012 294A     	 ldr r2,.L28
 325 0014 284B     	 ldr r3,.L28
 326 0016 9B88     	 ldrh r3,[r3,#4]
 327 0018 9BB2     	 uxth r3,r3
 328 001a FF21     	 mov r1,#255
 329 001c 8B43     	 bic r3,r1
 330 001e 9BB2     	 uxth r3,r3
 331 0020 9380     	 strh r3,[r2,#4]
 144:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG |= (uint16_t)(NVM_NVMPROG_RSTVERR_Msk | NVM_NVMPROG_RSTECC_Msk);
 332              	 .loc 2 144 0
 333 0022 2549     	 ldr r1,.L28
 334 0024 244B     	 ldr r3,.L28
 335 0026 9B88     	 ldrh r3,[r3,#4]
 336 0028 9BB2     	 uxth r3,r3
 337 002a C022     	 mov r2,#192
 338 002c 9201     	 lsl r2,r2,#6
 339 002e 1343     	 orr r3,r2
 340 0030 9BB2     	 uxth r3,r3
 341 0032 8B80     	 strh r3,[r1,#4]
 145:../Libraries/XMCLib/src/xmc1_flash.c **** 
 146:../Libraries/XMCLib/src/xmc1_flash.c ****   if (verify == true)
 342              	 .loc 2 146 0
 343 0034 FB1C     	 add r3,r7,#3
 344 0036 1B78     	 ldrb r3,[r3]
 345 0038 002B     	 cmp r3,#0
 346 003a 08D0     	 beq .L21
 147:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 148:../Libraries/XMCLib/src/xmc1_flash.c ****     NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE_VERIFY;
 347              	 .loc 2 148 0
 348 003c 1E4A     	 ldr r2,.L28
 349 003e 1E4B     	 ldr r3,.L28
 350 0040 9B88     	 ldrh r3,[r3,#4]
 351 0042 9BB2     	 uxth r3,r3
 352 0044 6121     	 mov r1,#97
 353 0046 0B43     	 orr r3,r1
 354 0048 9BB2     	 uxth r3,r3
 355 004a 9380     	 strh r3,[r2,#4]
 356 004c 07E0     	 b .L22
 357              	.L21:
 149:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 150:../Libraries/XMCLib/src/xmc1_flash.c ****   else
 151:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 152:../Libraries/XMCLib/src/xmc1_flash.c ****     NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
 358              	 .loc 2 152 0
 359 004e 1A4A     	 ldr r2,.L28
 360 0050 194B     	 ldr r3,.L28
 361 0052 9B88     	 ldrh r3,[r3,#4]
 362 0054 9BB2     	 uxth r3,r3
 363 0056 A121     	 mov r1,#161
 364 0058 0B43     	 orr r3,r1
 365 005a 9BB2     	 uxth r3,r3
 366 005c 9380     	 strh r3,[r2,#4]
 367              	.L22:
 153:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 154:../Libraries/XMCLib/src/xmc1_flash.c **** 
 155:../Libraries/XMCLib/src/xmc1_flash.c ****   for (block = 0U; block < num_blocks; ++block)
 368              	 .loc 2 155 0
 369 005e 0023     	 mov r3,#0
 370 0060 3B61     	 str r3,[r7,#16]
 371 0062 1AE0     	 b .L23
 372              	.L27:
 156:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 157:../Libraries/XMCLib/src/xmc1_flash.c ****     for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
 373              	 .loc 2 157 0
 374 0064 0023     	 mov r3,#0
 375 0066 7B61     	 str r3,[r7,#20]
 376 0068 0CE0     	 b .L24
 377              	.L25:
 158:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 159:../Libraries/XMCLib/src/xmc1_flash.c ****       *address = *data;
 378              	 .loc 2 159 0 discriminator 3
 379 006a BB68     	 ldr r3,[r7,#8]
 380 006c 1A68     	 ldr r2,[r3]
 381 006e FB68     	 ldr r3,[r7,#12]
 382 0070 1A60     	 str r2,[r3]
 160:../Libraries/XMCLib/src/xmc1_flash.c ****       data++;
 383              	 .loc 2 160 0 discriminator 3
 384 0072 BB68     	 ldr r3,[r7,#8]
 385 0074 0433     	 add r3,r3,#4
 386 0076 BB60     	 str r3,[r7,#8]
 161:../Libraries/XMCLib/src/xmc1_flash.c ****       address++;
 387              	 .loc 2 161 0 discriminator 3
 388 0078 FB68     	 ldr r3,[r7,#12]
 389 007a 0433     	 add r3,r3,#4
 390 007c FB60     	 str r3,[r7,#12]
 157:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 391              	 .loc 2 157 0 discriminator 3
 392 007e 7B69     	 ldr r3,[r7,#20]
 393 0080 0133     	 add r3,r3,#1
 394 0082 7B61     	 str r3,[r7,#20]
 395              	.L24:
 157:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 396              	 .loc 2 157 0 is_stmt 0 discriminator 1
 397 0084 7B69     	 ldr r3,[r7,#20]
 398 0086 032B     	 cmp r3,#3
 399 0088 EFD9     	 bls .L25
 162:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 163:../Libraries/XMCLib/src/xmc1_flash.c **** 
 164:../Libraries/XMCLib/src/xmc1_flash.c ****     while (XMC_FLASH_IsBusy() == true)
 400              	 .loc 2 164 0 is_stmt 1
 401 008a C046     	 mov r8,r8
 402              	.L26:
 403              	 .loc 2 164 0 is_stmt 0 discriminator 1
 404 008c FFF7FEFF 	 bl XMC_FLASH_IsBusy
 405 0090 031E     	 sub r3,r0,#0
 406 0092 FBD1     	 bne .L26
 155:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 407              	 .loc 2 155 0 is_stmt 1 discriminator 2
 408 0094 3B69     	 ldr r3,[r7,#16]
 409 0096 0133     	 add r3,r3,#1
 410 0098 3B61     	 str r3,[r7,#16]
 411              	.L23:
 155:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 412              	 .loc 2 155 0 is_stmt 0 discriminator 1
 413 009a 3A69     	 ldr r2,[r7,#16]
 414 009c 7B68     	 ldr r3,[r7,#4]
 415 009e 9A42     	 cmp r2,r3
 416 00a0 E0D3     	 bcc .L27
 165:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 166:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 167:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 168:../Libraries/XMCLib/src/xmc1_flash.c **** 
 169:../Libraries/XMCLib/src/xmc1_flash.c ****   /* Stop continuous write operation */
 170:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
 417              	 .loc 2 170 0 is_stmt 1
 418 00a2 054A     	 ldr r2,.L28
 419 00a4 044B     	 ldr r3,.L28
 420 00a6 9B88     	 ldrh r3,[r3,#4]
 421 00a8 9BB2     	 uxth r3,r3
 422 00aa FF21     	 mov r1,#255
 423 00ac 8B43     	 bic r3,r1
 424 00ae 9BB2     	 uxth r3,r3
 425 00b0 9380     	 strh r3,[r2,#4]
 171:../Libraries/XMCLib/src/xmc1_flash.c **** }
 426              	 .loc 2 171 0
 427 00b2 BD46     	 mov sp,r7
 428 00b4 06B0     	 add sp,sp,#24
 429              	 
 430 00b6 80BD     	 pop {r7,pc}
 431              	.L29:
 432              	 .align 2
 433              	.L28:
 434 00b8 00000540 	 .word 1074069504
 435              	 .cfi_endproc
 436              	.LFE55:
 438              	 .section .text.XMC_FLASH_ErasePages,"ax",%progbits
 439              	 .align 2
 440              	 .global XMC_FLASH_ErasePages
 441              	 .code 16
 442              	 .thumb_func
 444              	XMC_FLASH_ErasePages:
 445              	.LFB56:
 172:../Libraries/XMCLib/src/xmc1_flash.c **** 
 173:../Libraries/XMCLib/src/xmc1_flash.c **** /* Erase flash pages */
 174:../Libraries/XMCLib/src/xmc1_flash.c **** int32_t XMC_FLASH_ErasePages(uint32_t *address, uint32_t num_pages)
 175:../Libraries/XMCLib/src/xmc1_flash.c **** {
 446              	 .loc 2 175 0
 447              	 .cfi_startproc
 448 0000 80B5     	 push {r7,lr}
 449              	.LCFI21:
 450              	 .cfi_def_cfa_offset 8
 451              	 .cfi_offset 7,-8
 452              	 .cfi_offset 14,-4
 453 0002 84B0     	 sub sp,sp,#16
 454              	.LCFI22:
 455              	 .cfi_def_cfa_offset 24
 456 0004 00AF     	 add r7,sp,#0
 457              	.LCFI23:
 458              	 .cfi_def_cfa_register 7
 459 0006 7860     	 str r0,[r7,#4]
 460 0008 3960     	 str r1,[r7]
 176:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t page;
 177:../Libraries/XMCLib/src/xmc1_flash.c **** 
 178:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_ErasePages: Starting address not aligned to Page",
 179:../Libraries/XMCLib/src/xmc1_flash.c ****              ((uint32_t)address & FLASH_PAGE_ADDR_MASK) == 0U)
 180:../Libraries/XMCLib/src/xmc1_flash.c **** 
 181:../Libraries/XMCLib/src/xmc1_flash.c ****   int32_t status = NVM_E_FAIL;
 461              	 .loc 2 181 0
 462 000a 124B     	 ldr r3,.L35
 463 000c BB60     	 str r3,[r7,#8]
 182:../Libraries/XMCLib/src/xmc1_flash.c ****   for (page = 0U; page < num_pages; ++page)
 464              	 .loc 2 182 0
 465 000e 0023     	 mov r3,#0
 466 0010 FB60     	 str r3,[r7,#12]
 467 0012 15E0     	 b .L31
 468              	.L34:
 183:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 184:../Libraries/XMCLib/src/xmc1_flash.c ****     status = XMC1000_NvmErasePage(address);
 469              	 .loc 2 184 0
 470 0014 8023     	 mov r3,#128
 471 0016 5B00     	 lsl r3,r3,#1
 472 0018 1B68     	 ldr r3,[r3]
 473 001a 7A68     	 ldr r2,[r7,#4]
 474 001c 101C     	 mov r0,r2
 475 001e 9847     	 blx r3
 476 0020 031C     	 mov r3,r0
 477 0022 BB60     	 str r3,[r7,#8]
 185:../Libraries/XMCLib/src/xmc1_flash.c ****     if (status != NVM_PASS)
 478              	 .loc 2 185 0
 479 0024 BA68     	 ldr r2,[r7,#8]
 480 0026 8023     	 mov r3,#128
 481 0028 5B02     	 lsl r3,r3,#9
 482 002a 9A42     	 cmp r2,r3
 483 002c 01D0     	 beq .L32
 186:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 187:../Libraries/XMCLib/src/xmc1_flash.c ****       return status;
 484              	 .loc 2 187 0
 485 002e BB68     	 ldr r3,[r7,#8]
 486 0030 0BE0     	 b .L33
 487              	.L32:
 188:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 189:../Libraries/XMCLib/src/xmc1_flash.c **** 
 190:../Libraries/XMCLib/src/xmc1_flash.c ****     /* Increment the page address for the next erase */
 191:../Libraries/XMCLib/src/xmc1_flash.c ****     address += XMC_FLASH_WORDS_PER_PAGE;
 488              	 .loc 2 191 0 discriminator 2
 489 0032 7B68     	 ldr r3,[r7,#4]
 490 0034 0133     	 add r3,r3,#1
 491 0036 FF33     	 add r3,r3,#255
 492 0038 7B60     	 str r3,[r7,#4]
 182:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 493              	 .loc 2 182 0 discriminator 2
 494 003a FB68     	 ldr r3,[r7,#12]
 495 003c 0133     	 add r3,r3,#1
 496 003e FB60     	 str r3,[r7,#12]
 497              	.L31:
 182:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 498              	 .loc 2 182 0 is_stmt 0 discriminator 1
 499 0040 FA68     	 ldr r2,[r7,#12]
 500 0042 3B68     	 ldr r3,[r7]
 501 0044 9A42     	 cmp r2,r3
 502 0046 E5D3     	 bcc .L34
 192:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 193:../Libraries/XMCLib/src/xmc1_flash.c **** 
 194:../Libraries/XMCLib/src/xmc1_flash.c ****   return status;
 503              	 .loc 2 194 0 is_stmt 1
 504 0048 BB68     	 ldr r3,[r7,#8]
 505              	.L33:
 195:../Libraries/XMCLib/src/xmc1_flash.c **** 
 196:../Libraries/XMCLib/src/xmc1_flash.c **** }
 506              	 .loc 2 196 0
 507 004a 181C     	 mov r0,r3
 508 004c BD46     	 mov sp,r7
 509 004e 04B0     	 add sp,sp,#16
 510              	 
 511 0050 80BD     	 pop {r7,pc}
 512              	.L36:
 513 0052 C046     	 .align 2
 514              	.L35:
 515 0054 01000180 	 .word -2147418111
 516              	 .cfi_endproc
 517              	.LFE56:
 519              	 .section .text.XMC_FLASH_VerifyBlocks,"ax",%progbits
 520              	 .align 2
 521              	 .global XMC_FLASH_VerifyBlocks
 522              	 .code 16
 523              	 .thumb_func
 525              	XMC_FLASH_VerifyBlocks:
 526              	.LFB57:
 197:../Libraries/XMCLib/src/xmc1_flash.c **** 
 198:../Libraries/XMCLib/src/xmc1_flash.c **** /* Write multiple data blocks and verify the written data */
 199:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_VerifyBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks)
 200:../Libraries/XMCLib/src/xmc1_flash.c **** {
 527              	 .loc 2 200 0
 528              	 .cfi_startproc
 529 0000 80B5     	 push {r7,lr}
 530              	.LCFI24:
 531              	 .cfi_def_cfa_offset 8
 532              	 .cfi_offset 7,-8
 533              	 .cfi_offset 14,-4
 534 0002 86B0     	 sub sp,sp,#24
 535              	.LCFI25:
 536              	 .cfi_def_cfa_offset 32
 537 0004 00AF     	 add r7,sp,#0
 538              	.LCFI26:
 539              	 .cfi_def_cfa_register 7
 540 0006 F860     	 str r0,[r7,#12]
 541 0008 B960     	 str r1,[r7,#8]
 542 000a 7A60     	 str r2,[r7,#4]
 201:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t word;
 202:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t block;
 203:../Libraries/XMCLib/src/xmc1_flash.c **** 
 204:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_VerifyBlocks: Starting address not aligned to Block",
 205:../Libraries/XMCLib/src/xmc1_flash.c ****              ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)
 206:../Libraries/XMCLib/src/xmc1_flash.c **** 
 207:../Libraries/XMCLib/src/xmc1_flash.c ****   /* Configure the Continuous write with verify option command and reset the NVM error / verificati
 208:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG &= (uint16_t)~NVM_NVMPROG_ACTION_Msk;
 543              	 .loc 2 208 0
 544 000c 1E4A     	 ldr r2,.L43
 545 000e 1E4B     	 ldr r3,.L43
 546 0010 9B88     	 ldrh r3,[r3,#4]
 547 0012 9BB2     	 uxth r3,r3
 548 0014 FF21     	 mov r1,#255
 549 0016 8B43     	 bic r3,r1
 550 0018 9BB2     	 uxth r3,r3
 551 001a 9380     	 strh r3,[r2,#4]
 209:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG |= (uint16_t)((uint16_t)NVM_NVMPROG_RSTVERR_Msk |
 552              	 .loc 2 209 0
 553 001c 1A4A     	 ldr r2,.L43
 554 001e 1A4B     	 ldr r3,.L43
 555 0020 9B88     	 ldrh r3,[r3,#4]
 556 0022 9BB2     	 uxth r3,r3
 557 0024 1949     	 ldr r1,.L43+4
 558 0026 0B43     	 orr r3,r1
 559 0028 9BB2     	 uxth r3,r3
 560 002a 9380     	 strh r3,[r2,#4]
 210:../Libraries/XMCLib/src/xmc1_flash.c ****                              (uint16_t)NVM_NVMPROG_RSTECC_Msk |
 211:../Libraries/XMCLib/src/xmc1_flash.c ****                              (uint16_t)FLASH_ACTION_CONTINUOUS_VERIFY_ONLY);
 212:../Libraries/XMCLib/src/xmc1_flash.c **** 
 213:../Libraries/XMCLib/src/xmc1_flash.c ****   for (block = 0U; block < num_blocks; ++block)
 561              	 .loc 2 213 0
 562 002c 0023     	 mov r3,#0
 563 002e 3B61     	 str r3,[r7,#16]
 564 0030 1AE0     	 b .L38
 565              	.L42:
 214:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 215:../Libraries/XMCLib/src/xmc1_flash.c ****     for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
 566              	 .loc 2 215 0
 567 0032 0023     	 mov r3,#0
 568 0034 7B61     	 str r3,[r7,#20]
 569 0036 0CE0     	 b .L39
 570              	.L40:
 216:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 217:../Libraries/XMCLib/src/xmc1_flash.c ****       *address = *data;
 571              	 .loc 2 217 0 discriminator 3
 572 0038 BB68     	 ldr r3,[r7,#8]
 573 003a 1A68     	 ldr r2,[r3]
 574 003c FB68     	 ldr r3,[r7,#12]
 575 003e 1A60     	 str r2,[r3]
 218:../Libraries/XMCLib/src/xmc1_flash.c ****       data++;
 576              	 .loc 2 218 0 discriminator 3
 577 0040 BB68     	 ldr r3,[r7,#8]
 578 0042 0433     	 add r3,r3,#4
 579 0044 BB60     	 str r3,[r7,#8]
 219:../Libraries/XMCLib/src/xmc1_flash.c ****       address++;
 580              	 .loc 2 219 0 discriminator 3
 581 0046 FB68     	 ldr r3,[r7,#12]
 582 0048 0433     	 add r3,r3,#4
 583 004a FB60     	 str r3,[r7,#12]
 215:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 584              	 .loc 2 215 0 discriminator 3
 585 004c 7B69     	 ldr r3,[r7,#20]
 586 004e 0133     	 add r3,r3,#1
 587 0050 7B61     	 str r3,[r7,#20]
 588              	.L39:
 215:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 589              	 .loc 2 215 0 is_stmt 0 discriminator 1
 590 0052 7B69     	 ldr r3,[r7,#20]
 591 0054 032B     	 cmp r3,#3
 592 0056 EFD9     	 bls .L40
 220:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 221:../Libraries/XMCLib/src/xmc1_flash.c **** 
 222:../Libraries/XMCLib/src/xmc1_flash.c ****     while (XMC_FLASH_IsBusy() == true)
 593              	 .loc 2 222 0 is_stmt 1
 594 0058 C046     	 mov r8,r8
 595              	.L41:
 596              	 .loc 2 222 0 is_stmt 0 discriminator 1
 597 005a FFF7FEFF 	 bl XMC_FLASH_IsBusy
 598 005e 031E     	 sub r3,r0,#0
 599 0060 FBD1     	 bne .L41
 213:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 600              	 .loc 2 213 0 is_stmt 1 discriminator 2
 601 0062 3B69     	 ldr r3,[r7,#16]
 602 0064 0133     	 add r3,r3,#1
 603 0066 3B61     	 str r3,[r7,#16]
 604              	.L38:
 213:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 605              	 .loc 2 213 0 is_stmt 0 discriminator 1
 606 0068 3A69     	 ldr r2,[r7,#16]
 607 006a 7B68     	 ldr r3,[r7,#4]
 608 006c 9A42     	 cmp r2,r3
 609 006e E0D3     	 bcc .L42
 223:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 224:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 225:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 226:../Libraries/XMCLib/src/xmc1_flash.c **** 
 227:../Libraries/XMCLib/src/xmc1_flash.c ****   /* Stop continuous verify operation */
 228:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
 610              	 .loc 2 228 0 is_stmt 1
 611 0070 054A     	 ldr r2,.L43
 612 0072 054B     	 ldr r3,.L43
 613 0074 9B88     	 ldrh r3,[r3,#4]
 614 0076 9BB2     	 uxth r3,r3
 615 0078 FF21     	 mov r1,#255
 616 007a 8B43     	 bic r3,r1
 617 007c 9BB2     	 uxth r3,r3
 618 007e 9380     	 strh r3,[r2,#4]
 229:../Libraries/XMCLib/src/xmc1_flash.c **** }
 619              	 .loc 2 229 0
 620 0080 BD46     	 mov sp,r7
 621 0082 06B0     	 add sp,sp,#24
 622              	 
 623 0084 80BD     	 pop {r7,pc}
 624              	.L44:
 625 0086 C046     	 .align 2
 626              	.L43:
 627 0088 00000540 	 .word 1074069504
 628 008c E0300000 	 .word 12512
 629              	 .cfi_endproc
 630              	.LFE57:
 632              	 .section .text.XMC_FLASH_ReadBlocks,"ax",%progbits
 633              	 .align 2
 634              	 .global XMC_FLASH_ReadBlocks
 635              	 .code 16
 636              	 .thumb_func
 638              	XMC_FLASH_ReadBlocks:
 639              	.LFB58:
 230:../Libraries/XMCLib/src/xmc1_flash.c **** 
 231:../Libraries/XMCLib/src/xmc1_flash.c **** /* Read data blocks from flash */
 232:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_ReadBlocks(uint32_t *address, uint32_t *data, uint32_t num_blocks)
 233:../Libraries/XMCLib/src/xmc1_flash.c **** {
 640              	 .loc 2 233 0
 641              	 .cfi_startproc
 642 0000 80B5     	 push {r7,lr}
 643              	.LCFI27:
 644              	 .cfi_def_cfa_offset 8
 645              	 .cfi_offset 7,-8
 646              	 .cfi_offset 14,-4
 647 0002 86B0     	 sub sp,sp,#24
 648              	.LCFI28:
 649              	 .cfi_def_cfa_offset 32
 650 0004 00AF     	 add r7,sp,#0
 651              	.LCFI29:
 652              	 .cfi_def_cfa_register 7
 653 0006 F860     	 str r0,[r7,#12]
 654 0008 B960     	 str r1,[r7,#8]
 655 000a 7A60     	 str r2,[r7,#4]
 234:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t word;
 235:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t block;
 236:../Libraries/XMCLib/src/xmc1_flash.c **** 
 237:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
 238:../Libraries/XMCLib/src/xmc1_flash.c ****              ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)
 239:../Libraries/XMCLib/src/xmc1_flash.c **** 
 240:../Libraries/XMCLib/src/xmc1_flash.c ****   for (block = 0U; block < num_blocks; ++block)
 656              	 .loc 2 240 0
 657 000c 0023     	 mov r3,#0
 658 000e 3B61     	 str r3,[r7,#16]
 659 0010 15E0     	 b .L46
 660              	.L49:
 241:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 242:../Libraries/XMCLib/src/xmc1_flash.c ****     for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
 661              	 .loc 2 242 0
 662 0012 0023     	 mov r3,#0
 663 0014 7B61     	 str r3,[r7,#20]
 664 0016 0CE0     	 b .L47
 665              	.L48:
 243:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 244:../Libraries/XMCLib/src/xmc1_flash.c ****       *data = *address;
 666              	 .loc 2 244 0 discriminator 3
 667 0018 FB68     	 ldr r3,[r7,#12]
 668 001a 1A68     	 ldr r2,[r3]
 669 001c BB68     	 ldr r3,[r7,#8]
 670 001e 1A60     	 str r2,[r3]
 245:../Libraries/XMCLib/src/xmc1_flash.c ****       data++;
 671              	 .loc 2 245 0 discriminator 3
 672 0020 BB68     	 ldr r3,[r7,#8]
 673 0022 0433     	 add r3,r3,#4
 674 0024 BB60     	 str r3,[r7,#8]
 246:../Libraries/XMCLib/src/xmc1_flash.c ****       address++;
 675              	 .loc 2 246 0 discriminator 3
 676 0026 FB68     	 ldr r3,[r7,#12]
 677 0028 0433     	 add r3,r3,#4
 678 002a FB60     	 str r3,[r7,#12]
 242:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 679              	 .loc 2 242 0 discriminator 3
 680 002c 7B69     	 ldr r3,[r7,#20]
 681 002e 0133     	 add r3,r3,#1
 682 0030 7B61     	 str r3,[r7,#20]
 683              	.L47:
 242:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 684              	 .loc 2 242 0 is_stmt 0 discriminator 1
 685 0032 7B69     	 ldr r3,[r7,#20]
 686 0034 032B     	 cmp r3,#3
 687 0036 EFD9     	 bls .L48
 240:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 688              	 .loc 2 240 0 is_stmt 1 discriminator 2
 689 0038 3B69     	 ldr r3,[r7,#16]
 690 003a 0133     	 add r3,r3,#1
 691 003c 3B61     	 str r3,[r7,#16]
 692              	.L46:
 240:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 693              	 .loc 2 240 0 is_stmt 0 discriminator 1
 694 003e 3A69     	 ldr r2,[r7,#16]
 695 0040 7B68     	 ldr r3,[r7,#4]
 696 0042 9A42     	 cmp r2,r3
 697 0044 E5D3     	 bcc .L49
 247:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 248:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 249:../Libraries/XMCLib/src/xmc1_flash.c **** }
 698              	 .loc 2 249 0 is_stmt 1
 699 0046 BD46     	 mov sp,r7
 700 0048 06B0     	 add sp,sp,#24
 701              	 
 702 004a 80BD     	 pop {r7,pc}
 703              	 .cfi_endproc
 704              	.LFE58:
 706              	 .section .text.XMC_FLASH_EraseSector,"ax",%progbits
 707              	 .align 2
 708              	 .global XMC_FLASH_EraseSector
 709              	 .code 16
 710              	 .thumb_func
 712              	XMC_FLASH_EraseSector:
 713              	.LFB59:
 250:../Libraries/XMCLib/src/xmc1_flash.c **** 
 251:../Libraries/XMCLib/src/xmc1_flash.c **** /* Erase single sector */
 252:../Libraries/XMCLib/src/xmc1_flash.c **** int32_t XMC_FLASH_EraseSector(uint32_t *address)
 253:../Libraries/XMCLib/src/xmc1_flash.c **** {
 714              	 .loc 2 253 0
 715              	 .cfi_startproc
 716 0000 80B5     	 push {r7,lr}
 717              	.LCFI30:
 718              	 .cfi_def_cfa_offset 8
 719              	 .cfi_offset 7,-8
 720              	 .cfi_offset 14,-4
 721 0002 82B0     	 sub sp,sp,#8
 722              	.LCFI31:
 723              	 .cfi_def_cfa_offset 16
 724 0004 00AF     	 add r7,sp,#0
 725              	.LCFI32:
 726              	 .cfi_def_cfa_register 7
 727 0006 7860     	 str r0,[r7,#4]
 254:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_EraseSector: Starting address not aligned to Sector",
 255:../Libraries/XMCLib/src/xmc1_flash.c ****              ((uint32_t)address & FLASH_SECTOR_ADDR_MASK) == 0U)
 256:../Libraries/XMCLib/src/xmc1_flash.c ****   return XMC_FLASH_ErasePages(address, XMC_FLASH_PAGES_PER_SECTOR);
 728              	 .loc 2 256 0
 729 0008 7B68     	 ldr r3,[r7,#4]
 730 000a 181C     	 mov r0,r3
 731 000c 1021     	 mov r1,#16
 732 000e FFF7FEFF 	 bl XMC_FLASH_ErasePages
 733 0012 031C     	 mov r3,r0
 257:../Libraries/XMCLib/src/xmc1_flash.c **** }
 734              	 .loc 2 257 0
 735 0014 181C     	 mov r0,r3
 736 0016 BD46     	 mov sp,r7
 737 0018 02B0     	 add sp,sp,#8
 738              	 
 739 001a 80BD     	 pop {r7,pc}
 740              	 .cfi_endproc
 741              	.LFE59:
 743              	 .section .text.XMC_FLASH_ProgramPage,"ax",%progbits
 744              	 .align 2
 745              	 .global XMC_FLASH_ProgramPage
 746              	 .code 16
 747              	 .thumb_func
 749              	XMC_FLASH_ProgramPage:
 750              	.LFB60:
 258:../Libraries/XMCLib/src/xmc1_flash.c **** 
 259:../Libraries/XMCLib/src/xmc1_flash.c **** /* Program single page */
 260:../Libraries/XMCLib/src/xmc1_flash.c **** int32_t XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
 261:../Libraries/XMCLib/src/xmc1_flash.c **** {
 751              	 .loc 2 261 0
 752              	 .cfi_startproc
 753 0000 80B5     	 push {r7,lr}
 754              	.LCFI33:
 755              	 .cfi_def_cfa_offset 8
 756              	 .cfi_offset 7,-8
 757              	 .cfi_offset 14,-4
 758 0002 82B0     	 sub sp,sp,#8
 759              	.LCFI34:
 760              	 .cfi_def_cfa_offset 16
 761 0004 00AF     	 add r7,sp,#0
 762              	.LCFI35:
 763              	 .cfi_def_cfa_register 7
 764 0006 7860     	 str r0,[r7,#4]
 765 0008 3960     	 str r1,[r7]
 262:../Libraries/XMCLib/src/xmc1_flash.c ****   return XMC_FLASH_ProgramVerifyPage(address, data);
 766              	 .loc 2 262 0
 767 000a 7A68     	 ldr r2,[r7,#4]
 768 000c 3B68     	 ldr r3,[r7]
 769 000e 101C     	 mov r0,r2
 770 0010 191C     	 mov r1,r3
 771 0012 FFF7FEFF 	 bl XMC_FLASH_ProgramVerifyPage
 772 0016 031C     	 mov r3,r0
 263:../Libraries/XMCLib/src/xmc1_flash.c **** }
 773              	 .loc 2 263 0
 774 0018 181C     	 mov r0,r3
 775 001a BD46     	 mov sp,r7
 776 001c 02B0     	 add sp,sp,#8
 777              	 
 778 001e 80BD     	 pop {r7,pc}
 779              	 .cfi_endproc
 780              	.LFE60:
 782              	 .text
 783              	.Letext0:
 784              	 .file 3 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 785              	 .file 4 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 786              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 787              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1000_RomFunctionTable.h"
 788              	 .file 7 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc1_flash.h"
 789              	 .file 8 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc1_flash.c
    {standard input}:18     .text.XMC_FLASH_IsBusy:00000000 $t
    {standard input}:22     .text.XMC_FLASH_IsBusy:00000000 XMC_FLASH_IsBusy
    {standard input}:97     .text.XMC_FLASH_GetStatus:00000000 XMC_FLASH_GetStatus
    {standard input}:52     .text.XMC_FLASH_ClearStatus:00000000 $t
    {standard input}:57     .text.XMC_FLASH_ClearStatus:00000000 XMC_FLASH_ClearStatus
    {standard input}:87     .text.XMC_FLASH_ClearStatus:0000001c $d
    {standard input}:92     .text.XMC_FLASH_GetStatus:00000000 $t
    {standard input}:121    .text.XMC_FLASH_GetStatus:00000010 $d
    {standard input}:126    .text.XMC_FLASH_EnableEvent:00000000 $t
    {standard input}:131    .text.XMC_FLASH_EnableEvent:00000000 XMC_FLASH_EnableEvent
    {standard input}:165    .text.XMC_FLASH_EnableEvent:00000020 $d
    {standard input}:170    .text.XMC_FLASH_DisableEvent:00000000 $t
    {standard input}:175    .text.XMC_FLASH_DisableEvent:00000000 XMC_FLASH_DisableEvent
    {standard input}:211    .text.XMC_FLASH_DisableEvent:00000024 $d
    {standard input}:216    .text.XMC_FLASH_ErasePage:00000000 $t
    {standard input}:221    .text.XMC_FLASH_ErasePage:00000000 XMC_FLASH_ErasePage
    {standard input}:255    .text.XMC_FLASH_ProgramVerifyPage:00000000 $t
    {standard input}:260    .text.XMC_FLASH_ProgramVerifyPage:00000000 XMC_FLASH_ProgramVerifyPage
    {standard input}:297    .text.XMC_FLASH_WriteBlocks:00000000 $t
    {standard input}:302    .text.XMC_FLASH_WriteBlocks:00000000 XMC_FLASH_WriteBlocks
    {standard input}:434    .text.XMC_FLASH_WriteBlocks:000000b8 $d
    {standard input}:439    .text.XMC_FLASH_ErasePages:00000000 $t
    {standard input}:444    .text.XMC_FLASH_ErasePages:00000000 XMC_FLASH_ErasePages
    {standard input}:515    .text.XMC_FLASH_ErasePages:00000054 $d
    {standard input}:520    .text.XMC_FLASH_VerifyBlocks:00000000 $t
    {standard input}:525    .text.XMC_FLASH_VerifyBlocks:00000000 XMC_FLASH_VerifyBlocks
    {standard input}:627    .text.XMC_FLASH_VerifyBlocks:00000088 $d
    {standard input}:633    .text.XMC_FLASH_ReadBlocks:00000000 $t
    {standard input}:638    .text.XMC_FLASH_ReadBlocks:00000000 XMC_FLASH_ReadBlocks
    {standard input}:707    .text.XMC_FLASH_EraseSector:00000000 $t
    {standard input}:712    .text.XMC_FLASH_EraseSector:00000000 XMC_FLASH_EraseSector
    {standard input}:744    .text.XMC_FLASH_ProgramPage:00000000 $t
    {standard input}:749    .text.XMC_FLASH_ProgramPage:00000000 XMC_FLASH_ProgramPage
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
