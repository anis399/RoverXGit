   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc1_scu.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .bss.event_handler_list,"aw",%nobits
  18              	 .align 2
  21              	event_handler_list:
  22 0000 00000000 	 .space 256
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              	 .section .data.event_masks,"aw",%progbits
  24              	 .align 3
  27              	event_masks:
  28 0000 00001F00 	 .word 2031616
  29 0004 0E000000 	 .word 14
  30 0008 8F0060FF 	 .word -10485617
  31 000c 10000000 	 .word 16
  32 0010 70FF0000 	 .word 65392
  33 0014 01000000 	 .word 1
  34              	 .section .text.XMC_SCU_CalcTSEVAR,"ax",%progbits
  35              	 .align 2
  36              	 .code 16
  37              	 .thumb_func
  39              	XMC_SCU_CalcTSEVAR:
  40              	.LFB62:
  41              	 .file 1 "../Libraries/XMCLib/src/xmc1_scu.c"
   1:../Libraries/XMCLib/src/xmc1_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc1_scu.c ****  * @file xmc1_scu.c
   3:../Libraries/XMCLib/src/xmc1_scu.c ****  * @date 2019-12-16
   4:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc1_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_scu.c ****  *****************************************************************************
   7:../Libraries/XMCLib/src/xmc1_scu.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc1_scu.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_scu.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  12:../Libraries/XMCLib/src/xmc1_scu.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  14:../Libraries/XMCLib/src/xmc1_scu.c ****  * Permission is hereby granted, free of charge, to any person or organization
  15:../Libraries/XMCLib/src/xmc1_scu.c ****  * obtaining a copy of the software and accompanying documentation covered by
  16:../Libraries/XMCLib/src/xmc1_scu.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:../Libraries/XMCLib/src/xmc1_scu.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:../Libraries/XMCLib/src/xmc1_scu.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:../Libraries/XMCLib/src/xmc1_scu.c ****  * do so, all subject to the following:
  20:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  21:../Libraries/XMCLib/src/xmc1_scu.c ****  * The copyright notices in the Software and this entire statement, including
  22:../Libraries/XMCLib/src/xmc1_scu.c ****  * the above license grant, this restriction and the following disclaimer,
  23:../Libraries/XMCLib/src/xmc1_scu.c ****  * must be included in all copies of the Software, in whole or in part, and
  24:../Libraries/XMCLib/src/xmc1_scu.c ****  * all derivative works of the Software, unless such copies or derivative
  25:../Libraries/XMCLib/src/xmc1_scu.c ****  * works are solely in the form of machine-executable object code generated by
  26:../Libraries/XMCLib/src/xmc1_scu.c ****  * a source language processor.
  27:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  28:../Libraries/XMCLib/src/xmc1_scu.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:../Libraries/XMCLib/src/xmc1_scu.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:../Libraries/XMCLib/src/xmc1_scu.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:../Libraries/XMCLib/src/xmc1_scu.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:../Libraries/XMCLib/src/xmc1_scu.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:../Libraries/XMCLib/src/xmc1_scu.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:../Libraries/XMCLib/src/xmc1_scu.c ****  * DEALINGS IN THE SOFTWARE.
  35:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc1_scu.c ****  * To improve the quality of the software, users are encouraged to share
  37:../Libraries/XMCLib/src/xmc1_scu.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:../Libraries/XMCLib/src/xmc1_scu.c ****  * at XMCSupport@infineon.com.
  39:../Libraries/XMCLib/src/xmc1_scu.c ****  *****************************************************************************
  40:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  41:../Libraries/XMCLib/src/xmc1_scu.c ****  * Change History
  42:../Libraries/XMCLib/src/xmc1_scu.c ****  * --------------
  43:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  44:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-02-20:
  45:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Initial <br>
  46:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  47:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-05-20:
  48:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_StartTempMeasurement API is modified
  49:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_ASSERT statements are added in XMC_SCU_INTERRUPT_SetEventHandler
  50:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  51:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  53:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  54:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus APIs are added
  55:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  56:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-09-23:
  57:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC1400 support added
  58:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  59:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-11-30:
  60:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Documentation improved
  61:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  62:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-02-29:
  63:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_ScaleMCLKFrequency
  64:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues with down clock frequency scaling
  65:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  66:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-04-15:
  67:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_Init for XMC1400
  68:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues when trying to disable the OSCHP and use the XTAL pins as GPIO
  69:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  70:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-02-09
  71:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - At XMC_SCU_CLOCK_Init() fixed issue while reading oscillator watchdog status
  72:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  73:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-04-11:
  74:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added XMC_SCU_SetBMI()
  75:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  76:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-06-24
  77:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_SetBMI() for XMC11/XMC12/XMC13 to set to 1 the bit 11 of BMI
  78:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  79:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-10-25
  80:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Move the following functions to xmc1_scu.h as STATCI_INLINE and make them available for XM
  81:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_EnableDCO1OscillatorWatchdog(),
  82:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_DisableDCO1OscillatorWatchdog(),
  83:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_ClearDCO1OscillatorWatchdogStatus(),
  84:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_IsDCO1ClockFrequencyUsable()
  85:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_SetBMI() for XMC11/XMC12/XMC13 to set to 1 the bits [7:6] of BMI
  86:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  87:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2018-06-21:
  88:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_CLOCK_Init() for XMC1400 adding a delay between disable/enable oscillator 
  89:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_CLOCK_Init() for XMC1400 adding a wait time of 5s after enabling the RTC_X
  90:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  91:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2019-03-20:
  92:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fix XMC_SCU_CLOCK_Init() if external XTAL is used  for XMC1400 (clock watchdog issue, see 
  93:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added DISABLE_WAIT_RTC_XTAL_OSC_STARTUP preprocessor guard:
  94:../Libraries/XMCLib/src/xmc1_scu.c ****  *         The RTC_XTAL can be used as clock source for RTC or as reference for DCO1 calibration
  95:../Libraries/XMCLib/src/xmc1_scu.c ****  *         In both cases if no wait is done in the startup after enabling the RTC_XTAL oscillator,
  96:../Libraries/XMCLib/src/xmc1_scu.c ****  *         the RTC_Enable() or the calibration will stall the MCU until the oscillator is stable (m
  97:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode() and XMC_SCU_CLOCK_SetLowPerformance
  98:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  99:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2019-10-14:
 100:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added XMC_SCU_CLOCK_SetAdcClockSrc()
 101:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 102:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2019-12-16:
 103:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fix including files following the convention: angle brackets are used for standard include
 104:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 105:../Libraries/XMCLib/src/xmc1_scu.c ****  * @endcond
 106:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 107:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 108:../Libraries/XMCLib/src/xmc1_scu.c **** 
 109:../Libraries/XMCLib/src/xmc1_scu.c **** /**
 110:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 111:../Libraries/XMCLib/src/xmc1_scu.c ****  * @brief SCU low level driver API prototype definition for XMC1 family of microcontrollers <br>
 112:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 113:../Libraries/XMCLib/src/xmc1_scu.c ****  * <b>Detailed description of file</b> <br>
 114:../Libraries/XMCLib/src/xmc1_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
 115:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
 116:../Libraries/XMCLib/src/xmc1_scu.c ****  * ----Temperature Monitoring, Voltage Monitoring, CCU Start etc
 117:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 118:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_)<br>
 119:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Clock initialization, Clock Gating, Sleep Management etc
 120:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 121:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
 122:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Reset Init, Cause, Manual Reset Assert/Deassert etc
 123:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 124:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_)<br>
 125:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Initialization, Manual Assert/Deassert, Acknowledge etc
 126:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 127:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 128:../Libraries/XMCLib/src/xmc1_scu.c **** 
 129:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 130:../Libraries/XMCLib/src/xmc1_scu.c ****  * HEADER FILES
 131:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 132:../Libraries/XMCLib/src/xmc1_scu.c **** #include "xmc_scu.h"
 133:../Libraries/XMCLib/src/xmc1_scu.c **** 
 134:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_FAMILY == XMC1
 135:../Libraries/XMCLib/src/xmc1_scu.c **** 
 136:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 137:../Libraries/XMCLib/src/xmc1_scu.c ****  * MACROS
 138:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 139:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_IRQ_NUM             (3U)  /**< array index value for list of events that can generate S
 140:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_ENABLE  (195UL) /**< Password for enabling protection */
 141:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_DISABLE (192UL) /**< Password for disabling protection */
 142:../Libraries/XMCLib/src/xmc1_scu.c **** 
 143:../Libraries/XMCLib/src/xmc1_scu.c **** 
 144:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_CHECK_RTCCLKSRC(source)       ( (source == XMC_SCU_CLOCK_RTCCLKSRC_DCO2) || \
 145:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ERU_IOUT0) || \
 146:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP0_OUT) || \
 147:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP1_OUT) || \
 148:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP2_OUT) ) /**
 149:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 whe
 150:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 clo
 151:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 or 
 152:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Msk SCU_GENERAL_INTCR0_INTSEL0_Msk /**< Mask value of Interrupt So
 153:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 0 */
 154:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Size SCU_GENERAL_INTCR0_INTSEL1_Pos /**< Bit position value of Int
 155:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 1 */
 156:../Libraries/XMCLib/src/xmc1_scu.c **** 
 157:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T1   (0x10000F30U) /**< d is a constant data can be retrieved from Flash sector 0 t
 158:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 159:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T2   (0x10000F31U) /**< e is a constant data can be retrieved from Flash sector 0 t
 160:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 161:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T1 (0x10000F32U) /**< b is a constant data can be retrieved from Flash sector 0 t
 162:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 163:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T2 (0x10000F33U) /**< a is a constant data can be retrieved from Flash sector 0 t
 164:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 165:../Libraries/XMCLib/src/xmc1_scu.c **** 
 166:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 167:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (64U) /**< Maximum supported SCU events for XMC14 device. */
 168:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 169:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (32U)  /**< Maximum supported SCU events for XMC11/12/13 device
 170:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 171:../Libraries/XMCLib/src/xmc1_scu.c **** 
 172:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 173:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q22_10 (48000U << 10) /**< used to configures main clock (MCLK) fre
 174:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC14 d
 175:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 176:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q24_8 (32000U << 8) /**< used to configures main clock (MCLK) frequ
 177:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC11/1
 178:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 179:../Libraries/XMCLib/src/xmc1_scu.c **** 
 180:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_BmiInstallationReq \
 181:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t requestedBmiValue))0x00000108U)) /**< Pointer to Request BMI ins
 182:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          available inside ROM. */
 183:../Libraries/XMCLib/src/xmc1_scu.c **** 
 184:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTemperature \
 185:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(void))0x0000010cU)) /**<  Pointer to Calculate chip temperature routine i
 186:../Libraries/XMCLib/src/xmc1_scu.c ****                                                     available inside ROM. */
 187:../Libraries/XMCLib/src/xmc1_scu.c **** 
 188:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTSEVAR \
 189:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t temperature))0x00000120U)) /**<  Pointer to Calculate target lev
 190:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                     comparison routine is available
 191:../Libraries/XMCLib/src/xmc1_scu.c **** 
 192:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 193:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL DATA
 194:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 195:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For 
 196:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         functions o
 197:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         occurrence.
 198:../Libraries/XMCLib/src/xmc1_scu.c **** 
 199:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_t event_masks[SCU_IRQ_NUM] =
 200:../Libraries/XMCLib/src/xmc1_scu.c **** {
 201:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR |
 202:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED |
 203:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PESRAM |
 204:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC0 |
 205:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 206:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC1 |
 207:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 208:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 209:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEMCAN |
 210:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 211:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 212:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK |
 213:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 214:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOCI),
 215:../Libraries/XMCLib/src/xmc1_scu.c **** 
 216:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL |
 217:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 218:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC |
 219:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 220:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDDPI |
 221:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDROP |
 222:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VCLIP |
 223:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_DONE |
 224:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_HIGH |
 225:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_LOW |
 226:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_WDT_WARN |
 227:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC |
 228:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_ALARM |
 229:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED |
 230:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED |
 231:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED |
 232:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED |
 233:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED),
 234:../Libraries/XMCLib/src/xmc1_scu.c **** 
 235:../Libraries/XMCLib/src/xmc1_scu.c ****   (
 236:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 237:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ORC0 |
 238:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ORC1 |
 239:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ORC2 |
 240:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ORC3 |
 241:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ORC4 |
 242:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ORC5 |
 243:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ORC6 |
 244:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ORC7 |
 245:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 246:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 247:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ACMP0 |
 248:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ACMP1 |
 249:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ACMP2 |
 250:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 251:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_INTERRUPT_EVENT_ACMP3 |
 252:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 253:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 254:../Libraries/XMCLib/src/xmc1_scu.c ****     0)
 255:../Libraries/XMCLib/src/xmc1_scu.c **** }; /**<   Defines list of events that can generate SCU interrupt and also indicates SCU events mapp
 256:../Libraries/XMCLib/src/xmc1_scu.c ****          service request number. These event mask values can be used to verify which event is trigg
 257:../Libraries/XMCLib/src/xmc1_scu.c ****          to service request number during runtime. All the event items are tabulated as per service
 258:../Libraries/XMCLib/src/xmc1_scu.c ****          table of SCU. */
 259:../Libraries/XMCLib/src/xmc1_scu.c **** 
 260:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 261:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL ROUTINES
 262:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 263:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 264:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t idiv);
 265:../Libraries/XMCLib/src/xmc1_scu.c **** 
 266:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 267:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t idiv);
 268:../Libraries/XMCLib/src/xmc1_scu.c **** 
 269:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the value which must be installed in ANATSEIx register to get indication in
 270:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_INTERRUPT->SRRAW  bit when the chip temperature is above/below some target/threshold. */
 271:../Libraries/XMCLib/src/xmc1_scu.c **** static uint32_t XMC_SCU_CalcTSEVAR(uint32_t temperature)
 272:../Libraries/XMCLib/src/xmc1_scu.c **** {
  42              	 .loc 1 272 0
  43              	 .cfi_startproc
  44 0000 80B5     	 push {r7,lr}
  45              	.LCFI0:
  46              	 .cfi_def_cfa_offset 8
  47              	 .cfi_offset 7,-8
  48              	 .cfi_offset 14,-4
  49 0002 84B0     	 sub sp,sp,#16
  50              	.LCFI1:
  51              	 .cfi_def_cfa_offset 24
  52 0004 00AF     	 add r7,sp,#0
  53              	.LCFI2:
  54              	 .cfi_def_cfa_register 7
  55 0006 7860     	 str r0,[r7,#4]
 273:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
 274:../Libraries/XMCLib/src/xmc1_scu.c **** 
 275:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CalcTSEVAR: temperature out of range", (temperature >= 233U) && (temperature 
 276:../Libraries/XMCLib/src/xmc1_scu.c **** 
 277:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = ROM_CalcTSEVAR(temperature);
  56              	 .loc 1 277 0
  57 0008 9023     	 mov r3,#144
  58 000a 5B00     	 lsl r3,r3,#1
  59 000c 1B68     	 ldr r3,[r3]
  60 000e 7A68     	 ldr r2,[r7,#4]
  61 0010 101C     	 mov r0,r2
  62 0012 9847     	 blx r3
  63 0014 031C     	 mov r3,r0
  64 0016 FB60     	 str r3,[r7,#12]
 278:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
  65              	 .loc 1 278 0
  66 0018 FB68     	 ldr r3,[r7,#12]
  67 001a 002B     	 cmp r3,#0
  68 001c 14D1     	 bne .L2
 279:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 280:../Libraries/XMCLib/src/xmc1_scu.c ****     limit = ROM_CalcTSEVAR(temperature + 1U);
  69              	 .loc 1 280 0
  70 001e 9023     	 mov r3,#144
  71 0020 5B00     	 lsl r3,r3,#1
  72 0022 1B68     	 ldr r3,[r3]
  73 0024 7A68     	 ldr r2,[r7,#4]
  74 0026 0132     	 add r2,r2,#1
  75 0028 101C     	 mov r0,r2
  76 002a 9847     	 blx r3
  77 002c 031C     	 mov r3,r0
  78 002e FB60     	 str r3,[r7,#12]
 281:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
  79              	 .loc 1 281 0
  80 0030 FB68     	 ldr r3,[r7,#12]
  81 0032 002B     	 cmp r3,#0
  82 0034 08D1     	 bne .L2
 282:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 283:../Libraries/XMCLib/src/xmc1_scu.c ****       limit = ROM_CalcTSEVAR(temperature - 1U);
  83              	 .loc 1 283 0
  84 0036 9023     	 mov r3,#144
  85 0038 5B00     	 lsl r3,r3,#1
  86 003a 1B68     	 ldr r3,[r3]
  87 003c 7A68     	 ldr r2,[r7,#4]
  88 003e 013A     	 sub r2,r2,#1
  89 0040 101C     	 mov r0,r2
  90 0042 9847     	 blx r3
  91 0044 031C     	 mov r3,r0
  92 0046 FB60     	 str r3,[r7,#12]
  93              	.L2:
 284:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 285:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 286:../Libraries/XMCLib/src/xmc1_scu.c **** 
 287:../Libraries/XMCLib/src/xmc1_scu.c ****   return (limit);
  94              	 .loc 1 287 0
  95 0048 FB68     	 ldr r3,[r7,#12]
 288:../Libraries/XMCLib/src/xmc1_scu.c **** }
  96              	 .loc 1 288 0
  97 004a 181C     	 mov r0,r3
  98 004c BD46     	 mov sp,r7
  99 004e 04B0     	 add sp,sp,#16
 100              	 
 101 0050 80BD     	 pop {r7,pc}
 102              	 .cfi_endproc
 103              	.LFE62:
 105 0052 C046     	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
 106              	 .align 2
 107              	 .global XMC_SCU_INTERRUPT_EnableEvent
 108              	 .code 16
 109              	 .thumb_func
 111              	XMC_SCU_INTERRUPT_EnableEvent:
 112              	.LFB64:
 289:../Libraries/XMCLib/src/xmc1_scu.c **** 
 290:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 291:../Libraries/XMCLib/src/xmc1_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 292:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_FORCEINLINE void delay(uint32_t cycles)
 293:../Libraries/XMCLib/src/xmc1_scu.c **** {
 294:../Libraries/XMCLib/src/xmc1_scu.c ****   while (--cycles > 0U)
 295:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 296:../Libraries/XMCLib/src/xmc1_scu.c ****     __NOP();
 297:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 298:../Libraries/XMCLib/src/xmc1_scu.c **** }
 299:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 300:../Libraries/XMCLib/src/xmc1_scu.c **** 
 301:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 302:../Libraries/XMCLib/src/xmc1_scu.c ****  * API IMPLEMENTATION
 303:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 304:../Libraries/XMCLib/src/xmc1_scu.c **** #ifdef XMC_ASSERT_ENABLE
 305:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to verify SCU event weather it is valid event or not */
 306:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_INLINE bool XMC_SCU_INTERRUPT_IsValidEvent(XMC_SCU_INTERRUPT_EVENT_t event)
 307:../Libraries/XMCLib/src/xmc1_scu.c **** {
 308:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((event == XMC_SCU_INTERRUPT_EVENT_WDT_WARN) ||
 309:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC) ||
 310:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_ALARM) ||
 311:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDDPI) ||
 312:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 313:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC1) ||
 314:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 315:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 316:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEMCAN) ||
 317:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 318:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 319:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK) ||
 320:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC) ||
 321:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 322:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 323:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP0) ||
 324:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP1) ||
 325:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP2) ||
 326:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 327:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP3) ||
 328:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 329:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 330:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDROP) ||
 331:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 332:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC0) ||
 333:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC1) ||
 334:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC2) ||
 335:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC3) ||
 336:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC4) ||
 337:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC5) ||
 338:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC6) ||
 339:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC7) ||
 340:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 341:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOCI) ||
 342:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PESRAM) ||
 343:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC0) ||
 344:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR) ||
 345:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED) ||
 346:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VCLIP) ||
 347:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL) ||
 348:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED) ||
 349:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED) ||
 350:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED) ||
 351:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED) ||
 352:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED) ||
 353:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_DONE) ||
 354:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_HIGH) ||
 355:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_LOW));
 356:../Libraries/XMCLib/src/xmc1_scu.c **** }
 357:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 358:../Libraries/XMCLib/src/xmc1_scu.c **** 
 359:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to enable the SCU event */
 360:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 361:../Libraries/XMCLib/src/xmc1_scu.c **** {
 113              	 .loc 1 361 0
 114              	 .cfi_startproc
 115 0000 B0B5     	 push {r4,r5,r7,lr}
 116              	.LCFI3:
 117              	 .cfi_def_cfa_offset 16
 118              	 .cfi_offset 4,-16
 119              	 .cfi_offset 5,-12
 120              	 .cfi_offset 7,-8
 121              	 .cfi_offset 14,-4
 122 0002 82B0     	 sub sp,sp,#8
 123              	.LCFI4:
 124              	 .cfi_def_cfa_offset 24
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI5:
 127              	 .cfi_def_cfa_register 7
 128 0006 3860     	 str r0,[r7]
 129 0008 7960     	 str r1,[r7,#4]
 362:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 130              	 .loc 1 362 0
 131 000a 094B     	 ldr r3,.L5
 132 000c 084A     	 ldr r2,.L5
 133 000e 5168     	 ldr r1,[r2,#4]
 134 0010 3A68     	 ldr r2,[r7]
 135 0012 0A43     	 orr r2,r1
 136 0014 5A60     	 str r2,[r3,#4]
 363:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 364:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
 137              	 .loc 1 364 0
 138 0016 064B     	 ldr r3,.L5
 139 0018 054A     	 ldr r2,.L5
 140 001a 526A     	 ldr r2,[r2,#36]
 141 001c 7968     	 ldr r1,[r7,#4]
 142 001e 0C00     	 lsr r4,r1,#0
 143 0020 0021     	 mov r1,#0
 144 0022 0D1C     	 mov r5,r1
 145 0024 211C     	 mov r1,r4
 146 0026 0A43     	 orr r2,r1
 147 0028 5A62     	 str r2,[r3,#36]
 365:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 366:../Libraries/XMCLib/src/xmc1_scu.c **** }
 148              	 .loc 1 366 0
 149 002a BD46     	 mov sp,r7
 150 002c 02B0     	 add sp,sp,#8
 151              	 
 152 002e B0BD     	 pop {r4,r5,r7,pc}
 153              	.L6:
 154              	 .align 2
 155              	.L5:
 156 0030 38000140 	 .word 1073807416
 157              	 .cfi_endproc
 158              	.LFE64:
 160              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 161              	 .align 2
 162              	 .global XMC_SCU_INTERRUPT_DisableEvent
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_SCU_INTERRUPT_DisableEvent:
 167              	.LFB65:
 367:../Libraries/XMCLib/src/xmc1_scu.c **** 
 368:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to disable the SCU event */
 369:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 370:../Libraries/XMCLib/src/xmc1_scu.c **** {
 168              	 .loc 1 370 0
 169              	 .cfi_startproc
 170 0000 B0B5     	 push {r4,r5,r7,lr}
 171              	.LCFI6:
 172              	 .cfi_def_cfa_offset 16
 173              	 .cfi_offset 4,-16
 174              	 .cfi_offset 5,-12
 175              	 .cfi_offset 7,-8
 176              	 .cfi_offset 14,-4
 177 0002 82B0     	 sub sp,sp,#8
 178              	.LCFI7:
 179              	 .cfi_def_cfa_offset 24
 180 0004 00AF     	 add r7,sp,#0
 181              	.LCFI8:
 182              	 .cfi_def_cfa_register 7
 183 0006 3860     	 str r0,[r7]
 184 0008 7960     	 str r1,[r7,#4]
 371:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 185              	 .loc 1 371 0
 186 000a 0A4B     	 ldr r3,.L8
 187 000c 094A     	 ldr r2,.L8
 188 000e 5268     	 ldr r2,[r2,#4]
 189 0010 3968     	 ldr r1,[r7]
 190 0012 C943     	 mvn r1,r1
 191 0014 0A40     	 and r2,r1
 192 0016 5A60     	 str r2,[r3,#4]
 372:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 373:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 &= (uint32_t)~(event >> 32U);
 193              	 .loc 1 373 0
 194 0018 064B     	 ldr r3,.L8
 195 001a 064A     	 ldr r2,.L8
 196 001c 526A     	 ldr r2,[r2,#36]
 197 001e 7968     	 ldr r1,[r7,#4]
 198 0020 0C00     	 lsr r4,r1,#0
 199 0022 0021     	 mov r1,#0
 200 0024 0D1C     	 mov r5,r1
 201 0026 211C     	 mov r1,r4
 202 0028 C943     	 mvn r1,r1
 203 002a 0A40     	 and r2,r1
 204 002c 5A62     	 str r2,[r3,#36]
 374:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 375:../Libraries/XMCLib/src/xmc1_scu.c **** }
 205              	 .loc 1 375 0
 206 002e BD46     	 mov sp,r7
 207 0030 02B0     	 add sp,sp,#8
 208              	 
 209 0032 B0BD     	 pop {r4,r5,r7,pc}
 210              	.L9:
 211              	 .align 2
 212              	.L8:
 213 0034 38000140 	 .word 1073807416
 214              	 .cfi_endproc
 215              	.LFE65:
 217              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 218              	 .align 2
 219              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 220              	 .code 16
 221              	 .thumb_func
 223              	XMC_SCU_INTERRUPT_TriggerEvent:
 224              	.LFB66:
 376:../Libraries/XMCLib/src/xmc1_scu.c **** 
 377:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to trigger the SCU event */
 378:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 379:../Libraries/XMCLib/src/xmc1_scu.c **** {
 225              	 .loc 1 379 0
 226              	 .cfi_startproc
 227 0000 B0B5     	 push {r4,r5,r7,lr}
 228              	.LCFI9:
 229              	 .cfi_def_cfa_offset 16
 230              	 .cfi_offset 4,-16
 231              	 .cfi_offset 5,-12
 232              	 .cfi_offset 7,-8
 233              	 .cfi_offset 14,-4
 234 0002 82B0     	 sub sp,sp,#8
 235              	.LCFI10:
 236              	 .cfi_def_cfa_offset 24
 237 0004 00AF     	 add r7,sp,#0
 238              	.LCFI11:
 239              	 .cfi_def_cfa_register 7
 240 0006 3860     	 str r0,[r7]
 241 0008 7960     	 str r1,[r7,#4]
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 242              	 .loc 1 380 0
 243 000a 094B     	 ldr r3,.L11
 244 000c 084A     	 ldr r2,.L11
 245 000e D168     	 ldr r1,[r2,#12]
 246 0010 3A68     	 ldr r2,[r7]
 247 0012 0A43     	 orr r2,r1
 248 0014 DA60     	 str r2,[r3,#12]
 381:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 382:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET1 |= (uint32_t)(event >> 32U);
 249              	 .loc 1 382 0
 250 0016 064B     	 ldr r3,.L11
 251 0018 054A     	 ldr r2,.L11
 252 001a D26A     	 ldr r2,[r2,#44]
 253 001c 7968     	 ldr r1,[r7,#4]
 254 001e 0C00     	 lsr r4,r1,#0
 255 0020 0021     	 mov r1,#0
 256 0022 0D1C     	 mov r5,r1
 257 0024 211C     	 mov r1,r4
 258 0026 0A43     	 orr r2,r1
 259 0028 DA62     	 str r2,[r3,#44]
 383:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 384:../Libraries/XMCLib/src/xmc1_scu.c **** }
 260              	 .loc 1 384 0
 261 002a BD46     	 mov sp,r7
 262 002c 02B0     	 add sp,sp,#8
 263              	 
 264 002e B0BD     	 pop {r4,r5,r7,pc}
 265              	.L12:
 266              	 .align 2
 267              	.L11:
 268 0030 38000140 	 .word 1073807416
 269              	 .cfi_endproc
 270              	.LFE66:
 272              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 273              	 .align 2
 274              	 .global XMC_SCU_INTERUPT_GetEventStatus
 275              	 .code 16
 276              	 .thumb_func
 278              	XMC_SCU_INTERUPT_GetEventStatus:
 279              	.LFB67:
 385:../Libraries/XMCLib/src/xmc1_scu.c **** 
 386:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to get the SCU event status */
 387:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 388:../Libraries/XMCLib/src/xmc1_scu.c **** {
 280              	 .loc 1 388 0
 281              	 .cfi_startproc
 282 0000 B0B5     	 push {r4,r5,r7,lr}
 283              	.LCFI12:
 284              	 .cfi_def_cfa_offset 16
 285              	 .cfi_offset 4,-16
 286              	 .cfi_offset 5,-12
 287              	 .cfi_offset 7,-8
 288              	 .cfi_offset 14,-4
 289 0002 82B0     	 sub sp,sp,#8
 290              	.LCFI13:
 291              	 .cfi_def_cfa_offset 24
 292 0004 00AF     	 add r7,sp,#0
 293              	.LCFI14:
 294              	 .cfi_def_cfa_register 7
 389:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t tmp;
 390:../Libraries/XMCLib/src/xmc1_scu.c **** 
 391:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp = SCU_INTERRUPT->SRRAW;
 295              	 .loc 1 391 0
 296 0006 0E4B     	 ldr r3,.L15
 297 0008 1B68     	 ldr r3,[r3]
 298 000a 3B60     	 str r3,[r7]
 299 000c 0023     	 mov r3,#0
 300 000e 7B60     	 str r3,[r7,#4]
 392:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 393:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
 301              	 .loc 1 393 0
 302 0010 0B4B     	 ldr r3,.L15
 303 0012 1B6A     	 ldr r3,[r3,#32]
 304 0014 1C1C     	 mov r4,r3
 305 0016 0023     	 mov r3,#0
 306 0018 1D1C     	 mov r5,r3
 307 001a 2200     	 lsl r2,r4,#0
 308 001c 0023     	 mov r3,#0
 309 001e 191C     	 mov r1,r3
 310 0020 0B1C     	 mov r3,r1
 311 0022 141C     	 mov r4,r2
 312 0024 3A68     	 ldr r2,[r7]
 313 0026 1A43     	 orr r2,r3
 314 0028 3A60     	 str r2,[r7]
 315 002a 7A68     	 ldr r2,[r7,#4]
 316 002c 2243     	 orr r2,r4
 317 002e 131C     	 mov r3,r2
 318 0030 7B60     	 str r3,[r7,#4]
 394:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 395:../Libraries/XMCLib/src/xmc1_scu.c ****   return (tmp);
 319              	 .loc 1 395 0
 320 0032 3B68     	 ldr r3,[r7]
 321 0034 7C68     	 ldr r4,[r7,#4]
 396:../Libraries/XMCLib/src/xmc1_scu.c **** }
 322              	 .loc 1 396 0
 323 0036 181C     	 mov r0,r3
 324 0038 211C     	 mov r1,r4
 325 003a BD46     	 mov sp,r7
 326 003c 02B0     	 add sp,sp,#8
 327              	 
 328 003e B0BD     	 pop {r4,r5,r7,pc}
 329              	.L16:
 330              	 .align 2
 331              	.L15:
 332 0040 38000140 	 .word 1073807416
 333              	 .cfi_endproc
 334              	.LFE67:
 336              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 337              	 .align 2
 338              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 339              	 .code 16
 340              	 .thumb_func
 342              	XMC_SCU_INTERRUPT_ClearEventStatus:
 343              	.LFB68:
 397:../Libraries/XMCLib/src/xmc1_scu.c **** 
 398:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to clear the SCU event status */
 399:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 400:../Libraries/XMCLib/src/xmc1_scu.c **** {
 344              	 .loc 1 400 0
 345              	 .cfi_startproc
 346 0000 B0B5     	 push {r4,r5,r7,lr}
 347              	.LCFI15:
 348              	 .cfi_def_cfa_offset 16
 349              	 .cfi_offset 4,-16
 350              	 .cfi_offset 5,-12
 351              	 .cfi_offset 7,-8
 352              	 .cfi_offset 14,-4
 353 0002 82B0     	 sub sp,sp,#8
 354              	.LCFI16:
 355              	 .cfi_def_cfa_offset 24
 356 0004 00AF     	 add r7,sp,#0
 357              	.LCFI17:
 358              	 .cfi_def_cfa_register 7
 359 0006 3860     	 str r0,[r7]
 360 0008 7960     	 str r1,[r7,#4]
 401:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 361              	 .loc 1 401 0
 362 000a 094B     	 ldr r3,.L18
 363 000c 084A     	 ldr r2,.L18
 364 000e 9168     	 ldr r1,[r2,#8]
 365 0010 3A68     	 ldr r2,[r7]
 366 0012 0A43     	 orr r2,r1
 367 0014 9A60     	 str r2,[r3,#8]
 402:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 403:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
 368              	 .loc 1 403 0
 369 0016 064B     	 ldr r3,.L18
 370 0018 054A     	 ldr r2,.L18
 371 001a 926A     	 ldr r2,[r2,#40]
 372 001c 7968     	 ldr r1,[r7,#4]
 373 001e 0C00     	 lsr r4,r1,#0
 374 0020 0021     	 mov r1,#0
 375 0022 0D1C     	 mov r5,r1
 376 0024 211C     	 mov r1,r4
 377 0026 0A43     	 orr r2,r1
 378 0028 9A62     	 str r2,[r3,#40]
 404:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 405:../Libraries/XMCLib/src/xmc1_scu.c **** }
 379              	 .loc 1 405 0
 380 002a BD46     	 mov sp,r7
 381 002c 02B0     	 add sp,sp,#8
 382              	 
 383 002e B0BD     	 pop {r4,r5,r7,pc}
 384              	.L19:
 385              	 .align 2
 386              	.L18:
 387 0030 38000140 	 .word 1073807416
 388              	 .cfi_endproc
 389              	.LFE68:
 391              	 .section .text.XMC_SCU_LockProtectedBits,"ax",%progbits
 392              	 .align 2
 393              	 .global XMC_SCU_LockProtectedBits
 394              	 .code 16
 395              	 .thumb_func
 397              	XMC_SCU_LockProtectedBits:
 398              	.LFB69:
 406:../Libraries/XMCLib/src/xmc1_scu.c **** 
 407:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to lock protected bitfields from being modified */
 408:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_LockProtectedBits(void)
 409:../Libraries/XMCLib/src/xmc1_scu.c **** {
 399              	 .loc 1 409 0
 400              	 .cfi_startproc
 401 0000 80B5     	 push {r7,lr}
 402              	.LCFI18:
 403              	 .cfi_def_cfa_offset 8
 404              	 .cfi_offset 7,-8
 405              	 .cfi_offset 14,-4
 406 0002 00AF     	 add r7,sp,#0
 407              	.LCFI19:
 408              	 .cfi_def_cfa_register 7
 410:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 409              	 .loc 1 410 0
 410 0004 024B     	 ldr r3,.L21
 411 0006 C322     	 mov r2,#195
 412 0008 5A62     	 str r2,[r3,#36]
 411:../Libraries/XMCLib/src/xmc1_scu.c **** }
 413              	 .loc 1 411 0
 414 000a BD46     	 mov sp,r7
 415              	 
 416 000c 80BD     	 pop {r7,pc}
 417              	.L22:
 418 000e C046     	 .align 2
 419              	.L21:
 420 0010 00000140 	 .word 1073807360
 421              	 .cfi_endproc
 422              	.LFE69:
 424              	 .section .text.XMC_SCU_UnlockProtectedBits,"ax",%progbits
 425              	 .align 2
 426              	 .global XMC_SCU_UnlockProtectedBits
 427              	 .code 16
 428              	 .thumb_func
 430              	XMC_SCU_UnlockProtectedBits:
 431              	.LFB70:
 412:../Libraries/XMCLib/src/xmc1_scu.c **** 
 413:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to make protected bitfields available for modification */
 414:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_UnlockProtectedBits(void)
 415:../Libraries/XMCLib/src/xmc1_scu.c **** {
 432              	 .loc 1 415 0
 433              	 .cfi_startproc
 434 0000 80B5     	 push {r7,lr}
 435              	.LCFI20:
 436              	 .cfi_def_cfa_offset 8
 437              	 .cfi_offset 7,-8
 438              	 .cfi_offset 14,-4
 439 0002 00AF     	 add r7,sp,#0
 440              	.LCFI21:
 441              	 .cfi_def_cfa_register 7
 416:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 442              	 .loc 1 416 0
 443 0004 054B     	 ldr r3,.L25
 444 0006 C022     	 mov r2,#192
 445 0008 5A62     	 str r2,[r3,#36]
 417:../Libraries/XMCLib/src/xmc1_scu.c **** 
 418:../Libraries/XMCLib/src/xmc1_scu.c ****   while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
 446              	 .loc 1 418 0
 447 000a C046     	 mov r8,r8
 448              	.L24:
 449              	 .loc 1 418 0 is_stmt 0 discriminator 1
 450 000c 034B     	 ldr r3,.L25
 451 000e 5B6A     	 ldr r3,[r3,#36]
 452 0010 0422     	 mov r2,#4
 453 0012 1340     	 and r3,r2
 454 0014 FAD1     	 bne .L24
 419:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 420:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Loop until the lock is removed */
 421:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 422:../Libraries/XMCLib/src/xmc1_scu.c **** }
 455              	 .loc 1 422 0 is_stmt 1
 456 0016 BD46     	 mov sp,r7
 457              	 
 458 0018 80BD     	 pop {r7,pc}
 459              	.L26:
 460 001a C046     	 .align 2
 461              	.L25:
 462 001c 00000140 	 .word 1073807360
 463              	 .cfi_endproc
 464              	.LFE70:
 466              	 .section .text.XMC_SCU_SupplyMonitorInit,"ax",%progbits
 467              	 .align 2
 468              	 .global XMC_SCU_SupplyMonitorInit
 469              	 .code 16
 470              	 .thumb_func
 472              	XMC_SCU_SupplyMonitorInit:
 473              	.LFB71:
 423:../Libraries/XMCLib/src/xmc1_scu.c **** 
 424:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to initialize power supply monitoring unit */
 425:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SupplyMonitorInit(const XMC_SCU_SUPPLYMONITOR_t *obj)
 426:../Libraries/XMCLib/src/xmc1_scu.c **** {
 474              	 .loc 1 426 0
 475              	 .cfi_startproc
 476 0000 80B5     	 push {r7,lr}
 477              	.LCFI22:
 478              	 .cfi_def_cfa_offset 8
 479              	 .cfi_offset 7,-8
 480              	 .cfi_offset 14,-4
 481 0002 84B0     	 sub sp,sp,#16
 482              	.LCFI23:
 483              	 .cfi_def_cfa_offset 24
 484 0004 00AF     	 add r7,sp,#0
 485              	.LCFI24:
 486              	 .cfi_def_cfa_register 7
 487 0006 7860     	 str r0,[r7,#4]
 427:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t anavdel;
 428:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t irqmask;
 429:../Libraries/XMCLib/src/xmc1_scu.c **** 
 430:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel = 0UL;
 488              	 .loc 1 430 0
 489 0008 0023     	 mov r3,#0
 490 000a FB60     	 str r3,[r7,#12]
 431:../Libraries/XMCLib/src/xmc1_scu.c **** 
 432:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj-> ext_supply_threshold) << SCU_ANALOG_ANAVDEL_VDEL_SELECT_Pos);
 491              	 .loc 1 432 0
 492 000c 7B68     	 ldr r3,[r7,#4]
 493 000e 1B68     	 ldr r3,[r3]
 494 0010 FA68     	 ldr r2,[r7,#12]
 495 0012 1343     	 orr r3,r2
 496 0014 FB60     	 str r3,[r7,#12]
 433:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj->ext_supply_monitor_speed) << SCU_ANALOG_ANAVDEL_VDEL_TIM_ADJ_Pos);
 497              	 .loc 1 433 0
 498 0016 7B68     	 ldr r3,[r7,#4]
 499 0018 5B68     	 ldr r3,[r3,#4]
 500 001a 9B00     	 lsl r3,r3,#2
 501 001c FA68     	 ldr r2,[r7,#12]
 502 001e 1343     	 orr r3,r2
 503 0020 FB60     	 str r3,[r7,#12]
 434:../Libraries/XMCLib/src/xmc1_scu.c **** 
 435:../Libraries/XMCLib/src/xmc1_scu.c ****   if (true == (obj->enable_at_init))
 504              	 .loc 1 435 0
 505 0022 7B68     	 ldr r3,[r7,#4]
 506 0024 DB7A     	 ldrb r3,[r3,#11]
 507 0026 002B     	 cmp r3,#0
 508 0028 03D0     	 beq .L28
 436:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 437:../Libraries/XMCLib/src/xmc1_scu.c ****     anavdel |= (uint32_t)SCU_ANALOG_ANAVDEL_VDEL_EN_Msk;
 509              	 .loc 1 437 0
 510 002a FB68     	 ldr r3,[r7,#12]
 511 002c 1022     	 mov r2,#16
 512 002e 1343     	 orr r3,r2
 513 0030 FB60     	 str r3,[r7,#12]
 514              	.L28:
 438:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 439:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAVDEL = (uint16_t) anavdel;
 515              	 .loc 1 439 0
 516 0032 144A     	 ldr r2,.L32
 517 0034 FB68     	 ldr r3,[r7,#12]
 518 0036 99B2     	 uxth r1,r3
 519 0038 5023     	 mov r3,#80
 520 003a D152     	 strh r1,[r2,r3]
 440:../Libraries/XMCLib/src/xmc1_scu.c **** 
 441:../Libraries/XMCLib/src/xmc1_scu.c ****   irqmask = 0UL;
 521              	 .loc 1 441 0
 522 003c 0023     	 mov r3,#0
 523 003e BB60     	 str r3,[r7,#8]
 442:../Libraries/XMCLib/src/xmc1_scu.c **** 
 443:../Libraries/XMCLib/src/xmc1_scu.c ****   if (true == (obj->enable_prewarning_int))
 524              	 .loc 1 443 0
 525 0040 7B68     	 ldr r3,[r7,#4]
 526 0042 1B7A     	 ldrb r3,[r3,#8]
 527 0044 002B     	 cmp r3,#0
 528 0046 03D0     	 beq .L29
 444:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 445:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDDPI_Msk;
 529              	 .loc 1 445 0
 530 0048 BB68     	 ldr r3,[r7,#8]
 531 004a 0822     	 mov r2,#8
 532 004c 1343     	 orr r3,r2
 533 004e BB60     	 str r3,[r7,#8]
 534              	.L29:
 446:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 447:../Libraries/XMCLib/src/xmc1_scu.c **** 
 448:../Libraries/XMCLib/src/xmc1_scu.c ****   if (true == (obj->enable_vdrop_int))
 535              	 .loc 1 448 0
 536 0050 7B68     	 ldr r3,[r7,#4]
 537 0052 5B7A     	 ldrb r3,[r3,#9]
 538 0054 002B     	 cmp r3,#0
 539 0056 03D0     	 beq .L30
 449:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 450:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDROPI_Msk;
 540              	 .loc 1 450 0
 541 0058 BB68     	 ldr r3,[r7,#8]
 542 005a 8022     	 mov r2,#128
 543 005c 1343     	 orr r3,r2
 544 005e BB60     	 str r3,[r7,#8]
 545              	.L30:
 451:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 452:../Libraries/XMCLib/src/xmc1_scu.c **** 
 453:../Libraries/XMCLib/src/xmc1_scu.c ****   if (true == (obj->enable_vclip_int))
 546              	 .loc 1 453 0
 547 0060 7B68     	 ldr r3,[r7,#4]
 548 0062 9B7A     	 ldrb r3,[r3,#10]
 549 0064 002B     	 cmp r3,#0
 550 0066 04D0     	 beq .L31
 454:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 455:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VCLIPI_Msk;
 551              	 .loc 1 455 0
 552 0068 BB68     	 ldr r3,[r7,#8]
 553 006a 8022     	 mov r2,#128
 554 006c 9203     	 lsl r2,r2,#14
 555 006e 1343     	 orr r3,r2
 556 0070 BB60     	 str r3,[r7,#8]
 557              	.L31:
 456:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 457:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)irqmask;
 558              	 .loc 1 457 0
 559 0072 054B     	 ldr r3,.L32+4
 560 0074 044A     	 ldr r2,.L32+4
 561 0076 5168     	 ldr r1,[r2,#4]
 562 0078 BA68     	 ldr r2,[r7,#8]
 563 007a 0A43     	 orr r2,r1
 564 007c 5A60     	 str r2,[r3,#4]
 458:../Libraries/XMCLib/src/xmc1_scu.c **** }
 565              	 .loc 1 458 0
 566 007e BD46     	 mov sp,r7
 567 0080 04B0     	 add sp,sp,#16
 568              	 
 569 0082 80BD     	 pop {r7,pc}
 570              	.L33:
 571              	 .align 2
 572              	.L32:
 573 0084 00100140 	 .word 1073811456
 574 0088 38000140 	 .word 1073807416
 575              	 .cfi_endproc
 576              	.LFE71:
 578              	 .section .text.XMC_SCU_SetTempLowLimit,"ax",%progbits
 579              	 .align 2
 580              	 .global XMC_SCU_SetTempLowLimit
 581              	 .code 16
 582              	 .thumb_func
 584              	XMC_SCU_SetTempLowLimit:
 585              	.LFB72:
 459:../Libraries/XMCLib/src/xmc1_scu.c **** 
 460:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program lower temperature limit */
 461:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempLowLimit(uint32_t limit)
 462:../Libraries/XMCLib/src/xmc1_scu.c **** {
 586              	 .loc 1 462 0
 587              	 .cfi_startproc
 588 0000 80B5     	 push {r7,lr}
 589              	.LCFI25:
 590              	 .cfi_def_cfa_offset 8
 591              	 .cfi_offset 7,-8
 592              	 .cfi_offset 14,-4
 593 0002 84B0     	 sub sp,sp,#16
 594              	.LCFI26:
 595              	 .cfi_def_cfa_offset 24
 596 0004 00AF     	 add r7,sp,#0
 597              	.LCFI27:
 598              	 .cfi_def_cfa_register 7
 599 0006 7860     	 str r0,[r7,#4]
 463:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 600              	 .loc 1 463 0
 601 0008 0F23     	 mov r3,#15
 602 000a FB18     	 add r3,r7,r3
 603 000c 0022     	 mov r2,#0
 604 000e 1A70     	 strb r2,[r3]
 464:../Libraries/XMCLib/src/xmc1_scu.c **** 
 465:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 605              	 .loc 1 465 0
 606 0010 7B68     	 ldr r3,[r7,#4]
 607 0012 181C     	 mov r0,r3
 608 0014 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 609 0018 031C     	 mov r3,r0
 610 001a 7B60     	 str r3,[r7,#4]
 466:../Libraries/XMCLib/src/xmc1_scu.c **** 
 467:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0)
 611              	 .loc 1 467 0
 612 001c 7B68     	 ldr r3,[r7,#4]
 613 001e 002B     	 cmp r3,#0
 614 0020 04D0     	 beq .L35
 468:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 469:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIL = (uint16_t)limit;
 615              	 .loc 1 469 0
 616 0022 084B     	 ldr r3,.L38
 617 0024 7A68     	 ldr r2,[r7,#4]
 618 0026 92B2     	 uxth r2,r2
 619 0028 9A86     	 strh r2,[r3,#52]
 620 002a 03E0     	 b .L36
 621              	.L35:
 470:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 471:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 472:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 473:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 622              	 .loc 1 473 0
 623 002c 0F23     	 mov r3,#15
 624 002e FB18     	 add r3,r7,r3
 625 0030 0122     	 mov r2,#1
 626 0032 1A70     	 strb r2,[r3]
 627              	.L36:
 474:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 475:../Libraries/XMCLib/src/xmc1_scu.c **** 
 476:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 628              	 .loc 1 476 0
 629 0034 0F23     	 mov r3,#15
 630 0036 FB18     	 add r3,r7,r3
 631 0038 1B78     	 ldrb r3,[r3]
 477:../Libraries/XMCLib/src/xmc1_scu.c **** }
 632              	 .loc 1 477 0
 633 003a 181C     	 mov r0,r3
 634 003c BD46     	 mov sp,r7
 635 003e 04B0     	 add sp,sp,#16
 636              	 
 637 0040 80BD     	 pop {r7,pc}
 638              	.L39:
 639 0042 C046     	 .align 2
 640              	.L38:
 641 0044 00100140 	 .word 1073811456
 642              	 .cfi_endproc
 643              	.LFE72:
 645              	 .section .text.XMC_SCU_SetTempHighLimit,"ax",%progbits
 646              	 .align 2
 647              	 .global XMC_SCU_SetTempHighLimit
 648              	 .code 16
 649              	 .thumb_func
 651              	XMC_SCU_SetTempHighLimit:
 652              	.LFB73:
 478:../Libraries/XMCLib/src/xmc1_scu.c **** 
 479:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program higher temperature limit */
 480:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempHighLimit(uint32_t limit)
 481:../Libraries/XMCLib/src/xmc1_scu.c **** {
 653              	 .loc 1 481 0
 654              	 .cfi_startproc
 655 0000 80B5     	 push {r7,lr}
 656              	.LCFI28:
 657              	 .cfi_def_cfa_offset 8
 658              	 .cfi_offset 7,-8
 659              	 .cfi_offset 14,-4
 660 0002 84B0     	 sub sp,sp,#16
 661              	.LCFI29:
 662              	 .cfi_def_cfa_offset 24
 663 0004 00AF     	 add r7,sp,#0
 664              	.LCFI30:
 665              	 .cfi_def_cfa_register 7
 666 0006 7860     	 str r0,[r7,#4]
 482:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 667              	 .loc 1 482 0
 668 0008 0F23     	 mov r3,#15
 669 000a FB18     	 add r3,r7,r3
 670 000c 0022     	 mov r2,#0
 671 000e 1A70     	 strb r2,[r3]
 483:../Libraries/XMCLib/src/xmc1_scu.c **** 
 484:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 672              	 .loc 1 484 0
 673 0010 7B68     	 ldr r3,[r7,#4]
 674 0012 181C     	 mov r0,r3
 675 0014 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 676 0018 031C     	 mov r3,r0
 677 001a 7B60     	 str r3,[r7,#4]
 485:../Libraries/XMCLib/src/xmc1_scu.c **** 
 486:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0)
 678              	 .loc 1 486 0
 679 001c 7B68     	 ldr r3,[r7,#4]
 680 001e 002B     	 cmp r3,#0
 681 0020 04D0     	 beq .L41
 487:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 488:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIH = (uint16_t)limit;
 682              	 .loc 1 488 0
 683 0022 084B     	 ldr r3,.L44
 684 0024 7A68     	 ldr r2,[r7,#4]
 685 0026 92B2     	 uxth r2,r2
 686 0028 1A86     	 strh r2,[r3,#48]
 687 002a 03E0     	 b .L42
 688              	.L41:
 489:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 490:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 491:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 492:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 689              	 .loc 1 492 0
 690 002c 0F23     	 mov r3,#15
 691 002e FB18     	 add r3,r7,r3
 692 0030 0122     	 mov r2,#1
 693 0032 1A70     	 strb r2,[r3]
 694              	.L42:
 493:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 494:../Libraries/XMCLib/src/xmc1_scu.c **** 
 495:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 695              	 .loc 1 495 0
 696 0034 0F23     	 mov r3,#15
 697 0036 FB18     	 add r3,r7,r3
 698 0038 1B78     	 ldrb r3,[r3]
 496:../Libraries/XMCLib/src/xmc1_scu.c **** }
 699              	 .loc 1 496 0
 700 003a 181C     	 mov r0,r3
 701 003c BD46     	 mov sp,r7
 702 003e 04B0     	 add sp,sp,#16
 703              	 
 704 0040 80BD     	 pop {r7,pc}
 705              	.L45:
 706 0042 C046     	 .align 2
 707              	.L44:
 708 0044 00100140 	 .word 1073811456
 709              	 .cfi_endproc
 710              	.LFE73:
 712              	 .section .text.XMC_SCU_SetRawTempLimits,"ax",%progbits
 713              	 .align 2
 714              	 .global XMC_SCU_SetRawTempLimits
 715              	 .code 16
 716              	 .thumb_func
 718              	XMC_SCU_SetRawTempLimits:
 719              	.LFB74:
 497:../Libraries/XMCLib/src/xmc1_scu.c **** 
 498:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program temperature limits as raw digital values into temperature sensor */
 499:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 500:../Libraries/XMCLib/src/xmc1_scu.c **** {
 720              	 .loc 1 500 0
 721              	 .cfi_startproc
 722 0000 80B5     	 push {r7,lr}
 723              	.LCFI31:
 724              	 .cfi_def_cfa_offset 8
 725              	 .cfi_offset 7,-8
 726              	 .cfi_offset 14,-4
 727 0002 82B0     	 sub sp,sp,#8
 728              	.LCFI32:
 729              	 .cfi_def_cfa_offset 16
 730 0004 00AF     	 add r7,sp,#0
 731              	.LCFI33:
 732              	 .cfi_def_cfa_register 7
 733 0006 7860     	 str r0,[r7,#4]
 734 0008 3960     	 str r1,[r7]
 501:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 735              	 .loc 1 501 0
 736 000a 054B     	 ldr r3,.L47
 737 000c 3A68     	 ldr r2,[r7]
 738 000e 92B2     	 uxth r2,r2
 739 0010 1A86     	 strh r2,[r3,#48]
 502:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 740              	 .loc 1 502 0
 741 0012 034B     	 ldr r3,.L47
 742 0014 7A68     	 ldr r2,[r7,#4]
 743 0016 92B2     	 uxth r2,r2
 744 0018 9A86     	 strh r2,[r3,#52]
 503:../Libraries/XMCLib/src/xmc1_scu.c **** }
 745              	 .loc 1 503 0
 746 001a BD46     	 mov sp,r7
 747 001c 02B0     	 add sp,sp,#8
 748              	 
 749 001e 80BD     	 pop {r7,pc}
 750              	.L48:
 751              	 .align 2
 752              	.L47:
 753 0020 00100140 	 .word 1073811456
 754              	 .cfi_endproc
 755              	.LFE74:
 757              	 .section .text.XMC_SCU_StartTempMeasurement,"ax",%progbits
 758              	 .align 2
 759              	 .global XMC_SCU_StartTempMeasurement
 760              	 .code 16
 761              	 .thumb_func
 763              	XMC_SCU_StartTempMeasurement:
 764              	.LFB75:
 504:../Libraries/XMCLib/src/xmc1_scu.c **** 
 505:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to start temperature measurement */
 506:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StartTempMeasurement(void)
 507:../Libraries/XMCLib/src/xmc1_scu.c **** {
 765              	 .loc 1 507 0
 766              	 .cfi_startproc
 767 0000 80B5     	 push {r7,lr}
 768              	.LCFI34:
 769              	 .cfi_def_cfa_offset 8
 770              	 .cfi_offset 7,-8
 771              	 .cfi_offset 14,-4
 772 0002 00AF     	 add r7,sp,#0
 773              	.LCFI35:
 774              	 .cfi_def_cfa_register 7
 508:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 775              	 .loc 1 508 0
 776 0004 044A     	 ldr r2,.L50
 777 0006 044B     	 ldr r3,.L50
 778 0008 9B8C     	 ldrh r3,[r3,#36]
 779 000a 9BB2     	 uxth r3,r3
 780 000c 0121     	 mov r1,#1
 781 000e 0B43     	 orr r3,r1
 782 0010 9BB2     	 uxth r3,r3
 783 0012 9384     	 strh r3,[r2,#36]
 509:../Libraries/XMCLib/src/xmc1_scu.c **** }
 784              	 .loc 1 509 0
 785 0014 BD46     	 mov sp,r7
 786              	 
 787 0016 80BD     	 pop {r7,pc}
 788              	.L51:
 789              	 .align 2
 790              	.L50:
 791 0018 00100140 	 .word 1073811456
 792              	 .cfi_endproc
 793              	.LFE75:
 795              	 .section .text.XMC_SCU_StopTempMeasurement,"ax",%progbits
 796              	 .align 2
 797              	 .global XMC_SCU_StopTempMeasurement
 798              	 .code 16
 799              	 .thumb_func
 801              	XMC_SCU_StopTempMeasurement:
 802              	.LFB76:
 510:../Libraries/XMCLib/src/xmc1_scu.c **** 
 511:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to stop temperature measurement */
 512:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StopTempMeasurement(void)
 513:../Libraries/XMCLib/src/xmc1_scu.c **** {
 803              	 .loc 1 513 0
 804              	 .cfi_startproc
 805 0000 80B5     	 push {r7,lr}
 806              	.LCFI36:
 807              	 .cfi_def_cfa_offset 8
 808              	 .cfi_offset 7,-8
 809              	 .cfi_offset 14,-4
 810 0002 00AF     	 add r7,sp,#0
 811              	.LCFI37:
 812              	 .cfi_def_cfa_register 7
 514:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 813              	 .loc 1 514 0
 814 0004 044A     	 ldr r2,.L53
 815 0006 044B     	 ldr r3,.L53
 816 0008 9B8C     	 ldrh r3,[r3,#36]
 817 000a 9BB2     	 uxth r3,r3
 818 000c 0121     	 mov r1,#1
 819 000e 8B43     	 bic r3,r1
 820 0010 9BB2     	 uxth r3,r3
 821 0012 9384     	 strh r3,[r2,#36]
 515:../Libraries/XMCLib/src/xmc1_scu.c **** }
 822              	 .loc 1 515 0
 823 0014 BD46     	 mov sp,r7
 824              	 
 825 0016 80BD     	 pop {r7,pc}
 826              	.L54:
 827              	 .align 2
 828              	.L53:
 829 0018 00100140 	 .word 1073811456
 830              	 .cfi_endproc
 831              	.LFE76:
 833              	 .section .text.XMC_SCU_HighTemperature,"ax",%progbits
 834              	 .align 2
 835              	 .global XMC_SCU_HighTemperature
 836              	 .code 16
 837              	 .thumb_func
 839              	XMC_SCU_HighTemperature:
 840              	.LFB77:
 516:../Libraries/XMCLib/src/xmc1_scu.c **** 
 517:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature has gone past the ceiling */
 518:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_HighTemperature(void)
 519:../Libraries/XMCLib/src/xmc1_scu.c **** {
 841              	 .loc 1 519 0
 842              	 .cfi_startproc
 843 0000 80B5     	 push {r7,lr}
 844              	.LCFI38:
 845              	 .cfi_def_cfa_offset 8
 846              	 .cfi_offset 7,-8
 847              	 .cfi_offset 14,-4
 848 0002 00AF     	 add r7,sp,#0
 849              	.LCFI39:
 850              	 .cfi_def_cfa_register 7
 520:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 851              	 .loc 1 520 0
 852 0004 054B     	 ldr r3,.L57
 853 0006 1A68     	 ldr r2,[r3]
 854 0008 8023     	 mov r3,#128
 855 000a DB05     	 lsl r3,r3,#23
 856 000c 1340     	 and r3,r2
 857 000e 5A1E     	 sub r2,r3,#1
 858 0010 9341     	 sbc r3,r3,r2
 859 0012 DBB2     	 uxtb r3,r3
 521:../Libraries/XMCLib/src/xmc1_scu.c **** }
 860              	 .loc 1 521 0
 861 0014 181C     	 mov r0,r3
 862 0016 BD46     	 mov sp,r7
 863              	 
 864 0018 80BD     	 pop {r7,pc}
 865              	.L58:
 866 001a C046     	 .align 2
 867              	.L57:
 868 001c 38000140 	 .word 1073807416
 869              	 .cfi_endproc
 870              	.LFE77:
 872              	 .section .text.XMC_SCU_LowTemperature,"ax",%progbits
 873              	 .align 2
 874              	 .global XMC_SCU_LowTemperature
 875              	 .code 16
 876              	 .thumb_func
 878              	XMC_SCU_LowTemperature:
 879              	.LFB78:
 522:../Libraries/XMCLib/src/xmc1_scu.c **** 
 523:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature is lower than normal */
 524:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_LowTemperature(void)
 525:../Libraries/XMCLib/src/xmc1_scu.c **** {
 880              	 .loc 1 525 0
 881              	 .cfi_startproc
 882 0000 80B5     	 push {r7,lr}
 883              	.LCFI40:
 884              	 .cfi_def_cfa_offset 8
 885              	 .cfi_offset 7,-8
 886              	 .cfi_offset 14,-4
 887 0002 00AF     	 add r7,sp,#0
 888              	.LCFI41:
 889              	 .cfi_def_cfa_register 7
 526:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 890              	 .loc 1 526 0
 891 0004 034B     	 ldr r3,.L61
 892 0006 1B68     	 ldr r3,[r3]
 893 0008 DB0F     	 lsr r3,r3,#31
 894 000a DBB2     	 uxtb r3,r3
 527:../Libraries/XMCLib/src/xmc1_scu.c **** }
 895              	 .loc 1 527 0
 896 000c 181C     	 mov r0,r3
 897 000e BD46     	 mov sp,r7
 898              	 
 899 0010 80BD     	 pop {r7,pc}
 900              	.L62:
 901 0012 C046     	 .align 2
 902              	.L61:
 903 0014 38000140 	 .word 1073807416
 904              	 .cfi_endproc
 905              	.LFE78:
 907              	 .section .text.XMC_SCU_GetTemperature,"ax",%progbits
 908              	 .align 2
 909              	 .global XMC_SCU_GetTemperature
 910              	 .code 16
 911              	 .thumb_func
 913              	XMC_SCU_GetTemperature:
 914              	.LFB79:
 528:../Libraries/XMCLib/src/xmc1_scu.c **** 
 529:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to retrieve the device temperature */
 530:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_GetTemperature(void)
 531:../Libraries/XMCLib/src/xmc1_scu.c **** {
 915              	 .loc 1 531 0
 916              	 .cfi_startproc
 917 0000 80B5     	 push {r7,lr}
 918              	.LCFI42:
 919              	 .cfi_def_cfa_offset 8
 920              	 .cfi_offset 7,-8
 921              	 .cfi_offset 14,-4
 922 0002 82B0     	 sub sp,sp,#8
 923              	.LCFI43:
 924              	 .cfi_def_cfa_offset 16
 925 0004 00AF     	 add r7,sp,#0
 926              	.LCFI44:
 927              	 .cfi_def_cfa_register 7
 532:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t temperature;
 533:../Libraries/XMCLib/src/xmc1_scu.c **** 
 534:../Libraries/XMCLib/src/xmc1_scu.c ****   temperature = (uint32_t)(SCU_ANALOG->ANATSEMON);
 928              	 .loc 1 534 0
 929 0006 054A     	 ldr r2,.L65
 930 0008 4023     	 mov r3,#64
 931 000a D35A     	 ldrh r3,[r2,r3]
 932 000c 9BB2     	 uxth r3,r3
 933 000e 7B60     	 str r3,[r7,#4]
 535:../Libraries/XMCLib/src/xmc1_scu.c **** 
 536:../Libraries/XMCLib/src/xmc1_scu.c ****   return (temperature);
 934              	 .loc 1 536 0
 935 0010 7B68     	 ldr r3,[r7,#4]
 537:../Libraries/XMCLib/src/xmc1_scu.c **** }
 936              	 .loc 1 537 0
 937 0012 181C     	 mov r0,r3
 938 0014 BD46     	 mov sp,r7
 939 0016 02B0     	 add sp,sp,#8
 940              	 
 941 0018 80BD     	 pop {r7,pc}
 942              	.L66:
 943 001a C046     	 .align 2
 944              	.L65:
 945 001c 00100140 	 .word 1073811456
 946              	 .cfi_endproc
 947              	.LFE79:
 949              	 .section .text.XMC_SCU_CalcTemperature,"ax",%progbits
 950              	 .align 2
 951              	 .global XMC_SCU_CalcTemperature
 952              	 .code 16
 953              	 .thumb_func
 955              	XMC_SCU_CalcTemperature:
 956              	.LFB80:
 538:../Libraries/XMCLib/src/xmc1_scu.c **** 
 539:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the die temperature value using ROM function */
 540:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CalcTemperature(void)
 541:../Libraries/XMCLib/src/xmc1_scu.c **** {
 957              	 .loc 1 541 0
 958              	 .cfi_startproc
 959 0000 80B5     	 push {r7,lr}
 960              	.LCFI45:
 961              	 .cfi_def_cfa_offset 8
 962              	 .cfi_offset 7,-8
 963              	 .cfi_offset 14,-4
 964 0002 00AF     	 add r7,sp,#0
 965              	.LCFI46:
 966              	 .cfi_def_cfa_register 7
 542:../Libraries/XMCLib/src/xmc1_scu.c ****   return (ROM_CalcTemperature());
 967              	 .loc 1 542 0
 968 0004 8623     	 mov r3,#134
 969 0006 5B00     	 lsl r3,r3,#1
 970 0008 1B68     	 ldr r3,[r3]
 971 000a 9847     	 blx r3
 972 000c 031C     	 mov r3,r0
 543:../Libraries/XMCLib/src/xmc1_scu.c **** }
 973              	 .loc 1 543 0
 974 000e 181C     	 mov r0,r3
 975 0010 BD46     	 mov sp,r7
 976              	 
 977 0012 80BD     	 pop {r7,pc}
 978              	 .cfi_endproc
 979              	.LFE80:
 981              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 982              	 .align 2
 983              	 .global XMC_SCU_CLOCK_Init
 984              	 .code 16
 985              	 .thumb_func
 987              	XMC_SCU_CLOCK_Init:
 988              	.LFB81:
 544:../Libraries/XMCLib/src/xmc1_scu.c **** 
 545:../Libraries/XMCLib/src/xmc1_scu.c **** 
 546:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which initializes the clock tree ofthe device */
 547:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 548:../Libraries/XMCLib/src/xmc1_scu.c **** {
 989              	 .loc 1 548 0
 990              	 .cfi_startproc
 991 0000 80B5     	 push {r7,lr}
 992              	.LCFI47:
 993              	 .cfi_def_cfa_offset 8
 994              	 .cfi_offset 7,-8
 995              	 .cfi_offset 14,-4
 996 0002 86B0     	 sub sp,sp,#24
 997              	.LCFI48:
 998              	 .cfi_def_cfa_offset 32
 999 0004 00AF     	 add r7,sp,#0
 1000              	.LCFI49:
 1001              	 .cfi_def_cfa_register 7
 1002 0006 7860     	 str r0,[r7,#4]
 549:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 550:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1003              	 .loc 1 550 0
 1004 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 551:../Libraries/XMCLib/src/xmc1_scu.c **** 
 552:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 553:../Libraries/XMCLib/src/xmc1_scu.c ****   /* OSCHP source selection - OSC mode */
 554:../Libraries/XMCLib/src/xmc1_scu.c **** 
 555:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
 1005              	 .loc 1 555 0
 1006 000c 7B68     	 ldr r3,[r7,#4]
 1007 000e 9B79     	 ldrb r3,[r3,#6]
 1008 0010 302B     	 cmp r3,#48
 1009 0012 53D0     	 beq .L70
 556:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 557:../Libraries/XMCLib/src/xmc1_scu.c ****     if (OSCHP_GetFrequency() > 20000000U)
 1010              	 .loc 1 557 0
 1011 0014 FFF7FEFF 	 bl OSCHP_GetFrequency
 1012 0018 021E     	 sub r2,r0,#0
 1013 001a 494B     	 ldr r3,.L82
 1014 001c 9A42     	 cmp r2,r3
 1015 001e 09D9     	 bls .L71
 558:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 559:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
 1016              	 .loc 1 559 0
 1017 0020 484A     	 ldr r2,.L82+4
 1018 0022 4849     	 ldr r1,.L82+4
 1019 0024 9023     	 mov r3,#144
 1020 0026 CB5A     	 ldrh r3,[r1,r3]
 1021 0028 9BB2     	 uxth r3,r3
 1022 002a 4021     	 mov r1,#64
 1023 002c 0B43     	 orr r3,r1
 1024 002e 99B2     	 uxth r1,r3
 1025 0030 9023     	 mov r3,#144
 1026 0032 D152     	 strh r1,[r2,r3]
 1027              	.L71:
 560:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 561:../Libraries/XMCLib/src/xmc1_scu.c **** 
 562:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY
 1028              	 .loc 1 562 0
 1029 0034 434A     	 ldr r2,.L82+4
 1030 0036 4349     	 ldr r1,.L82+4
 1031 0038 9023     	 mov r3,#144
 1032 003a CB5A     	 ldrh r3,[r1,r3]
 1033 003c 9BB2     	 uxth r3,r3
 1034 003e 9BB2     	 uxth r3,r3
 1035 0040 191C     	 add r1,r3,#0
 1036 0042 3223     	 mov r3,#50
 1037 0044 9943     	 bic r1,r3
 1038 0046 0B1C     	 mov r3,r1
 1039 0048 99B2     	 uxth r1,r3
 563:../Libraries/XMCLib/src/xmc1_scu.c ****                                config->oschp_mode;
 1040              	 .loc 1 563 0
 1041 004a 7B68     	 ldr r3,[r7,#4]
 1042 004c 9B79     	 ldrb r3,[r3,#6]
 562:../Libraries/XMCLib/src/xmc1_scu.c ****                                config->oschp_mode;
 1043              	 .loc 1 562 0
 1044 004e 9BB2     	 uxth r3,r3
 1045 0050 0B43     	 orr r3,r1
 1046 0052 9BB2     	 uxth r3,r3
 1047 0054 99B2     	 uxth r1,r3
 1048 0056 9023     	 mov r3,#144
 1049 0058 D152     	 strh r1,[r2,r3]
 1050              	.L77:
 564:../Libraries/XMCLib/src/xmc1_scu.c **** 
 565:../Libraries/XMCLib/src/xmc1_scu.c ****     do
 566:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 567:../Libraries/XMCLib/src/xmc1_scu.c ****       /* clear the status bit before restarting the detection. */
 568:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
 1051              	 .loc 1 568 0
 1052 005a 3B4B     	 ldr r3,.L82+8
 1053 005c 0222     	 mov r2,#2
 1054 005e 9A62     	 str r2,[r3,#40]
 569:../Libraries/XMCLib/src/xmc1_scu.c **** 
 570:../Libraries/XMCLib/src/xmc1_scu.c ****       /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watch
 571:../Libraries/XMCLib/src/xmc1_scu.c ****          keeping in between at least one DCO2 cycle */
 572:../Libraries/XMCLib/src/xmc1_scu.c **** 
 573:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Disable XOWD */
 574:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
 1055              	 .loc 1 574 0
 1056 0060 3A4B     	 ldr r3,.L82+12
 1057 0062 3A4A     	 ldr r2,.L82+12
 1058 0064 5269     	 ldr r2,[r2,#20]
 1059 0066 3A49     	 ldr r1,.L82+16
 1060 0068 0A40     	 and r2,r1
 1061 006a 5A61     	 str r2,[r3,#20]
 1062 006c 394B     	 ldr r3,.L82+20
 1063 006e 7B61     	 str r3,[r7,#20]
 1064 0070 00E0     	 b .L72
 1065              	.L73:
 1066              	.LBB8:
 1067              	.LBB9:
 296:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1068              	 .loc 1 296 0
 1069              	
 1070 0072 C046     	 nop
 1071              	
 1072              	 .code 16
 1073              	.L72:
 294:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1074              	 .loc 1 294 0
 1075 0074 7B69     	 ldr r3,[r7,#20]
 1076 0076 013B     	 sub r3,r3,#1
 1077 0078 7B61     	 str r3,[r7,#20]
 1078 007a 7B69     	 ldr r3,[r7,#20]
 1079 007c 002B     	 cmp r3,#0
 1080 007e F8D1     	 bne .L73
 1081              	.LBE9:
 1082              	.LBE8:
 575:../Libraries/XMCLib/src/xmc1_scu.c **** 
 576:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Clock domains synchronization, at least 1 DCO2 cycle */
 577:../Libraries/XMCLib/src/xmc1_scu.c ****       /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
 578:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(538);
 579:../Libraries/XMCLib/src/xmc1_scu.c **** 
 580:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Enable XOWD */
 581:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
 1083              	 .loc 1 581 0
 1084 0080 324B     	 ldr r3,.L82+12
 1085 0082 324A     	 ldr r2,.L82+12
 1086 0084 5269     	 ldr r2,[r2,#20]
 1087 0086 C021     	 mov r1,#192
 1088 0088 8904     	 lsl r1,r1,#18
 1089 008a 0A43     	 orr r2,r1
 1090 008c 5A61     	 str r2,[r3,#20]
 582:../Libraries/XMCLib/src/xmc1_scu.c **** 
 583:../Libraries/XMCLib/src/xmc1_scu.c ****       /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
 584:../Libraries/XMCLib/src/xmc1_scu.c ****       while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
 1091              	 .loc 1 584 0
 1092 008e C046     	 mov r8,r8
 1093              	.L74:
 1094              	 .loc 1 584 0 is_stmt 0 discriminator 1
 1095 0090 2E4B     	 ldr r3,.L82+12
 1096 0092 5A69     	 ldr r2,[r3,#20]
 1097 0094 8023     	 mov r3,#128
 1098 0096 5B04     	 lsl r3,r3,#17
 1099 0098 1340     	 and r3,r2
 1100 009a F9D1     	 bne .L74
 1101 009c 2E4B     	 ldr r3,.L82+24
 1102 009e 3B61     	 str r3,[r7,#16]
 1103 00a0 00E0     	 b .L75
 1104              	.L76:
 1105              	.LBB10:
 1106              	.LBB11:
 296:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1107              	 .loc 1 296 0 is_stmt 1
 1108              	
 1109 00a2 C046     	 nop
 1110              	
 1111              	 .code 16
 1112              	.L75:
 294:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1113              	 .loc 1 294 0
 1114 00a4 3B69     	 ldr r3,[r7,#16]
 1115 00a6 013B     	 sub r3,r3,#1
 1116 00a8 3B61     	 str r3,[r7,#16]
 1117 00aa 3B69     	 ldr r3,[r7,#16]
 1118 00ac 002B     	 cmp r3,#0
 1119 00ae F8D1     	 bne .L76
 1120              	.LBE11:
 1121              	.LBE10:
 585:../Libraries/XMCLib/src/xmc1_scu.c **** 
 586:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
 587:../Libraries/XMCLib/src/xmc1_scu.c ****       /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
 588:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(2685);
 589:../Libraries/XMCLib/src/xmc1_scu.c **** 
 590:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 591:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
 1122              	 .loc 1 591 0
 1123 00b0 254B     	 ldr r3,.L82+8
 1124 00b2 1B6A     	 ldr r3,[r3,#32]
 1125 00b4 0222     	 mov r2,#2
 1126 00b6 1340     	 and r3,r2
 1127 00b8 CFD1     	 bne .L77
 1128 00ba 09E0     	 b .L78
 1129              	.L70:
 592:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 593:../Libraries/XMCLib/src/xmc1_scu.c ****   else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
 594:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 595:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
 1130              	 .loc 1 595 0
 1131 00bc 214A     	 ldr r2,.L82+4
 1132 00be 2149     	 ldr r1,.L82+4
 1133 00c0 9023     	 mov r3,#144
 1134 00c2 CB5A     	 ldrh r3,[r1,r3]
 1135 00c4 9BB2     	 uxth r3,r3
 1136 00c6 3021     	 mov r1,#48
 1137 00c8 0B43     	 orr r3,r1
 1138 00ca 99B2     	 uxth r1,r3
 1139 00cc 9023     	 mov r3,#144
 1140 00ce D152     	 strh r1,[r2,r3]
 1141              	.L78:
 596:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 597:../Libraries/XMCLib/src/xmc1_scu.c **** 
 598:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
 1142              	 .loc 1 598 0
 1143 00d0 1C4A     	 ldr r2,.L82+4
 1144 00d2 7B68     	 ldr r3,[r7,#4]
 1145 00d4 DB79     	 ldrb r3,[r3,#7]
 1146 00d6 99B2     	 uxth r1,r3
 1147 00d8 8C23     	 mov r3,#140
 1148 00da D152     	 strh r1,[r2,r3]
 599:../Libraries/XMCLib/src/xmc1_scu.c **** #ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
 600:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
 1149              	 .loc 1 600 0
 1150 00dc 7B68     	 ldr r3,[r7,#4]
 1151 00de DB79     	 ldrb r3,[r3,#7]
 1152 00e0 002B     	 cmp r3,#0
 1153 00e2 09D1     	 bne .L79
 1154 00e4 1D4B     	 ldr r3,.L82+28
 1155 00e6 FB60     	 str r3,[r7,#12]
 1156 00e8 00E0     	 b .L80
 1157              	.L81:
 1158              	.LBB12:
 1159              	.LBB13:
 296:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1160              	 .loc 1 296 0
 1161              	
 1162 00ea C046     	 nop
 1163              	
 1164              	 .code 16
 1165              	.L80:
 294:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1166              	 .loc 1 294 0
 1167 00ec FB68     	 ldr r3,[r7,#12]
 1168 00ee 013B     	 sub r3,r3,#1
 1169 00f0 FB60     	 str r3,[r7,#12]
 1170 00f2 FB68     	 ldr r3,[r7,#12]
 1171 00f4 002B     	 cmp r3,#0
 1172 00f6 F8D1     	 bne .L81
 1173              	.L79:
 1174              	.LBE13:
 1175              	.LBE12:
 601:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 602:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait oscillator startup time ~5s */
 603:../Libraries/XMCLib/src/xmc1_scu.c ****     delay(6500000);
 604:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 605:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 606:../Libraries/XMCLib/src/xmc1_scu.c **** 
 607:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
 1176              	 .loc 1 607 0
 1177 00f8 144B     	 ldr r3,.L82+12
 1178 00fa 144A     	 ldr r2,.L82+12
 1179 00fc D269     	 ldr r2,[r2,#28]
 1180 00fe 1849     	 ldr r1,.L82+32
 1181 0100 0A40     	 and r2,r1
 608:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 1182              	 .loc 1 608 0
 1183 0102 7968     	 ldr r1,[r7,#4]
 1184 0104 8988     	 ldrh r1,[r1,#4]
 607:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 1185              	 .loc 1 607 0
 1186 0106 0A43     	 orr r2,r1
 1187 0108 DA61     	 str r2,[r3,#28]
 609:../Libraries/XMCLib/src/xmc1_scu.c **** 
 610:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 611:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update PCLK selection mux. */
 612:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSE
 1188              	 .loc 1 612 0
 1189 010a 104A     	 ldr r2,.L82+12
 1190 010c 0F4B     	 ldr r3,.L82+12
 1191 010e 1B68     	 ldr r3,[r3]
 1192 0110 1449     	 ldr r1,.L82+36
 1193 0112 1940     	 and r1,r3
 613:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1194              	 .loc 1 613 0
 1195 0114 7B68     	 ldr r3,[r7,#4]
 1196 0116 DB68     	 ldr r3,[r3,#12]
 612:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1197              	 .loc 1 612 0
 1198 0118 1943     	 orr r1,r3
 614:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 1199              	 .loc 1 614 0
 1200 011a 7B68     	 ldr r3,[r7,#4]
 1201 011c 9B68     	 ldr r3,[r3,#8]
 613:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1202              	 .loc 1 613 0
 1203 011e 0B43     	 orr r3,r1
 612:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1204              	 .loc 1 612 0
 1205 0120 1360     	 str r3,[r2]
 615:../Libraries/XMCLib/src/xmc1_scu.c **** 
 616:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Close the lock opened above. */
 617:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1206              	 .loc 1 617 0
 1207 0122 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 618:../Libraries/XMCLib/src/xmc1_scu.c **** 
 619:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update the dividers now */
 620:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
 1208              	 .loc 1 620 0
 1209 0126 7B68     	 ldr r3,[r7,#4]
 1210 0128 9B78     	 ldrb r3,[r3,#2]
 1211 012a 1A1C     	 mov r2,r3
 1212 012c 7B68     	 ldr r3,[r7,#4]
 1213 012e 1B88     	 ldrh r3,[r3]
 1214 0130 101C     	 mov r0,r2
 1215 0132 191C     	 mov r1,r3
 1216 0134 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 621:../Libraries/XMCLib/src/xmc1_scu.c **** 
 622:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1217              	 .loc 1 622 0
 1218 0138 BD46     	 mov sp,r7
 1219 013a 06B0     	 add sp,sp,#24
 1220              	 
 1221 013c 80BD     	 pop {r7,pc}
 1222              	.L83:
 1223 013e C046     	 .align 2
 1224              	.L82:
 1225 0140 002D3101 	 .word 20000000
 1226 0144 00100140 	 .word 1073811456
 1227 0148 38000140 	 .word 1073807416
 1228 014c 00030140 	 .word 1073808128
 1229 0150 FFFFFFFD 	 .word -33554433
 1230 0154 1A020000 	 .word 538
 1231 0158 7D0A0000 	 .word 2685
 1232 015c A02E6300 	 .word 6500000
 1233 0160 FFFDFFFF 	 .word -513
 1234 0164 FFFFF0FF 	 .word -983041
 1235              	 .cfi_endproc
 1236              	.LFE81:
 1238              	 .section .text.XMC_SCU_CLOCK_SetRtcClockSource,"ax",%progbits
 1239              	 .align 2
 1240              	 .global XMC_SCU_CLOCK_SetRtcClockSource
 1241              	 .code 16
 1242              	 .thumb_func
 1244              	XMC_SCU_CLOCK_SetRtcClockSource:
 1245              	.LFB82:
 623:../Libraries/XMCLib/src/xmc1_scu.c **** 
 624:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which selects one of the available parent clock nodes for a given child clock node */
 625:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetRtcClockSource(const XMC_SCU_CLOCK_RTCCLKSRC_t source)
 626:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1246              	 .loc 1 626 0
 1247              	 .cfi_startproc
 1248 0000 80B5     	 push {r7,lr}
 1249              	.LCFI50:
 1250              	 .cfi_def_cfa_offset 8
 1251              	 .cfi_offset 7,-8
 1252              	 .cfi_offset 14,-4
 1253 0002 82B0     	 sub sp,sp,#8
 1254              	.LCFI51:
 1255              	 .cfi_def_cfa_offset 16
 1256 0004 00AF     	 add r7,sp,#0
 1257              	.LCFI52:
 1258              	 .cfi_def_cfa_register 7
 1259 0006 7860     	 str r0,[r7,#4]
 627:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetRtcSourceClock:Wrong Parent Clock", XMC_SCU_CHECK_RTCCLKSRC(source))
 628:../Libraries/XMCLib/src/xmc1_scu.c **** 
 629:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1260              	 .loc 1 629 0
 1261 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 630:../Libraries/XMCLib/src/xmc1_scu.c **** 
 631:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_RTCCLKSEL_Msk) |
 1262              	 .loc 1 631 0
 1263 000c 064B     	 ldr r3,.L85
 1264 000e 064A     	 ldr r2,.L85
 1265 0010 1268     	 ldr r2,[r2]
 1266 0012 0649     	 ldr r1,.L85+4
 1267 0014 1140     	 and r1,r2
 1268 0016 7A68     	 ldr r2,[r7,#4]
 1269 0018 0A43     	 orr r2,r1
 1270 001a 1A60     	 str r2,[r3]
 632:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 633:../Libraries/XMCLib/src/xmc1_scu.c **** 
 634:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1271              	 .loc 1 634 0
 1272 001c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 635:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1273              	 .loc 1 635 0
 1274 0020 BD46     	 mov sp,r7
 1275 0022 02B0     	 add sp,sp,#8
 1276              	 
 1277 0024 80BD     	 pop {r7,pc}
 1278              	.L86:
 1279 0026 C046     	 .align 2
 1280              	.L85:
 1281 0028 00030140 	 .word 1073808128
 1282 002c FFFFF1FF 	 .word -917505
 1283              	 .cfi_endproc
 1284              	.LFE82:
 1286              	 .section .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource,"ax",%progbits
 1287              	 .align 2
 1288              	 .global XMC_SCU_CLOCK_SetFastPeripheralClockSource
 1289              	 .code 16
 1290              	 .thumb_func
 1292              	XMC_SCU_CLOCK_SetFastPeripheralClockSource:
 1293              	.LFB83:
 636:../Libraries/XMCLib/src/xmc1_scu.c **** 
 637:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program the divider placed between fperiph and its parent */
 638:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetFastPeripheralClockSource(const XMC_SCU_CLOCK_PCLKSRC_t source)
 639:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1294              	 .loc 1 639 0
 1295              	 .cfi_startproc
 1296 0000 80B5     	 push {r7,lr}
 1297              	.LCFI53:
 1298              	 .cfi_def_cfa_offset 8
 1299              	 .cfi_offset 7,-8
 1300              	 .cfi_offset 14,-4
 1301 0002 82B0     	 sub sp,sp,#8
 1302              	.LCFI54:
 1303              	 .cfi_def_cfa_offset 16
 1304 0004 00AF     	 add r7,sp,#0
 1305              	.LCFI55:
 1306              	 .cfi_def_cfa_register 7
 1307 0006 7860     	 str r0,[r7,#4]
 640:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1308              	 .loc 1 640 0
 1309 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 641:../Libraries/XMCLib/src/xmc1_scu.c **** 
 642:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_PCLKSEL_Msk) |
 1310              	 .loc 1 642 0
 1311 000c 064B     	 ldr r3,.L88
 1312 000e 064A     	 ldr r2,.L88
 1313 0010 1268     	 ldr r2,[r2]
 1314 0012 0649     	 ldr r1,.L88+4
 1315 0014 1140     	 and r1,r2
 1316 0016 7A68     	 ldr r2,[r7,#4]
 1317 0018 0A43     	 orr r2,r1
 1318 001a 1A60     	 str r2,[r3]
 643:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 644:../Libraries/XMCLib/src/xmc1_scu.c **** 
 645:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1319              	 .loc 1 645 0
 1320 001c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 646:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1321              	 .loc 1 646 0
 1322 0020 BD46     	 mov sp,r7
 1323 0022 02B0     	 add sp,sp,#8
 1324              	 
 1325 0024 80BD     	 pop {r7,pc}
 1326              	.L89:
 1327 0026 C046     	 .align 2
 1328              	.L88:
 1329 0028 00030140 	 .word 1073808128
 1330 002c FFFFFEFF 	 .word -65537
 1331              	 .cfi_endproc
 1332              	.LFE83:
 1334              	 .section .text.XMC_SCU_CLOCK_SetAdcClockSrc,"ax",%progbits
 1335              	 .align 2
 1336              	 .global XMC_SCU_CLOCK_SetAdcClockSrc
 1337              	 .code 16
 1338              	 .thumb_func
 1340              	XMC_SCU_CLOCK_SetAdcClockSrc:
 1341              	.LFB84:
 647:../Libraries/XMCLib/src/xmc1_scu.c **** 
 648:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 649:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_t adcclk_src)
 650:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1342              	 .loc 1 650 0
 1343              	 .cfi_startproc
 1344 0000 80B5     	 push {r7,lr}
 1345              	.LCFI56:
 1346              	 .cfi_def_cfa_offset 8
 1347              	 .cfi_offset 7,-8
 1348              	 .cfi_offset 14,-4
 1349 0002 82B0     	 sub sp,sp,#8
 1350              	.LCFI57:
 1351              	 .cfi_def_cfa_offset 16
 1352 0004 00AF     	 add r7,sp,#0
 1353              	.LCFI58:
 1354              	 .cfi_def_cfa_register 7
 1355 0006 021C     	 mov r2,r0
 1356 0008 BB1D     	 add r3,r7,#6
 1357 000a 1A80     	 strh r2,[r3]
 651:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1358              	 .loc 1 651 0
 1359 000c FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 652:../Libraries/XMCLib/src/xmc1_scu.c **** 
 653:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_ADCCLKSEL_Msk) | adcclk_src;
 1360              	 .loc 1 653 0
 1361 0010 064B     	 ldr r3,.L91
 1362 0012 064A     	 ldr r2,.L91
 1363 0014 D269     	 ldr r2,[r2,#28]
 1364 0016 0649     	 ldr r1,.L91+4
 1365 0018 1140     	 and r1,r2
 1366 001a BA1D     	 add r2,r7,#6
 1367 001c 1288     	 ldrh r2,[r2]
 1368 001e 0A43     	 orr r2,r1
 1369 0020 DA61     	 str r2,[r3,#28]
 654:../Libraries/XMCLib/src/xmc1_scu.c **** 
 655:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1370              	 .loc 1 655 0
 1371 0022 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 656:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1372              	 .loc 1 656 0
 1373 0026 BD46     	 mov sp,r7
 1374 0028 02B0     	 add sp,sp,#8
 1375              	 
 1376 002a 80BD     	 pop {r7,pc}
 1377              	.L92:
 1378              	 .align 2
 1379              	.L91:
 1380 002c 00030140 	 .word 1073808128
 1381 0030 FFFEFFFF 	 .word -257
 1382              	 .cfi_endproc
 1383              	.LFE84:
 1385              	 .section .text.XMC_SCU_CLOCK_GatePeripheralClock,"ax",%progbits
 1386              	 .align 2
 1387              	 .global XMC_SCU_CLOCK_GatePeripheralClock
 1388              	 .code 16
 1389              	 .thumb_func
 1391              	XMC_SCU_CLOCK_GatePeripheralClock:
 1392              	.LFB85:
 657:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 658:../Libraries/XMCLib/src/xmc1_scu.c **** 
 659:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which gates a clock node at its source */
 660:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 661:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1393              	 .loc 1 661 0
 1394              	 .cfi_startproc
 1395 0000 80B5     	 push {r7,lr}
 1396              	.LCFI59:
 1397              	 .cfi_def_cfa_offset 8
 1398              	 .cfi_offset 7,-8
 1399              	 .cfi_offset 14,-4
 1400 0002 82B0     	 sub sp,sp,#8
 1401              	.LCFI60:
 1402              	 .cfi_def_cfa_offset 16
 1403 0004 00AF     	 add r7,sp,#0
 1404              	.LCFI61:
 1405              	 .cfi_def_cfa_register 7
 1406 0006 7860     	 str r0,[r7,#4]
 662:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1407              	 .loc 1 662 0
 1408 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 663:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 1409              	 .loc 1 663 0
 1410 000c 054B     	 ldr r3,.L94
 1411 000e 054A     	 ldr r2,.L94
 1412 0010 D168     	 ldr r1,[r2,#12]
 1413 0012 7A68     	 ldr r2,[r7,#4]
 1414 0014 0A43     	 orr r2,r1
 1415 0016 DA60     	 str r2,[r3,#12]
 664:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1416              	 .loc 1 664 0
 1417 0018 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 665:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1418              	 .loc 1 665 0
 1419 001c BD46     	 mov sp,r7
 1420 001e 02B0     	 add sp,sp,#8
 1421              	 
 1422 0020 80BD     	 pop {r7,pc}
 1423              	.L95:
 1424 0022 C046     	 .align 2
 1425              	.L94:
 1426 0024 00030140 	 .word 1073808128
 1427              	 .cfi_endproc
 1428              	.LFE85:
 1430              	 .section .text.XMC_SCU_CLOCK_UngatePeripheralClock,"ax",%progbits
 1431              	 .align 2
 1432              	 .global XMC_SCU_CLOCK_UngatePeripheralClock
 1433              	 .code 16
 1434              	 .thumb_func
 1436              	XMC_SCU_CLOCK_UngatePeripheralClock:
 1437              	.LFB86:
 666:../Libraries/XMCLib/src/xmc1_scu.c **** 
 667:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which ungates a clock note at its source */
 668:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 669:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1438              	 .loc 1 669 0
 1439              	 .cfi_startproc
 1440 0000 80B5     	 push {r7,lr}
 1441              	.LCFI62:
 1442              	 .cfi_def_cfa_offset 8
 1443              	 .cfi_offset 7,-8
 1444              	 .cfi_offset 14,-4
 1445 0002 82B0     	 sub sp,sp,#8
 1446              	.LCFI63:
 1447              	 .cfi_def_cfa_offset 16
 1448 0004 00AF     	 add r7,sp,#0
 1449              	.LCFI64:
 1450              	 .cfi_def_cfa_register 7
 1451 0006 7860     	 str r0,[r7,#4]
 670:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1452              	 .loc 1 670 0
 1453 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 671:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
 1454              	 .loc 1 671 0
 1455 000c 084B     	 ldr r3,.L98
 1456 000e 084A     	 ldr r2,.L98
 1457 0010 1169     	 ldr r1,[r2,#16]
 1458 0012 7A68     	 ldr r2,[r7,#4]
 1459 0014 0A43     	 orr r2,r1
 1460 0016 1A61     	 str r2,[r3,#16]
 672:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1461              	 .loc 1 672 0
 1462 0018 C046     	 mov r8,r8
 1463              	.L97:
 1464              	 .loc 1 672 0 is_stmt 0 discriminator 1
 1465 001a 054B     	 ldr r3,.L98
 1466 001c 1A68     	 ldr r2,[r3]
 1467 001e 8023     	 mov r3,#128
 1468 0020 DB05     	 lsl r3,r3,#23
 1469 0022 1340     	 and r3,r2
 1470 0024 F9D1     	 bne .L97
 673:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 674:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 675:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 676:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1471              	 .loc 1 676 0 is_stmt 1
 1472 0026 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 677:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1473              	 .loc 1 677 0
 1474 002a BD46     	 mov sp,r7
 1475 002c 02B0     	 add sp,sp,#8
 1476              	 
 1477 002e 80BD     	 pop {r7,pc}
 1478              	.L99:
 1479              	 .align 2
 1480              	.L98:
 1481 0030 00030140 	 .word 1073808128
 1482              	 .cfi_endproc
 1483              	.LFE86:
 1485              	 .section .text.XMC_SCU_CLOCK_IsPeripheralClockGated,"ax",%progbits
 1486              	 .align 2
 1487              	 .global XMC_SCU_CLOCK_IsPeripheralClockGated
 1488              	 .code 16
 1489              	 .thumb_func
 1491              	XMC_SCU_CLOCK_IsPeripheralClockGated:
 1492              	.LFB87:
 678:../Libraries/XMCLib/src/xmc1_scu.c **** 
 679:../Libraries/XMCLib/src/xmc1_scu.c **** /* Checks the status of peripheral clock gating */
 680:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 681:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1493              	 .loc 1 681 0
 1494              	 .cfi_startproc
 1495 0000 80B5     	 push {r7,lr}
 1496              	.LCFI65:
 1497              	 .cfi_def_cfa_offset 8
 1498              	 .cfi_offset 7,-8
 1499              	 .cfi_offset 14,-4
 1500 0002 82B0     	 sub sp,sp,#8
 1501              	.LCFI66:
 1502              	 .cfi_def_cfa_offset 16
 1503 0004 00AF     	 add r7,sp,#0
 1504              	.LCFI67:
 1505              	 .cfi_def_cfa_register 7
 1506 0006 7860     	 str r0,[r7,#4]
 682:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 1507              	 .loc 1 682 0
 1508 0008 054B     	 ldr r3,.L102
 1509 000a 9B68     	 ldr r3,[r3,#8]
 1510 000c 7A68     	 ldr r2,[r7,#4]
 1511 000e 1340     	 and r3,r2
 1512 0010 5A1E     	 sub r2,r3,#1
 1513 0012 9341     	 sbc r3,r3,r2
 1514 0014 DBB2     	 uxtb r3,r3
 683:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1515              	 .loc 1 683 0
 1516 0016 181C     	 mov r0,r3
 1517 0018 BD46     	 mov sp,r7
 1518 001a 02B0     	 add sp,sp,#8
 1519              	 
 1520 001c 80BD     	 pop {r7,pc}
 1521              	.L103:
 1522 001e C046     	 .align 2
 1523              	.L102:
 1524 0020 00030140 	 .word 1073808128
 1525              	 .cfi_endproc
 1526              	.LFE87:
 1528              	 .global __aeabi_uidiv
 1529              	 .section .text.XMC_SCU_CLOCK_SetMCLKFrequency,"ax",%progbits
 1530              	 .align 2
 1531              	 .global XMC_SCU_CLOCK_SetMCLKFrequency
 1532              	 .code 16
 1533              	 .thumb_func
 1535              	XMC_SCU_CLOCK_SetMCLKFrequency:
 1536              	.LFB88:
 684:../Libraries/XMCLib/src/xmc1_scu.c **** 
 685:../Libraries/XMCLib/src/xmc1_scu.c **** /* This API configures main clock (MCLK) frequency to requested frequency value. */
 686:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetMCLKFrequency(uint32_t freq_khz)
 687:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1537              	 .loc 1 687 0
 1538              	 .cfi_startproc
 1539 0000 80B5     	 push {r7,lr}
 1540              	.LCFI68:
 1541              	 .cfi_def_cfa_offset 8
 1542              	 .cfi_offset 7,-8
 1543              	 .cfi_offset 14,-4
 1544 0002 86B0     	 sub sp,sp,#24
 1545              	.LCFI69:
 1546              	 .cfi_def_cfa_offset 32
 1547 0004 00AF     	 add r7,sp,#0
 1548              	.LCFI70:
 1549              	 .cfi_def_cfa_register 7
 1550 0006 7860     	 str r0,[r7,#4]
 688:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 689:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_int;
 690:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_frac;
 691:../Libraries/XMCLib/src/xmc1_scu.c **** 
 692:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 693:../Libraries/XMCLib/src/xmc1_scu.c ****   if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 1551              	 .loc 1 693 0
 1552 0008 194B     	 ldr r3,.L108
 1553 000a DA69     	 ldr r2,[r3,#28]
 1554 000c 8023     	 mov r3,#128
 1555 000e 9B00     	 lsl r3,r3,#2
 1556 0010 1340     	 and r3,r2
 1557 0012 06D1     	 bne .L105
 694:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 695:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = DCO1_DIV2_FREQUENCY_KHZ_Q22_10 / freq_khz;
 1558              	 .loc 1 695 0
 1559 0014 1748     	 ldr r0,.L108+4
 1560 0016 7968     	 ldr r1,[r7,#4]
 1561 0018 FFF7FEFF 	 bl __aeabi_uidiv
 1562 001c 031C     	 mov r3,r0
 1563 001e 7B61     	 str r3,[r7,#20]
 1564 0020 0FE0     	 b .L106
 1565              	.L105:
 696:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 697:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 698:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 699:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = ((OSCHP_GetFrequency() / 1000U) << 10U) / freq_khz;
 1566              	 .loc 1 699 0
 1567 0022 FFF7FEFF 	 bl OSCHP_GetFrequency
 1568 0026 031C     	 mov r3,r0
 1569 0028 181C     	 mov r0,r3
 1570 002a FA23     	 mov r3,#250
 1571 002c 9900     	 lsl r1,r3,#2
 1572 002e FFF7FEFF 	 bl __aeabi_uidiv
 1573 0032 031C     	 mov r3,r0
 1574 0034 9B02     	 lsl r3,r3,#10
 1575 0036 181C     	 mov r0,r3
 1576 0038 7968     	 ldr r1,[r7,#4]
 1577 003a FFF7FEFF 	 bl __aeabi_uidiv
 1578 003e 031C     	 mov r3,r0
 1579 0040 7B61     	 str r3,[r7,#20]
 1580              	.L106:
 700:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 701:../Libraries/XMCLib/src/xmc1_scu.c **** 
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 703:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffffU)
 1581              	 .loc 1 703 0
 1582 0042 7B69     	 ldr r3,[r7,#20]
 1583 0044 0C4A     	 ldr r2,.L108+8
 1584 0046 9342     	 cmp r3,r2
 1585 0048 01D9     	 bls .L107
 704:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 705:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffffU;
 1586              	 .loc 1 705 0
 1587 004a 0B4B     	 ldr r3,.L108+8
 1588 004c 7B61     	 str r3,[r7,#20]
 1589              	.L107:
 706:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 707:../Libraries/XMCLib/src/xmc1_scu.c **** 
 708:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 10U;
 1590              	 .loc 1 708 0
 1591 004e 7B69     	 ldr r3,[r7,#20]
 1592 0050 9B0A     	 lsr r3,r3,#10
 1593 0052 3B61     	 str r3,[r7,#16]
 709:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0x3ffU;
 1594              	 .loc 1 709 0
 1595 0054 7B69     	 ldr r3,[r7,#20]
 1596 0056 9B05     	 lsl r3,r3,#22
 1597 0058 9B0D     	 lsr r3,r3,#22
 1598 005a FB60     	 str r3,[r7,#12]
 710:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 711:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio = DCO1_DIV2_FREQUENCY_KHZ_Q24_8 / freq_khz;
 712:../Libraries/XMCLib/src/xmc1_scu.c **** 
 713:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 714:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffU)
 715:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 716:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffU;
 717:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 718:../Libraries/XMCLib/src/xmc1_scu.c **** 
 719:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 8U;
 720:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 721:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 722:../Libraries/XMCLib/src/xmc1_scu.c **** 
 723:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(ratio_int, ratio_frac);
 1599              	 .loc 1 723 0
 1600 005c 3A69     	 ldr r2,[r7,#16]
 1601 005e FB68     	 ldr r3,[r7,#12]
 1602 0060 101C     	 mov r0,r2
 1603 0062 191C     	 mov r1,r3
 1604 0064 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 724:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1605              	 .loc 1 724 0
 1606 0068 BD46     	 mov sp,r7
 1607 006a 06B0     	 add sp,sp,#24
 1608              	 
 1609 006c 80BD     	 pop {r7,pc}
 1610              	.L109:
 1611 006e C046     	 .align 2
 1612              	.L108:
 1613 0070 00030140 	 .word 1073808128
 1614 0074 0000EE02 	 .word 49152000
 1615 0078 FFFFFF00 	 .word 16777215
 1616              	 .cfi_endproc
 1617              	.LFE88:
 1619              	 .section .text.XMC_SCU_CLOCK_ScaleMCLKFrequency,"ax",%progbits
 1620              	 .align 2
 1621              	 .global XMC_SCU_CLOCK_ScaleMCLKFrequency
 1622              	 .code 16
 1623              	 .thumb_func
 1625              	XMC_SCU_CLOCK_ScaleMCLKFrequency:
 1626              	.LFB89:
 725:../Libraries/XMCLib/src/xmc1_scu.c **** 
 726:../Libraries/XMCLib/src/xmc1_scu.c **** 
 727:../Libraries/XMCLib/src/xmc1_scu.c **** /* A utility routine which updates the fractional dividers in steps */
 728:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
 729:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1627              	 .loc 1 729 0
 1628              	 .cfi_startproc
 1629 0000 80B5     	 push {r7,lr}
 1630              	.LCFI71:
 1631              	 .cfi_def_cfa_offset 8
 1632              	 .cfi_offset 7,-8
 1633              	 .cfi_offset 14,-4
 1634 0002 84B0     	 sub sp,sp,#16
 1635              	.LCFI72:
 1636              	 .cfi_def_cfa_offset 24
 1637 0004 00AF     	 add r7,sp,#0
 1638              	.LCFI73:
 1639              	 .cfi_def_cfa_register 7
 1640 0006 7860     	 str r0,[r7,#4]
 1641 0008 3960     	 str r1,[r7]
 730:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 731:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t curr_idiv;
 732:../Libraries/XMCLib/src/xmc1_scu.c **** 
 733:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1642              	 .loc 1 733 0
 1643 000a FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 734:../Libraries/XMCLib/src/xmc1_scu.c **** 
 735:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Take a snapshot of value already programmed into IDIV */
 736:../Libraries/XMCLib/src/xmc1_scu.c ****   curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 1644              	 .loc 1 736 0
 1645 000e 274B     	 ldr r3,.L115
 1646 0010 1A68     	 ldr r2,[r3]
 1647 0012 FF23     	 mov r3,#255
 1648 0014 1B02     	 lsl r3,r3,#8
 1649 0016 1340     	 and r3,r2
 1650 0018 1B0A     	 lsr r3,r3,#8
 1651 001a FB60     	 str r3,[r7,#12]
 737:../Libraries/XMCLib/src/xmc1_scu.c **** 
 738:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 739:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
 1652              	 .loc 1 739 0
 1653 001c 234B     	 ldr r3,.L115
 1654 001e 234A     	 ldr r2,.L115
 1655 0020 D269     	 ldr r2,[r2,#28]
 1656 0022 0321     	 mov r1,#3
 1657 0024 8A43     	 bic r2,r1
 1658 0026 111C     	 mov r1,r2
 740:../Libraries/XMCLib/src/xmc1_scu.c ****                     (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 1659              	 .loc 1 740 0
 1660 0028 3A68     	 ldr r2,[r7]
 1661 002a 120A     	 lsr r2,r2,#8
 739:../Libraries/XMCLib/src/xmc1_scu.c ****                     (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 1662              	 .loc 1 739 0
 1663 002c 0A43     	 orr r2,r1
 1664 002e DA61     	 str r2,[r3,#28]
 741:../Libraries/XMCLib/src/xmc1_scu.c **** 
 742:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 1665              	 .loc 1 742 0
 1666 0030 1E4B     	 ldr r3,.L115
 1667 0032 1E4A     	 ldr r2,.L115
 1668 0034 1268     	 ldr r2,[r2]
 1669 0036 1E49     	 ldr r1,.L115+4
 1670 0038 1140     	 and r1,r2
 743:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 1671              	 .loc 1 743 0
 1672 003a 3A68     	 ldr r2,[r7]
 1673 003c FF20     	 mov r0,#255
 1674 003e 0240     	 and r2,r0
 742:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 1675              	 .loc 1 742 0
 1676 0040 0A43     	 orr r2,r1
 1677              	 .loc 1 743 0
 1678 0042 1C49     	 ldr r1,.L115+8
 1679 0044 0A43     	 orr r2,r1
 742:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 1680              	 .loc 1 742 0
 1681 0046 1A60     	 str r2,[r3]
 744:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 745:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 746:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 747:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 748:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 749:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 750:../Libraries/XMCLib/src/xmc1_scu.c **** 
 751:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1682              	 .loc 1 751 0
 1683 0048 C046     	 mov r8,r8
 1684              	.L111:
 1685              	 .loc 1 751 0 is_stmt 0 discriminator 1
 1686 004a 184B     	 ldr r3,.L115
 1687 004c 1A68     	 ldr r2,[r3]
 1688 004e 8023     	 mov r3,#128
 1689 0050 DB05     	 lsl r3,r3,#23
 1690 0052 1340     	 and r3,r2
 1691 0054 F9D1     	 bne .L111
 752:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 753:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Spin until the core supply stabilizes */
 754:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 755:../Libraries/XMCLib/src/xmc1_scu.c **** 
 756:../Libraries/XMCLib/src/xmc1_scu.c ****   if (curr_idiv <= idiv)
 1692              	 .loc 1 756 0 is_stmt 1
 1693 0056 FA68     	 ldr r2,[r7,#12]
 1694 0058 7B68     	 ldr r3,[r7,#4]
 1695 005a 9A42     	 cmp r2,r3
 1696 005c 06D8     	 bhi .L112
 757:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 758:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
 759:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
 1697              	 .loc 1 759 0
 1698 005e FA68     	 ldr r2,[r7,#12]
 1699 0060 7B68     	 ldr r3,[r7,#4]
 1700 0062 101C     	 mov r0,r2
 1701 0064 191C     	 mov r1,r3
 1702 0066 FFF7FEFF 	 bl XMC_SCU_CLOCK_lFrequencyDownScaling
 1703 006a 05E0     	 b .L113
 1704              	.L112:
 760:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 761:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 762:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 763:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
 764:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
 1705              	 .loc 1 764 0
 1706 006c FA68     	 ldr r2,[r7,#12]
 1707 006e 7B68     	 ldr r3,[r7,#4]
 1708 0070 101C     	 mov r0,r2
 1709 0072 191C     	 mov r1,r3
 1710 0074 FFF7FEFF 	 bl XMC_SCU_CLOCK_lFrequencyUpScaling
 1711              	.L113:
 765:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 766:../Libraries/XMCLib/src/xmc1_scu.c **** 
 767:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 1712              	 .loc 1 767 0
 1713 0078 0C4B     	 ldr r3,.L115
 1714 007a 0C4A     	 ldr r2,.L115
 1715 007c 1268     	 ldr r2,[r2]
 1716 007e 0E49     	 ldr r1,.L115+12
 1717 0080 1140     	 and r1,r2
 768:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1718              	 .loc 1 768 0
 1719 0082 7A68     	 ldr r2,[r7,#4]
 1720 0084 1202     	 lsl r2,r2,#8
 767:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1721              	 .loc 1 767 0
 1722 0086 0A43     	 orr r2,r1
 1723              	 .loc 1 768 0
 1724 0088 0A49     	 ldr r1,.L115+8
 1725 008a 0A43     	 orr r2,r1
 767:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1726              	 .loc 1 767 0
 1727 008c 1A60     	 str r2,[r3]
 769:../Libraries/XMCLib/src/xmc1_scu.c **** 
 770:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1728              	 .loc 1 770 0
 1729 008e C046     	 mov r8,r8
 1730              	.L114:
 1731              	 .loc 1 770 0 is_stmt 0 discriminator 1
 1732 0090 064B     	 ldr r3,.L115
 1733 0092 1A68     	 ldr r2,[r3]
 1734 0094 8023     	 mov r3,#128
 1735 0096 DB05     	 lsl r3,r3,#23
 1736 0098 1340     	 and r3,r2
 1737 009a F9D1     	 bne .L114
 771:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 772:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 773:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 774:../Libraries/XMCLib/src/xmc1_scu.c **** 
 775:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1738              	 .loc 1 775 0 is_stmt 1
 1739 009c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 776:../Libraries/XMCLib/src/xmc1_scu.c **** 
 777:../Libraries/XMCLib/src/xmc1_scu.c ****   SystemCoreClockUpdate();
 1740              	 .loc 1 777 0
 1741 00a0 FFF7FEFF 	 bl SystemCoreClockUpdate
 778:../Libraries/XMCLib/src/xmc1_scu.c **** 
 779:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1742              	 .loc 1 779 0
 1743 00a4 BD46     	 mov sp,r7
 1744 00a6 04B0     	 add sp,sp,#16
 1745              	 
 1746 00a8 80BD     	 pop {r7,pc}
 1747              	.L116:
 1748 00aa C046     	 .align 2
 1749              	.L115:
 1750 00ac 00030140 	 .word 1073808128
 1751 00b0 00FF0FC0 	 .word -1072693504
 1752 00b4 0000F03F 	 .word 1072693248
 1753 00b8 FF000FC0 	 .word -1072758529
 1754              	 .cfi_endproc
 1755              	.LFE89:
 1757              	 .section .text.XMC_SCU_CLOCK_lFrequencyUpScaling,"ax",%progbits
 1758              	 .align 2
 1759              	 .code 16
 1760              	 .thumb_func
 1762              	XMC_SCU_CLOCK_lFrequencyUpScaling:
 1763              	.LFB90:
 780:../Libraries/XMCLib/src/xmc1_scu.c **** 
 781:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 782:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
 783:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1764              	 .loc 1 783 0
 1765              	 .cfi_startproc
 1766 0000 80B5     	 push {r7,lr}
 1767              	.LCFI74:
 1768              	 .cfi_def_cfa_offset 8
 1769              	 .cfi_offset 7,-8
 1770              	 .cfi_offset 14,-4
 1771 0002 82B0     	 sub sp,sp,#8
 1772              	.LCFI75:
 1773              	 .cfi_def_cfa_offset 16
 1774 0004 00AF     	 add r7,sp,#0
 1775              	.LCFI76:
 1776              	 .cfi_def_cfa_register 7
 1777 0006 7860     	 str r0,[r7,#4]
 1778 0008 3960     	 str r1,[r7]
 784:../Libraries/XMCLib/src/xmc1_scu.c ****   while (curr_idiv > (target_idiv * 4UL))
 1779              	 .loc 1 784 0
 1780 000a 14E0     	 b .L118
 1781              	.L120:
 785:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 786:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
 1782              	 .loc 1 786 0
 1783 000c 7B68     	 ldr r3,[r7,#4]
 1784 000e 9B08     	 lsr r3,r3,#2
 1785 0010 7B60     	 str r3,[r7,#4]
 787:../Libraries/XMCLib/src/xmc1_scu.c **** 
 788:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1786              	 .loc 1 788 0
 1787 0012 0D4B     	 ldr r3,.L121
 1788 0014 0C4A     	 ldr r2,.L121
 1789 0016 1268     	 ldr r2,[r2]
 1790 0018 0C49     	 ldr r1,.L121+4
 1791 001a 1140     	 and r1,r2
 789:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1792              	 .loc 1 789 0
 1793 001c 7A68     	 ldr r2,[r7,#4]
 1794 001e 1202     	 lsl r2,r2,#8
 788:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1795              	 .loc 1 788 0
 1796 0020 0A43     	 orr r2,r1
 1797              	 .loc 1 789 0
 1798 0022 0B49     	 ldr r1,.L121+8
 1799 0024 0A43     	 orr r2,r1
 788:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1800              	 .loc 1 788 0
 1801 0026 1A60     	 str r2,[r3]
 790:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 791:../Libraries/XMCLib/src/xmc1_scu.c **** 
 792:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1802              	 .loc 1 792 0
 1803 0028 C046     	 mov r8,r8
 1804              	.L119:
 1805              	 .loc 1 792 0 is_stmt 0 discriminator 1
 1806 002a 074B     	 ldr r3,.L121
 1807 002c 1A68     	 ldr r2,[r3]
 1808 002e 8023     	 mov r3,#128
 1809 0030 DB05     	 lsl r3,r3,#23
 1810 0032 1340     	 and r3,r2
 1811 0034 F9D1     	 bne .L119
 1812              	.L118:
 784:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1813              	 .loc 1 784 0 is_stmt 1
 1814 0036 3B68     	 ldr r3,[r7]
 1815 0038 9A00     	 lsl r2,r3,#2
 1816 003a 7B68     	 ldr r3,[r7,#4]
 1817 003c 9A42     	 cmp r2,r3
 1818 003e E5D3     	 bcc .L120
 793:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 794:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait voltage suply stabilization */
 795:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 796:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 797:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1819              	 .loc 1 797 0
 1820 0040 BD46     	 mov sp,r7
 1821 0042 02B0     	 add sp,sp,#8
 1822              	 
 1823 0044 80BD     	 pop {r7,pc}
 1824              	.L122:
 1825 0046 C046     	 .align 2
 1826              	.L121:
 1827 0048 00030140 	 .word 1073808128
 1828 004c FF000FC0 	 .word -1072758529
 1829 0050 0000F03F 	 .word 1072693248
 1830              	 .cfi_endproc
 1831              	.LFE90:
 1833              	 .section .text.XMC_SCU_CLOCK_lFrequencyDownScaling,"ax",%progbits
 1834              	 .align 2
 1835              	 .code 16
 1836              	 .thumb_func
 1838              	XMC_SCU_CLOCK_lFrequencyDownScaling:
 1839              	.LFB91:
 798:../Libraries/XMCLib/src/xmc1_scu.c **** 
 799:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 800:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
 801:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1840              	 .loc 1 801 0
 1841              	 .cfi_startproc
 1842 0000 80B5     	 push {r7,lr}
 1843              	.LCFI77:
 1844              	 .cfi_def_cfa_offset 8
 1845              	 .cfi_offset 7,-8
 1846              	 .cfi_offset 14,-4
 1847 0002 82B0     	 sub sp,sp,#8
 1848              	.LCFI78:
 1849              	 .cfi_def_cfa_offset 16
 1850 0004 00AF     	 add r7,sp,#0
 1851              	.LCFI79:
 1852              	 .cfi_def_cfa_register 7
 1853 0006 7860     	 str r0,[r7,#4]
 1854 0008 3960     	 str r1,[r7]
 802:../Libraries/XMCLib/src/xmc1_scu.c **** 
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((curr_idiv * 4UL) < target_idiv)
 1855              	 .loc 1 803 0
 1856 000a 19E0     	 b .L124
 1857              	.L127:
 804:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 805:../Libraries/XMCLib/src/xmc1_scu.c ****     if (0U == curr_idiv)
 1858              	 .loc 1 805 0
 1859 000c 7B68     	 ldr r3,[r7,#4]
 1860 000e 002B     	 cmp r3,#0
 1861 0010 01D1     	 bne .L125
 806:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 807:../Libraries/XMCLib/src/xmc1_scu.c ****       curr_idiv = 1U;
 1862              	 .loc 1 807 0
 1863 0012 0123     	 mov r3,#1
 1864 0014 7B60     	 str r3,[r7,#4]
 1865              	.L125:
 808:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 809:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
 1866              	 .loc 1 809 0
 1867 0016 7B68     	 ldr r3,[r7,#4]
 1868 0018 9B00     	 lsl r3,r3,#2
 1869 001a 7B60     	 str r3,[r7,#4]
 810:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1870              	 .loc 1 810 0
 1871 001c 0C4B     	 ldr r3,.L128
 1872 001e 0C4A     	 ldr r2,.L128
 1873 0020 1268     	 ldr r2,[r2]
 1874 0022 0C49     	 ldr r1,.L128+4
 1875 0024 1140     	 and r1,r2
 811:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1876              	 .loc 1 811 0
 1877 0026 7A68     	 ldr r2,[r7,#4]
 1878 0028 1202     	 lsl r2,r2,#8
 810:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1879              	 .loc 1 810 0
 1880 002a 0A43     	 orr r2,r1
 1881              	 .loc 1 811 0
 1882 002c 0A49     	 ldr r1,.L128+8
 1883 002e 0A43     	 orr r2,r1
 810:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1884              	 .loc 1 810 0
 1885 0030 1A60     	 str r2,[r3]
 812:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 813:../Libraries/XMCLib/src/xmc1_scu.c **** 
 814:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1886              	 .loc 1 814 0
 1887 0032 C046     	 mov r8,r8
 1888              	.L126:
 1889              	 .loc 1 814 0 is_stmt 0 discriminator 1
 1890 0034 064B     	 ldr r3,.L128
 1891 0036 1A68     	 ldr r2,[r3]
 1892 0038 8023     	 mov r3,#128
 1893 003a DB05     	 lsl r3,r3,#23
 1894 003c 1340     	 and r3,r2
 1895 003e F9D1     	 bne .L126
 1896              	.L124:
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1897              	 .loc 1 803 0 is_stmt 1
 1898 0040 7B68     	 ldr r3,[r7,#4]
 1899 0042 9A00     	 lsl r2,r3,#2
 1900 0044 3B68     	 ldr r3,[r7]
 1901 0046 9A42     	 cmp r2,r3
 1902 0048 E0D3     	 bcc .L127
 815:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 816:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait voltage suply stabilization */
 817:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 818:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 819:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1903              	 .loc 1 819 0
 1904 004a BD46     	 mov sp,r7
 1905 004c 02B0     	 add sp,sp,#8
 1906              	 
 1907 004e 80BD     	 pop {r7,pc}
 1908              	.L129:
 1909              	 .align 2
 1910              	.L128:
 1911 0050 00030140 	 .word 1073808128
 1912 0054 FF000FC0 	 .word -1072758529
 1913 0058 0000F03F 	 .word 1072693248
 1914              	 .cfi_endproc
 1915              	.LFE91:
 1917              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1918              	 .align 2
 1919              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1920              	 .code 16
 1921              	 .thumb_func
 1923              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1924              	.LFB92:
 820:../Libraries/XMCLib/src/xmc1_scu.c **** 
 821:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 822:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 823:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 824:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 825:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1925              	 .loc 1 825 0
 1926              	 .cfi_startproc
 1927 0000 80B5     	 push {r7,lr}
 1928              	.LCFI80:
 1929              	 .cfi_def_cfa_offset 8
 1930              	 .cfi_offset 7,-8
 1931              	 .cfi_offset 14,-4
 1932 0002 00AF     	 add r7,sp,#0
 1933              	.LCFI81:
 1934              	 .cfi_def_cfa_register 7
 826:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1935              	 .loc 1 826 0
 1936 0004 024B     	 ldr r3,.L132
 1937 0006 1B68     	 ldr r3,[r3]
 827:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1938              	 .loc 1 827 0
 1939 0008 181C     	 mov r0,r3
 1940 000a BD46     	 mov sp,r7
 1941              	 
 1942 000c 80BD     	 pop {r7,pc}
 1943              	.L133:
 1944 000e C046     	 .align 2
 1945              	.L132:
 1946 0010 00000000 	 .word SystemCoreClock
 1947              	 .cfi_endproc
 1948              	.LFE92:
 1950              	 .section .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency,"ax",%progbits
 1951              	 .align 2
 1952              	 .global XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
 1953              	 .code 16
 1954              	 .thumb_func
 1956              	XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:
 1957              	.LFB93:
 828:../Libraries/XMCLib/src/xmc1_scu.c **** 
 829:../Libraries/XMCLib/src/xmc1_scu.c **** /* Provides the clock frequency of peripherals on the peripheral bus that are using a shared functi
 830:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetFastPeripheralClockFrequency(void)
 831:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1958              	 .loc 1 831 0
 1959              	 .cfi_startproc
 1960 0000 80B5     	 push {r7,lr}
 1961              	.LCFI82:
 1962              	 .cfi_def_cfa_offset 8
 1963              	 .cfi_offset 7,-8
 1964              	 .cfi_offset 14,-4
 1965 0002 00AF     	 add r7,sp,#0
 1966              	.LCFI83:
 1967              	 .cfi_def_cfa_register 7
 832:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1968              	 .loc 1 832 0
 1969 0004 064B     	 ldr r3,.L136
 1970 0006 1A68     	 ldr r2,[r3]
 1971 0008 064B     	 ldr r3,.L136+4
 1972 000a 1968     	 ldr r1,[r3]
 1973 000c 8023     	 mov r3,#128
 1974 000e 5B02     	 lsl r3,r3,#9
 1975 0010 0B40     	 and r3,r1
 1976 0012 1B0C     	 lsr r3,r3,#16
 1977 0014 9A40     	 lsl r2,r2,r3
 1978 0016 131C     	 mov r3,r2
 833:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1979              	 .loc 1 833 0
 1980 0018 181C     	 mov r0,r3
 1981 001a BD46     	 mov sp,r7
 1982              	 
 1983 001c 80BD     	 pop {r7,pc}
 1984              	.L137:
 1985 001e C046     	 .align 2
 1986              	.L136:
 1987 0020 00000000 	 .word SystemCoreClock
 1988 0024 00030140 	 .word 1073808128
 1989              	 .cfi_endproc
 1990              	.LFE93:
 1992              	 .global __aeabi_idiv
 1993              	 .section .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature,"ax",%progbits
 1994              	 .align 2
 1995              	 .global XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
 1996              	 .code 16
 1997              	 .thumb_func
 1999              	XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:
 2000              	.LFB94:
 834:../Libraries/XMCLib/src/xmc1_scu.c **** 
 835:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 836:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature(int32_t temperature)
 837:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2001              	 .loc 1 837 0
 2002              	 .cfi_startproc
 2003 0000 80B5     	 push {r7,lr}
 2004              	.LCFI84:
 2005              	 .cfi_def_cfa_offset 8
 2006              	 .cfi_offset 7,-8
 2007              	 .cfi_offset 14,-4
 2008 0002 88B0     	 sub sp,sp,#32
 2009              	.LCFI85:
 2010              	 .cfi_def_cfa_offset 40
 2011 0004 00AF     	 add r7,sp,#0
 2012              	.LCFI86:
 2013              	 .cfi_def_cfa_register 7
 2014 0006 7860     	 str r0,[r7,#4]
 838:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t a;
 839:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t b;
 840:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t d;
 841:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t e;
 842:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t offset;
 843:../Libraries/XMCLib/src/xmc1_scu.c **** 
 844:../Libraries/XMCLib/src/xmc1_scu.c ****   a = *((uint8_t *)DCO_ADJLO_T2);
 2015              	 .loc 1 844 0
 2016 0008 174B     	 ldr r3,.L139
 2017 000a 1B78     	 ldrb r3,[r3]
 2018 000c FB61     	 str r3,[r7,#28]
 845:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t *)DCO_ADJLO_T1);
 2019              	 .loc 1 845 0
 2020 000e 174B     	 ldr r3,.L139+4
 2021 0010 1B78     	 ldrb r3,[r3]
 2022 0012 BB61     	 str r3,[r7,#24]
 846:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t *)ANA_TSE_T1);
 2023              	 .loc 1 846 0
 2024 0014 164B     	 ldr r3,.L139+8
 2025 0016 1B78     	 ldrb r3,[r3]
 2026 0018 7B61     	 str r3,[r7,#20]
 847:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t *)ANA_TSE_T2);
 2027              	 .loc 1 847 0
 2028 001a 164B     	 ldr r3,.L139+12
 2029 001c 1B78     	 ldrb r3,[r3]
 2030 001e 3B61     	 str r3,[r7,#16]
 848:../Libraries/XMCLib/src/xmc1_scu.c **** 
 849:../Libraries/XMCLib/src/xmc1_scu.c ****   offset = b + (((a - b) * (temperature - d)) / (e - d));
 2031              	 .loc 1 849 0
 2032 0020 FA69     	 ldr r2,[r7,#28]
 2033 0022 BB69     	 ldr r3,[r7,#24]
 2034 0024 D31A     	 sub r3,r2,r3
 2035 0026 7968     	 ldr r1,[r7,#4]
 2036 0028 7A69     	 ldr r2,[r7,#20]
 2037 002a 8A1A     	 sub r2,r1,r2
 2038 002c 5A43     	 mul r2,r3
 2039 002e 111C     	 mov r1,r2
 2040 0030 3A69     	 ldr r2,[r7,#16]
 2041 0032 7B69     	 ldr r3,[r7,#20]
 2042 0034 D31A     	 sub r3,r2,r3
 2043 0036 081C     	 mov r0,r1
 2044 0038 191C     	 mov r1,r3
 2045 003a FFF7FEFF 	 bl __aeabi_idiv
 2046 003e 031C     	 mov r3,r0
 2047 0040 1A1C     	 mov r2,r3
 2048 0042 BB69     	 ldr r3,[r7,#24]
 2049 0044 D318     	 add r3,r2,r3
 2050 0046 FB60     	 str r3,[r7,#12]
 850:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 2051              	 .loc 1 850 0
 2052 0048 FB68     	 ldr r3,[r7,#12]
 2053 004a 7F22     	 mov r2,#127
 2054 004c 1340     	 and r3,r2
 2055 004e FB60     	 str r3,[r7,#12]
 851:../Libraries/XMCLib/src/xmc1_scu.c **** 
 852:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 2056              	 .loc 1 852 0
 2057 0050 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 853:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOFFSET = (uint16_t)offset;
 2058              	 .loc 1 853 0
 2059 0054 084A     	 ldr r2,.L139+16
 2060 0056 FB68     	 ldr r3,[r7,#12]
 2061 0058 99B2     	 uxth r1,r3
 2062 005a 6C23     	 mov r3,#108
 2063 005c D152     	 strh r1,[r2,r3]
 854:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 2064              	 .loc 1 854 0
 2065 005e FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 855:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2066              	 .loc 1 855 0
 2067 0062 BD46     	 mov sp,r7
 2068 0064 08B0     	 add sp,sp,#32
 2069              	 
 2070 0066 80BD     	 pop {r7,pc}
 2071              	.L140:
 2072              	 .align 2
 2073              	.L139:
 2074 0068 330F0010 	 .word 268439347
 2075 006c 320F0010 	 .word 268439346
 2076 0070 300F0010 	 .word 268439344
 2077 0074 310F0010 	 .word 268439345
 2078 0078 00100140 	 .word 1073811456
 2079              	 .cfi_endproc
 2080              	.LFE94:
 2082              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 2083              	 .align 2
 2084              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 2085              	 .code 16
 2086              	 .thumb_func
 2088              	XMC_SCU_INTERRUPT_SetEventHandler:
 2089              	.LFB95:
 856:../Libraries/XMCLib/src/xmc1_scu.c **** 
 857:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 858:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event
 859:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 860:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRU
 861:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2090              	 .loc 1 861 0
 2091              	 .cfi_startproc
 2092 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 2093              	.LCFI87:
 2094              	 .cfi_def_cfa_offset 20
 2095              	 .cfi_offset 4,-20
 2096              	 .cfi_offset 5,-16
 2097              	 .cfi_offset 6,-12
 2098              	 .cfi_offset 7,-8
 2099              	 .cfi_offset 14,-4
 2100 0002 87B0     	 sub sp,sp,#28
 2101              	.LCFI88:
 2102              	 .cfi_def_cfa_offset 48
 2103 0004 00AF     	 add r7,sp,#0
 2104              	.LCFI89:
 2105              	 .cfi_def_cfa_register 7
 2106 0006 B860     	 str r0,[r7,#8]
 2107 0008 F960     	 str r1,[r7,#12]
 2108 000a 7A60     	 str r2,[r7,#4]
 862:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 863:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status;
 864:../Libraries/XMCLib/src/xmc1_scu.c **** 
 865:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(eve
 866:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);
 867:../Libraries/XMCLib/src/xmc1_scu.c **** 
 868:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 2109              	 .loc 1 868 0
 2110 000c 0022     	 mov r2,#0
 2111 000e 7A61     	 str r2,[r7,#20]
 869:../Libraries/XMCLib/src/xmc1_scu.c **** 
 870:../Libraries/XMCLib/src/xmc1_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 2112              	 .loc 1 870 0
 2113 0010 02E0     	 b .L142
 2114              	.L146:
 871:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 872:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 2115              	 .loc 1 872 0
 2116 0012 7A69     	 ldr r2,[r7,#20]
 2117 0014 0132     	 add r2,r2,#1
 2118 0016 7A61     	 str r2,[r7,#20]
 2119              	.L142:
 870:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2120              	 .loc 1 870 0
 2121 0018 7A69     	 ldr r2,[r7,#20]
 2122 001a 111C     	 mov r1,r2
 2123 001c 2039     	 sub r1,r1,#32
 2124 001e 0029     	 cmp r1,#0
 2125 0020 03DB     	 blt .L143
 2126 0022 F868     	 ldr r0,[r7,#12]
 2127 0024 C840     	 lsr r0,r0,r1
 2128 0026 031C     	 mov r3,r0
 2129 0028 08E0     	 b .L144
 2130              	.L143:
 2131 002a 2021     	 mov r1,#32
 2132 002c 891A     	 sub r1,r1,r2
 2133 002e F868     	 ldr r0,[r7,#12]
 2134 0030 8840     	 lsl r0,r0,r1
 2135 0032 011C     	 mov r1,r0
 2136 0034 B868     	 ldr r0,[r7,#8]
 2137 0036 D040     	 lsr r0,r0,r2
 2138 0038 031C     	 mov r3,r0
 2139 003a 0B43     	 orr r3,r1
 2140              	.L144:
 2141 003c F968     	 ldr r1,[r7,#12]
 2142 003e D140     	 lsr r1,r1,r2
 2143 0040 0C1C     	 mov r4,r1
 2144 0042 0122     	 mov r2,#1
 2145 0044 1A40     	 and r2,r3
 2146 0046 151C     	 mov r5,r2
 2147 0048 0022     	 mov r2,#0
 2148 004a 2240     	 and r2,r4
 2149 004c 161C     	 mov r6,r2
 2150 004e 2A1C     	 mov r2,r5
 2151 0050 3243     	 orr r2,r6
 2152 0052 02D1     	 bne .L145
 870:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2153              	 .loc 1 870 0 is_stmt 0 discriminator 1
 2154 0054 7A69     	 ldr r2,[r7,#20]
 2155 0056 3F2A     	 cmp r2,#63
 2156 0058 DBD9     	 bls .L146
 2157              	.L145:
 873:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 874:../Libraries/XMCLib/src/xmc1_scu.c **** 
 875:../Libraries/XMCLib/src/xmc1_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 2158              	 .loc 1 875 0 is_stmt 1
 2159 005a 7B69     	 ldr r3,[r7,#20]
 2160 005c 402B     	 cmp r3,#64
 2161 005e 04D1     	 bne .L147
 876:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 877:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 2162              	 .loc 1 877 0
 2163 0060 1323     	 mov r3,#19
 2164 0062 FB18     	 add r3,r7,r3
 2165 0064 0122     	 mov r2,#1
 2166 0066 1A70     	 strb r2,[r3]
 2167 0068 08E0     	 b .L148
 2168              	.L147:
 878:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 879:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 880:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 881:../Libraries/XMCLib/src/xmc1_scu.c ****     event_handler_list[index] = handler;
 2169              	 .loc 1 881 0
 2170 006a 084B     	 ldr r3,.L150
 2171 006c 7A69     	 ldr r2,[r7,#20]
 2172 006e 9200     	 lsl r2,r2,#2
 2173 0070 7968     	 ldr r1,[r7,#4]
 2174 0072 D150     	 str r1,[r2,r3]
 882:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 2175              	 .loc 1 882 0
 2176 0074 1323     	 mov r3,#19
 2177 0076 FB18     	 add r3,r7,r3
 2178 0078 0022     	 mov r2,#0
 2179 007a 1A70     	 strb r2,[r3]
 2180              	.L148:
 883:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 884:../Libraries/XMCLib/src/xmc1_scu.c **** 
 885:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 2181              	 .loc 1 885 0
 2182 007c 1323     	 mov r3,#19
 2183 007e FB18     	 add r3,r7,r3
 2184 0080 1B78     	 ldrb r3,[r3]
 886:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2185              	 .loc 1 886 0
 2186 0082 181C     	 mov r0,r3
 2187 0084 BD46     	 mov sp,r7
 2188 0086 07B0     	 add sp,sp,#28
 2189              	 
 2190 0088 F0BD     	 pop {r4,r5,r6,r7,pc}
 2191              	.L151:
 2192 008a C046     	 .align 2
 2193              	.L150:
 2194 008c 00000000 	 .word event_handler_list
 2195              	 .cfi_endproc
 2196              	.LFE95:
 2198              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 2199              	 .align 2
 2200              	 .global XMC_SCU_IRQHandler
 2201              	 .code 16
 2202              	 .thumb_func
 2204              	XMC_SCU_IRQHandler:
 2205              	.LFB96:
 887:../Libraries/XMCLib/src/xmc1_scu.c **** 
 888:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 889:../Libraries/XMCLib/src/xmc1_scu.c ****  * A common function to execute callback functions for multiple events
 890:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 891:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
 892:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2206              	 .loc 1 892 0
 2207              	 .cfi_startproc
 2208 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 2209              	.LCFI90:
 2210              	 .cfi_def_cfa_offset 20
 2211              	 .cfi_offset 4,-20
 2212              	 .cfi_offset 5,-16
 2213              	 .cfi_offset 6,-12
 2214              	 .cfi_offset 7,-8
 2215              	 .cfi_offset 14,-4
 2216 0002 8FB0     	 sub sp,sp,#60
 2217              	.LCFI91:
 2218              	 .cfi_def_cfa_offset 80
 2219 0004 00AF     	 add r7,sp,#0
 2220              	.LCFI92:
 2221              	 .cfi_def_cfa_register 7
 2222 0006 F861     	 str r0,[r7,#28]
 893:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_IRQHandler: Invalid sr_num", sr_num < SCU_IRQ_NUM);
 894:../Libraries/XMCLib/src/xmc1_scu.c **** 
 895:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 896:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
 897:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
 898:../Libraries/XMCLib/src/xmc1_scu.c **** 
 899:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 2223              	 .loc 1 899 0
 2224 0008 0023     	 mov r3,#0
 2225 000a 7B63     	 str r3,[r7,#52]
 900:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 2226              	 .loc 1 900 0
 2227 000c FFF7FEFF 	 bl XMC_SCU_INTERUPT_GetEventStatus
 2228 0010 384A     	 ldr r2,.L163
 2229 0012 FB69     	 ldr r3,[r7,#28]
 2230 0014 DB00     	 lsl r3,r3,#3
 2231 0016 D318     	 add r3,r2,r3
 2232 0018 1A68     	 ldr r2,[r3]
 2233 001a 5B68     	 ldr r3,[r3,#4]
 2234 001c 161C     	 mov r6,r2
 2235 001e 0640     	 and r6,r0
 2236 0020 BE62     	 str r6,[r7,#40]
 2237 0022 0B40     	 and r3,r1
 2238 0024 FB62     	 str r3,[r7,#44]
 901:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 2239              	 .loc 1 901 0
 2240 0026 BA6A     	 ldr r2,[r7,#40]
 2241 0028 FB6A     	 ldr r3,[r7,#44]
 2242 002a 101C     	 mov r0,r2
 2243 002c 191C     	 mov r1,r3
 2244 002e FFF7FEFF 	 bl XMC_SCU_INTERRUPT_ClearEventStatus
 902:../Libraries/XMCLib/src/xmc1_scu.c **** 
 903:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 2245              	 .loc 1 903 0
 2246 0032 55E0     	 b .L153
 2247              	.L162:
 904:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 905:../Libraries/XMCLib/src/xmc1_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 2248              	 .loc 1 905 0
 2249 0034 7B6B     	 ldr r3,[r7,#52]
 2250 0036 1A1C     	 mov r2,r3
 2251 0038 203A     	 sub r2,r2,#32
 2252 003a 002A     	 cmp r2,#0
 2253 003c 03DB     	 blt .L154
 2254 003e F96A     	 ldr r1,[r7,#44]
 2255 0040 D140     	 lsr r1,r1,r2
 2256 0042 0C1C     	 mov r4,r1
 2257 0044 08E0     	 b .L155
 2258              	.L154:
 2259 0046 2022     	 mov r2,#32
 2260 0048 D21A     	 sub r2,r2,r3
 2261 004a F96A     	 ldr r1,[r7,#44]
 2262 004c 9140     	 lsl r1,r1,r2
 2263 004e 0A1C     	 mov r2,r1
 2264 0050 B96A     	 ldr r1,[r7,#40]
 2265 0052 D940     	 lsr r1,r1,r3
 2266 0054 0C1C     	 mov r4,r1
 2267 0056 1443     	 orr r4,r2
 2268              	.L155:
 2269 0058 FA6A     	 ldr r2,[r7,#44]
 2270 005a DA40     	 lsr r2,r2,r3
 2271 005c 151C     	 mov r5,r2
 2272 005e 0123     	 mov r3,#1
 2273 0060 2340     	 and r3,r4
 2274 0062 BB60     	 str r3,[r7,#8]
 2275 0064 0023     	 mov r3,#0
 2276 0066 2B40     	 and r3,r5
 2277 0068 FB60     	 str r3,[r7,#12]
 2278 006a B968     	 ldr r1,[r7,#8]
 2279 006c FA68     	 ldr r2,[r7,#12]
 2280 006e 0B1C     	 mov r3,r1
 2281 0070 1343     	 orr r3,r2
 2282 0072 32D0     	 beq .L156
 906:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 907:../Libraries/XMCLib/src/xmc1_scu.c ****       event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
 2283              	 .loc 1 907 0
 2284 0074 7B6B     	 ldr r3,[r7,#52]
 2285 0076 1A1C     	 mov r2,r3
 2286 0078 203A     	 sub r2,r2,#32
 2287 007a 002A     	 cmp r2,#0
 2288 007c 03DB     	 blt .L158
 2289 007e 0121     	 mov r1,#1
 2290 0080 9140     	 lsl r1,r1,r2
 2291 0082 7961     	 str r1,[r7,#20]
 2292 0084 0AE0     	 b .L159
 2293              	.L158:
 2294 0086 2022     	 mov r2,#32
 2295 0088 D21A     	 sub r2,r2,r3
 2296 008a 0121     	 mov r1,#1
 2297 008c D140     	 lsr r1,r1,r2
 2298 008e 0A1C     	 mov r2,r1
 2299 0090 0021     	 mov r1,#0
 2300 0092 9940     	 lsl r1,r1,r3
 2301 0094 7961     	 str r1,[r7,#20]
 2302 0096 7969     	 ldr r1,[r7,#20]
 2303 0098 1143     	 orr r1,r2
 2304 009a 7961     	 str r1,[r7,#20]
 2305              	.L159:
 2306 009c 0122     	 mov r2,#1
 2307 009e 9A40     	 lsl r2,r2,r3
 2308 00a0 3A61     	 str r2,[r7,#16]
 2309 00a2 3969     	 ldr r1,[r7,#16]
 2310 00a4 7A69     	 ldr r2,[r7,#20]
 2311 00a6 0B1C     	 mov r3,r1
 2312 00a8 DB43     	 mvn r3,r3
 2313 00aa 3B60     	 str r3,[r7]
 2314 00ac 131C     	 mov r3,r2
 2315 00ae DB43     	 mvn r3,r3
 2316 00b0 7B60     	 str r3,[r7,#4]
 2317 00b2 BB6A     	 ldr r3,[r7,#40]
 2318 00b4 3868     	 ldr r0,[r7]
 2319 00b6 7968     	 ldr r1,[r7,#4]
 2320 00b8 021C     	 mov r2,r0
 2321 00ba 1340     	 and r3,r2
 2322 00bc BB62     	 str r3,[r7,#40]
 2323 00be FB6A     	 ldr r3,[r7,#44]
 2324 00c0 0A1C     	 mov r2,r1
 2325 00c2 1340     	 and r3,r2
 2326 00c4 FB62     	 str r3,[r7,#44]
 908:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 2327              	 .loc 1 908 0
 2328 00c6 0C4B     	 ldr r3,.L163+4
 2329 00c8 7A6B     	 ldr r2,[r7,#52]
 2330 00ca 9200     	 lsl r2,r2,#2
 2331 00cc D358     	 ldr r3,[r2,r3]
 2332 00ce 7B62     	 str r3,[r7,#36]
 909:../Libraries/XMCLib/src/xmc1_scu.c ****       if (event_handler != NULL)
 2333              	 .loc 1 909 0
 2334 00d0 7B6A     	 ldr r3,[r7,#36]
 2335 00d2 002B     	 cmp r3,#0
 2336 00d4 01D0     	 beq .L156
 910:../Libraries/XMCLib/src/xmc1_scu.c ****       {
 911:../Libraries/XMCLib/src/xmc1_scu.c ****         event_handler();
 2337              	 .loc 1 911 0
 2338 00d6 7B6A     	 ldr r3,[r7,#36]
 2339 00d8 9847     	 blx r3
 2340              	.L156:
 912:../Libraries/XMCLib/src/xmc1_scu.c ****       }
 913:../Libraries/XMCLib/src/xmc1_scu.c **** 
 914:../Libraries/XMCLib/src/xmc1_scu.c ****       /* break; XMC1: Only PULSE interrupts */
 915:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 916:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 2341              	 .loc 1 916 0
 2342 00da 7B6B     	 ldr r3,[r7,#52]
 2343 00dc 0133     	 add r3,r3,#1
 2344 00de 7B63     	 str r3,[r7,#52]
 2345              	.L153:
 903:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2346              	 .loc 1 903 0
 2347 00e0 BB6A     	 ldr r3,[r7,#40]
 2348 00e2 FA6A     	 ldr r2,[r7,#44]
 2349 00e4 1343     	 orr r3,r2
 2350 00e6 02D0     	 beq .L152
 2351 00e8 7B6B     	 ldr r3,[r7,#52]
 2352 00ea 3F2B     	 cmp r3,#63
 2353 00ec A2D9     	 bls .L162
 2354              	.L152:
 917:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 918:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2355              	 .loc 1 918 0
 2356 00ee BD46     	 mov sp,r7
 2357 00f0 0FB0     	 add sp,sp,#60
 2358              	 
 2359 00f2 F0BD     	 pop {r4,r5,r6,r7,pc}
 2360              	.L164:
 2361              	 .align 2
 2362              	.L163:
 2363 00f4 00000000 	 .word event_masks
 2364 00f8 00000000 	 .word event_handler_list
 2365              	 .cfi_endproc
 2366              	.LFE96:
 2368              	 .section .text.XMC_SCU_SetBMI,"ax",%progbits
 2369              	 .align 2
 2370              	 .global XMC_SCU_SetBMI
 2371              	 .code 16
 2372              	 .thumb_func
 2374              	XMC_SCU_SetBMI:
 2375              	.LFB97:
 919:../Libraries/XMCLib/src/xmc1_scu.c **** 
 920:../Libraries/XMCLib/src/xmc1_scu.c **** /* Install BMI */
 921:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_SetBMI(uint32_t flags, uint8_t timeout)
 922:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2376              	 .loc 1 922 0
 2377              	 .cfi_startproc
 2378 0000 80B5     	 push {r7,lr}
 2379              	.LCFI93:
 2380              	 .cfi_def_cfa_offset 8
 2381              	 .cfi_offset 7,-8
 2382              	 .cfi_offset 14,-4
 2383 0002 82B0     	 sub sp,sp,#8
 2384              	.LCFI94:
 2385              	 .cfi_def_cfa_offset 16
 2386 0004 00AF     	 add r7,sp,#0
 2387              	.LCFI95:
 2388              	 .cfi_def_cfa_register 7
 2389 0006 7860     	 str r0,[r7,#4]
 2390 0008 0A1C     	 mov r2,r1
 2391 000a FB1C     	 add r3,r7,#3
 2392 000c 1A70     	 strb r2,[r3]
 923:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 924:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x0fffU) | ((timeout << 12) & 0xf000U));
 2393              	 .loc 1 924 0
 2394 000e 8423     	 mov r3,#132
 2395 0010 5B00     	 lsl r3,r3,#1
 2396 0012 1B68     	 ldr r3,[r3]
 2397 0014 7A68     	 ldr r2,[r7,#4]
 2398 0016 1205     	 lsl r2,r2,#20
 2399 0018 110D     	 lsr r1,r2,#20
 2400 001a FA1C     	 add r2,r7,#3
 2401 001c 1278     	 ldrb r2,[r2]
 2402 001e 1203     	 lsl r2,r2,#12
 2403 0020 1204     	 lsl r2,r2,#16
 2404 0022 120C     	 lsr r2,r2,#16
 2405 0024 0A43     	 orr r2,r1
 2406 0026 101C     	 mov r0,r2
 2407 0028 9847     	 blx r3
 2408 002a 031C     	 mov r3,r0
 925:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 926:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x07ffU) | ((timeout << 12) & 0xf000U) | 0x08c0U);
 927:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 928:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2409              	 .loc 1 928 0
 2410 002c 181C     	 mov r0,r3
 2411 002e BD46     	 mov sp,r7
 2412 0030 02B0     	 add sp,sp,#8
 2413              	 
 2414 0032 80BD     	 pop {r7,pc}
 2415              	 .cfi_endproc
 2416              	.LFE97:
 2418              	 .section .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration,"ax",%progbits
 2419              	 .align 2
 2420              	 .global XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration
 2421              	 .code 16
 2422              	 .thumb_func
 2424              	XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:
 2425              	.LFB98:
 929:../Libraries/XMCLib/src/xmc1_scu.c **** 
 930:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 931:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 932:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration(XMC_SCU_CLOCK_SYNC_CLKSRC_t sync_clk, uint32_t presc
 933:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2426              	 .loc 1 933 0
 2427              	 .cfi_startproc
 2428 0000 80B5     	 push {r7,lr}
 2429              	.LCFI96:
 2430              	 .cfi_def_cfa_offset 8
 2431              	 .cfi_offset 7,-8
 2432              	 .cfi_offset 14,-4
 2433 0002 84B0     	 sub sp,sp,#16
 2434              	.LCFI97:
 2435              	 .cfi_def_cfa_offset 24
 2436 0004 00AF     	 add r7,sp,#0
 2437              	.LCFI98:
 2438              	 .cfi_def_cfa_register 7
 2439 0006 B960     	 str r1,[r7,#8]
 2440 0008 7A60     	 str r2,[r7,#4]
 2441 000a 0E23     	 mov r3,#14
 2442 000c FB18     	 add r3,r7,r3
 2443 000e 021C     	 add r2,r0,#0
 2444 0010 1A80     	 strh r2,[r3]
 934:../Libraries/XMCLib/src/xmc1_scu.c **** 
 935:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 2445              	 .loc 1 935 0
 2446 0012 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 936:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC2 = (uint16_t)(prescaler << SCU_ANALOG_ANASYNC2_PRESCALER_Pos);
 2447              	 .loc 1 936 0
 2448 0016 0C4A     	 ldr r2,.L168
 2449 0018 BB68     	 ldr r3,[r7,#8]
 2450 001a 99B2     	 uxth r1,r3
 2451 001c 7C23     	 mov r3,#124
 2452 001e D152     	 strh r1,[r2,r3]
 937:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC1 = (uint16_t)(syn_preload |
 2453              	 .loc 1 937 0
 2454 0020 0949     	 ldr r1,.L168
 2455 0022 7B68     	 ldr r3,[r7,#4]
 2456 0024 9AB2     	 uxth r2,r3
 2457 0026 0E23     	 mov r3,#14
 2458 0028 FB18     	 add r3,r7,r3
 2459 002a 1B88     	 ldrh r3,[r3]
 2460 002c 1343     	 orr r3,r2
 2461 002e 9BB2     	 uxth r3,r3
 2462 0030 8022     	 mov r2,#128
 2463 0032 D201     	 lsl r2,r2,#7
 2464 0034 1343     	 orr r3,r2
 2465 0036 9AB2     	 uxth r2,r3
 2466 0038 7823     	 mov r3,#120
 2467 003a CA52     	 strh r2,[r1,r3]
 938:../Libraries/XMCLib/src/xmc1_scu.c ****                                     sync_clk |
 939:../Libraries/XMCLib/src/xmc1_scu.c ****                                     SCU_ANALOG_ANASYNC1_SYNC_DCO_EN_Msk);
 940:../Libraries/XMCLib/src/xmc1_scu.c **** 
 941:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 2468              	 .loc 1 941 0
 2469 003c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 942:../Libraries/XMCLib/src/xmc1_scu.c **** 
 943:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2470              	 .loc 1 943 0
 2471 0040 BD46     	 mov sp,r7
 2472 0042 04B0     	 add sp,sp,#16
 2473              	 
 2474 0044 80BD     	 pop {r7,pc}
 2475              	.L169:
 2476 0046 C046     	 .align 2
 2477              	.L168:
 2478 0048 00100140 	 .word 1073811456
 2479              	 .cfi_endproc
 2480              	.LFE98:
 2482              	 .section .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration,"ax",%progbits
 2483              	 .align 2
 2484              	 .global XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration
 2485              	 .code 16
 2486              	 .thumb_func
 2488              	XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:
 2489              	.LFB99:
 944:../Libraries/XMCLib/src/xmc1_scu.c **** 
 945:../Libraries/XMCLib/src/xmc1_scu.c **** /* This function stops the automatic DCO1 calibration based on the selected clock source */
 946:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration(void)
 947:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2490              	 .loc 1 947 0
 2491              	 .cfi_startproc
 2492 0000 80B5     	 push {r7,lr}
 2493              	.LCFI99:
 2494              	 .cfi_def_cfa_offset 8
 2495              	 .cfi_offset 7,-8
 2496              	 .cfi_offset 14,-4
 2497 0002 00AF     	 add r7,sp,#0
 2498              	.LCFI100:
 2499              	 .cfi_def_cfa_register 7
 948:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 2500              	 .loc 1 948 0
 2501 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 949:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC2 = 0U;
 2502              	 .loc 1 949 0
 2503 0008 054A     	 ldr r2,.L171
 2504 000a 7C23     	 mov r3,#124
 2505 000c 0021     	 mov r1,#0
 2506 000e D152     	 strh r1,[r2,r3]
 950:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC1 = 0U;
 2507              	 .loc 1 950 0
 2508 0010 034A     	 ldr r2,.L171
 2509 0012 7823     	 mov r3,#120
 2510 0014 0021     	 mov r1,#0
 2511 0016 D152     	 strh r1,[r2,r3]
 951:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 2512              	 .loc 1 951 0
 2513 0018 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 952:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2514              	 .loc 1 952 0
 2515 001c BD46     	 mov sp,r7
 2516              	 
 2517 001e 80BD     	 pop {r7,pc}
 2518              	.L172:
 2519              	 .align 2
 2520              	.L171:
 2521 0020 00100140 	 .word 1073811456
 2522              	 .cfi_endproc
 2523              	.LFE99:
 2525              	 .section .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady,"ax",%progbits
 2526              	 .align 2
 2527              	 .global XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady
 2528              	 .code 16
 2529              	 .thumb_func
 2531              	XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:
 2532              	.LFB100:
 953:../Libraries/XMCLib/src/xmc1_scu.c **** 
 954:../Libraries/XMCLib/src/xmc1_scu.c **** /* This functions checks the status of the synchronisation */
 955:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady(void)
 956:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2533              	 .loc 1 956 0
 2534              	 .cfi_startproc
 2535 0000 80B5     	 push {r7,lr}
 2536              	.LCFI101:
 2537              	 .cfi_def_cfa_offset 8
 2538              	 .cfi_offset 7,-8
 2539              	 .cfi_offset 14,-4
 2540 0002 00AF     	 add r7,sp,#0
 2541              	.LCFI102:
 2542              	 .cfi_def_cfa_register 7
 957:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
 2543              	 .loc 1 957 0
 2544 0004 064A     	 ldr r2,.L175
 2545 0006 7C23     	 mov r3,#124
 2546 0008 D35A     	 ldrh r3,[r2,r3]
 2547 000a 9BB2     	 uxth r3,r3
 2548 000c 1A1C     	 mov r2,r3
 2549 000e 8023     	 mov r3,#128
 2550 0010 5B01     	 lsl r3,r3,#5
 2551 0012 1340     	 and r3,r2
 2552 0014 5A1E     	 sub r2,r3,#1
 2553 0016 9341     	 sbc r3,r3,r2
 2554 0018 DBB2     	 uxtb r3,r3
 958:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2555              	 .loc 1 958 0
 2556 001a 181C     	 mov r0,r3
 2557 001c BD46     	 mov sp,r7
 2558              	 
 2559 001e 80BD     	 pop {r7,pc}
 2560              	.L176:
 2561              	 .align 2
 2562              	.L175:
 2563 0020 00100140 	 .word 1073811456
 2564              	 .cfi_endproc
 2565              	.LFE100:
 2567              	 .section .text.XMC_SCU_SetInterruptControl,"ax",%progbits
 2568              	 .align 2
 2569              	 .global XMC_SCU_SetInterruptControl
 2570              	 .code 16
 2571              	 .thumb_func
 2573              	XMC_SCU_SetInterruptControl:
 2574              	.LFB101:
 959:../Libraries/XMCLib/src/xmc1_scu.c **** 
 960:../Libraries/XMCLib/src/xmc1_scu.c **** /* This function selects service request source for a NVIC interrupt node */
 961:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
 962:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2575              	 .loc 1 962 0
 2576              	 .cfi_startproc
 2577 0000 80B5     	 push {r7,lr}
 2578              	.LCFI103:
 2579              	 .cfi_def_cfa_offset 8
 2580              	 .cfi_offset 7,-8
 2581              	 .cfi_offset 14,-4
 2582 0002 82B0     	 sub sp,sp,#8
 2583              	.LCFI104:
 2584              	 .cfi_def_cfa_offset 16
 2585 0004 00AF     	 add r7,sp,#0
 2586              	.LCFI105:
 2587              	 .cfi_def_cfa_register 7
 2588 0006 021C     	 mov r2,r0
 2589 0008 FB1D     	 add r3,r7,#7
 2590 000a 1A70     	 strb r2,[r3]
 2591 000c 3B1D     	 add r3,r7,#4
 2592 000e 0A1C     	 add r2,r1,#0
 2593 0010 1A80     	 strh r2,[r3]
 963:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
 964:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);
 965:../Libraries/XMCLib/src/xmc1_scu.c **** 
 966:../Libraries/XMCLib/src/xmc1_scu.c ****   source &= 0x3U;
 2594              	 .loc 1 966 0
 2595 0012 3B1D     	 add r3,r7,#4
 2596 0014 3A1D     	 add r2,r7,#4
 2597 0016 1288     	 ldrh r2,[r2]
 2598 0018 0321     	 mov r1,#3
 2599 001a 0A40     	 and r2,r1
 2600 001c 1A80     	 strh r2,[r3]
 967:../Libraries/XMCLib/src/xmc1_scu.c ****   if (irq_number < 16U)
 2601              	 .loc 1 967 0
 2602 001e FB1D     	 add r3,r7,#7
 2603 0020 1B78     	 ldrb r3,[r3]
 2604 0022 0F2B     	 cmp r3,#15
 2605 0024 13D8     	 bhi .L178
 968:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 969:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SC
 2606              	 .loc 1 969 0
 2607 0026 184B     	 ldr r3,.L180
 2608 0028 174A     	 ldr r2,.L180
 2609 002a D26E     	 ldr r2,[r2,#108]
 2610 002c F91D     	 add r1,r7,#7
 2611 002e 0978     	 ldrb r1,[r1]
 2612 0030 4900     	 lsl r1,r1,#1
 2613 0032 081C     	 mov r0,r1
 2614 0034 0321     	 mov r1,#3
 2615 0036 8140     	 lsl r1,r1,r0
 2616 0038 C943     	 mvn r1,r1
 2617 003a 0A40     	 and r2,r1
 970:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
 2618              	 .loc 1 970 0
 2619 003c 391D     	 add r1,r7,#4
 2620 003e 0988     	 ldrh r1,[r1]
 2621 0040 F81D     	 add r0,r7,#7
 2622 0042 0078     	 ldrb r0,[r0]
 2623 0044 4000     	 lsl r0,r0,#1
 2624 0046 8140     	 lsl r1,r1,r0
 969:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
 2625              	 .loc 1 969 0
 2626 0048 0A43     	 orr r2,r1
 2627 004a DA66     	 str r2,[r3,#108]
 2628 004c 18E0     	 b .L177
 2629              	.L178:
 971:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 972:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 973:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 974:../Libraries/XMCLib/src/xmc1_scu.c ****     irq_number &= 0x0fU;
 2630              	 .loc 1 974 0
 2631 004e FB1D     	 add r3,r7,#7
 2632 0050 FA1D     	 add r2,r7,#7
 2633 0052 1278     	 ldrb r2,[r2]
 2634 0054 0F21     	 mov r1,#15
 2635 0056 0A40     	 and r2,r1
 2636 0058 1A70     	 strb r2,[r3]
 975:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * S
 2637              	 .loc 1 975 0
 2638 005a 0B4B     	 ldr r3,.L180
 2639 005c 0A4A     	 ldr r2,.L180
 2640 005e 126F     	 ldr r2,[r2,#112]
 2641 0060 F91D     	 add r1,r7,#7
 2642 0062 0978     	 ldrb r1,[r1]
 2643 0064 4900     	 lsl r1,r1,#1
 2644 0066 081C     	 mov r0,r1
 2645 0068 0321     	 mov r1,#3
 2646 006a 8140     	 lsl r1,r1,r0
 2647 006c C943     	 mvn r1,r1
 2648 006e 0A40     	 and r2,r1
 976:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
 2649              	 .loc 1 976 0
 2650 0070 391D     	 add r1,r7,#4
 2651 0072 0988     	 ldrh r1,[r1]
 2652 0074 F81D     	 add r0,r7,#7
 2653 0076 0078     	 ldrb r0,[r0]
 2654 0078 4000     	 lsl r0,r0,#1
 2655 007a 8140     	 lsl r1,r1,r0
 975:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * S
 2656              	 .loc 1 975 0
 2657 007c 0A43     	 orr r2,r1
 2658 007e 1A67     	 str r2,[r3,#112]
 2659              	.L177:
 977:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 978:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2660              	 .loc 1 978 0
 2661 0080 BD46     	 mov sp,r7
 2662 0082 02B0     	 add sp,sp,#8
 2663              	 
 2664 0084 80BD     	 pop {r7,pc}
 2665              	.L181:
 2666 0086 C046     	 .align 2
 2667              	.L180:
 2668 0088 00000140 	 .word 1073807360
 2669              	 .cfi_endproc
 2670              	.LFE101:
 2672              	 .section .text.XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode,"ax",%progbits
 2673              	 .align 2
 2674              	 .global XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode
 2675              	 .code 16
 2676              	 .thumb_func
 2678              	XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode:
 2679              	.LFB102:
 979:../Libraries/XMCLib/src/xmc1_scu.c **** 
 980:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode(XMC_SCU_CLOCK_OSCHP_MODE_t mode)
 981:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2680              	 .loc 1 981 0
 2681              	 .cfi_startproc
 2682 0000 80B5     	 push {r7,lr}
 2683              	.LCFI106:
 2684              	 .cfi_def_cfa_offset 8
 2685              	 .cfi_offset 7,-8
 2686              	 .cfi_offset 14,-4
 2687 0002 82B0     	 sub sp,sp,#8
 2688              	.LCFI107:
 2689              	 .cfi_def_cfa_offset 16
 2690 0004 00AF     	 add r7,sp,#0
 2691              	.LCFI108:
 2692              	 .cfi_def_cfa_register 7
 2693 0006 021C     	 mov r2,r0
 2694 0008 FB1D     	 add r3,r7,#7
 2695 000a 1A70     	 strb r2,[r3]
 982:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 2696              	 .loc 1 982 0
 2697 000c FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 983:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCHPCTRL = (SCU_ANALOG->ANAOSCHPCTRL & (uint32_t)~(SCU_ANALOG_ANAOSCHPCTRL_MODE_M
 2698              	 .loc 1 983 0
 2699 0010 0949     	 ldr r1,.L183
 2700 0012 094A     	 ldr r2,.L183
 2701 0014 9023     	 mov r3,#144
 2702 0016 D35A     	 ldrh r3,[r2,r3]
 2703 0018 9BB2     	 uxth r3,r3
 2704 001a 3222     	 mov r2,#50
 2705 001c 9343     	 bic r3,r2
 2706 001e 9AB2     	 uxth r2,r3
 2707 0020 FB1D     	 add r3,r7,#7
 2708 0022 1B78     	 ldrb r3,[r3]
 2709 0024 9BB2     	 uxth r3,r3
 2710 0026 1343     	 orr r3,r2
 2711 0028 9AB2     	 uxth r2,r3
 2712 002a 9023     	 mov r3,#144
 2713 002c CA52     	 strh r2,[r1,r3]
 984:../Libraries/XMCLib/src/xmc1_scu.c ****                              | mode;
 985:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 2714              	 .loc 1 985 0
 2715 002e FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 986:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2716              	 .loc 1 986 0
 2717 0032 BD46     	 mov sp,r7
 2718 0034 02B0     	 add sp,sp,#8
 2719              	 
 2720 0036 80BD     	 pop {r7,pc}
 2721              	.L184:
 2722              	 .align 2
 2723              	.L183:
 2724 0038 00100140 	 .word 1073811456
 2725              	 .cfi_endproc
 2726              	.LFE102:
 2728              	 .section .text.XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode,"ax",%progbits
 2729              	 .align 2
 2730              	 .global XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode
 2731              	 .code 16
 2732              	 .thumb_func
 2734              	XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode:
 2735              	.LFB103:
 987:../Libraries/XMCLib/src/xmc1_scu.c **** 
 988:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode(XMC_SCU_CLOCK_OSCLP_MODE_t mode)
 989:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2736              	 .loc 1 989 0
 2737              	 .cfi_startproc
 2738 0000 80B5     	 push {r7,lr}
 2739              	.LCFI109:
 2740              	 .cfi_def_cfa_offset 8
 2741              	 .cfi_offset 7,-8
 2742              	 .cfi_offset 14,-4
 2743 0002 82B0     	 sub sp,sp,#8
 2744              	.LCFI110:
 2745              	 .cfi_def_cfa_offset 16
 2746 0004 00AF     	 add r7,sp,#0
 2747              	.LCFI111:
 2748              	 .cfi_def_cfa_register 7
 2749 0006 021C     	 mov r2,r0
 2750 0008 FB1D     	 add r3,r7,#7
 2751 000a 1A70     	 strb r2,[r3]
 990:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = mode;
 2752              	 .loc 1 990 0
 2753 000c 044A     	 ldr r2,.L186
 2754 000e FB1D     	 add r3,r7,#7
 2755 0010 1B78     	 ldrb r3,[r3]
 2756 0012 99B2     	 uxth r1,r3
 2757 0014 8C23     	 mov r3,#140
 2758 0016 D152     	 strh r1,[r2,r3]
 991:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2759              	 .loc 1 991 0
 2760 0018 BD46     	 mov sp,r7
 2761 001a 02B0     	 add sp,sp,#8
 2762              	 
 2763 001c 80BD     	 pop {r7,pc}
 2764              	.L187:
 2765 001e C046     	 .align 2
 2766              	.L186:
 2767 0020 00100140 	 .word 1073811456
 2768              	 .cfi_endproc
 2769              	.LFE103:
 2771              	 .text
 2772              	.Letext0:
 2773              	 .file 2 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2774              	 .file 3 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2775              	 .file 4 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 2776              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_scu.h"
 2777              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc1_scu.h"
 2778              	 .file 7 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include/cmsis_gcc.h"
 2779              	 .file 8 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc1_scu.c
    {standard input}:18     .bss.event_handler_list:00000000 $d
    {standard input}:21     .bss.event_handler_list:00000000 event_handler_list
    {standard input}:24     .data.event_masks:00000000 $d
    {standard input}:27     .data.event_masks:00000000 event_masks
    {standard input}:35     .text.XMC_SCU_CalcTSEVAR:00000000 $t
    {standard input}:39     .text.XMC_SCU_CalcTSEVAR:00000000 XMC_SCU_CalcTSEVAR
    {standard input}:106    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:111    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:156    .text.XMC_SCU_INTERRUPT_EnableEvent:00000030 $d
    {standard input}:161    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:166    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:213    .text.XMC_SCU_INTERRUPT_DisableEvent:00000034 $d
    {standard input}:218    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:223    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:268    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000030 $d
    {standard input}:273    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:278    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:332    .text.XMC_SCU_INTERUPT_GetEventStatus:00000040 $d
    {standard input}:337    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:342    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:387    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000030 $d
    {standard input}:392    .text.XMC_SCU_LockProtectedBits:00000000 $t
    {standard input}:397    .text.XMC_SCU_LockProtectedBits:00000000 XMC_SCU_LockProtectedBits
    {standard input}:420    .text.XMC_SCU_LockProtectedBits:00000010 $d
    {standard input}:425    .text.XMC_SCU_UnlockProtectedBits:00000000 $t
    {standard input}:430    .text.XMC_SCU_UnlockProtectedBits:00000000 XMC_SCU_UnlockProtectedBits
    {standard input}:462    .text.XMC_SCU_UnlockProtectedBits:0000001c $d
    {standard input}:467    .text.XMC_SCU_SupplyMonitorInit:00000000 $t
    {standard input}:472    .text.XMC_SCU_SupplyMonitorInit:00000000 XMC_SCU_SupplyMonitorInit
    {standard input}:573    .text.XMC_SCU_SupplyMonitorInit:00000084 $d
    {standard input}:579    .text.XMC_SCU_SetTempLowLimit:00000000 $t
    {standard input}:584    .text.XMC_SCU_SetTempLowLimit:00000000 XMC_SCU_SetTempLowLimit
    {standard input}:641    .text.XMC_SCU_SetTempLowLimit:00000044 $d
    {standard input}:646    .text.XMC_SCU_SetTempHighLimit:00000000 $t
    {standard input}:651    .text.XMC_SCU_SetTempHighLimit:00000000 XMC_SCU_SetTempHighLimit
    {standard input}:708    .text.XMC_SCU_SetTempHighLimit:00000044 $d
    {standard input}:713    .text.XMC_SCU_SetRawTempLimits:00000000 $t
    {standard input}:718    .text.XMC_SCU_SetRawTempLimits:00000000 XMC_SCU_SetRawTempLimits
    {standard input}:753    .text.XMC_SCU_SetRawTempLimits:00000020 $d
    {standard input}:758    .text.XMC_SCU_StartTempMeasurement:00000000 $t
    {standard input}:763    .text.XMC_SCU_StartTempMeasurement:00000000 XMC_SCU_StartTempMeasurement
    {standard input}:791    .text.XMC_SCU_StartTempMeasurement:00000018 $d
    {standard input}:796    .text.XMC_SCU_StopTempMeasurement:00000000 $t
    {standard input}:801    .text.XMC_SCU_StopTempMeasurement:00000000 XMC_SCU_StopTempMeasurement
    {standard input}:829    .text.XMC_SCU_StopTempMeasurement:00000018 $d
    {standard input}:834    .text.XMC_SCU_HighTemperature:00000000 $t
    {standard input}:839    .text.XMC_SCU_HighTemperature:00000000 XMC_SCU_HighTemperature
    {standard input}:868    .text.XMC_SCU_HighTemperature:0000001c $d
    {standard input}:873    .text.XMC_SCU_LowTemperature:00000000 $t
    {standard input}:878    .text.XMC_SCU_LowTemperature:00000000 XMC_SCU_LowTemperature
    {standard input}:903    .text.XMC_SCU_LowTemperature:00000014 $d
    {standard input}:908    .text.XMC_SCU_GetTemperature:00000000 $t
    {standard input}:913    .text.XMC_SCU_GetTemperature:00000000 XMC_SCU_GetTemperature
    {standard input}:945    .text.XMC_SCU_GetTemperature:0000001c $d
    {standard input}:950    .text.XMC_SCU_CalcTemperature:00000000 $t
    {standard input}:955    .text.XMC_SCU_CalcTemperature:00000000 XMC_SCU_CalcTemperature
    {standard input}:982    .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:987    .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:1625   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 XMC_SCU_CLOCK_ScaleMCLKFrequency
    {standard input}:1225   .text.XMC_SCU_CLOCK_Init:00000140 $d
    {standard input}:1239   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 $t
    {standard input}:1244   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 XMC_SCU_CLOCK_SetRtcClockSource
    {standard input}:1281   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000028 $d
    {standard input}:1287   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 $t
    {standard input}:1292   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 XMC_SCU_CLOCK_SetFastPeripheralClockSource
    {standard input}:1329   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000028 $d
    {standard input}:1335   .text.XMC_SCU_CLOCK_SetAdcClockSrc:00000000 $t
    {standard input}:1340   .text.XMC_SCU_CLOCK_SetAdcClockSrc:00000000 XMC_SCU_CLOCK_SetAdcClockSrc
    {standard input}:1380   .text.XMC_SCU_CLOCK_SetAdcClockSrc:0000002c $d
    {standard input}:1386   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 $t
    {standard input}:1391   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 XMC_SCU_CLOCK_GatePeripheralClock
    {standard input}:1426   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000024 $d
    {standard input}:1431   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 $t
    {standard input}:1436   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 XMC_SCU_CLOCK_UngatePeripheralClock
    {standard input}:1481   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000030 $d
    {standard input}:1486   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 $t
    {standard input}:1491   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 XMC_SCU_CLOCK_IsPeripheralClockGated
    {standard input}:1524   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000020 $d
    {standard input}:1530   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 $t
    {standard input}:1535   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 XMC_SCU_CLOCK_SetMCLKFrequency
    {standard input}:1613   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000070 $d
    {standard input}:1620   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 $t
    {standard input}:1838   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000000 XMC_SCU_CLOCK_lFrequencyDownScaling
    {standard input}:1762   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000000 XMC_SCU_CLOCK_lFrequencyUpScaling
    {standard input}:1750   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:000000ac $d
    {standard input}:1758   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000000 $t
    {standard input}:1827   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000048 $d
    {standard input}:1834   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000000 $t
    {standard input}:1911   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000050 $d
    {standard input}:1918   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1923   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1946   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000010 $d
    {standard input}:1951   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 $t
    {standard input}:1956   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
    {standard input}:1987   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000020 $d
    {standard input}:1994   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 $t
    {standard input}:1999   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
    {standard input}:2074   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000068 $d
    {standard input}:2083   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:2088   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:2194   .text.XMC_SCU_INTERRUPT_SetEventHandler:0000008c $d
    {standard input}:2199   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:2204   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:2363   .text.XMC_SCU_IRQHandler:000000f4 $d
    {standard input}:2369   .text.XMC_SCU_SetBMI:00000000 $t
    {standard input}:2374   .text.XMC_SCU_SetBMI:00000000 XMC_SCU_SetBMI
    {standard input}:2419   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:00000000 $t
    {standard input}:2424   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:00000000 XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration
    {standard input}:2478   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:00000048 $d
    {standard input}:2483   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:00000000 $t
    {standard input}:2488   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:00000000 XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration
    {standard input}:2521   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:00000020 $d
    {standard input}:2526   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:00000000 $t
    {standard input}:2531   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:00000000 XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady
    {standard input}:2563   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:00000020 $d
    {standard input}:2568   .text.XMC_SCU_SetInterruptControl:00000000 $t
    {standard input}:2573   .text.XMC_SCU_SetInterruptControl:00000000 XMC_SCU_SetInterruptControl
    {standard input}:2668   .text.XMC_SCU_SetInterruptControl:00000088 $d
    {standard input}:2673   .text.XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode:00000000 $t
    {standard input}:2678   .text.XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode:00000000 XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode
    {standard input}:2724   .text.XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode:00000038 $d
    {standard input}:2729   .text.XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode:00000000 $t
    {standard input}:2734   .text.XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode:00000000 XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode
    {standard input}:2767   .text.XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode:00000020 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
OSCHP_GetFrequency
__aeabi_uidiv
SystemCoreClockUpdate
SystemCoreClock
__aeabi_idiv
