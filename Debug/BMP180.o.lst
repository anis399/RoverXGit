   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "BMP180.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_USIC_CH_TXFIFO_Flush,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_USIC_CH_TXFIFO_Flush:
  23              	.LFB118:
  24              	 .file 1 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2020-12-05
   4:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  12:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  14:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  21:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * a source language processor.
  27:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  28:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  41:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  42:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  43:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  44:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  45:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  46:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  47:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  48:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  49:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  50:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  51:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  52:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  54:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  55:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  56:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  57:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  58:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  59:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  60:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  62:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  63:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  64:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  65:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  67:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  68:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  69:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  70:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  71:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  72:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  73:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  74:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  75:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  76:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  77:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  78:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  79:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  80:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  81:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  82:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  83:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  84:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  86:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  87:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  88:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  89:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  90:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  91:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  92:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  93:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  94:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-07-01:
  95:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Changed XMC_USIC_CH_SetBaudrateEx() input parameter types
  96:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
  97:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-09-30:
  98:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_InvalidateReadData(), XMC_USIC_CH_EnableWordLengthControl() and XMC_USIC
  99:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-12-05:
 101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_PutDataEx()
 102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-04-30:
 104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_SetTriggerLimit() and XMC_USIC_CH_RXFIFO_SetTriggerLimit()
 105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-12-05:
 107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S to XMC_USIC_CH_BRG_CLOCK_SOURCE_t
 108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CTQSEL_t
 109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateDivider()
 110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
 112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
 116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
 117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
 119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc1_usic_map.h"
 186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc4_usic_map.h"
 190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos,  /**< Baudrate generator 
 436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S    = 0x3UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel input selection for CTQ
 441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CTQSEL
 443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PDIV = 0x0UL, /**< fCTQIN = fPDIV */
 445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PPP  = 0x1UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fPPP */
 446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_SCLK = 0x2UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fSCLK */
 447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_MCLK = 0x3UL << USIC_CH_BRG_CTQSEL_Pos  /**< fCTQIN = fMCLK */
 448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CTQSEL_t;
 449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
 494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma push
 508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma anon_unions
 509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning 586
 511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file,
 520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   union
 539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   {
 540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   };
 546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   union
 550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   {
 551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   };
 557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma pop
 584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning restore
 586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clksel Baudrate generator clock source.
 733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pppen Enable 2:1 Divider for fPPP.
 734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Divider Factor to generate fPDIV = fPPP / (pDIV + 1)
 735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  ctqsel Input selection for CTQ.
 736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pctq Pre-Divider for Time Quanta Counter. fCTQIN / (PCQT + 1)
 737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  dctq Denominator for Time Quanta Counter. fTQ / (DCTQ + 1)
 738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate generator of the USIC channel.
 742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFractionalDivider() \n\n\n
 745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetBaudrateDivider(XMC_USIC_CH_t *const channel, 
 747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CLOCK_SOURCE_t clksel,
 748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     bool pppen,
 749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pdiv,
 750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CTQSEL_t ctqsel,
 751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pctq,
 752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t dctq);
 753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t pdiv,
 820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t oversampling,
 821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc.
 838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                     ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_INSW_Msk;
 865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &= (uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
 960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
 989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
 992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
 994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
 996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
 997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
1005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
1006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
1007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
1010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
1012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
1014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
1024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
1025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
1028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
1030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DSEN_Msk;
1032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
1039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
1043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
1048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_freq)
1050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
1052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
1053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
1072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t transmit_control_information)
1133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value
1183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly.
1225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
1273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte.
1335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_START_TRANSMISION_MODE_t start_transmision_mode)
1366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output_mode)
1387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the
1399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of word length. \n\n
1422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of word length is enabled, word length is configured based on the
1423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], word length is con
1424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableWordLengthControl(XMC_USIC_CH_t *const channel)
1431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_WLEMD_Msk;
1437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of word length. \n\n
1464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of word length is disabled, word length has to configured explicitly.
1465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Word length remains fixed until it is changed again.
1466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetWordLength() \n\n\n
1469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableWordLengthControl(XMC_USIC_CH_t *const channel)
1471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_WLEMD_Msk;
1473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be
1520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled.
1521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buffer_status)
1545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_InvalidateReadData(XMC_USIC_CH_t *const channel)
1562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = USIC_CH_FMR_CRDV0_Msk | USIC_CH_FMR_CRDV1_Msk;
1564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the
1577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive_level)
1584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() }
1627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the
1631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
1639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
1646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
1650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
1655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
1656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR = (channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) | ((limit << USIC_CH_TBCTR
1658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
1672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
1695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent().
1696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
1733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param loc Input location. \n
1761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit data can be loaded to TBUF by software by writing to the transmit buffer input
1765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * locations TBUFx (x = 00-31), consisting of 32 consecutive addresses. The data written
1766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * to one of these input locations is stored in the transmit buffer TBUF. Additionally, the
1767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * address of the written location is evaluated and can be used for additional control
1768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * purposes. This 5-bit wide information (named Transmit Control Information TCI) can be
1769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * used for different purposes in different protocols.
1770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableWordLengthControl() \n
1773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataEx(XMC_USIC_CH_t *const channel, const uint16_t data
1776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[loc] = data;
1778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_PutDataEx() \n
1796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
  25              	 .loc 1 1842 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
1843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
  39              	 .loc 1 1843 0
  40 0008 7A68     	 ldr r2,[r7,#4]
  41 000a 8C23     	 mov r3,#140
  42 000c 5B00     	 lsl r3,r3,#1
  43 000e 8021     	 mov r1,#128
  44 0010 0902     	 lsl r1,r1,#8
  45 0012 D150     	 str r1,[r2,r3]
1844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
  46              	 .loc 1 1844 0
  47 0014 BD46     	 mov sp,r7
  48 0016 02B0     	 add sp,sp,#8
  49              	 
  50 0018 80BD     	 pop {r7,pc}
  51              	 .cfi_endproc
  52              	.LFE118:
  54 001a C046     	 .section .text.XMC_USIC_CH_RXFIFO_Flush,"ax",%progbits
  55              	 .align 2
  56              	 .code 16
  57              	 .thumb_func
  59              	XMC_USIC_CH_RXFIFO_Flush:
  60              	.LFB128:
1845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO,
1875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n
1889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                         USIC_CH_TRBSR_TBERI_Msk));
1925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value.
1938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of
1940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t event)
1947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
1948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
1950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** */
1973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
1978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
1979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_RXFIFO_SetTriggerLimit() }
1988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the
1992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
1994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
1997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
2000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
2005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
2006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
2010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() \n\n\n
2013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
2015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
2016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
2017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR = (channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) | ((limit << USIC_CH_RBCTR
2018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
2019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
2024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
2028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
2029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
2030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
2031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
2033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
2034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
2037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
2039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
2040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
2041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
2042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
2048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
2049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
2050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
2054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
2055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent().
2056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
2057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
2058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
2063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
2064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
2065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
2066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
2071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
2072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
2073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
2074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
2075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
2079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
2080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
2081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
2082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
2083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
2084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
2085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
2087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
2092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
2093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
2094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
2099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
2100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
2103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
2104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
2105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
2106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
2107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
2110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
2112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
2113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
2114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
2115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** 
2116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** /**
2117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
2123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
2124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  *
2125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
2127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****  */
2128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
2129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** {
  61              	 .loc 1 2129 0
  62              	 .cfi_startproc
  63 0000 80B5     	 push {r7,lr}
  64              	.LCFI3:
  65              	 .cfi_def_cfa_offset 8
  66              	 .cfi_offset 7,-8
  67              	 .cfi_offset 14,-4
  68 0002 82B0     	 sub sp,sp,#8
  69              	.LCFI4:
  70              	 .cfi_def_cfa_offset 16
  71 0004 00AF     	 add r7,sp,#0
  72              	.LCFI5:
  73              	 .cfi_def_cfa_register 7
  74 0006 7860     	 str r0,[r7,#4]
2130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
  75              	 .loc 1 2130 0
  76 0008 7A68     	 ldr r2,[r7,#4]
  77 000a 8C23     	 mov r3,#140
  78 000c 5B00     	 lsl r3,r3,#1
  79 000e 8021     	 mov r1,#128
  80 0010 C901     	 lsl r1,r1,#7
  81 0012 D150     	 str r1,[r2,r3]
2131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc\xmc_usic.h **** }
  82              	 .loc 1 2131 0
  83 0014 BD46     	 mov sp,r7
  84 0016 02B0     	 add sp,sp,#8
  85              	 
  86 0018 80BD     	 pop {r7,pc}
  87              	 .cfi_endproc
  88              	.LFE128:
  90 001a C046     	 .section .text.I2C_MASTER_IsTxBusy,"ax",%progbits
  91              	 .align 2
  92              	 .code 16
  93              	 .thumb_func
  95              	I2C_MASTER_IsTxBusy:
  96              	.LFB238:
  97              	 .file 2 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER/i2c_master.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @file i2c_master.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @date 2021-01-08
   4:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
   5:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * NOTE:
   6:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * regenerated.
   8:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
   9:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
  10:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @cond
  11:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  12:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER v4.1.34 Configures USIC channel to transmit & receive data using I2C protocol.
  13:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  14:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  15:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * All rights reserved.
  16:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  17:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * following conditions are met:
  19:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  20:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  21:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * disclaimer.
  22:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  23:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  24:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * following disclaimer in the documentation and/or other materials provided with the distribution.
  25:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  26:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  27:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * products derived from this software without specific prior written permission.
  28:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  29:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  37:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * with Infineon Technologies AG (dave@infineon.com).
  39:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  40:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  41:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Change History
  42:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * --------------
  43:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  44:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-02-16:
  45:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Initial version<br>
  46:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  47:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-06-10:
  48:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  49:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  50:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-08-31:
  51:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - DMA support APIs added
  52:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-10-20:
  53:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Code snippets updated
  54:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2016-08-18:
  55:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Documentation of slave address formatting improved.
  56:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2017-11-17:
  57:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added tx_irqn and rx_irqn to I2C_MASTER_CONFIG_t
  58:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2017-12-20:
  59:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added I2C_MASTER_FlushTxFifo(), I2C_MASTER_FlushRxFifo(), I2C_MASTER_DisableOutputs(), I2C
  60:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  61:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2019-16-09:
  62:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added I2C_MASTER_START_TRANSMIT_RETRIES to control the wait to see the START symbol in the
  63:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added I2C_MASTER_STATUS_BUS_ERROR as possible return value from I2C_MASTER_StartTransmitIR
  64:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  65:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2021-01-08:
  66:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Modified check for minimum XMCLib version
  67:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  68:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcond
  69:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  70:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
  71:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  72:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #ifndef I2C_MASTER_H
  73:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_H
  74:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  75:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  76:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  77:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
  78:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * HEADER FILES
  79:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  80:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "xmc_gpio.h"
  81:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "xmc_i2c.h"
  82:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "i2c_master_conf.h"
  83:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  84:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if(UC_FAMILY == XMC4)
  85:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
  86:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "GLOBAL_DMA/global_dma.h"
  87:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
  88:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
  89:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  90:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "DAVE_Common.h"
  91:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  92:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  93:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef void(*i2c_master_fptr_cbhandler)(void);
  94:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  95:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
  96:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * MACROS
  97:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  98:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_XMC_LIB_MAJOR_VERSION 2
  99:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_XMC_LIB_MINOR_VERSION 0
 100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_XMC_LIB_PATCH_VERSION 0
 101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if !((XMC_LIB_MAJOR_VERSION > I2C_MASTER_XMC_LIB_MAJOR_VERSION) ||\
 103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****       ((XMC_LIB_MAJOR_VERSION == I2C_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > I2C_
 104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****       ((XMC_LIB_MAJOR_VERSION == I2C_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == I2C
 105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #error "I2C_MASTER requires XMC Peripheral Library v2.0.0 or higher"
 106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #ifndef I2C_MASTER_START_TRANSMIT_RETRIES
 109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_START_TRANSMIT_RETRIES (0x7fff)
 110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
 113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * ENUMS
 114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
 115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_enumerations
 117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Initialization status.
 121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_STATUS
 123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_SUCCESS = 0U,           /*!< I2C_MASTER SUCCESS */
 125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_FAILURE = 1U,           /*!< I2C_MASTER FAILURE */
 126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_BUSY = 2U,              /*!< I2C_MASTER BUSY */
 127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_UNSUPPORTED_MODE = 3U,  /*!< I2C_MASTER UNSUPPORTED MODE */
 128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_BUS_ERROR = 4U          /*!< I2C_MASTER BUS_ERROR */
 129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_STATUS_t;
 130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Direction
 133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_DIRECTION
 135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_DIRECTION_TRANSMIT = 0U,   /*!< Direction indicates transmit */
 137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_DIRECTION_RECEIVE = 1U     /*!< Direction indicates receive */
 138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_DIRECTION_t;
 139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_TRANSFER_MODE
 144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP con
 148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_TRANSFER_MODE_t;
 149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @}
 151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
 153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** * DATA STRUCTURES
 154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** ***************************************************************************************************
 155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_datastructures
 158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Structure for DMA configuration.
 162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
 164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_DMA_CONFIG
 165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   GLOBAL_DMA_t * global_dma;                   /**< Global DMA handle */
 168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_DMA_CONFIG_t;
 170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Constant structure for holding the configuration parameters of I2C channel.
 173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_CONFIG
 175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    const XMC_I2C_CH_CONFIG_t *brg_config;             /*!< Basic I2C configuration from the GUI wit
 177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel confi
 179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                                    data transmission.*/
 180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel confi
 183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                                    data reception.*/
 184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_config;         /*!< Function pointer to configure the MUX va
 186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_enable_io;      /*!< Function pointer to enable SDA/SCL outpu
 187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_disable_io;     /*!< Function pointer to disable SDA/SCL outp
 188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler tx_cbhandler;            /*!< Function pointer to hold the callback fu
 190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when the transmission is complete
 191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler rx_cbhandler;            /*!< Function pointer to hold the callback fu
 192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when the reception is complete*/
 193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler nack_cbhandler;          /*!< Function pointer to hold the callback fu
 194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when nack is received*/
 195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler arbitration_cbhandler;   /*!< Function pointer to hold the callback fu
 196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when arbitration lost is occured*
 197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler error_cbhandler;         /*!< Function pointer to hold the callback fu
 198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when error is detected.*/
 199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t transmit_mode;          /**< Mode used for transmitting data. Data ca
 200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t receive_mode;           /**< Mode used for receiving data. Data can b
 202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t txFIFO_size;               /*!< TxFIFO size configuration*/
 205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t rxFIFO_size;               /*!< RxFIFO size configuration*/
 206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    IRQn_Type tx_irqn;
 208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    IRQn_Type rx_irqn; 
 209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_CONFIG_t;
 210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Structure to hold the dynamic variables for the I2C_MASTER communication.
 213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_RUNTIME
 215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t * tx_data;                     /*!< Pointer to the transmit data buffer*/
 217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t * rx_data;                     /*!< Pointer to the receive data buffer*/
 218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t tx_data_count;                /*!< Number of bytes of data to be transmitted*/
 219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t tx_data_index;       /*!< Index to the byte to be transmitted next in the tx_da
 220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_data_count;                /*!< Number of bytes of data to be received*/
 221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_dma_data_count;            /*!< Number of bytes of data to be received-DMA mode*/
 223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_dma_data_index;            /*!< Index of bytes of data to be received-DMA mode*/
 224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t rx_data_index;       /*!< Indicates the number of bytes currently available in 
 226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t direction;           /*!< Indicates TRANSMIT/RECEIVE */
 227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t send_stop;                    /*!< Indicates to stop the I2C */
 228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t send_nack;                    /*!< Indicates to send nack */
 229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t tx_ack_sr;                         /*!< Service request number assigned to transmit inter
 230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t rx_sr;                         /*!< Service request number assigned to receive interrupts
 231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool tx_busy;                 /*!< Status flag to indicate busy when a transmission is a
 232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool rx_busy;                 /*!< Status flag to indicate busy when a reception is assi
 233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool bus_acquired;            /*!< flag to indicate whether bus is acquired or not */
 234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_RUNTIME_t;
 235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER
 241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_t *channel;                    /*!< USIC channel*/
 243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   const I2C_MASTER_CONFIG_t * const config;  /*!< I2C configuration structure pointer*/
 244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_RUNTIME_t * const runtime;      /*!< Pointer to the structure holding all variables,
 245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****    	                                               that can change at runtime*/
 246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_t;
 247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @}
 250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #ifdef __cplusplus
 253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** extern "C" {
 254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_apidoc
 259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
 263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * API PROTOTYPES
 264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
 265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Get I2C_MASTER APP version.
 267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return \a DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description: </b><br>
 270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The function can be used to check application software compatibility with a
 271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * specific version of the APP.
 272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_APP_VERSION_t version;
 279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_Init();
 280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    version = I2C_MASTER_GetAppVersion();
 281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(version.major != 4U)
 282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void);
 291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief This function initializes the I2C_MASTER APP based on user provided configuration.
 293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
 295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description: </b><br>
 297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C configurations like channel selection,baud rate setting,
 298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * FIFO configuration etc are done in this API.
 299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Protocol specific interrupts can also be enabled using the I2C_MASTER_Init
 300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * function.
 301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * #include "DAVE.h"
 306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * int main(void)
 307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * {
 308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   // Initializing the modules and the multiplexer
 309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_Init(); // I2C_MASTER_Init will be called from DAVE_Init()
 310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1)
 311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {}
 312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle);
 319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief  Receives the data from I2C slave device.
 323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start Flag to indicate that the start condition need to be send.
 325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address I2C slave device address.
 326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data buffer to receive data.
 327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  count The number of bytes to be received from slave.
 328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_nack The flag to indicate that the NACK condition need to be send for the last byte
 330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_Receive API can be used in Interrupt and Direct modes.\n
 333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).\n
 337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_READ 10
 344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
 345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
 352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t data = 0x55;
 355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_data;
 356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_STATUS_t init_status;  
 360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   init_status = DAVE_Init();
 361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
 364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
 365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Read data from IO EXPANDER
 372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1)
 379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   { }
 380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  return 0;
 381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                        uint8_t * data, const uint32_t count, bool send_stop, bool s
 388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Transmits data to I2C slave device.
 391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start The flag to indicate that the start condition need to be send.
 394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address I2C slave device address.
 395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data buffer containing the data to transmit.
 396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size The number of bytes to be send to slave.
 397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_Transmit API can be used in Interrupt and Direct modes.\n
 402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write). \n
 406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 
 408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
 418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
 429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
 430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
 434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                uint8_t *data, const uint32_t size, bool send_stop);
 447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Get the I2C flag status.
 450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *			 	      bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be used to selec
 454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    multiple flags.
 455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t Flag status.
 457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
 475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype);
 487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Clear the I2C flag status.
 490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    The bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be 
 494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    multiple flags.
 495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None <BR>
 497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
 514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype);
 526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Aborts the ongoing data transmission.
 529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If there is a transmission in progress, it will be stopped. Once the transmission is stopped, 
 534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * user can start a new transmission without delay.
 535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buf[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
 555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
 559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle);
 569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** * @brief Stops the active data reception request.
 572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a reception is in progress, it will be stopped. When a reception request
 577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * is active, user will not be able to place a new receive request till the active
 578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * reception is complete. This API can stop the progressing reception to make
 579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * a new receive request.
 580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t rx_buf[25];
 591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t tx_buf[2];
 592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_STATUS_t init_status;
 593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   init_status = DAVE_Init();
 594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //send the address from which data to be transfered
 597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     tx_buf[0] = 0;
 598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_SendStop(&I2C_MASTER_0);
 603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1U)
 609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 1U;
 613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle);
 619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1U) || defined(DOXYGEN)
 622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for transmitting data over I2C channel using DMA.
 624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  block_size size of the block
 627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  addr    address\n
 628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * request is registered.
 636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The data transmission is accomplished using DMA. User can configure a callback function in the A
 639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. The function uses AP
 640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * structure to store the status of transmission.
 641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This function only registers a data transmission request, if there is no active transmission in 
 642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Actual data transmission happens through DMA channel.
 643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * A maximum of 4095 bytes can be transmitted in one API call. This limit is because of the DMA sin
 644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Callback function is executed when all the data bytes are transmitted.
 645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the completion of data transmission.
 648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If data more than the block size of 4095 have to be transmitted, user will have to transmit them
 649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * calls to this API.
 650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_StartTransmitDMA API can be used in DMA mode.
 652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit should be configured as "DMA" mode in advanced settings tab. \n
 653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
 678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // trigger the DMA
 685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitDMA(&I2C_MASTER_0, sizeof(Send_Data), Send_Data);
 686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
 701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1U) || defined(DOXYGEN)
 704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel using DMA.
 706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param block_size  size of the block
 710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  addr  address \n
 711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured callback function will be executed.
 720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When all the requested number of data bytes are received, the configured callback function will 
 722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, the user has to poll for the value of the variable, \a
 723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * handle->runtime->rx_busy to be false. The value is updated to \a false when all the requested nu
 724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * are received.
 725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * A maximum of 4095 bytes can be received in one API call. This limit is because of the DMA single
 726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveDMA API can be used only in DMA mode
 728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive should be configured as "DMA" mode in advanced settings tab \n
 729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Pre condition:
 740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Transmit mode and receive mode should be configured to "DMA" in advanced settings tab
 741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t ReadData[256];
 743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
 757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
 764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  
 770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveDMA(&I2C_MASTER_0, 200, ReadData);
 771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  @endcode
 783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t block_siz
 786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1U)
 789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for transmitting data over I2C_MASTER channel.
 791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start flag to indicate the start condition
 794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address slave address
 795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data    pointer to buffer
 796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size    number of bytes
 797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop flag to indicate the stop condition\n
 798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * request is registered.
 806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The data transmission is accomplished using transmit interrupt. User can configure a callback fu
 809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. If transmit FIFO is 
 810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the trigger limit is set to 1. So the transmit interrupt will be generated when all the data in 
 811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * from FIFO. The function uses APP handle's runtime structure to store the data pointer, count, da
 812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * status of transmission. This function only registers a data transmission request if there is no 
 813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * in progress.
 814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Actual data transmission happens in the transmit interrupt service routine. A trigger is generat
 815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interrupt to start loading the data. If transmit FIFO is configured, the data is filled into the
 816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this point of
 817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * some more data to be transmitted, it is loaded to the FIFO again. When FIFO is not enabled, data
 818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * byte at a time. On transmission of each byte an interrupt is generated and the next byte is tran
 819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interrupt service routine. Callback function is executed when all the data bytes are transmitted
 820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of t
 821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * structure( \a handle->runtime->tx_busy ) to check for the completion of data transmission.<br>
 822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartTransmitIRQ API can be used only in Interrupt mode.
 823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit should be configured as "Interrupt" mode in advanced settings tab.\n
 824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).
 828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
 844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,64,true);
 848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1U)
 864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel.
 866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start flag to indicate the start condition
 870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address slave address
 871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data    pointer to buffer
 872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  count    number of bytes
 873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop flag to indicate the stop condition
 874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_nack flag to indicate the nack condition\n
 875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured callback function will be executed. Based on the UI configuration, either standard re
 885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * receive FIFO is used for data reception. An interrupt is configured for reading received data fr
 886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * function only registers a request to receive a number of data bytes from a USIC channel. If FIFO
 887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * reception, the FIFO limit is dynamically configured to optimally utilize the CPU load.  When all
 888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * of data bytes are received, the configured callback function will be executed. If a callback fun
 889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured, the user has to poll for the value of the variable, \a handle->runtime->rx_busy to b
 890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * is updated to \a false when all the requested number of data bytes are received.<br>
 891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveIRQ API can be used only in Interrupt mode.
 892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive should be configured as "Interrupt" mode in advanced settings tab.\n
 893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).
 897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_buffer[64];
 903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
 913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,rx_buffer,64,true, true);
 917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                uint8_t * data, const uint32_t count, bool send_stop
 929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Gets the transmit FIFO event flags.
 934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
 938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                      their bit positions.\n
 939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
 940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer interrupt flag
 943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * buffer error flag before providing the value.
 944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * User has to mask the bits of interest before checking the status.
 945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: Enable transmit fifo in Advanced settings tab. <br>
 946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
 961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
 962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
 965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
 966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
 967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
 968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
 969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetTXFIFOStatus(const I2C_MASTER_t* const handle)
 983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetTXFIFOStatus: invalid handle", (handle != NULL));
 985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
 986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
 987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Configures trigger limit for the transmit FIFO.
 990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size   FIFO size
 993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
 994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               \bRange: 0 to transmit FIFO size.\n
 995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
 996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
 997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
 999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * below the trigger limit.
1004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
1012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit, draining level as 10
1020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // Execution will happen two times in the interrupt handler as the limit is set to 10
1022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, Send_Data, 16, true);
1023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetTXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                              const uint32_t limit)
1039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetTXFIFOTriggerLimit: invalid handle", (handle != NULL));
1041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Configures trigger limit for the receive FIFO.
1045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size   FIFO size
1048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               \bRange: 0 to receive FIFO size.\n
1050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * above the trigger limit.
1059:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1060:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1061:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1062:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1063:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1064:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1065:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1066:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1067:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Rx_Data[256];
1068:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1069:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1070:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1071:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1072:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1073:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1074:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1075:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure receive fifo trigger limit to filling level as 10
1076:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1077:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // Execution will happen two times in the receive interrupt handler as the limit is set to 
1078:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, Rx_Data, 16, true, true);
1079:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
1080:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1081:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1082:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1083:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1084:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1085:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1086:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1087:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1088:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1089:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1090:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1091:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1092:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1093:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1094:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                              const uint32_t limit)
1095:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1096:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
1097:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1098:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1099:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1100:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1101:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Checks if the transmit FIFO is full.
1102:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1103:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1104:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1105:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool Status of transmit FIFO filling level.
1106:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1107:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1108:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1109:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while filling
1110:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * data to the transmit FIFO.
1111:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: Transmit should be "Direct" mode in advanced settings tab.<br>
1112:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1113:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1114:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1115:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1116:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1117:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1118:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1119:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1120:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t send_data[] = "Infineon Technologies";
1121:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1122:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1123:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1124:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();           // Initialization of DAVE APPs
1125:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1126:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1127:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1128:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1129:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1130:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1131:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1132:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1133:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1134:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &send_data[0], 10, false);
1135:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Wait when Tx FIFO is full
1136:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  while(!I2C_MASTER_IsTXFIFOFull(&I2C_MASTER_0))
1137:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1138:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_Transmit(&I2C_MASTER_0, false, SLAVE_ADDRESS, &send_data[0], 10, false);
1139:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1140:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  while(1U)
1141:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1142:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1143:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
1144:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1145:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1146:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
1147:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1148:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
1149:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1150:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1151:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1152:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1153:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Checks if the receive FIFO is empty.
1154:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1155:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1156:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1157:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool Status of receive FIFO filling level.
1158:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1159:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                       \afalse- if receive FIFO still has data.<br>
1160:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1161:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while reading data from the receive FIFO
1162:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1163:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1164:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1165:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1166:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1167:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1168:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1169:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1170:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1171:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1172:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1173:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1174:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1175:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1176:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1177:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1178:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1179:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1180:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1181:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1182:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1183:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1184:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1185:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1186:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1187:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1188:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1189:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1190:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1191:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1192:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1193:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1194:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1195:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1196:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1197:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1198:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1199:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1200:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1201:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1202:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1203:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1204:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1205:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1206:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1U)
1207:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
1208:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1209:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1210:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1211:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1212:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
1213:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1214:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
1215:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1216:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1217:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1218:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1219:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Gets the status of event flags related to receive FIFO.
1220:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1221:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1222:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1223:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1224:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer event and 
1225:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * error event in their bit positions in TRBSR register.\n
1226:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status c
1227:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * comparison using \a OR operation.
1228:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1229:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1230:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * It provides the status of standard receive buffer event, alternative receive buffer event and re
1231:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * event.
1232:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function masks the TRBSR register with the bitmask of SRBI, ARBI and RBERI flags. User has to ma
1233:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interest before checking the status.
1234:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1235:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1236:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1237:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1238:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1239:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   #define SLAVE_ADDRESS 0xA0
1240:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t mem_address[2];
1241:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   int main(void)
1242:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
1243:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     DAVE_STATUS_t init_status;
1244:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1245:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     init_status = DAVE_Init();
1246:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     if(init_status == DAVE_STATUS_SUCCESS)
1247:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1248:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       mem_address[0] = 0x00;//memory which need to be read from slave
1249:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       //Configure receive fifo trigger limit as 10
1250:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1251:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1252:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1253:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1254:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1255:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0
1256:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1257:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1258:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1259:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     else
1260:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1261:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1262:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1263:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1264:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1265:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1266:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      return 1U;
1267:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1268:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1269:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1270:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1271:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetRXFIFOStatus(const I2C_MASTER_t* const handle)
1272:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1273:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetRXFIFOStatus: invalid handle", (handle != NULL));
1274:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1275:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1276:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1277:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1278:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to
1279:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * transmit FIFO.
1280:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1281:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1282:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1283:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register to be cleared.\n
1284:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be combined 
1285:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \a OR operation.
1286:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1287:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return    None
1288:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1289:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1290:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register. But the function does 
1291:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * value with the bit positions restricted to transmit FIFO status bits. User should ensure that th
1292:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * appropriately masked.
1293:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1294:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1295:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1296:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1297:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1298:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1299:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1300:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1301:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1302:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1303:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1304:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1305:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1306:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1307:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00; //memory which need to be read from slave
1308:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
1309:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1310:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1311:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1312:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
1313:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1314:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
1315:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1316:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
1317:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1318:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1319:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1320:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1321:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1322:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1323:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1324:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1325:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1326:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1327:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1328:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1329:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1330:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearTXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1331:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1332:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearTXFIFOStatus: invalid handle", (handle != NULL));
1333:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1334:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1335:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1336:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1337:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to receive FIFO. It should be used 
1338:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * of standard receive buffer interrupt, alternative receive buffer interrupt and receive buffer er
1339:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1340:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1341:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1342:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register to be cleared.\n
1343:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1344:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             Multiple events can be input by using \a OR operation.
1345:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1346:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return    None
1347:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1348:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1349:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1350:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The function does not mask the input value to clear only receive buffer
1351:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * events. So user should appropriately mask the input value before calling
1352:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the function.
1353:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1354:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1355:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1356:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1357:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1358:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1359:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1360:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1361:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1362:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1363:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1364:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1365:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1366:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1367:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
1368:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure receive fifo trigger limit as 10
1369:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1370:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1371:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1372:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1373:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1374:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0)
1375:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1376:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1377:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1378:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1379:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1380:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1381:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1382:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1383:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1384:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1385:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1386:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1387:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1388:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1389:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1390:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearRXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1391:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1392:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearRXFIFOStatus: invalid handle", (handle != NULL));
1393:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1394:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1395:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1396:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1397:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Provides the received data from receive buffer.
1398:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1399:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1400:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint8_t: Data read from RBUF.\n
1401:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1402:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1403:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This can be used in receive mode "Direct" to read the received data.
1404:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1405:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Otherwise it reads the data from OUTR register.
1406:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1407:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1408:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1409:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1410:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1411:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1412:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1413:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1414:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[10];
1415:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0,loc_index = 0;
1416:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1417:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1418:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1419:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1420:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1421:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1422:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1423:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1424:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1425:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1426:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1427:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1428:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1429:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1430:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1431:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1432:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1433:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1434:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1435:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1436:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        // wait for ACK
1437:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1438:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1439:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1440:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1441:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1442:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         index++;
1443:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1444:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1445:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1446:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1447:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1448:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1449:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1450:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1451:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1452:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1453:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1454:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1455:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1456:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1457:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1458:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1459:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1460:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1461:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1462:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
1463:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
1464:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1465:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
1466:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
1467:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1468:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1469:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1470:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Transmits single byte using I2C protocol.
1471:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1472:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1473:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  byte data byte to transmit. \n
1474:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1475:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 
1476:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1477:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1478:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1479:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1480:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1481:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1482:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1483:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1484:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1485:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1486:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1487:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1488:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1489:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1490:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1491:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1492:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1493:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1494:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1495:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1496:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1497:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1498:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1499:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1500:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1501:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // wait for ACK
1502:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1503:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1504:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1505:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1506:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1507:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // wait for ACK
1508:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1509:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1510:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1511:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1512:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1513:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1514:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1515:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1516:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
1517:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1518:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
1519:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterTransmit(handle->channel, byte);
1520:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1521:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1522:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Enables the selected protocol events for interrupt generation.
1523:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1524:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1525:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  event  Protocol events to be enabled for interrupt generation. \n
1526:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1527:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         combined using the bitwise OR operation.\n
1528:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1529:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1530:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1531:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1532:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1533:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1534:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * may not yield expected result.
1535:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1536:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1537:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1538:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1539:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1540:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1541:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1542:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1543:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1544:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1545:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1546:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1547:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1548:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1549:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1550:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1551:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1552:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1553:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1554:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1555:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1556:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_EnableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1557:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1558:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1559:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1560:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1561:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1562:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1563:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
1564:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1565:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL));
1566:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_EnableEvent(handle->channel, event);
1567:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1568:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1569:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Disables selected events from generating interrupt.
1570:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1571:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1572:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  event  Events to be disabled from generating interrupt. \n
1573:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1574:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         combined using the bitwise OR operation.\n
1575:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1576:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1577:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1578:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1579:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1580:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1581:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1582:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1583:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1584:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1585:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1586:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1587:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1588:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1589:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1590:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1591:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1592:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1593:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1594:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1595:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1596:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1597:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1598:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1599:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1600:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_DisableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1601:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1602:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1603:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1604:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1605:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1606:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1607:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1608:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
1609:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1610:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
1611:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_DisableEvent(handle->channel, event);
1612:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1613:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1614:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1615:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Receives the ACK from slave
1616:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1617:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1618:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1619:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1620:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * After transmitting a byte, master receives the ack from slave.<br>
1621:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1622:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1623:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1624:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1625:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1626:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1627:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1628:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1629:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1630:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1631:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1632:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1633:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1634:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1635:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1636:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1637:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1638:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1639:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1640:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1641:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1642:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1643:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1644:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1645:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1646:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1647:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1648:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1649:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1650:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1651:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1652:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1653:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1654:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1655:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1656:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1657:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1658:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1659:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1660:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1661:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1662:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1663:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1664:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1665:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1666:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1667:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1668:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1669:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1670:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1671:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1672:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1673:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1674:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1675:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1676:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1677:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1678:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
1679:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1680:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
1681:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterReceiveAck(handle->channel);
1682:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1683:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1684:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Receives the NACK from slave
1685:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1686:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1687:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1688:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1689:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * After transmitting a byte, master receives the nack from slave.<br>
1690:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1691:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1692:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1693:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1694:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1695:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1696:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1697:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1698:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1699:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1700:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint32_t index = 0, loc_index = 0;
1701:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1702:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1703:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1704:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1705:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1706:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1707:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1708:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1709:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1710:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1711:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1712:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1713:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1714:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1715:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1716:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1717:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1718:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1719:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1720:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1721:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1722:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1723:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1724:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1725:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1726:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1727:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1728:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1729:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // only for the last byte
1730:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ReceiveNACK(&I2C_MASTER_0);
1731:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1732:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1733:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1734:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1735:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1736:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1737:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1738:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1739:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1740:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1741:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1742:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1743:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1744:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1745:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1746:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1747:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1748:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
1749:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1750:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
1751:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterReceiveNack(handle->channel);
1752:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1753:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1754:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends stop command to slave
1755:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1756:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1757:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1758:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1759:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * At the end of transmission, sends a stop command to slave <br>
1760:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.<br>
1761:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1762:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1763:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1764:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1765:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1766:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1767:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1768:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1769:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1770:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1771:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1772:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1773:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1774:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1775:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1776:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1777:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1778:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1779:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //send the address to which data to be transfered
1780:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1781:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1782:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1783:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1784:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1785:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1786:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
1787:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1788:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1789:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1790:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1791:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1792:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1793:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1794:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1795:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1796:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1797:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1798:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1799:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
1800:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1801:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
1802:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
1803:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterStop(handle->channel);
1804:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1805:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1806:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends start command to slave
1807:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1808:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param address slave address
1809:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param cmd     command
1810:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1811:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1812:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1813:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Before start of transmission, sends a start command to slave. \n
1814:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1815:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1816:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1817:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1818:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1819:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1820:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1821:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1822:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
1823:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1824:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1825:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1826:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1827:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1828:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1829:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1830:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1831:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1832:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1833:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1834:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1835:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1836:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1837:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //send the address to which data to be transfered
1838:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1839:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1840:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1841:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1842:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1843:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1844:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1845:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1846:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       XMC_DEBUG("main: Application initialization failed");
1847:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while(1U)
1848:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       {
1849:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       }
1850:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1851:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1852:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1853:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1854:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1855:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
1856:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                  const XMC_I2C_CH_CMD_t cmd)
1857:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1858:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
1859:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
1860:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
1861:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1862:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1863:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends repeated start command to slave
1864:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1865:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param address slave address
1866:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param cmd     command
1867:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1868:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1869:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1870:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Before start of transmission, sends a repeatedstart command to slave if bus acquired is true.\n
1871:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1872:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1873:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1874:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1875:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1876:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1877:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1878:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1879:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1880:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1881:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1882:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1883:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1884:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rx_buf[256];
1885:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1886:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1887:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1888:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1889:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterStart(I2C_MASTER_0.channel, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1890:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1891:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1892:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1893:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1894:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1895:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //send the address to which data to be transfered
1896:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1897:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1898:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1899:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1900:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1901:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1902:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1903:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1904:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1905:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1906:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1907:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1908:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 	   memset(rx_buf,0,16);
1909:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, false, SLAVE_ADDRESS, rx_buf, 16, true, true);
1910:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1911:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1912:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1913:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1914:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1915:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1916:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1917:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1918:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 1U;
1919:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1920:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1921:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1922:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t addre
1923:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                          const XMC_I2C_CH_CMD_t cmd)
1924:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1925:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
1926:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEI
1927:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
1928:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1929:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1930:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1931:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends the txbusy flag
1932:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1933:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool : status of txbusy flag
1934:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  
1935:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1936:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1937:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
1938:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1939:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
1940:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
1941:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
1942:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
1943:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
1944:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
1945:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1946:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
1947:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1948:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1949:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1950:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1951:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1952:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1953:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1954:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1955:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
1956:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
1957:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1958:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1959:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1960:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
1961:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1962:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1963:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
1964:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
1965:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1966:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
1967:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1968:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1969:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
1970:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1971:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1972:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
1973:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
  98              	 .loc 2 1973 0
  99              	 .cfi_startproc
 100 0000 80B5     	 push {r7,lr}
 101              	.LCFI6:
 102              	 .cfi_def_cfa_offset 8
 103              	 .cfi_offset 7,-8
 104              	 .cfi_offset 14,-4
 105 0002 82B0     	 sub sp,sp,#8
 106              	.LCFI7:
 107              	 .cfi_def_cfa_offset 16
 108 0004 00AF     	 add r7,sp,#0
 109              	.LCFI8:
 110              	 .cfi_def_cfa_register 7
 111 0006 7860     	 str r0,[r7,#4]
1974:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
1975:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   return handle->runtime->tx_busy;
 112              	 .loc 2 1975 0
 113 0008 7B68     	 ldr r3,[r7,#4]
 114 000a 9B68     	 ldr r3,[r3,#8]
 115 000c 2622     	 mov r2,#38
 116 000e 9B5C     	 ldrb r3,[r3,r2]
 117 0010 DBB2     	 uxtb r3,r3
1976:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
 118              	 .loc 2 1976 0
 119 0012 181C     	 mov r0,r3
 120 0014 BD46     	 mov sp,r7
 121 0016 02B0     	 add sp,sp,#8
 122              	 
 123 0018 80BD     	 pop {r7,pc}
 124              	 .cfi_endproc
 125              	.LFE238:
 127 001a C046     	 .section .text.I2C_MASTER_FlushTxFifo,"ax",%progbits
 128              	 .align 2
 129              	 .code 16
 130              	 .thumb_func
 132              	I2C_MASTER_FlushTxFifo:
 133              	.LFB240:
1977:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1978:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1979:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends the rxbusy flag
1980:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1981:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool : status of rxbusy flag
1982:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1983:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1984:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
1985:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1986:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_READ 10
1987:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
1988:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1989:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
1990:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
1991:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
1992:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
1993:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
1994:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
1995:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1996:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1997:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t data = 0x55;
1998:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_data;
1999:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2000:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
2001:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
2002:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
2003:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
2004:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
2005:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
2006:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
2007:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
2008:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
2009:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
2010:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2011:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
2012:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
2013:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
2014:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Read data from IO EXPANDER
2015:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
2016:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
2017:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2018:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
2019:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
2020:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
2021:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(1)
2022:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     { }
2023:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
2024:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
2025:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
2026:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2027:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
2028:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2029:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
2030:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
2031:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
2032:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL));
2033:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   return handle->runtime->rx_busy;
2034:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
2035:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
2036:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
2037:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Flush TX FIFO
2038:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
2039:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
2040:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2041:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
2042:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_FlushTxFifo(I2C_MASTER_t * const handle)
2043:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 134              	 .loc 2 2043 0
 135              	 .cfi_startproc
 136 0000 80B5     	 push {r7,lr}
 137              	.LCFI9:
 138              	 .cfi_def_cfa_offset 8
 139              	 .cfi_offset 7,-8
 140              	 .cfi_offset 14,-4
 141 0002 82B0     	 sub sp,sp,#8
 142              	.LCFI10:
 143              	 .cfi_def_cfa_offset 16
 144 0004 00AF     	 add r7,sp,#0
 145              	.LCFI11:
 146              	 .cfi_def_cfa_register 7
 147 0006 7860     	 str r0,[r7,#4]
2044:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_FlushTxFifo: invalid handle", (handle != NULL));
2045:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 148              	 .loc 2 2045 0
 149 0008 7B68     	 ldr r3,[r7,#4]
 150 000a 1B68     	 ldr r3,[r3]
 151 000c 181C     	 mov r0,r3
 152 000e FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_Flush
2046:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
 153              	 .loc 2 2046 0
 154 0012 BD46     	 mov sp,r7
 155 0014 02B0     	 add sp,sp,#8
 156              	 
 157 0016 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE240:
 161              	 .section .text.I2C_MASTER_FlushRxFifo,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	I2C_MASTER_FlushRxFifo:
 167              	.LFB241:
2047:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** 
2048:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
2049:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Flush RX FIFO
2050:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
2051:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
2052:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2053:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
2054:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_FlushRxFifo(I2C_MASTER_t * const handle)
2055:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 168              	 .loc 2 2055 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI12:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI13:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI14:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
2056:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_FlushRxFifo: invalid handle", (handle != NULL));
2057:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 182              	 .loc 2 2057 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 1B68     	 ldr r3,[r3]
 185 000c 181C     	 mov r0,r3
 186 000e FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_Flush
2058:C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER\i2c_master.h **** }
 187              	 .loc 2 2058 0
 188 0012 BD46     	 mov sp,r7
 189 0014 02B0     	 add sp,sp,#8
 190              	 
 191 0016 80BD     	 pop {r7,pc}
 192              	 .cfi_endproc
 193              	.LFE241:
 195              	 .comm BMP180_DataSent,32,4
 196              	 .comm BMP180_DataRead,32,4
 197              	 .comm BMP180_I2C_Status,1,1
 198              	 .section .rodata
 199              	 .align 2
 200              	.LC0:
 201 0000 0A0A5374 	 .ascii "\012\012Starting I2C Scanner.... \000"
 201      61727469 
 201      6E672049 
 201      32432053 
 201      63616E6E 
 202              	 .align 2
 203              	.LC4:
 204 001c 446F6E65 	 .ascii "Done \000"
 204      2000
 205              	 .section .text.I2C_Scanner,"ax",%progbits
 206              	 .align 2
 207              	 .global I2C_Scanner
 208              	 .code 16
 209              	 .thumb_func
 211              	I2C_Scanner:
 212              	.LFB244:
 213              	 .file 3 "../BMP180.c"
   1:../BMP180.c   **** /*
   2:../BMP180.c   ****  * BMP180.c
   3:../BMP180.c   ****  *
   4:../BMP180.c   ****  *  Created on: Mar 18, 2022
   5:../BMP180.c   ****  *      Author: Anis Shakkour
   6:../BMP180.c   ****  *      Email: anis.shakkour399@gmail.com
   7:../BMP180.c   ****  */
   8:../BMP180.c   **** 
   9:../BMP180.c   **** 
  10:../BMP180.c   **** #ifndef BMP180_H
  11:../BMP180.c   **** #define BMP180_H
  12:../BMP180.c   **** 
  13:../BMP180.c   **** #include "BMP180.h"
  14:../BMP180.c   **** 
  15:../BMP180.c   **** 
  16:../BMP180.c   **** void I2C_Scanner(){
 214              	 .loc 3 16 0
 215              	 .cfi_startproc
 216 0000 90B5     	 push {r4,r7,lr}
 217              	.LCFI15:
 218              	 .cfi_def_cfa_offset 12
 219              	 .cfi_offset 4,-12
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 85B0     	 sub sp,sp,#20
 223              	.LCFI16:
 224              	 .cfi_def_cfa_offset 32
 225 0004 02AF     	 add r7,sp,#8
 226              	.LCFI17:
 227              	 .cfi_def_cfa 7,24
  17:../BMP180.c   **** 	XMC_DEBUG("\n\nStarting I2C Scanner.... \n");
 228              	 .loc 3 17 0
 229 0006 1B4B     	 ldr r3,.L12
 230 0008 181C     	 mov r0,r3
 231 000a FFF7FEFF 	 bl puts
 232              	.LBB2:
  18:../BMP180.c   **** 
  19:../BMP180.c   **** 	for(uint8_t SlaveAddress = 0 ; SlaveAddress<255;SlaveAddress++){
 233              	 .loc 3 19 0
 234 000e FB1D     	 add r3,r7,#7
 235 0010 0022     	 mov r2,#0
 236 0012 1A70     	 strb r2,[r3]
 237 0014 23E0     	 b .L8
 238              	.L11:
  20:../BMP180.c   **** 	I2C_MASTER_FlushRxFifo(&I2C_MASTER_0);
 239              	 .loc 3 20 0
 240 0016 184B     	 ldr r3,.L12+4
 241 0018 181C     	 mov r0,r3
 242 001a FFF7FEFF 	 bl I2C_MASTER_FlushRxFifo
  21:../BMP180.c   **** 	I2C_MASTER_FlushTxFifo(&I2C_MASTER_0);
 243              	 .loc 3 21 0
 244 001e 164B     	 ldr r3,.L12+4
 245 0020 181C     	 mov r0,r3
 246 0022 FFF7FEFF 	 bl I2C_MASTER_FlushTxFifo
  22:../BMP180.c   **** 	I2C_MASTER_Transmit(&I2C_MASTER_0,true,SlaveAddress,BMP180_DataRead,1,true);
 247              	 .loc 3 22 0
 248 0026 FB1D     	 add r3,r7,#7
 249 0028 1A78     	 ldrb r2,[r3]
 250 002a 1349     	 ldr r1,.L12+4
 251 002c 134C     	 ldr r4,.L12+8
 252 002e 0123     	 mov r3,#1
 253 0030 0093     	 str r3,[sp]
 254 0032 0123     	 mov r3,#1
 255 0034 0193     	 str r3,[sp,#4]
 256 0036 081C     	 mov r0,r1
 257 0038 0121     	 mov r1,#1
 258 003a 231C     	 mov r3,r4
 259 003c FFF7FEFF 	 bl I2C_MASTER_Transmit
 260              	.LBB3:
  23:../BMP180.c   **** 	for(int i = 0 ; i < 0xFFF;i++); //delay
 261              	 .loc 3 23 0
 262 0040 0023     	 mov r3,#0
 263 0042 3B60     	 str r3,[r7]
 264 0044 02E0     	 b .L9
 265              	.L10:
 266              	 .loc 3 23 0 is_stmt 0 discriminator 3
 267 0046 3B68     	 ldr r3,[r7]
 268 0048 0133     	 add r3,r3,#1
 269 004a 3B60     	 str r3,[r7]
 270              	.L9:
 271              	 .loc 3 23 0 discriminator 1
 272 004c 3B68     	 ldr r3,[r7]
 273 004e 0C4A     	 ldr r2,.L12+12
 274 0050 9342     	 cmp r3,r2
 275 0052 F8DD     	 ble .L10
 276              	.LBE3:
  19:../BMP180.c   **** 	I2C_MASTER_FlushRxFifo(&I2C_MASTER_0);
 277              	 .loc 3 19 0 is_stmt 1 discriminator 2
 278 0054 FB1D     	 add r3,r7,#7
 279 0056 1A78     	 ldrb r2,[r3]
 280 0058 FB1D     	 add r3,r7,#7
 281 005a 0132     	 add r2,r2,#1
 282 005c 1A70     	 strb r2,[r3]
 283              	.L8:
  19:../BMP180.c   **** 	I2C_MASTER_FlushRxFifo(&I2C_MASTER_0);
 284              	 .loc 3 19 0 is_stmt 0 discriminator 1
 285 005e FB1D     	 add r3,r7,#7
 286 0060 1B78     	 ldrb r3,[r3]
 287 0062 FF2B     	 cmp r3,#255
 288 0064 D7D1     	 bne .L11
 289              	.LBE2:
  24:../BMP180.c   **** 	}
  25:../BMP180.c   **** 
  26:../BMP180.c   **** 	XMC_DEBUG("Done \n");
 290              	 .loc 3 26 0 is_stmt 1
 291 0066 074B     	 ldr r3,.L12+16
 292 0068 181C     	 mov r0,r3
 293 006a FFF7FEFF 	 bl puts
  27:../BMP180.c   **** }
 294              	 .loc 3 27 0
 295 006e BD46     	 mov sp,r7
 296 0070 03B0     	 add sp,sp,#12
 297              	 
 298 0072 90BD     	 pop {r4,r7,pc}
 299              	.L13:
 300              	 .align 2
 301              	.L12:
 302 0074 00000000 	 .word .LC0
 303 0078 00000000 	 .word I2C_MASTER_0
 304 007c 00000000 	 .word BMP180_DataRead
 305 0080 FE0F0000 	 .word 4094
 306 0084 1C000000 	 .word .LC4
 307              	 .cfi_endproc
 308              	.LFE244:
 310              	 .section .text.BMP180_init,"ax",%progbits
 311              	 .align 2
 312              	 .global BMP180_init
 313              	 .code 16
 314              	 .thumb_func
 316              	BMP180_init:
 317              	.LFB245:
  28:../BMP180.c   **** uint8_t BMP180_init(){
 318              	 .loc 3 28 0
 319              	 .cfi_startproc
 320 0000 90B5     	 push {r4,r7,lr}
 321              	.LCFI18:
 322              	 .cfi_def_cfa_offset 12
 323              	 .cfi_offset 4,-12
 324              	 .cfi_offset 7,-8
 325              	 .cfi_offset 14,-4
 326 0002 83B0     	 sub sp,sp,#12
 327              	.LCFI19:
 328              	 .cfi_def_cfa_offset 24
 329 0004 02AF     	 add r7,sp,#8
 330              	.LCFI20:
 331              	 .cfi_def_cfa 7,16
  29:../BMP180.c   **** 	BMP180_DataRead[0] = BMP180_Reset;
 332              	 .loc 3 29 0
 333 0006 1C4B     	 ldr r3,.L18
 334 0008 E022     	 mov r2,#224
 335 000a 1A70     	 strb r2,[r3]
  30:../BMP180.c   **** 	BMP180_DataRead[1] = 0xB6;  //reset registers and goes to sleep mode
 336              	 .loc 3 30 0
 337 000c 1A4B     	 ldr r3,.L18
 338 000e B622     	 mov r2,#182
 339 0010 5A70     	 strb r2,[r3,#1]
  31:../BMP180.c   **** 	BMP180_DataRead[2] = BMP180_CTRL_hum;
 340              	 .loc 3 31 0
 341 0012 194B     	 ldr r3,.L18
 342 0014 F222     	 mov r2,#242
 343 0016 9A70     	 strb r2,[r3,#2]
  32:../BMP180.c   **** 	BMP180_DataRead[3] = 1; // oversampling -> 1
 344              	 .loc 3 32 0
 345 0018 174B     	 ldr r3,.L18
 346 001a 0122     	 mov r2,#1
 347 001c DA70     	 strb r2,[r3,#3]
  33:../BMP180.c   **** 	BMP180_DataRead[4] = BMP180_CTRL_meas;
 348              	 .loc 3 33 0
 349 001e 164B     	 ldr r3,.L18
 350 0020 F422     	 mov r2,#244
 351 0022 1A71     	 strb r2,[r3,#4]
  34:../BMP180.c   **** 	BMP180_DataRead[5] = 0b00100101; //temp oversampling->1,pressure oversampling->1, forced mode
 352              	 .loc 3 34 0
 353 0024 144B     	 ldr r3,.L18
 354 0026 2522     	 mov r2,#37
 355 0028 5A71     	 strb r2,[r3,#5]
  35:../BMP180.c   **** 	BMP180_DataRead[6] = BMP180_CONFIG;
 356              	 .loc 3 35 0
 357 002a 134B     	 ldr r3,.L18
 358 002c F522     	 mov r2,#245
 359 002e 9A71     	 strb r2,[r3,#6]
  36:../BMP180.c   **** 	BMP180_DataRead[7] = 0b00000000; //time standby is not important as the IIR filter is off, SPI 3 w
 360              	 .loc 3 36 0
 361 0030 114B     	 ldr r3,.L18
 362 0032 0022     	 mov r2,#0
 363 0034 DA71     	 strb r2,[r3,#7]
  37:../BMP180.c   **** 	BMP180_I2C_Status = 0;
 364              	 .loc 3 37 0
 365 0036 114B     	 ldr r3,.L18+4
 366 0038 0022     	 mov r2,#0
 367 003a 1A70     	 strb r2,[r3]
  38:../BMP180.c   **** 	I2C_MASTER_Transmit(&I2C_MASTER_0,true,_DS(BME180_Address,1),BMP180_DataRead,8,true);
 368              	 .loc 3 38 0
 369 003c 104A     	 ldr r2,.L18+8
 370 003e 0E4C     	 ldr r4,.L18
 371 0040 0823     	 mov r3,#8
 372 0042 0093     	 str r3,[sp]
 373 0044 0123     	 mov r3,#1
 374 0046 0193     	 str r3,[sp,#4]
 375 0048 101C     	 mov r0,r2
 376 004a 0121     	 mov r1,#1
 377 004c EC22     	 mov r2,#236
 378 004e 231C     	 mov r3,r4
 379 0050 FFF7FEFF 	 bl I2C_MASTER_Transmit
  39:../BMP180.c   **** 	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 380              	 .loc 3 39 0
 381 0054 C046     	 mov r8,r8
 382              	.L15:
 383              	 .loc 3 39 0 is_stmt 0 discriminator 1
 384 0056 0A4B     	 ldr r3,.L18+8
 385 0058 181C     	 mov r0,r3
 386 005a FFF7FEFF 	 bl I2C_MASTER_IsTxBusy
 387 005e 031E     	 sub r3,r0,#0
 388 0060 F9D1     	 bne .L15
  40:../BMP180.c   **** 	if(BMP180_I2C_Status == 2) return 0;
 389              	 .loc 3 40 0 is_stmt 1
 390 0062 064B     	 ldr r3,.L18+4
 391 0064 1B78     	 ldrb r3,[r3]
 392 0066 022B     	 cmp r3,#2
 393 0068 01D1     	 bne .L16
 394              	 .loc 3 40 0 is_stmt 0 discriminator 1
 395 006a 0023     	 mov r3,#0
 396 006c 00E0     	 b .L17
 397              	.L16:
  41:../BMP180.c   **** 
  42:../BMP180.c   **** 
  43:../BMP180.c   **** 	return 1;
 398              	 .loc 3 43 0 is_stmt 1
 399 006e 0123     	 mov r3,#1
 400              	.L17:
  44:../BMP180.c   **** }
 401              	 .loc 3 44 0
 402 0070 181C     	 mov r0,r3
 403 0072 BD46     	 mov sp,r7
 404 0074 01B0     	 add sp,sp,#4
 405              	 
 406 0076 90BD     	 pop {r4,r7,pc}
 407              	.L19:
 408              	 .align 2
 409              	.L18:
 410 0078 00000000 	 .word BMP180_DataRead
 411 007c 00000000 	 .word BMP180_I2C_Status
 412 0080 00000000 	 .word I2C_MASTER_0
 413              	 .cfi_endproc
 414              	.LFE245:
 416              	 .section .rodata
 417 0022 0000     	 .align 2
 418              	.LC9:
 419 0024 0A0A436F 	 .ascii "\012\012Communication Test .... \000"
 419      6D6D756E 
 419      69636174 
 419      696F6E20 
 419      54657374 
 420 003f 00       	 .align 2
 421              	.LC14:
 422 0040 424D4532 	 .ascii "BME280 connected\000"
 422      38302063 
 422      6F6E6E65 
 422      63746564 
 422      00
 423 0051 000000   	 .section .text.Text_Communication,"ax",%progbits
 424              	 .align 2
 425              	 .global Text_Communication
 426              	 .code 16
 427              	 .thumb_func
 429              	Text_Communication:
 430              	.LFB246:
  45:../BMP180.c   **** uint8_t Text_Communication(uint8_t SlaveAddress){
 431              	 .loc 3 45 0
 432              	 .cfi_startproc
 433 0000 90B5     	 push {r4,r7,lr}
 434              	.LCFI21:
 435              	 .cfi_def_cfa_offset 12
 436              	 .cfi_offset 4,-12
 437              	 .cfi_offset 7,-8
 438              	 .cfi_offset 14,-4
 439 0002 87B0     	 sub sp,sp,#28
 440              	.LCFI22:
 441              	 .cfi_def_cfa_offset 40
 442 0004 04AF     	 add r7,sp,#16
 443              	.LCFI23:
 444              	 .cfi_def_cfa 7,24
 445 0006 021C     	 mov r2,r0
 446 0008 FB1D     	 add r3,r7,#7
 447 000a 1A70     	 strb r2,[r3]
  46:../BMP180.c   **** 	XMC_DEBUG("\n\nCommunication Test .... \n");
 448              	 .loc 3 46 0
 449 000c 294B     	 ldr r3,.L26
 450 000e 181C     	 mov r0,r3
 451 0010 FFF7FEFF 	 bl puts
  47:../BMP180.c   **** 	I2C_MASTER_FlushRxFifo(&I2C_MASTER_0);
 452              	 .loc 3 47 0
 453 0014 284B     	 ldr r3,.L26+4
 454 0016 181C     	 mov r0,r3
 455 0018 FFF7FEFF 	 bl I2C_MASTER_FlushRxFifo
  48:../BMP180.c   **** 	I2C_MASTER_FlushTxFifo(&I2C_MASTER_0);
 456              	 .loc 3 48 0
 457 001c 264B     	 ldr r3,.L26+4
 458 001e 181C     	 mov r0,r3
 459 0020 FFF7FEFF 	 bl I2C_MASTER_FlushTxFifo
  49:../BMP180.c   **** 	SlaveAddress = _DS(SlaveAddress,1);
 460              	 .loc 3 49 0
 461 0024 FA1D     	 add r2,r7,#7
 462 0026 FB1D     	 add r3,r7,#7
 463 0028 1B78     	 ldrb r3,[r3]
 464 002a DB18     	 add r3,r3,r3
 465 002c 1370     	 strb r3,[r2]
  50:../BMP180.c   **** 	BMP180_DataRead[0] = BMP180_ID_Reg;
 466              	 .loc 3 50 0
 467 002e 234B     	 ldr r3,.L26+8
 468 0030 D022     	 mov r2,#208
 469 0032 1A70     	 strb r2,[r3]
  51:../BMP180.c   **** 	I2C_MASTER_Transmit(&I2C_MASTER_0,true,SlaveAddress,BMP180_DataRead,1,false);
 470              	 .loc 3 51 0
 471 0034 FB1D     	 add r3,r7,#7
 472 0036 1A78     	 ldrb r2,[r3]
 473 0038 1F49     	 ldr r1,.L26+4
 474 003a 204C     	 ldr r4,.L26+8
 475 003c 0123     	 mov r3,#1
 476 003e 0093     	 str r3,[sp]
 477 0040 0023     	 mov r3,#0
 478 0042 0193     	 str r3,[sp,#4]
 479 0044 081C     	 mov r0,r1
 480 0046 0121     	 mov r1,#1
 481 0048 231C     	 mov r3,r4
 482 004a FFF7FEFF 	 bl I2C_MASTER_Transmit
  52:../BMP180.c   **** 	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0)); //
 483              	 .loc 3 52 0
 484 004e C046     	 mov r8,r8
 485              	.L21:
 486              	 .loc 3 52 0 is_stmt 0 discriminator 1
 487 0050 194B     	 ldr r3,.L26+4
 488 0052 181C     	 mov r0,r3
 489 0054 FFF7FEFF 	 bl I2C_MASTER_IsTxBusy
 490 0058 031E     	 sub r3,r0,#0
 491 005a F9D1     	 bne .L21
  53:../BMP180.c   **** 	if(BMP180_I2C_Status == 2) return 0;
 492              	 .loc 3 53 0 is_stmt 1
 493 005c 184B     	 ldr r3,.L26+12
 494 005e 1B78     	 ldrb r3,[r3]
 495 0060 022B     	 cmp r3,#2
 496 0062 01D1     	 bne .L22
 497              	 .loc 3 53 0 is_stmt 0 discriminator 1
 498 0064 0023     	 mov r3,#0
 499 0066 20E0     	 b .L23
 500              	.L22:
  54:../BMP180.c   **** 	I2C_MASTER_Receive(&I2C_MASTER_0,true,SlaveAddress,BMP180_DataRead,1,true,true);
 501              	 .loc 3 54 0 is_stmt 1
 502 0068 FB1D     	 add r3,r7,#7
 503 006a 1A78     	 ldrb r2,[r3]
 504 006c 1249     	 ldr r1,.L26+4
 505 006e 134C     	 ldr r4,.L26+8
 506 0070 0123     	 mov r3,#1
 507 0072 0093     	 str r3,[sp]
 508 0074 0123     	 mov r3,#1
 509 0076 0193     	 str r3,[sp,#4]
 510 0078 0123     	 mov r3,#1
 511 007a 0293     	 str r3,[sp,#8]
 512 007c 081C     	 mov r0,r1
 513 007e 0121     	 mov r1,#1
 514 0080 231C     	 mov r3,r4
 515 0082 FFF7FEFF 	 bl I2C_MASTER_Receive
  55:../BMP180.c   **** 	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 516              	 .loc 3 55 0
 517 0086 C046     	 mov r8,r8
 518              	.L24:
 519              	 .loc 3 55 0 is_stmt 0 discriminator 1
 520 0088 0B4B     	 ldr r3,.L26+4
 521 008a 181C     	 mov r0,r3
 522 008c FFF7FEFF 	 bl I2C_MASTER_IsTxBusy
 523 0090 031E     	 sub r3,r0,#0
 524 0092 F9D1     	 bne .L24
  56:../BMP180.c   **** 	if(BMP180_DataRead[0] == BMP180_FixedAlternativID){
 525              	 .loc 3 56 0 is_stmt 1
 526 0094 094B     	 ldr r3,.L26+8
 527 0096 1B78     	 ldrb r3,[r3]
 528 0098 602B     	 cmp r3,#96
 529 009a 05D1     	 bne .L25
  57:../BMP180.c   **** 		XMC_DEBUG("BME280 connected\n");
 530              	 .loc 3 57 0
 531 009c 094B     	 ldr r3,.L26+16
 532 009e 181C     	 mov r0,r3
 533 00a0 FFF7FEFF 	 bl puts
  58:../BMP180.c   **** 		return 1;
 534              	 .loc 3 58 0
 535 00a4 0123     	 mov r3,#1
 536 00a6 00E0     	 b .L23
 537              	.L25:
  59:../BMP180.c   **** 	}
  60:../BMP180.c   **** 	return 0;
 538              	 .loc 3 60 0
 539 00a8 0023     	 mov r3,#0
 540              	.L23:
  61:../BMP180.c   **** }
 541              	 .loc 3 61 0
 542 00aa 181C     	 mov r0,r3
 543 00ac BD46     	 mov sp,r7
 544 00ae 03B0     	 add sp,sp,#12
 545              	 
 546 00b0 90BD     	 pop {r4,r7,pc}
 547              	.L27:
 548 00b2 C046     	 .align 2
 549              	.L26:
 550 00b4 24000000 	 .word .LC9
 551 00b8 00000000 	 .word I2C_MASTER_0
 552 00bc 00000000 	 .word BMP180_DataRead
 553 00c0 00000000 	 .word BMP180_I2C_Status
 554 00c4 40000000 	 .word .LC14
 555              	 .cfi_endproc
 556              	.LFE246:
 558              	 .section .text.BMP180_Test,"ax",%progbits
 559              	 .align 2
 560              	 .global BMP180_Test
 561              	 .code 16
 562              	 .thumb_func
 564              	BMP180_Test:
 565              	.LFB247:
  62:../BMP180.c   **** uint8_t BMP180_Test(void){
 566              	 .loc 3 62 0
 567              	 .cfi_startproc
 568 0000 90B5     	 push {r4,r7,lr}
 569              	.LCFI24:
 570              	 .cfi_def_cfa_offset 12
 571              	 .cfi_offset 4,-12
 572              	 .cfi_offset 7,-8
 573              	 .cfi_offset 14,-4
 574 0002 83B0     	 sub sp,sp,#12
 575              	.LCFI25:
 576              	 .cfi_def_cfa_offset 24
 577 0004 02AF     	 add r7,sp,#8
 578              	.LCFI26:
 579              	 .cfi_def_cfa 7,16
  63:../BMP180.c   **** 
  64:../BMP180.c   **** 	I2C_MASTER_FlushRxFifo(&I2C_MASTER_0);
 580              	 .loc 3 64 0
 581 0006 0E4B     	 ldr r3,.L30
 582 0008 181C     	 mov r0,r3
 583 000a FFF7FEFF 	 bl I2C_MASTER_FlushRxFifo
  65:../BMP180.c   **** 	I2C_MASTER_FlushTxFifo(&I2C_MASTER_0);
 584              	 .loc 3 65 0
 585 000e 0C4B     	 ldr r3,.L30
 586 0010 181C     	 mov r0,r3
 587 0012 FFF7FEFF 	 bl I2C_MASTER_FlushTxFifo
  66:../BMP180.c   **** 	BMP180_DataRead[0] = 0b11110100;
 588              	 .loc 3 66 0
 589 0016 0B4B     	 ldr r3,.L30+4
 590 0018 F422     	 mov r2,#244
 591 001a 1A70     	 strb r2,[r3]
  67:../BMP180.c   **** 	I2C_MASTER_Transmit(&I2C_MASTER_0,true,BMP180_W,BMP180_DataRead,1,false);
 592              	 .loc 3 67 0
 593 001c 084A     	 ldr r2,.L30
 594 001e 094C     	 ldr r4,.L30+4
 595 0020 0123     	 mov r3,#1
 596 0022 0093     	 str r3,[sp]
 597 0024 0023     	 mov r3,#0
 598 0026 0193     	 str r3,[sp,#4]
 599 0028 101C     	 mov r0,r2
 600 002a 0121     	 mov r1,#1
 601 002c EE22     	 mov r2,#238
 602 002e 231C     	 mov r3,r4
 603 0030 FFF7FEFF 	 bl I2C_MASTER_Transmit
  68:../BMP180.c   **** 	//while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
  69:../BMP180.c   **** 
  70:../BMP180.c   **** 
  71:../BMP180.c   **** 	//I2C_MASTER_ClearFlag(&I2C_MASTER_0,I2C_MASTER_STATUS_BUSY);
  72:../BMP180.c   **** 	//I2C_MASTER_FlushTxFifo(&I2C_MASTER_0);
  73:../BMP180.c   **** 	//I2C_MASTER_FlushRxFifo(&I2C_MASTER_0);
  74:../BMP180.c   **** 	//BMP180_DataSent[0] = 0xD0;
  75:../BMP180.c   **** 
  76:../BMP180.c   **** 	///I2C_MASTER_Transmit(&I2C_MASTER_0,true,0xEE,BMP180_DataSent,1,true);
  77:../BMP180.c   **** 	//while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
  78:../BMP180.c   **** 	//I2C_MASTER_Receive(&I2C_MASTER_0,true,BMP180_Address|BMP180_R,&BMP180_DataRead,1,true,true);
  79:../BMP180.c   **** 	//while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
  80:../BMP180.c   **** 	return BMP180_DataRead[0];
 604              	 .loc 3 80 0
 605 0034 034B     	 ldr r3,.L30+4
 606 0036 1B78     	 ldrb r3,[r3]
  81:../BMP180.c   **** }
 607              	 .loc 3 81 0
 608 0038 181C     	 mov r0,r3
 609 003a BD46     	 mov sp,r7
 610 003c 01B0     	 add sp,sp,#4
 611              	 
 612 003e 90BD     	 pop {r4,r7,pc}
 613              	.L31:
 614              	 .align 2
 615              	.L30:
 616 0040 00000000 	 .word I2C_MASTER_0
 617 0044 00000000 	 .word BMP180_DataRead
 618              	 .cfi_endproc
 619              	.LFE247:
 621              	 .text
 622              	.Letext0:
 623              	 .file 4 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 624              	 .file 5 "d:\\downloads\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 625              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 626              	 .file 7 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_spi.h"
 627              	 .file 8 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/XMCLib/inc/xmc_i2c.h"
 628              	 .file 9 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Include/cmsis_gcc.h"
 629              	 .file 10 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
 630              	 .file 11 "C:/Workspaces/DAVE-4.4.2-64Bit/RoverX/Dave/Generated/I2C_MASTER/i2c_master_extern.h"
 631              	 .file 12 "../BMP180.h"
DEFINED SYMBOLS
                            *ABS*:00000000 BMP180.c
    {standard input}:18     .text.XMC_USIC_CH_TXFIFO_Flush:00000000 $t
    {standard input}:22     .text.XMC_USIC_CH_TXFIFO_Flush:00000000 XMC_USIC_CH_TXFIFO_Flush
    {standard input}:55     .text.XMC_USIC_CH_RXFIFO_Flush:00000000 $t
    {standard input}:59     .text.XMC_USIC_CH_RXFIFO_Flush:00000000 XMC_USIC_CH_RXFIFO_Flush
    {standard input}:91     .text.I2C_MASTER_IsTxBusy:00000000 $t
    {standard input}:95     .text.I2C_MASTER_IsTxBusy:00000000 I2C_MASTER_IsTxBusy
    {standard input}:128    .text.I2C_MASTER_FlushTxFifo:00000000 $t
    {standard input}:132    .text.I2C_MASTER_FlushTxFifo:00000000 I2C_MASTER_FlushTxFifo
    {standard input}:162    .text.I2C_MASTER_FlushRxFifo:00000000 $t
    {standard input}:166    .text.I2C_MASTER_FlushRxFifo:00000000 I2C_MASTER_FlushRxFifo
                            *COM*:00000020 BMP180_DataSent
                            *COM*:00000020 BMP180_DataRead
                            *COM*:00000001 BMP180_I2C_Status
    {standard input}:199    .rodata:00000000 $d
    {standard input}:206    .text.I2C_Scanner:00000000 $t
    {standard input}:211    .text.I2C_Scanner:00000000 I2C_Scanner
    {standard input}:302    .text.I2C_Scanner:00000074 $d
    {standard input}:311    .text.BMP180_init:00000000 $t
    {standard input}:316    .text.BMP180_init:00000000 BMP180_init
    {standard input}:410    .text.BMP180_init:00000078 $d
    {standard input}:424    .text.Text_Communication:00000000 $t
    {standard input}:429    .text.Text_Communication:00000000 Text_Communication
    {standard input}:550    .text.Text_Communication:000000b4 $d
    {standard input}:559    .text.BMP180_Test:00000000 $t
    {standard input}:564    .text.BMP180_Test:00000000 BMP180_Test
    {standard input}:616    .text.BMP180_Test:00000040 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
puts
I2C_MASTER_Transmit
I2C_MASTER_0
I2C_MASTER_Receive
